// -----------------------------------------------------------------------------
/*! \class
 *  \brief
 *  \author David M&aacute;rquez de la Cruz
 *  \version 1.5
 *  \date 1999-2009
 *  \par Copyright (c) 1999 David M&aacute;rquez de la Cruz
 *  \par GammaE License
 */
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
#ifndef CGParticleSystemGenerator_h
#define CGParticleSystemGenerator_h 1
// -----------------------------------------------------------------------------
#include "GammaE_Math.h"
#include "GammaE_E3D.h"
#include "CGParticle.h"
// -----------------------------------------------------------------------------
class CGParticleSystemInstance;
class CGParticleSystemGenerator : public CGResource
{
    friend class CGParticleSystemInstance;

    public:
        CGParticleSystemGenerator() : m_uiMaxParticles(0), m_fInitialEnergy(0.0f), m_fERandomness(0.0f), m_poShader(NULL)
        {
        }

        // / Initializes the particle system generator
        virtual void Init()
        {
        }

        // / Sets the maximum number of particles every instance will handle
        void SetMaxParticles(uint _uiMaxParticles)
        {
            m_uiMaxParticles = _uiMaxParticles;
        }

        // / Retrieves the maximum number of particles every instance will handle
        uint uiMaxParticles()
        {
            return (m_uiMaxParticles);
        }

        // / Sets the initial energy the generator will give to the generated particles
        void SetEnergyFact(float _fInitialEnergy, float _fERandomness = 0.0f)
        {
            m_fInitialEnergy = _fInitialEnergy;
            m_fERandomness = _fERandomness;
        }

        // / Sets the shader for the instances of this particle system generator
        void SetShader(CE3D_Shader* _poShader)
        {
            m_poShader = _poShader;
        }

        // / Retrieves the initial energy the generator will give to the generated particles
        float fGetInitialEnergy()
        {
            return(m_fInitialEnergy);
        }

        // / Retrieves the initial energy randomness the generator will give to the generated particles
        float fGetInitialEnergyRnds()
        {
            return(m_fERandomness);
        }

        // / Retrieves the shader used by the instances generated by this particle generator
        virtual CE3D_Shader* poGetShader()
        {
            return(m_poShader);
        }

        // / Creates a pool of particles	specific to the generator.
        virtual CGParticle* poCreateParticlePool() = 0;

    protected:

        // / Updates the particles of the particle system instance
        virtual void UpdateInstance(CGParticleSystemInstance& _oPSI,float _fDeltaT) = 0;

    protected:

        /*
           The generator classes should implement functions similar to these

           /// Initializes an independent particle of the particle system instance
           // virtual void InitParticle (int iPart) = 0;

           /// Updates an independent particle of the particle system instance
           // virtual void UpdateParticle(int iPart) = 0;
         */

    protected:
        uint m_uiMaxParticles;
        float m_fInitialEnergy;
        float m_fERandomness;
        CE3D_Shader* m_poShader;
};
// -----------------------------------------------------------------------------
#endif
// -----------------------------------------------------------------------------
