//	  %X% %Q% %Z% %W%

#include <assert.h>
#include <math.h>

// CObject3D_AnimatedMesh
#include "Scene\Animation\CObject3D_AnimatedMesh.h"

// Class CObject3D_AnimatedMesh

CObject3D_AnimatedMesh::CObject3D_AnimatedMesh()
    : Frames(NULL), NumFrames(0), FrameAnims(NULL), NumAnimFrames(0), CurrentFrameAnim(0), CurrentTime(0)
{
}

CObject3D_AnimatedMesh::~CObject3D_AnimatedMesh()
{
    Clear();
}

void CObject3D_AnimatedMesh::Clear ()
{

     // Erase previous Info
    if (Frames    ) mDel [] Frames;

    if (FrameAnims) mDel [] FrameAnims;
}

CMesh *CObject3D_AnimatedMesh::poGetMesh ()
{
    assert ( FrameAnims );

    unsigned int iCurrFrame;
    unsigned int iNextFrame;
    unsigned int iRealFrame;

    float fFactor;
    float fFrameAnimTime;
    float fFrame;

     // Tiempo total desde la primera llamada a GetMesh
    CurrentTime += RenderState.GetRenderer()->REStats.DTime;

     // Tiempo transcurrido dentro de la actual animación
    fFrameAnimTime = fmod(CurrentTime,FrameAnims[CurrentFrameAnim].TotalTime);

     // Frame que toca relativo al frame inicial de la animación
    fFrame     = fFrameAnimTime / FrameAnims[CurrentFrameAnim].FrameTime;
    iCurrFrame = (int) fFrame;

     // Factor de cercanía hacia el siguiente frame: (->1 muy cerca de siguiente frame)
    fFactor    = fFrame - iCurrFrame;

     // Frame real dentro de la tabla de frames
    iRealFrame = FrameAnims[CurrentFrameAnim].InitialFrame + iCurrFrame;

     // Setup next frame
    if (iRealFrame >= FrameAnims[CurrentFrameAnim].FinalFrame)
    {
        iNextFrame = FrameAnims[CurrentFrameAnim ].InitialFrame;
    }
    else
        iNextFrame = iRealFrame + 1;

     // Generate the new mesh an return it
    InterpolateFrames(Frames[iRealFrame ],Frames[iNextFrame],fFactor);

     // Set the current bbox Low accuracy
    BVol       = Frames[iRealFrame]->GetBoundVol();
    Mesh->BVol = Frames[iRealFrame]->GetBoundVol();

    return( Mesh );
} // poGetMesh

void CObject3D_AnimatedMesh::CreateFrames (int _NumFrames, int _NumVertexs)
{
   int cFrame;

     // Frames    = (CMesh* *)mAlloc(sizeof(CMesh *)*_NumFrames);
    Frames    = new CMesh *[_NumFrames];
    NumFrames = _NumFrames;

     // Create the array of frames
    for (cFrame = 0; cFrame < NumFrames; cFrame++)
    {
        Frames[cFrame] = new CMesh();
        Frames[cFrame]->Init(_NumVertexs,0,E3D_MESH_TRIS,MESH_FIELD_VERTEXS);
    }
}

void CObject3D_AnimatedMesh::CreateFrameAnims (int iNumFrameAnims)
{
    NumAnimFrames = iNumFrameAnims;
    FrameAnims    = new TFrameAnimation[iNumFrameAnims];
}

void CObject3D_AnimatedMesh::SetupFrameAnim (int FrameAnim, int InitialFrame, int FinalFrame, float FrameAnimTime)
{

    FrameAnims[FrameAnim].InitialFrame = InitialFrame;
    FrameAnims[FrameAnim].FinalFrame   = FinalFrame;
    FrameAnims[FrameAnim].TotalTime    = FrameAnimTime;

    if (FinalFrame > InitialFrame)
        FrameAnims[FrameAnim].FrameTime = FrameAnimTime / ( FinalFrame - InitialFrame + 1 );
    else
        FrameAnims[FrameAnim].FrameTime = 10000000;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               // x/0	infinite
}

void CObject3D_AnimatedMesh::SetFrameAnim (int iFrameAnim)
{
    CurrentFrameAnim = iFrameAnim;
    CurrentTime      = 0;
}

void CObject3D_AnimatedMesh::InterpolateFrames (CMesh *IFrame, CMesh *FFrame, float fFactor)
{

   unsigned int cVert;

    for (cVert = 0; cVert < Mesh->usNumVerts; cVert++)
    {
        Mesh->VXs[cVert].Interpolate(IFrame->VXs[cVert],FFrame->VXs[cVert],fFactor);

        // Mesh->VNormals[cVert].Interpolate(IFrame->VNormals[cVert],FFrame->VNormals[cVert],fFactor);
    }
}

void CObject3D_AnimatedMesh::poComputeBoundVol ()
{
   int cFrame;

    for (cFrame = 0; cFrame < NumFrames; cFrame++)
        Frames[cFrame]->ComputeBoundVol();

    BVol = Frames[0]->GetBoundVol();
}

CMesh *CObject3D_AnimatedMesh::poGetFrame (int iFrame)
{
    return ( Frames[iFrame] );
}

// Additional Declarations
