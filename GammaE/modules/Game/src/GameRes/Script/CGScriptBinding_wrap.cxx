/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.4.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040400
#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif

/* lua_tolstring() was added in Lua 5.1.  It should be a little more
   efficient than making two separate calls and it avoids problems with order
   of evaluation so SWIG calls lua_tolstring() when it wants the length and
   we provide a compatibility implementation for Lua 5.0.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
static const char *(lua_tolstring)(lua_State *L, int idx, size_t *len) {
  /* Call lua_tostring() first as it may convert the value from number to
     string. */
  const char *result = lua_tostring(L, idx);
  if (len) *len = lua_strlen(L, idx);
  return result;
}
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  (void)first_arg;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  (void)first_arg;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  int ret = SWIG_ERROR;
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !usr->own)
    {
      return SWIG_ERROR_RELEASE_NOT_OWNED;
    }
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
      usr->own = 0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      ret = SWIG_OK;
    }
    else
    {
      cast=SWIG_TypeCheck(usr->type->name,type); /* performs normal type checking */
      if (cast)
      {
        int newmemory = 0;
        *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
        ret = SWIG_OK;
      }
    }
    if ((ret == SWIG_OK) && (flags & SWIG_POINTER_CLEAR))
    {
      usr->ptr = 0;
    }
  }
  return ret;
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_C3DLoader swig_types[0]
#define SWIGTYPE_p_C3DSaver swig_types[1]
#define SWIGTYPE_p_CAnimAction swig_types[2]
#define SWIGTYPE_p_CCOL_ColState swig_types[3]
#define SWIGTYPE_p_CCOL_Collider swig_types[4]
#define SWIGTYPE_p_CCOL_CollisionSystem swig_types[5]
#define SWIGTYPE_p_CCOL_DT_Box swig_types[6]
#define SWIGTYPE_p_CCOL_DT_ColTester swig_types[7]
#define SWIGTYPE_p_CCOL_DT_Point swig_types[8]
#define SWIGTYPE_p_CCOL_DT_Sphere swig_types[9]
#define SWIGTYPE_p_CCOL_DT_Tri swig_types[10]
#define SWIGTYPE_p_CCOL_MT_CommonMesh swig_types[11]
#define SWIGTYPE_p_CCOL_MT_TerrainMesh swig_types[12]
#define SWIGTYPE_p_CCOL_Mesh swig_types[13]
#define SWIGTYPE_p_CCOL_MeshTester swig_types[14]
#define SWIGTYPE_p_CCOL_ST_Box swig_types[15]
#define SWIGTYPE_p_CCOL_ST_ColTester swig_types[16]
#define SWIGTYPE_p_CCOL_ST_Point swig_types[17]
#define SWIGTYPE_p_CCOL_ST_Sphere swig_types[18]
#define SWIGTYPE_p_CCOL_ST_Tris swig_types[19]
#define SWIGTYPE_p_CCOL_Scn_ColTester swig_types[20]
#define SWIGTYPE_p_CCOL_Scn_TriListGen swig_types[21]
#define SWIGTYPE_p_CCOL_Stack swig_types[22]
#define SWIGTYPE_p_CCOL_StackCollisionElem swig_types[23]
#define SWIGTYPE_p_CCOL_TRN_TriListGen swig_types[24]
#define SWIGTYPE_p_CCOL_TriList swig_types[25]
#define SWIGTYPE_p_CCOL_TriListGen swig_types[26]
#define SWIGTYPE_p_CCOL_TriList_BVRayTest swig_types[27]
#define SWIGTYPE_p_CColor swig_types[28]
#define SWIGTYPE_p_CCompactMeshData swig_types[29]
#define SWIGTYPE_p_CConsole swig_types[30]
#define SWIGTYPE_p_CDetailer swig_types[31]
#define SWIGTYPE_p_CG4PCurve swig_types[32]
#define SWIGTYPE_p_CGAIAStar swig_types[33]
#define SWIGTYPE_p_CGAIDXAStar swig_types[34]
#define SWIGTYPE_p_CGAIMap swig_types[35]
#define SWIGTYPE_p_CGAIMathFuncs swig_types[36]
#define SWIGTYPE_p_CGBVAABB swig_types[37]
#define SWIGTYPE_p_CGBVCylinder swig_types[38]
#define SWIGTYPE_p_CGBVFrustum swig_types[39]
#define SWIGTYPE_p_CGBVPoint swig_types[40]
#define SWIGTYPE_p_CGBVSphere swig_types[41]
#define SWIGTYPE_p_CGBaseMesh swig_types[42]
#define SWIGTYPE_p_CGBillboard swig_types[43]
#define SWIGTYPE_p_CGBillboardRenderer swig_types[44]
#define SWIGTYPE_p_CGBillboard_AxisAlign swig_types[45]
#define SWIGTYPE_p_CGBillboard_ScrAlign swig_types[46]
#define SWIGTYPE_p_CGBillboard_WorldAlign swig_types[47]
#define SWIGTYPE_p_CGBoundingVolume swig_types[48]
#define SWIGTYPE_p_CGCamera swig_types[49]
#define SWIGTYPE_p_CGChrono swig_types[50]
#define SWIGTYPE_p_CGColor swig_types[51]
#define SWIGTYPE_p_CGCommandBinder swig_types[52]
#define SWIGTYPE_p_CGCommandBindingLoader swig_types[53]
#define SWIGTYPE_p_CGCommandRegistry swig_types[54]
#define SWIGTYPE_p_CGCompiledMesh swig_types[55]
#define SWIGTYPE_p_CGConfigFile swig_types[56]
#define SWIGTYPE_p_CGControlPoint swig_types[57]
#define SWIGTYPE_p_CGCorona swig_types[58]
#define SWIGTYPE_p_CGCoronaGenDefFileWH swig_types[59]
#define SWIGTYPE_p_CGCoronaGenStd swig_types[60]
#define SWIGTYPE_p_CGCoronaGenWH swig_types[61]
#define SWIGTYPE_p_CGCoronaGenerator swig_types[62]
#define SWIGTYPE_p_CGCoronaInstance swig_types[63]
#define SWIGTYPE_p_CGCoronaManager swig_types[64]
#define SWIGTYPE_p_CGCurve swig_types[65]
#define SWIGTYPE_p_CGCurveDynamic swig_types[66]
#define SWIGTYPE_p_CGCurvePath swig_types[67]
#define SWIGTYPE_p_CGDefferredMeshDB swig_types[68]
#define SWIGTYPE_p_CGDefferredMeshEntry swig_types[69]
#define SWIGTYPE_p_CGDynArrayT_CGControlPoint_t swig_types[70]
#define SWIGTYPE_p_CGDynArrayT_CGString_t swig_types[71]
#define SWIGTYPE_p_CGDynArrayT_CGVect3_t swig_types[72]
#define SWIGTYPE_p_CGDynArrayT_TVertexRef_t swig_types[73]
#define SWIGTYPE_p_CGE3DRenderer swig_types[74]
#define SWIGTYPE_p_CGErrorLC swig_types[75]
#define SWIGTYPE_p_CGEvalBinary swig_types[76]
#define SWIGTYPE_p_CGEvalConst swig_types[77]
#define SWIGTYPE_p_CGEvalCos swig_types[78]
#define SWIGTYPE_p_CGEvalMult swig_types[79]
#define SWIGTYPE_p_CGEvalPeriodic swig_types[80]
#define SWIGTYPE_p_CGEvalSawTooth swig_types[81]
#define SWIGTYPE_p_CGEvalSin swig_types[82]
#define SWIGTYPE_p_CGEvalSquare swig_types[83]
#define SWIGTYPE_p_CGEvalSum swig_types[84]
#define SWIGTYPE_p_CGEvalTime swig_types[85]
#define SWIGTYPE_p_CGEvalTriangle swig_types[86]
#define SWIGTYPE_p_CGEvaluator swig_types[87]
#define SWIGTYPE_p_CGFile swig_types[88]
#define SWIGTYPE_p_CGFileSysManager swig_types[89]
#define SWIGTYPE_p_CGFileSysMgrMultiPAK swig_types[90]
#define SWIGTYPE_p_CGFileSysMgrMultiZIP swig_types[91]
#define SWIGTYPE_p_CGFileSysMgrPAK swig_types[92]
#define SWIGTYPE_p_CGFileSysMgrZIP swig_types[93]
#define SWIGTYPE_p_CGFileUtils swig_types[94]
#define SWIGTYPE_p_CGGCICommand swig_types[95]
#define SWIGTYPE_p_CGGCICommandClearErrorLog swig_types[96]
#define SWIGTYPE_p_CGGCICommandClearSysLog swig_types[97]
#define SWIGTYPE_p_CGGCICommandErrorLog swig_types[98]
#define SWIGTYPE_p_CGGCICommandListEntities swig_types[99]
#define SWIGTYPE_p_CGGCICommandSwitchEntityState swig_types[100]
#define SWIGTYPE_p_CGGCICommandSystemLog swig_types[101]
#define SWIGTYPE_p_CGGEntityRenderMgr swig_types[102]
#define SWIGTYPE_p_CGGEntityStateRegistry swig_types[103]
#define SWIGTYPE_p_CGGameApplication swig_types[104]
#define SWIGTYPE_p_CGGameBase swig_types[105]
#define SWIGTYPE_p_CGGameCommandInterpreter swig_types[106]
#define SWIGTYPE_p_CGGameConsoleApp swig_types[107]
#define SWIGTYPE_p_CGGameEntity swig_types[108]
#define SWIGTYPE_p_CGGameEntityMgr swig_types[109]
#define SWIGTYPE_p_CGGameEntitySpawner swig_types[110]
#define SWIGTYPE_p_CGGameExtendedCI swig_types[111]
#define SWIGTYPE_p_CGGameMessage swig_types[112]
#define SWIGTYPE_p_CGGameMessageMgr swig_types[113]
#define SWIGTYPE_p_CGGameMode swig_types[114]
#define SWIGTYPE_p_CGGameRegistry swig_types[115]
#define SWIGTYPE_p_CGGraphBV swig_types[116]
#define SWIGTYPE_p_CGGraphBVAABB swig_types[117]
#define SWIGTYPE_p_CGGraphBVCylinder swig_types[118]
#define SWIGTYPE_p_CGGraphBVFactory swig_types[119]
#define SWIGTYPE_p_CGGraphBVFileIO swig_types[120]
#define SWIGTYPE_p_CGGraphBVPoint swig_types[121]
#define SWIGTYPE_p_CGGraphBVSphere swig_types[122]
#define SWIGTYPE_p_CGGraphicInstance swig_types[123]
#define SWIGTYPE_p_CGGraphicResource swig_types[124]
#define SWIGTYPE_p_CGGraphicResourceWH swig_types[125]
#define SWIGTYPE_p_CGInputHandler swig_types[126]
#define SWIGTYPE_p_CGInputRegistry swig_types[127]
#define SWIGTYPE_p_CGLight swig_types[128]
#define SWIGTYPE_p_CGLiveGameEntity swig_types[129]
#define SWIGTYPE_p_CGLogChannel swig_types[130]
#define SWIGTYPE_p_CGLogger swig_types[131]
#define SWIGTYPE_p_CGMatrix4x4 swig_types[132]
#define SWIGTYPE_p_CGMesh swig_types[133]
#define SWIGTYPE_p_CGMeshBox swig_types[134]
#define SWIGTYPE_p_CGMeshCross swig_types[135]
#define SWIGTYPE_p_CGMeshRect swig_types[136]
#define SWIGTYPE_p_CGMeshSphere swig_types[137]
#define SWIGTYPE_p_CGMipMap swig_types[138]
#define SWIGTYPE_p_CGMipMapWH swig_types[139]
#define SWIGTYPE_p_CGOSFile swig_types[140]
#define SWIGTYPE_p_CGPSGDefFileWH swig_types[141]
#define SWIGTYPE_p_CGPSGGeneric swig_types[142]
#define SWIGTYPE_p_CGPSGGenericQuad swig_types[143]
#define SWIGTYPE_p_CGPSGGenericQuadOrbit swig_types[144]
#define SWIGTYPE_p_CGPSGGenericQuadParticle swig_types[145]
#define SWIGTYPE_p_CGPSIManager swig_types[146]
#define SWIGTYPE_p_CGPSysGenWH swig_types[147]
#define SWIGTYPE_p_CGParticle swig_types[148]
#define SWIGTYPE_p_CGParticleSystemGenerator swig_types[149]
#define SWIGTYPE_p_CGParticleSystemInstance swig_types[150]
#define SWIGTYPE_p_CGPath swig_types[151]
#define SWIGTYPE_p_CGPathDefinitionFileWH swig_types[152]
#define SWIGTYPE_p_CGPathResource swig_types[153]
#define SWIGTYPE_p_CGPathResourceWH swig_types[154]
#define SWIGTYPE_p_CGPlane swig_types[155]
#define SWIGTYPE_p_CGProgram swig_types[156]
#define SWIGTYPE_p_CGProgramWH swig_types[157]
#define SWIGTYPE_p_CGProjector swig_types[158]
#define SWIGTYPE_p_CGQuaternion swig_types[159]
#define SWIGTYPE_p_CGRay swig_types[160]
#define SWIGTYPE_p_CGReferenceCounter swig_types[161]
#define SWIGTYPE_p_CGRenderState swig_types[162]
#define SWIGTYPE_p_CGRenderStats swig_types[163]
#define SWIGTYPE_p_CGRenderVars swig_types[164]
#define SWIGTYPE_p_CGRenderer swig_types[165]
#define SWIGTYPE_p_CGResource swig_types[166]
#define SWIGTYPE_p_CGSCNVAnimUpdater swig_types[167]
#define SWIGTYPE_p_CGSCNVBoundVolBuilder swig_types[168]
#define SWIGTYPE_p_CGSCNVRenderer swig_types[169]
#define SWIGTYPE_p_CGSCNVVisibilityChecker swig_types[170]
#define SWIGTYPE_p_CGSceneAnimActionSet swig_types[171]
#define SWIGTYPE_p_CGSceneAnimGroup swig_types[172]
#define SWIGTYPE_p_CGSceneAnimMesh swig_types[173]
#define SWIGTYPE_p_CGSceneAnimNode swig_types[174]
#define SWIGTYPE_p_CGSceneAnimTransf swig_types[175]
#define SWIGTYPE_p_CGSceneBSPNode swig_types[176]
#define SWIGTYPE_p_CGSceneCamera swig_types[177]
#define SWIGTYPE_p_CGSceneGroup swig_types[178]
#define SWIGTYPE_p_CGSceneInstance swig_types[179]
#define SWIGTYPE_p_CGSceneLeaf swig_types[180]
#define SWIGTYPE_p_CGSceneMux swig_types[181]
#define SWIGTYPE_p_CGSceneNode swig_types[182]
#define SWIGTYPE_p_CGSceneReflector swig_types[183]
#define SWIGTYPE_p_CGSceneScreenRect swig_types[184]
#define SWIGTYPE_p_CGSceneSwitch swig_types[185]
#define SWIGTYPE_p_CGSceneTransf swig_types[186]
#define SWIGTYPE_p_CGSceneVisitor swig_types[187]
#define SWIGTYPE_p_CGScriptInstance swig_types[188]
#define SWIGTYPE_p_CGScriptResource swig_types[189]
#define SWIGTYPE_p_CGScriptResourceWH swig_types[190]
#define SWIGTYPE_p_CGScriptingSystem swig_types[191]
#define SWIGTYPE_p_CGSegment swig_types[192]
#define SWIGTYPE_p_CGShInsBlendOp swig_types[193]
#define SWIGTYPE_p_CGShInsColor swig_types[194]
#define SWIGTYPE_p_CGShInsExtension swig_types[195]
#define SWIGTYPE_p_CGShInsGeoOp swig_types[196]
#define SWIGTYPE_p_CGShInsProgram swig_types[197]
#define SWIGTYPE_p_CGShInsSetTMU swig_types[198]
#define SWIGTYPE_p_CGShInsTexOp swig_types[199]
#define SWIGTYPE_p_CGShInsTexture swig_types[200]
#define SWIGTYPE_p_CGShInsWireframe swig_types[201]
#define SWIGTYPE_p_CGShInsZOp swig_types[202]
#define SWIGTYPE_p_CGShader swig_types[203]
#define SWIGTYPE_p_CGShaderDefFileWH swig_types[204]
#define SWIGTYPE_p_CGShaderDefWH swig_types[205]
#define SWIGTYPE_p_CGShaderExtDB swig_types[206]
#define SWIGTYPE_p_CGShaderInstruction swig_types[207]
#define SWIGTYPE_p_CGShaderParser swig_types[208]
#define SWIGTYPE_p_CGShaderUtils swig_types[209]
#define SWIGTYPE_p_CGShaderWH swig_types[210]
#define SWIGTYPE_p_CGSmoother swig_types[211]
#define SWIGTYPE_p_CGSpiralPath swig_types[212]
#define SWIGTYPE_p_CGStandardLC swig_types[213]
#define SWIGTYPE_p_CGString swig_types[214]
#define SWIGTYPE_p_CGSystemLC swig_types[215]
#define SWIGTYPE_p_CGTexObjWH swig_types[216]
#define SWIGTYPE_p_CGTextResource swig_types[217]
#define SWIGTYPE_p_CGTextureObj swig_types[218]
#define SWIGTYPE_p_CGTrail swig_types[219]
#define SWIGTYPE_p_CGTrailGenDefFileWH swig_types[220]
#define SWIGTYPE_p_CGTrailGenStd swig_types[221]
#define SWIGTYPE_p_CGTrailGenWH swig_types[222]
#define SWIGTYPE_p_CGTrailGenerator swig_types[223]
#define SWIGTYPE_p_CGTrailInstance swig_types[224]
#define SWIGTYPE_p_CGTrailManager swig_types[225]
#define SWIGTYPE_p_CGTriangle swig_types[226]
#define SWIGTYPE_p_CGUObject swig_types[227]
#define SWIGTYPE_p_CGUnmanagedMesh swig_types[228]
#define SWIGTYPE_p_CGVect2 swig_types[229]
#define SWIGTYPE_p_CGVect3 swig_types[230]
#define SWIGTYPE_p_CGVect4 swig_types[231]
#define SWIGTYPE_p_CGViewport swig_types[232]
#define SWIGTYPE_p_CGWarningLC swig_types[233]
#define SWIGTYPE_p_CHFSector swig_types[234]
#define SWIGTYPE_p_CHFSector_FN swig_types[235]
#define SWIGTYPE_p_CHUD swig_types[236]
#define SWIGTYPE_p_CHUDElem swig_types[237]
#define SWIGTYPE_p_CHUDFile swig_types[238]
#define SWIGTYPE_p_CHUDFont swig_types[239]
#define SWIGTYPE_p_CHUDFontWH swig_types[240]
#define SWIGTYPE_p_CHUDIcon swig_types[241]
#define SWIGTYPE_p_CHUDLabel swig_types[242]
#define SWIGTYPE_p_CHUDMsgBox swig_types[243]
#define SWIGTYPE_p_CHUDObject swig_types[244]
#define SWIGTYPE_p_CHUDProgressBar swig_types[245]
#define SWIGTYPE_p_CHeight swig_types[246]
#define SWIGTYPE_p_CHeightField swig_types[247]
#define SWIGTYPE_p_CLMSector swig_types[248]
#define SWIGTYPE_p_CLMSector_Gray swig_types[249]
#define SWIGTYPE_p_CLMSector_Pal swig_types[250]
#define SWIGTYPE_p_CLMSector_RGB24 swig_types[251]
#define SWIGTYPE_p_CLODSelector swig_types[252]
#define SWIGTYPE_p_CLODSelector_Array swig_types[253]
#define SWIGTYPE_p_CLensFlare swig_types[254]
#define SWIGTYPE_p_CLensFlare_Elem swig_types[255]
#define SWIGTYPE_p_CLightElem swig_types[256]
#define SWIGTYPE_p_CLightMap swig_types[257]
#define SWIGTYPE_p_CLoader3DS swig_types[258]
#define SWIGTYPE_p_CLoaderBSP2 swig_types[259]
#define SWIGTYPE_p_CLoaderGEM swig_types[260]
#define SWIGTYPE_p_CLoaderMD2 swig_types[261]
#define SWIGTYPE_p_CLoaderMD3 swig_types[262]
#define SWIGTYPE_p_CMenuTextGrid swig_types[263]
#define SWIGTYPE_p_CSFXObjectInstance swig_types[264]
#define SWIGTYPE_p_CSLM_HFieldSect swig_types[265]
#define SWIGTYPE_p_CSLM_LMapSect swig_types[266]
#define SWIGTYPE_p_CSLM_TMapSect swig_types[267]
#define SWIGTYPE_p_CSaverGEM swig_types[268]
#define SWIGTYPE_p_CSectElem swig_types[269]
#define SWIGTYPE_p_CSector swig_types[270]
#define SWIGTYPE_p_CSectorLoaderManager swig_types[271]
#define SWIGTYPE_p_CSectorMatrix swig_types[272]
#define SWIGTYPE_p_CShadowCaster swig_types[273]
#define SWIGTYPE_p_CSkyBox swig_types[274]
#define SWIGTYPE_p_CSkyDome swig_types[275]
#define SWIGTYPE_p_CTMSector swig_types[276]
#define SWIGTYPE_p_CTMSector_8_16 swig_types[277]
#define SWIGTYPE_p_CTerrainCircuit swig_types[278]
#define SWIGTYPE_p_CTerrainSector swig_types[279]
#define SWIGTYPE_p_CTerrainTesselator swig_types[280]
#define SWIGTYPE_p_CTerrainTesselatorGM swig_types[281]
#define SWIGTYPE_p_CTexMap swig_types[282]
#define SWIGTYPE_p_CTexProjector swig_types[283]
#define SWIGTYPE_p_CTexSector swig_types[284]
#define SWIGTYPE_p_CTile swig_types[285]
#define SWIGTYPE_p_CTileBookmark swig_types[286]
#define SWIGTYPE_p_E3D_BlendMode swig_types[287]
#define SWIGTYPE_p_E3D_ChannelMask swig_types[288]
#define SWIGTYPE_p_E3D_FogMode swig_types[289]
#define SWIGTYPE_p_E3D_MeshType swig_types[290]
#define SWIGTYPE_p_E3D_PrimitiveType swig_types[291]
#define SWIGTYPE_p_E3D_ProjectorType swig_types[292]
#define SWIGTYPE_p_E3D_RenderBuffer_Type swig_types[293]
#define SWIGTYPE_p_E3D_ShaderInstructionType swig_types[294]
#define SWIGTYPE_p_E3D_StencilAction swig_types[295]
#define SWIGTYPE_p_E3D_StencilFunc swig_types[296]
#define SWIGTYPE_p_E3D_ZTestFunc swig_types[297]
#define SWIGTYPE_p_E3D_ZWrite swig_types[298]
#define SWIGTYPE_p_ECOL_ColliderType swig_types[299]
#define SWIGTYPE_p_ECOL_TestType swig_types[300]
#define SWIGTYPE_p_EFileOpenMode swig_types[301]
#define SWIGTYPE_p_EFileOperationResult swig_types[302]
#define SWIGTYPE_p_EFileSeekMode swig_types[303]
#define SWIGTYPE_p_EGenerationMethod swig_types[304]
#define SWIGTYPE_p_EImageFormat swig_types[305]
#define SWIGTYPE_p_ESceneNodeType swig_types[306]
#define SWIGTYPE_p_EShInsGeoOp swig_types[307]
#define SWIGTYPE_p_EShInsTexOp swig_types[308]
#define SWIGTYPE_p_FILE swig_types[309]
#define SWIGTYPE_p_Q3triangle_t swig_types[310]
#define SWIGTYPE_p_SCNUt_AdjTri swig_types[311]
#define SWIGTYPE_p_SCNUt_AdjTriList swig_types[312]
#define SWIGTYPE_p_SCNUt_AdjTriListBuilder swig_types[313]
#define SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer swig_types[314]
#define SWIGTYPE_p_SCNUt_AnimSceneLoader swig_types[315]
#define SWIGTYPE_p_SCNUt_BSPBuilder swig_types[316]
#define SWIGTYPE_p_SCNUt_ComputeBoundingBox swig_types[317]
#define SWIGTYPE_p_SCNUt_CoplanarRemover swig_types[318]
#define SWIGTYPE_p_SCNUt_Edge swig_types[319]
#define SWIGTYPE_p_SCNUt_EdgeBuilder swig_types[320]
#define SWIGTYPE_p_SCNUt_EdgeList swig_types[321]
#define SWIGTYPE_p_SCNUt_MaterialTable swig_types[322]
#define SWIGTYPE_p_SCNUt_Mesh2TriScene swig_types[323]
#define SWIGTYPE_p_SCNUt_MeshCompacter swig_types[324]
#define SWIGTYPE_p_SCNUt_MeshGenerator swig_types[325]
#define SWIGTYPE_p_SCNUt_OctreeBuilder swig_types[326]
#define SWIGTYPE_p_SCNUt_PlanarMapper swig_types[327]
#define SWIGTYPE_p_SCNUt_SceneBuilder swig_types[328]
#define SWIGTYPE_p_SCNUt_SceneCompiler swig_types[329]
#define SWIGTYPE_p_SCNUt_Scn2TriScnBuilder swig_types[330]
#define SWIGTYPE_p_SCNUt_ShaderAssigner swig_types[331]
#define SWIGTYPE_p_SCNUt_Stripifier swig_types[332]
#define SWIGTYPE_p_SCNUt_TransformTriScene swig_types[333]
#define SWIGTYPE_p_SCNUt_TriScene swig_types[334]
#define SWIGTYPE_p_SCNUt_TriSceneAccumulator swig_types[335]
#define SWIGTYPE_p_SCNUt_TriSceneClassifier swig_types[336]
#define SWIGTYPE_p_SCNUt_TriSceneLoader swig_types[337]
#define SWIGTYPE_p_SCNUt_TriSceneSaver swig_types[338]
#define SWIGTYPE_p_SCNUt_TriSceneSeparator swig_types[339]
#define SWIGTYPE_p_SCNUt_TriSceneSplitter swig_types[340]
#define SWIGTYPE_p_SCNUt_TriUtils swig_types[341]
#define SWIGTYPE_p_SCNUt_Triangle swig_types[342]
#define SWIGTYPE_p_SCNUt_VisibilityTester swig_types[343]
#define SWIGTYPE_p_SCNUt_ePolyState swig_types[344]
#define SWIGTYPE_p_T3DS_Chunk swig_types[345]
#define SWIGTYPE_p_TERSceneLoader swig_types[346]
#define SWIGTYPE_p_TEnvironmentPars swig_types[347]
#define SWIGTYPE_p_TGMState swig_types[348]
#define SWIGTYPE_p_THeightFieldData swig_types[349]
#define SWIGTYPE_p_TMsgLine swig_types[350]
#define SWIGTYPE_p_TSpiralPathParams swig_types[351]
#define SWIGTYPE_p_TTexSet swig_types[352]
#define SWIGTYPE_p_TTextureEntry swig_types[353]
#define SWIGTYPE_p_TVertexRef swig_types[354]
#define SWIGTYPE_p_a_3__float swig_types[355]
#define SWIGTYPE_p_animNumber_t swig_types[356]
#define SWIGTYPE_p_anim_t swig_types[357]
#define SWIGTYPE_p_boneframe_t swig_types[358]
#define SWIGTYPE_p_bsp_edge swig_types[359]
#define SWIGTYPE_p_bsp_face swig_types[360]
#define SWIGTYPE_p_bsp_face_edge swig_types[361]
#define SWIGTYPE_p_bsp_header swig_types[362]
#define SWIGTYPE_p_bsp_leaf swig_types[363]
#define SWIGTYPE_p_bsp_leaf_face swig_types[364]
#define SWIGTYPE_p_bsp_lump swig_types[365]
#define SWIGTYPE_p_bsp_node swig_types[366]
#define SWIGTYPE_p_bsp_plane swig_types[367]
#define SWIGTYPE_p_bsp_point3f swig_types[368]
#define SWIGTYPE_p_bsp_point3s swig_types[369]
#define SWIGTYPE_p_bsp_texinfo swig_types[370]
#define SWIGTYPE_p_bsp_vis swig_types[371]
#define SWIGTYPE_p_bsp_vis_offset swig_types[372]
#define SWIGTYPE_p_char swig_types[373]
#define SWIGTYPE_p_eLightType swig_types[374]
#define SWIGTYPE_p_ext_texinfo swig_types[375]
#define SWIGTYPE_p_f_p_void__void swig_types[376]
#define SWIGTYPE_p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void swig_types[377]
#define SWIGTYPE_p_float swig_types[378]
#define SWIGTYPE_p_frame_t swig_types[379]
#define SWIGTYPE_p_int swig_types[380]
#define SWIGTYPE_p_long swig_types[381]
#define SWIGTYPE_p_md3_header_t swig_types[382]
#define SWIGTYPE_p_mesh_header_t swig_types[383]
#define SWIGTYPE_p_mesh_t swig_types[384]
#define SWIGTYPE_p_model_t swig_types[385]
#define SWIGTYPE_p_p_CCOL_Collider swig_types[386]
#define SWIGTYPE_p_p_CGMesh swig_types[387]
#define SWIGTYPE_p_p_CGMeshBox swig_types[388]
#define SWIGTYPE_p_p_CGMeshCross swig_types[389]
#define SWIGTYPE_p_p_CGMeshRect swig_types[390]
#define SWIGTYPE_p_p_CGMeshSphere swig_types[391]
#define SWIGTYPE_p_p_CGShInsBlendOp swig_types[392]
#define SWIGTYPE_p_p_CGShInsColor swig_types[393]
#define SWIGTYPE_p_p_CGShInsExtension swig_types[394]
#define SWIGTYPE_p_p_CGShInsGeoOp swig_types[395]
#define SWIGTYPE_p_p_CGShInsProgram swig_types[396]
#define SWIGTYPE_p_p_CGShInsSetTMU swig_types[397]
#define SWIGTYPE_p_p_CGShInsTexOp swig_types[398]
#define SWIGTYPE_p_p_CGShInsTexture swig_types[399]
#define SWIGTYPE_p_p_CGShInsWireframe swig_types[400]
#define SWIGTYPE_p_p_CGShInsZOp swig_types[401]
#define SWIGTYPE_p_p_CGShader swig_types[402]
#define SWIGTYPE_p_p_CGShaderInstruction swig_types[403]
#define SWIGTYPE_p_p_CGUnmanagedMesh swig_types[404]
#define SWIGTYPE_p_p_CMenuTextGrid swig_types[405]
#define SWIGTYPE_p_p_char swig_types[406]
#define SWIGTYPE_p_p_void swig_types[407]
#define SWIGTYPE_p_short swig_types[408]
#define SWIGTYPE_p_skin_file_t swig_types[409]
#define SWIGTYPE_p_skin_mesh_entry_t swig_types[410]
#define SWIGTYPE_p_skin_t swig_types[411]
#define SWIGTYPE_p_skin_tag_entry_t swig_types[412]
#define SWIGTYPE_p_tag_t swig_types[413]
#define SWIGTYPE_p_tex_coord_t swig_types[414]
#define SWIGTYPE_p_textureCoordinate_t swig_types[415]
#define SWIGTYPE_p_triangleVertex_t swig_types[416]
#define SWIGTYPE_p_triangle_t swig_types[417]
#define SWIGTYPE_p_unsigned_char swig_types[418]
#define SWIGTYPE_p_unsigned_int swig_types[419]
#define SWIGTYPE_p_unsigned_short swig_types[420]
#define SWIGTYPE_p_vertice_t swig_types[421]
#define SWIGTYPE_p_void swig_types[422]
static swig_type_info *swig_types[424];
static swig_module_info swig_module = {swig_types, 423, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "GammaE"
#define SWIG_init      luaopen_GammaE
#define SWIG_init_user luaopen_GammaE_user

#define SWIG_LUACODE   luaopen_GammaE_luacode

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


// #include "GammaE.h"
	#include "GammaE_Mem.h"
	#include "GammaE_Misc.h"
	#include "GammaE_Math.h"
	#include "GammaE_E3D.h"
	#include "GammaE_Scene.h"
	#include "GammaE_SceneObjects.h"
	#include "GammaE_Game.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <string.h>


// ----------------------------------------------------------------------------
// Helper Functions
// ----------------------------------------------------------------------------
void DebugPrint(char* _szStr)
{
	CGStandardLC::I()->Write(_szStr);
}
//-----------------------------------------------------------------------------
void DebugClear()
{
	CGStandardLC::I()->poGetLogger()->szGetBuffer()[0] = 0;
}
//-----------------------------------------------------------------------------
void* CallExtension(char* _szFunction)
{
	void* pRes = CGScriptingSystem::I()->pCallExtension(CGString(_szFunction));
	return( pRes );
}
//-----------------------------------------------------------------------------
void* CallExtension(char* _szFunction,char* _szParameters)
{
	void* pRes = CGScriptingSystem::I()->pCallExtension(CGString(_szFunction), CGString(_szParameters));
	return( pRes );
}
//-----------------------------------------------------------------------------
uobject CGGameRegistry_oGetVar(char* _szVariable)
{
	return( CGGameRegistry::I()->oGetVar(_szVariable) );
}
//-----------------------------------------------------------------------------
void SpawnEntity(CGGameEntity* _poEnt,float _fTime)
{
	CGGameEntitySpawner::I()->Spawn(_poEnt,_fTime);
}
//-----------------------------------------------------------------------------
uint castto_uint(TEntityState _eState) { return((uint)_eState); };
CGSmoother* castto_CSmoother(uobject _uoObj) { return((CGSmoother*)_uoObj); };
CHUDLabel* castto_CHUDLabel(uobject _uoObj) { return((CHUDLabel*)_uoObj); };
CGGameEntity* castto_CGGameEntity(uobject _uoObj) { return((CGGameEntity*)_uoObj); };


class CGUObject
{
	public:
		CGUObject(uobject _uoObj)
		{
			m_uoObj = _uoObj;
		}

		//
		CGSmoother*			toSmoother()		{ return( (CGSmoother*)m_uoObj );	}
		//
		CHUDLabel*			toCHUDLabel()		{ return( (CHUDLabel*)m_uoObj );	}
		//
		CGGameEntity*		toCGGameEntity()	{ return( (CGGameEntity*)m_uoObj ); };
		
		uint				toUint()			{ return( (uint)m_uoObj );	}

	protected:
		uobject	m_uoObj;
};
/*
typedef CGSingleton<CGGameMessageMgr> TGameMessageMgr;
TGameMessageMgr GameMessageMgr()
{
	return( CGGameMessageMgr::I() );
}

typedef CGSingleton< CGStandardLC > TStandardLC;
TStandardLC StandardLC()
{
	return ( CGStandardLC::I() );
}
*/

//-----------------------------------------------------------------------------


CGGameEntity* poThis();

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_MAX_CHARS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    int result;
    
    SWIG_check_num_args("MAX_CHARS",0,0)
    result = (int)(int)MAX_CHARS;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGString__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGString::CGString",0,0)
    result = (CGString *)new CGString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGString__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGString::CGString",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CGString::CGString",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1);
    result = (CGString *)new CGString((char const *)arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGString__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGString::CGString",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGString::CGString",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("new_CGString",1,SWIGTYPE_p_CGString);
    }
    
    result = (CGString *)new CGString((CGString const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGString__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    char arg1 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGString::CGString",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CGString::CGString",1,"char");
    arg1 = (lua_tostring(L, 1))[0];
    result = (CGString *)new CGString(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGString__SWIG_4(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGString::CGString",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGString::CGString",1,"int");
    arg1 = (int)lua_tonumber(L, 1);
    result = (CGString *)new CGString(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGString__SWIG_5(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGString::CGString",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGString::CGString",1,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    result = (CGString *)new CGString(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGString__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGString__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGString__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGString__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      return _wrap_new_CGString__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGString__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGString::CGString()\n"
    "    CGString::CGString(char const *)\n"
    "    CGString::CGString(CGString const &)\n"
    "    CGString::CGString(char)\n"
    "    CGString::CGString(int)\n"
    "    CGString::CGString(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CGString_Assign(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CGString::Assign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::Assign",1,"CGString *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGString::Assign",2,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_Assign",1,SWIGTYPE_p_CGString);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Assign((char const *)arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_Format(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGString::Format",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::Format",1,"CGString *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGString::Format",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_Format",1,SWIGTYPE_p_CGString);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Format(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_uiLen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGString::uiLen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::uiLen",1,"CGString const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_uiLen",1,SWIGTYPE_p_CGString);
    }
    
    result = (uint)((CGString const *)arg1)->uiLen();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_iPos__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGString::iPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::iPos",1,"CGString const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGString::iPos",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_iPos",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_iPos",2,SWIGTYPE_p_CGString);
    }
    
    result = (int)((CGString const *)arg1)->iPos((CGString const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_iPos__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    char *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGString::iPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::iPos",1,"CGString const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGString::iPos",2,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_iPos",1,SWIGTYPE_p_CGString);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (int)((CGString const *)arg1)->iPos((char const *)arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_iPos__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    char arg2 ;
    int result;
    
    SWIG_check_num_args("CGString::iPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::iPos",1,"CGString *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGString::iPos",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_iPos",1,SWIGTYPE_p_CGString);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (int)(arg1)->iPos(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_iPos(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGString_iPos__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_CGString_iPos__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGString_iPos__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGString_iPos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGString::iPos(CGString const &) const\n"
    "    CGString::iPos(char const *) const\n"
    "    CGString::iPos(char)\n");
  lua_error(L);return 0;
}


static int _wrap_CGString_szString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("CGString::szString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::szString",1,"CGString const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_szString",1,SWIGTYPE_p_CGString);
    }
    
    result = (char *)((CGString const *)arg1)->szString();
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_SubString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    CGString result;
    
    SWIG_check_num_args("CGString::SubString",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::SubString",1,"CGString const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGString::SubString",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGString::SubString",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_SubString",1,SWIGTYPE_p_CGString);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = ((CGString const *)arg1)->SubString(arg2,arg3);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_Concat(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGString::Concat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::Concat",1,"CGString *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGString::Concat",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_Concat",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_Concat",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->Concat((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString___eq(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGString::operator ==",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::operator ==",1,"CGString const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGString::operator ==",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString___eq",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString___eq",2,SWIGTYPE_p_CGString);
    }
    
    result = (bool)((CGString const *)arg1)->operator ==((CGString const &)*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString___add__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGString::operator +",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::operator +",1,"CGString const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGString::operator +",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString___add",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString___add",2,SWIGTYPE_p_CGString);
    }
    
    result = ((CGString const *)arg1)->operator +((CGString const &)*arg2);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString___add__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    char *arg2 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGString::operator +",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::operator +",1,"CGString const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGString::operator +",2,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString___add",1,SWIGTYPE_p_CGString);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = ((CGString const *)arg1)->operator +((char const *)arg2);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString___add__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    char arg2 ;
    CGString result;
    
    SWIG_check_num_args("CGString::operator +",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::operator +",1,"CGString const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGString::operator +",2,"char const");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString___add",1,SWIGTYPE_p_CGString);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = ((CGString const *)arg1)->operator +(arg2);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGString___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_CGString___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGString___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGString___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGString::operator +(CGString const &) const\n"
    "    CGString::operator +(char const *) const\n"
    "    CGString::operator +(char const) const\n");
  lua_error(L);return 0;
}


static int _wrap_CGString_UpperCase(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGString::UpperCase",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::UpperCase",1,"CGString const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_UpperCase",1,SWIGTYPE_p_CGString);
    }
    
    result = ((CGString const *)arg1)->UpperCase();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_ToUpperCase(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    
    SWIG_check_num_args("CGString::ToUpperCase",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::ToUpperCase",1,"CGString *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_ToUpperCase",1,SWIGTYPE_p_CGString);
    }
    
    (arg1)->ToUpperCase();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_LowerCase(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGString::LowerCase",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::LowerCase",1,"CGString const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_LowerCase",1,SWIGTYPE_p_CGString);
    }
    
    result = ((CGString const *)arg1)->LowerCase();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGString_ToLowerCase(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    
    SWIG_check_num_args("CGString::ToLowerCase",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGString::ToLowerCase",1,"CGString *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGString_ToLowerCase",1,SWIGTYPE_p_CGString);
    }
    
    (arg1)->ToLowerCase();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGString(void *obj) {
CGString *arg1 = (CGString *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGString(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGString);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGString_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGString_methods[]= {
    { "Assign", _wrap_CGString_Assign},
    { "Format", _wrap_CGString_Format},
    { "uiLen", _wrap_CGString_uiLen},
    { "iPos", _wrap_CGString_iPos},
    { "szString", _wrap_CGString_szString},
    { "SubString", _wrap_CGString_SubString},
    { "Concat", _wrap_CGString_Concat},
    { "__eq", _wrap_CGString___eq},
    { "__add", _wrap_CGString___add},
    { "UpperCase", _wrap_CGString_UpperCase},
    { "ToUpperCase", _wrap_CGString_ToUpperCase},
    { "LowerCase", _wrap_CGString_LowerCase},
    { "ToLowerCase", _wrap_CGString_ToLowerCase},
    {0,0}
};
static swig_lua_method swig_CGString_meta[] = {
    { "__eq", _wrap_CGString___eq},
    { "__add", _wrap_CGString___add},
    {0,0}
};

static swig_lua_attribute swig_CGString_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGString_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGString_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGString_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGString_Sf_SwigStatic = {
    "CGString",
    swig_CGString_Sf_SwigStatic_methods,
    swig_CGString_Sf_SwigStatic_attributes,
    swig_CGString_Sf_SwigStatic_constants,
    swig_CGString_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGString_bases[] = {0};
static const char *swig_CGString_base_names[] = {0};
static swig_lua_class _wrap_class_CGString = { "CGString", "CGString", &SWIGTYPE_p_CGString,_proxy__wrap_new_CGString, swig_delete_CGString, swig_CGString_methods, swig_CGString_attributes, &swig_CGString_Sf_SwigStatic, swig_CGString_meta, swig_CGString_bases, swig_CGString_base_names };

static int _wrap_uiCRCGenerate(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    int arg2 ;
    uint result;
    
    SWIG_check_num_args("Utils::uiCRCGenerate",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Utils::uiCRCGenerate",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Utils::uiCRCGenerate",2,"int");
    arg1 = (char *)lua_tostring(L, 1);
    arg2 = (int)lua_tonumber(L, 2);
    result = (uint)Utils::uiCRCGenerate((char const *)arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGLogger__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CGLogger *result = 0 ;
    
    SWIG_check_num_args("CGLogger::CGLogger",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGLogger::CGLogger",1,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    result = (CGLogger *)new CGLogger(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLogger,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGLogger__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogger *result = 0 ;
    
    SWIG_check_num_args("CGLogger::CGLogger",0,0)
    result = (CGLogger *)new CGLogger();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLogger,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGLogger(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGLogger__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGLogger__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGLogger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGLogger::CGLogger(uint)\n"
    "    CGLogger::CGLogger()\n");
  lua_error(L);return 0;
}


static int _wrap_CGLogger_Write(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogger *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGLogger::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogger::Write",1,"CGLogger *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGLogger::Write",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogger,0))){
      SWIG_fail_ptr("CGLogger_Write",1,SWIGTYPE_p_CGLogger);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Write(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLogger_szGetBuffer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogger *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("CGLogger::szGetBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogger::szGetBuffer",1,"CGLogger *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogger,0))){
      SWIG_fail_ptr("CGLogger_szGetBuffer",1,SWIGTYPE_p_CGLogger);
    }
    
    result = (char *)(arg1)->szGetBuffer();
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLogger_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogger *arg1 = 0 ;
    
    SWIG_check_num_args("CGLogger::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogger::Clear",1,"CGLogger *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogger,0))){
      SWIG_fail_ptr("CGLogger_Clear",1,SWIGTYPE_p_CGLogger);
    }
    
    (arg1)->Clear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGLogger(void *obj) {
CGLogger *arg1 = (CGLogger *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGLogger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGLogger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGLogger_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGLogger_methods[]= {
    { "Write", _wrap_CGLogger_Write},
    { "szGetBuffer", _wrap_CGLogger_szGetBuffer},
    { "Clear", _wrap_CGLogger_Clear},
    {0,0}
};
static swig_lua_method swig_CGLogger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGLogger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGLogger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGLogger_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGLogger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGLogger_Sf_SwigStatic = {
    "CGLogger",
    swig_CGLogger_Sf_SwigStatic_methods,
    swig_CGLogger_Sf_SwigStatic_attributes,
    swig_CGLogger_Sf_SwigStatic_constants,
    swig_CGLogger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGLogger_bases[] = {0};
static const char *swig_CGLogger_base_names[] = {0};
static swig_lua_class _wrap_class_CGLogger = { "CGLogger", "CGLogger", &SWIGTYPE_p_CGLogger,_proxy__wrap_new_CGLogger, swig_delete_CGLogger, swig_CGLogger_methods, swig_CGLogger_attributes, &swig_CGLogger_Sf_SwigStatic, swig_CGLogger_meta, swig_CGLogger_bases, swig_CGLogger_base_names };

static int _wrap_new_CGLogChannel__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogger *arg1 = 0 ;
    CGLogChannel *result = 0 ;
    
    SWIG_check_num_args("CGLogChannel::CGLogChannel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogChannel::CGLogChannel",1,"CGLogger *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogger,0))){
      SWIG_fail_ptr("new_CGLogChannel",1,SWIGTYPE_p_CGLogger);
    }
    
    result = (CGLogChannel *)new CGLogChannel(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLogChannel,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGLogChannel__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogChannel *result = 0 ;
    
    SWIG_check_num_args("CGLogChannel::CGLogChannel",0,0)
    result = (CGLogChannel *)new CGLogChannel();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLogChannel,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGLogChannel(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGLogChannel__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGLogger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGLogChannel__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGLogChannel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGLogChannel::CGLogChannel(CGLogger *)\n"
    "    CGLogChannel::CGLogChannel()\n");
  lua_error(L);return 0;
}


static int _wrap_CGLogChannel_Write(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogChannel *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGLogChannel::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogChannel::Write",1,"CGLogChannel *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGLogChannel::Write",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogChannel,0))){
      SWIG_fail_ptr("CGLogChannel_Write",1,SWIGTYPE_p_CGLogChannel);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Write(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLogChannel_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogChannel *arg1 = 0 ;
    
    SWIG_check_num_args("CGLogChannel::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogChannel::Clear",1,"CGLogChannel *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogChannel,0))){
      SWIG_fail_ptr("CGLogChannel_Clear",1,SWIGTYPE_p_CGLogChannel);
    }
    
    (arg1)->Clear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLogChannel_SetLogger__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogChannel *arg1 = 0 ;
    CGLogger *arg2 = 0 ;
    
    SWIG_check_num_args("CGLogChannel::SetLogger",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogChannel::SetLogger",1,"CGLogChannel *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGLogChannel::SetLogger",2,"CGLogger *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogChannel,0))){
      SWIG_fail_ptr("CGLogChannel_SetLogger",1,SWIGTYPE_p_CGLogChannel);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGLogger,0))){
      SWIG_fail_ptr("CGLogChannel_SetLogger",2,SWIGTYPE_p_CGLogger);
    }
    
    (arg1)->SetLogger(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLogChannel_SetLogger__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogChannel *arg1 = 0 ;
    
    SWIG_check_num_args("CGLogChannel::SetLogger",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogChannel::SetLogger",1,"CGLogChannel *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogChannel,0))){
      SWIG_fail_ptr("CGLogChannel_SetLogger",1,SWIGTYPE_p_CGLogChannel);
    }
    
    (arg1)->SetLogger();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLogChannel_SetLogger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGLogChannel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CGLogChannel_SetLogger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGLogChannel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGLogger, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGLogChannel_SetLogger__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGLogChannel_SetLogger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGLogChannel::SetLogger(CGLogger *)\n"
    "    CGLogChannel::SetLogger()\n");
  lua_error(L);return 0;
}


static int _wrap_CGLogChannel_poGetLogger(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLogChannel *arg1 = 0 ;
    CGLogger *result = 0 ;
    
    SWIG_check_num_args("CGLogChannel::poGetLogger",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLogChannel::poGetLogger",1,"CGLogChannel *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLogChannel,0))){
      SWIG_fail_ptr("CGLogChannel_poGetLogger",1,SWIGTYPE_p_CGLogChannel);
    }
    
    result = (CGLogger *)(arg1)->poGetLogger();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLogger,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGLogChannel(void *obj) {
CGLogChannel *arg1 = (CGLogChannel *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGLogChannel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGLogChannel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGLogChannel_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGLogChannel_methods[]= {
    { "Write", _wrap_CGLogChannel_Write},
    { "Clear", _wrap_CGLogChannel_Clear},
    { "SetLogger", _wrap_CGLogChannel_SetLogger},
    { "poGetLogger", _wrap_CGLogChannel_poGetLogger},
    {0,0}
};
static swig_lua_method swig_CGLogChannel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGLogChannel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGLogChannel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGLogChannel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGLogChannel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGLogChannel_Sf_SwigStatic = {
    "CGLogChannel",
    swig_CGLogChannel_Sf_SwigStatic_methods,
    swig_CGLogChannel_Sf_SwigStatic_attributes,
    swig_CGLogChannel_Sf_SwigStatic_constants,
    swig_CGLogChannel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGLogChannel_bases[] = {0};
static const char *swig_CGLogChannel_base_names[] = {0};
static swig_lua_class _wrap_class_CGLogChannel = { "CGLogChannel", "CGLogChannel", &SWIGTYPE_p_CGLogChannel,_proxy__wrap_new_CGLogChannel, swig_delete_CGLogChannel, swig_CGLogChannel_methods, swig_CGLogChannel_attributes, &swig_CGLogChannel_Sf_SwigStatic, swig_CGLogChannel_meta, swig_CGLogChannel_bases, swig_CGLogChannel_base_names };

static int _wrap_CGWarningLC_Write(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGWarningLC *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGWarningLC::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGWarningLC::Write",1,"CGWarningLC *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGWarningLC::Write",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGWarningLC,0))){
      SWIG_fail_ptr("CGWarningLC_Write",1,SWIGTYPE_p_CGWarningLC);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Write(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGWarningLC(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGWarningLC *result = 0 ;
    
    SWIG_check_num_args("CGWarningLC::CGWarningLC",0,0)
    result = (CGWarningLC *)new CGWarningLC();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGWarningLC,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGWarningLC(void *obj) {
CGWarningLC *arg1 = (CGWarningLC *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGWarningLC(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGWarningLC);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGWarningLC_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGWarningLC_methods[]= {
    { "Write", _wrap_CGWarningLC_Write},
    {0,0}
};
static swig_lua_method swig_CGWarningLC_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGWarningLC_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGWarningLC_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGWarningLC_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGWarningLC_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGWarningLC_Sf_SwigStatic = {
    "CGWarningLC",
    swig_CGWarningLC_Sf_SwigStatic_methods,
    swig_CGWarningLC_Sf_SwigStatic_attributes,
    swig_CGWarningLC_Sf_SwigStatic_constants,
    swig_CGWarningLC_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGWarningLC_bases[] = {0,0};
static const char *swig_CGWarningLC_base_names[] = {"CGLogChannel *",0};
static swig_lua_class _wrap_class_CGWarningLC = { "CGWarningLC", "CGWarningLC", &SWIGTYPE_p_CGWarningLC,_proxy__wrap_new_CGWarningLC, swig_delete_CGWarningLC, swig_CGWarningLC_methods, swig_CGWarningLC_attributes, &swig_CGWarningLC_Sf_SwigStatic, swig_CGWarningLC_meta, swig_CGWarningLC_bases, swig_CGWarningLC_base_names };

static int _wrap_new_CGReferenceCounter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGReferenceCounter *result = 0 ;
    
    SWIG_check_num_args("CGReferenceCounter::CGReferenceCounter",0,0)
    result = (CGReferenceCounter *)new CGReferenceCounter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGReferenceCounter,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGReferenceCounter_Ref(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGReferenceCounter *arg1 = 0 ;
    
    SWIG_check_num_args("CGReferenceCounter::Ref",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGReferenceCounter::Ref",1,"CGReferenceCounter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGReferenceCounter,0))){
      SWIG_fail_ptr("CGReferenceCounter_Ref",1,SWIGTYPE_p_CGReferenceCounter);
    }
    
    (arg1)->Ref();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGReferenceCounter_Deref(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGReferenceCounter *arg1 = 0 ;
    
    SWIG_check_num_args("CGReferenceCounter::Deref",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGReferenceCounter::Deref",1,"CGReferenceCounter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGReferenceCounter,0))){
      SWIG_fail_ptr("CGReferenceCounter_Deref",1,SWIGTYPE_p_CGReferenceCounter);
    }
    
    (arg1)->Deref();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGReferenceCounter_uiNumRefs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGReferenceCounter *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGReferenceCounter::uiNumRefs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGReferenceCounter::uiNumRefs",1,"CGReferenceCounter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGReferenceCounter,0))){
      SWIG_fail_ptr("CGReferenceCounter_uiNumRefs",1,SWIGTYPE_p_CGReferenceCounter);
    }
    
    result = (uint)(arg1)->uiNumRefs();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGReferenceCounter(void *obj) {
CGReferenceCounter *arg1 = (CGReferenceCounter *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGReferenceCounter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGReferenceCounter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGReferenceCounter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGReferenceCounter_methods[]= {
    { "Ref", _wrap_CGReferenceCounter_Ref},
    { "Deref", _wrap_CGReferenceCounter_Deref},
    { "uiNumRefs", _wrap_CGReferenceCounter_uiNumRefs},
    {0,0}
};
static swig_lua_method swig_CGReferenceCounter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGReferenceCounter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGReferenceCounter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGReferenceCounter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGReferenceCounter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGReferenceCounter_Sf_SwigStatic = {
    "CGReferenceCounter",
    swig_CGReferenceCounter_Sf_SwigStatic_methods,
    swig_CGReferenceCounter_Sf_SwigStatic_attributes,
    swig_CGReferenceCounter_Sf_SwigStatic_constants,
    swig_CGReferenceCounter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGReferenceCounter_bases[] = {0};
static const char *swig_CGReferenceCounter_base_names[] = {0};
static swig_lua_class _wrap_class_CGReferenceCounter = { "CGReferenceCounter", "CGReferenceCounter", &SWIGTYPE_p_CGReferenceCounter,_proxy__wrap_new_CGReferenceCounter, swig_delete_CGReferenceCounter, swig_CGReferenceCounter_methods, swig_CGReferenceCounter_attributes, &swig_CGReferenceCounter_Sf_SwigStatic, swig_CGReferenceCounter_meta, swig_CGReferenceCounter_bases, swig_CGReferenceCounter_base_names };

static int _wrap_new_CGResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGResource *result = 0 ;
    
    SWIG_check_num_args("CGResource::CGResource",0,0)
    result = (CGResource *)new CGResource();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGResource,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGResource_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGResource *arg1 = 0 ;
    
    SWIG_check_num_args("CGResource::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGResource::Invalidate",1,"CGResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGResource,0))){
      SWIG_fail_ptr("CGResource_Invalidate",1,SWIGTYPE_p_CGResource);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGResource_Validate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGResource *arg1 = 0 ;
    
    SWIG_check_num_args("CGResource::Validate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGResource::Validate",1,"CGResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGResource,0))){
      SWIG_fail_ptr("CGResource_Validate",1,SWIGTYPE_p_CGResource);
    }
    
    (arg1)->Validate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGResource_bValid(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGResource *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGResource::bValid",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGResource::bValid",1,"CGResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGResource,0))){
      SWIG_fail_ptr("CGResource_bValid",1,SWIGTYPE_p_CGResource);
    }
    
    result = (bool)(arg1)->bValid();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGResource(void *obj) {
CGResource *arg1 = (CGResource *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGResource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGResource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGResource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGResource_methods[]= {
    { "Invalidate", _wrap_CGResource_Invalidate},
    { "Validate", _wrap_CGResource_Validate},
    { "bValid", _wrap_CGResource_bValid},
    {0,0}
};
static swig_lua_method swig_CGResource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGResource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGResource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGResource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGResource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGResource_Sf_SwigStatic = {
    "CGResource",
    swig_CGResource_Sf_SwigStatic_methods,
    swig_CGResource_Sf_SwigStatic_attributes,
    swig_CGResource_Sf_SwigStatic_constants,
    swig_CGResource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGResource_bases[] = {0,0};
static const char *swig_CGResource_base_names[] = {"CGReferenceCounter *",0};
static swig_lua_class _wrap_class_CGResource = { "CGResource", "CGResource", &SWIGTYPE_p_CGResource,_proxy__wrap_new_CGResource, swig_delete_CGResource, swig_CGResource_methods, swig_CGResource_attributes, &swig_CGResource_Sf_SwigStatic, swig_CGResource_meta, swig_CGResource_bases, swig_CGResource_base_names };

static int _wrap_new_CGTextResource__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextResource *result = 0 ;
    
    SWIG_check_num_args("CGTextResource::CGTextResource",0,0)
    result = (CGTextResource *)new CGTextResource();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextResource,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGTextResource__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGTextResource *result = 0 ;
    
    SWIG_check_num_args("CGTextResource::CGTextResource",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGTextResource::CGTextResource",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("new_CGTextResource",1,SWIGTYPE_p_CGString);
    }
    
    result = (CGTextResource *)new CGTextResource((CGString const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextResource,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGTextResource(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGTextResource__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGTextResource__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGTextResource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGTextResource::CGTextResource()\n"
    "    CGTextResource::CGTextResource(CGString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGTextResource_sGetData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextResource *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGTextResource::sGetData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextResource::sGetData",1,"CGTextResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextResource,0))){
      SWIG_fail_ptr("CGTextResource_sGetData",1,SWIGTYPE_p_CGTextResource);
    }
    
    result = (CGString *) &(arg1)->sGetData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextResource_SetData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextResource *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGTextResource::SetData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextResource::SetData",1,"CGTextResource *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGTextResource::SetData",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextResource,0))){
      SWIG_fail_ptr("CGTextResource_SetData",1,SWIGTYPE_p_CGTextResource);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGTextResource_SetData",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->SetData((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTextResource(void *obj) {
CGTextResource *arg1 = (CGTextResource *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTextResource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTextResource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTextResource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTextResource_methods[]= {
    { "sGetData", _wrap_CGTextResource_sGetData},
    { "SetData", _wrap_CGTextResource_SetData},
    {0,0}
};
static swig_lua_method swig_CGTextResource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTextResource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTextResource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTextResource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTextResource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTextResource_Sf_SwigStatic = {
    "CGTextResource",
    swig_CGTextResource_Sf_SwigStatic_methods,
    swig_CGTextResource_Sf_SwigStatic_attributes,
    swig_CGTextResource_Sf_SwigStatic_constants,
    swig_CGTextResource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTextResource_bases[] = {0,0};
static const char *swig_CGTextResource_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGTextResource = { "CGTextResource", "CGTextResource", &SWIGTYPE_p_CGTextResource,_proxy__wrap_new_CGTextResource, swig_delete_CGTextResource, swig_CGTextResource_methods, swig_CGTextResource_attributes, &swig_CGTextResource_Sf_SwigStatic, swig_CGTextResource_meta, swig_CGTextResource_bases, swig_CGTextResource_base_names };

static int _wrap_CreateString(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("Utils::Parse::CreateString",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Utils::Parse::CreateString",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1);
    result = (char *)Utils::Parse::CreateString((char const *)arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ReadFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("Utils::Parse::ReadFile",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Utils::Parse::ReadFile",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1);
    result = (char *)Utils::Parse::ReadFile((char const *)arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SkipLine(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("Utils::Parse::SkipLine",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Utils::Parse::SkipLine",1,"char *");
    arg1 = (char *)lua_tostring(L, 1);
    result = (char *)Utils::Parse::SkipLine(arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ParseToken(lua_State* L) {
  {
    int SWIG_arg = 0;
    char **arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("Utils::Parse::ParseToken",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::ParseToken",1,"char *&");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("ParseToken",1,SWIGTYPE_p_p_char);
    }
    
    result = (char *)Utils::Parse::ParseToken(*arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ParseLine(lua_State* L) {
  {
    int SWIG_arg = 0;
    char **arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("Utils::Parse::ParseLine",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::ParseLine",1,"char *&");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("ParseLine",1,SWIGTYPE_p_p_char);
    }
    
    result = (char *)Utils::Parse::ParseLine(*arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_PreprocessString(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    
    SWIG_check_num_args("Utils::Parse::PreprocessString",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Utils::Parse::PreprocessString",1,"char *");
    arg1 = (char *)lua_tostring(L, 1);
    Utils::Parse::PreprocessString(arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_NextToken(lua_State* L) {
  {
    int SWIG_arg = 0;
    char **arg1 = 0 ;
    char **arg2 = 0 ;
    
    SWIG_check_num_args("Utils::Parse::NextToken",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::NextToken",1,"char *&");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Utils::Parse::NextToken",2,"char *&");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("NextToken",1,SWIGTYPE_p_p_char);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("NextToken",2,SWIGTYPE_p_p_char);
    }
    
    Utils::Parse::NextToken(*arg1,*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_NextQuotedToken(lua_State* L) {
  {
    int SWIG_arg = 0;
    char **arg1 = 0 ;
    char **arg2 = 0 ;
    
    SWIG_check_num_args("Utils::Parse::NextQuotedToken",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::NextQuotedToken",1,"char *&");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Utils::Parse::NextQuotedToken",2,"char *&");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("NextQuotedToken",1,SWIGTYPE_p_p_char);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("NextQuotedToken",2,SWIGTYPE_p_p_char);
    }
    
    Utils::Parse::NextQuotedToken(*arg1,*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_NextLine(lua_State* L) {
  {
    int SWIG_arg = 0;
    char **arg1 = 0 ;
    char **arg2 = 0 ;
    
    SWIG_check_num_args("Utils::Parse::NextLine",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::NextLine",1,"char *&");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Utils::Parse::NextLine",2,"char *&");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("NextLine",1,SWIGTYPE_p_p_char);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("NextLine",2,SWIGTYPE_p_p_char);
    }
    
    Utils::Parse::NextLine(*arg1,*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ParseSentence(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGDynArray< CGString > *arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("Utils::Parse::ParseSentence",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::ParseSentence",1,"CGString const &");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Utils::Parse::ParseSentence",2,"CGDynArray< CGString > *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("ParseSentence",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGDynArrayT_CGString_t,0))){
      SWIG_fail_ptr("ParseSentence",2,SWIGTYPE_p_CGDynArrayT_CGString_t);
    }
    
    result = (uint)Utils::Parse::ParseSentence((CGString const &)*arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ParseParameters__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGDynArray< CGString > *arg2 = 0 ;
    char arg3 ;
    uint result;
    
    SWIG_check_num_args("Utils::Parse::ParseParameters",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::ParseParameters",1,"CGString const &");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Utils::Parse::ParseParameters",2,"CGDynArray< CGString > *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Utils::Parse::ParseParameters",3,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("ParseParameters",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGDynArrayT_CGString_t,0))){
      SWIG_fail_ptr("ParseParameters",2,SWIGTYPE_p_CGDynArrayT_CGString_t);
    }
    
    arg3 = (lua_tostring(L, 3))[0];
    result = (uint)Utils::Parse::ParseParameters((CGString const &)*arg1,arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ParseParameters__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGDynArray< CGString > *arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("Utils::Parse::ParseParameters",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::Parse::ParseParameters",1,"CGString const &");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Utils::Parse::ParseParameters",2,"CGDynArray< CGString > *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("ParseParameters",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGDynArrayT_CGString_t,0))){
      SWIG_fail_ptr("ParseParameters",2,SWIGTYPE_p_CGDynArrayT_CGString_t);
    }
    
    result = (uint)Utils::Parse::ParseParameters((CGString const &)*arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ParseParameters(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGDynArrayT_CGString_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParseParameters__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGDynArrayT_CGString_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_ParseParameters__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParseParameters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Utils::Parse::ParseParameters(CGString const &,CGDynArray< CGString > *,char)\n"
    "    Utils::Parse::ParseParameters(CGString const &,CGDynArray< CGString > *)\n");
  lua_error(L);return 0;
}


static int _wrap_ExtractFileDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("Utils::ExtractFileDir",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::ExtractFileDir",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("ExtractFileDir",1,SWIGTYPE_p_CGString);
    }
    
    result = Utils::ExtractFileDir((CGString const &)*arg1);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ExtractFileName(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("Utils::ExtractFileName",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::ExtractFileName",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("ExtractFileName",1,SWIGTYPE_p_CGString);
    }
    
    result = Utils::ExtractFileName((CGString const &)*arg1);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ExtractShortFileName(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("Utils::ExtractShortFileName",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Utils::ExtractShortFileName",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("ExtractShortFileName",1,SWIGTYPE_p_CGString);
    }
    
    result = Utils::ExtractShortFileName((CGString const &)*arg1);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGConfigFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGConfigFile *result = 0 ;
    
    SWIG_check_num_args("CGConfigFile::CGConfigFile",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGConfigFile::CGConfigFile",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("new_CGConfigFile",1,SWIGTYPE_p_CGString);
    }
    
    result = (CGConfigFile *)new CGConfigFile((CGString const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGConfigFile,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGConfigFile_bInitialized(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGConfigFile *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGConfigFile::bInitialized",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGConfigFile::bInitialized",1,"CGConfigFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGConfigFile,0))){
      SWIG_fail_ptr("CGConfigFile_bInitialized",1,SWIGTYPE_p_CGConfigFile);
    }
    
    result = (bool)((CGConfigFile const *)arg1)->bInitialized();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGConfigFile_sGetString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGConfigFile *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGString *arg3 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGConfigFile::sGetString",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGConfigFile::sGetString",1,"CGConfigFile const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGConfigFile::sGetString",2,"CGString const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGConfigFile::sGetString",3,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGConfigFile,0))){
      SWIG_fail_ptr("CGConfigFile_sGetString",1,SWIGTYPE_p_CGConfigFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGConfigFile_sGetString",2,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGConfigFile_sGetString",3,SWIGTYPE_p_CGString);
    }
    
    result = ((CGConfigFile const *)arg1)->sGetString((CGString const &)*arg2,(CGString const &)*arg3);
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGConfigFile_fGetFloat(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGConfigFile *arg1 = 0 ;
    CGString *arg2 = 0 ;
    float arg3 ;
    float result;
    
    SWIG_check_num_args("CGConfigFile::fGetFloat",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGConfigFile::fGetFloat",1,"CGConfigFile const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGConfigFile::fGetFloat",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGConfigFile::fGetFloat",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGConfigFile,0))){
      SWIG_fail_ptr("CGConfigFile_fGetFloat",1,SWIGTYPE_p_CGConfigFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGConfigFile_fGetFloat",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    result = (float)((CGConfigFile const *)arg1)->fGetFloat((CGString const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGConfigFile_iGetInteger(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGConfigFile *arg1 = 0 ;
    CGString *arg2 = 0 ;
    uint arg3 ;
    int result;
    
    SWIG_check_num_args("CGConfigFile::iGetInteger",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGConfigFile::iGetInteger",1,"CGConfigFile const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGConfigFile::iGetInteger",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGConfigFile::iGetInteger",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGConfigFile,0))){
      SWIG_fail_ptr("CGConfigFile_iGetInteger",1,SWIGTYPE_p_CGConfigFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGConfigFile_iGetInteger",2,SWIGTYPE_p_CGString);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = (int)((CGConfigFile const *)arg1)->iGetInteger((CGString const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGConfigFile_bGetBool(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGConfigFile *arg1 = 0 ;
    CGString *arg2 = 0 ;
    bool arg3 ;
    bool result;
    
    SWIG_check_num_args("CGConfigFile::bGetBool",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGConfigFile::bGetBool",1,"CGConfigFile const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGConfigFile::bGetBool",2,"CGString const &");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("CGConfigFile::bGetBool",3,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGConfigFile,0))){
      SWIG_fail_ptr("CGConfigFile_bGetBool",1,SWIGTYPE_p_CGConfigFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGConfigFile_bGetBool",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (lua_toboolean(L, 3)!=0);
    result = (bool)((CGConfigFile const *)arg1)->bGetBool((CGString const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGConfigFile(void *obj) {
CGConfigFile *arg1 = (CGConfigFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGConfigFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGConfigFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGConfigFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGConfigFile_methods[]= {
    { "bInitialized", _wrap_CGConfigFile_bInitialized},
    { "sGetString", _wrap_CGConfigFile_sGetString},
    { "fGetFloat", _wrap_CGConfigFile_fGetFloat},
    { "iGetInteger", _wrap_CGConfigFile_iGetInteger},
    { "bGetBool", _wrap_CGConfigFile_bGetBool},
    {0,0}
};
static swig_lua_method swig_CGConfigFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGConfigFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGConfigFile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGConfigFile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGConfigFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGConfigFile_Sf_SwigStatic = {
    "CGConfigFile",
    swig_CGConfigFile_Sf_SwigStatic_methods,
    swig_CGConfigFile_Sf_SwigStatic_attributes,
    swig_CGConfigFile_Sf_SwigStatic_constants,
    swig_CGConfigFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGConfigFile_bases[] = {0};
static const char *swig_CGConfigFile_base_names[] = {0};
static swig_lua_class _wrap_class_CGConfigFile = { "CGConfigFile", "CGConfigFile", &SWIGTYPE_p_CGConfigFile,_proxy__wrap_new_CGConfigFile, swig_delete_CGConfigFile, swig_CGConfigFile_methods, swig_CGConfigFile_attributes, &swig_CGConfigFile_Sf_SwigStatic, swig_CGConfigFile_meta, swig_CGConfigFile_bases, swig_CGConfigFile_base_names };

static int _wrap_new_CGChrono(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGChrono *result = 0 ;
    
    SWIG_check_num_args("CGChrono::CGChrono",0,0)
    result = (CGChrono *)new CGChrono();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGChrono,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGChrono_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGChrono *arg1 = 0 ;
    
    SWIG_check_num_args("CGChrono::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGChrono::Reset",1,"CGChrono *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGChrono,0))){
      SWIG_fail_ptr("CGChrono_Reset",1,SWIGTYPE_p_CGChrono);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGChrono_Start(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGChrono *arg1 = 0 ;
    
    SWIG_check_num_args("CGChrono::Start",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGChrono::Start",1,"CGChrono *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGChrono,0))){
      SWIG_fail_ptr("CGChrono_Start",1,SWIGTYPE_p_CGChrono);
    }
    
    (arg1)->Start();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGChrono_Stop(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGChrono *arg1 = 0 ;
    
    SWIG_check_num_args("CGChrono::Stop",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGChrono::Stop",1,"CGChrono *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGChrono,0))){
      SWIG_fail_ptr("CGChrono_Stop",1,SWIGTYPE_p_CGChrono);
    }
    
    (arg1)->Stop();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGChrono_dElapsedTime(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGChrono *arg1 = 0 ;
    double result;
    
    SWIG_check_num_args("CGChrono::dElapsedTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGChrono::dElapsedTime",1,"CGChrono *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGChrono,0))){
      SWIG_fail_ptr("CGChrono_dElapsedTime",1,SWIGTYPE_p_CGChrono);
    }
    
    result = (double)(arg1)->dElapsedTime();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGChrono(void *obj) {
CGChrono *arg1 = (CGChrono *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGChrono(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGChrono);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGChrono_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGChrono_methods[]= {
    { "Reset", _wrap_CGChrono_Reset},
    { "Start", _wrap_CGChrono_Start},
    { "Stop", _wrap_CGChrono_Stop},
    { "dElapsedTime", _wrap_CGChrono_dElapsedTime},
    {0,0}
};
static swig_lua_method swig_CGChrono_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGChrono_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGChrono_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGChrono_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGChrono_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGChrono_Sf_SwigStatic = {
    "CGChrono",
    swig_CGChrono_Sf_SwigStatic_methods,
    swig_CGChrono_Sf_SwigStatic_attributes,
    swig_CGChrono_Sf_SwigStatic_constants,
    swig_CGChrono_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGChrono_bases[] = {0};
static const char *swig_CGChrono_base_names[] = {0};
static swig_lua_class _wrap_class_CGChrono = { "CGChrono", "CGChrono", &SWIGTYPE_p_CGChrono,_proxy__wrap_new_CGChrono, swig_delete_CGChrono, swig_CGChrono_methods, swig_CGChrono_attributes, &swig_CGChrono_Sf_SwigStatic, swig_CGChrono_meta, swig_CGChrono_bases, swig_CGChrono_base_names };

static int _wrap_CGErrorLC_Write(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGErrorLC *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGErrorLC::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGErrorLC::Write",1,"CGErrorLC *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGErrorLC::Write",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGErrorLC,0))){
      SWIG_fail_ptr("CGErrorLC_Write",1,SWIGTYPE_p_CGErrorLC);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Write(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGErrorLC(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGErrorLC *result = 0 ;
    
    SWIG_check_num_args("CGErrorLC::CGErrorLC",0,0)
    result = (CGErrorLC *)new CGErrorLC();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGErrorLC,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGErrorLC(void *obj) {
CGErrorLC *arg1 = (CGErrorLC *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGErrorLC(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGErrorLC);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGErrorLC_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGErrorLC_methods[]= {
    { "Write", _wrap_CGErrorLC_Write},
    {0,0}
};
static swig_lua_method swig_CGErrorLC_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGErrorLC_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGErrorLC_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGErrorLC_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGErrorLC_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGErrorLC_Sf_SwigStatic = {
    "CGErrorLC",
    swig_CGErrorLC_Sf_SwigStatic_methods,
    swig_CGErrorLC_Sf_SwigStatic_attributes,
    swig_CGErrorLC_Sf_SwigStatic_constants,
    swig_CGErrorLC_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGErrorLC_bases[] = {0,0};
static const char *swig_CGErrorLC_base_names[] = {"CGLogChannel *",0};
static swig_lua_class _wrap_class_CGErrorLC = { "CGErrorLC", "CGErrorLC", &SWIGTYPE_p_CGErrorLC,_proxy__wrap_new_CGErrorLC, swig_delete_CGErrorLC, swig_CGErrorLC_methods, swig_CGErrorLC_attributes, &swig_CGErrorLC_Sf_SwigStatic, swig_CGErrorLC_meta, swig_CGErrorLC_bases, swig_CGErrorLC_base_names };

static int _wrap_new_CGStandardLC(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGStandardLC *result = 0 ;
    
    SWIG_check_num_args("CGStandardLC::CGStandardLC",0,0)
    result = (CGStandardLC *)new CGStandardLC();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGStandardLC,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGStandardLC(void *obj) {
CGStandardLC *arg1 = (CGStandardLC *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGStandardLC(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGStandardLC);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGStandardLC_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGStandardLC_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGStandardLC_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGStandardLC_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGStandardLC_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGStandardLC_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGStandardLC_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGStandardLC_Sf_SwigStatic = {
    "CGStandardLC",
    swig_CGStandardLC_Sf_SwigStatic_methods,
    swig_CGStandardLC_Sf_SwigStatic_attributes,
    swig_CGStandardLC_Sf_SwigStatic_constants,
    swig_CGStandardLC_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGStandardLC_bases[] = {0,0};
static const char *swig_CGStandardLC_base_names[] = {"CGLogChannel *",0};
static swig_lua_class _wrap_class_CGStandardLC = { "CGStandardLC", "CGStandardLC", &SWIGTYPE_p_CGStandardLC,_proxy__wrap_new_CGStandardLC, swig_delete_CGStandardLC, swig_CGStandardLC_methods, swig_CGStandardLC_attributes, &swig_CGStandardLC_Sf_SwigStatic, swig_CGStandardLC_meta, swig_CGStandardLC_bases, swig_CGStandardLC_base_names };

static int _wrap_CGSystemLC_Write(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSystemLC *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGSystemLC::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSystemLC::Write",1,"CGSystemLC *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGSystemLC::Write",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSystemLC,0))){
      SWIG_fail_ptr("CGSystemLC_Write",1,SWIGTYPE_p_CGSystemLC);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Write(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSystemLC_Error(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSystemLC *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGSystemLC::Error",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSystemLC::Error",1,"CGSystemLC *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGSystemLC::Error",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSystemLC,0))){
      SWIG_fail_ptr("CGSystemLC_Error",1,SWIGTYPE_p_CGSystemLC);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Error(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSystemLC_Warning(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSystemLC *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGSystemLC::Warning",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSystemLC::Warning",1,"CGSystemLC *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGSystemLC::Warning",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSystemLC,0))){
      SWIG_fail_ptr("CGSystemLC_Warning",1,SWIGTYPE_p_CGSystemLC);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Warning(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSystemLC(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSystemLC *result = 0 ;
    
    SWIG_check_num_args("CGSystemLC::CGSystemLC",0,0)
    result = (CGSystemLC *)new CGSystemLC();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSystemLC,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSystemLC(void *obj) {
CGSystemLC *arg1 = (CGSystemLC *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSystemLC(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSystemLC);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSystemLC_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSystemLC_methods[]= {
    { "Write", _wrap_CGSystemLC_Write},
    { "Error", _wrap_CGSystemLC_Error},
    { "Warning", _wrap_CGSystemLC_Warning},
    {0,0}
};
static swig_lua_method swig_CGSystemLC_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSystemLC_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSystemLC_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSystemLC_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSystemLC_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSystemLC_Sf_SwigStatic = {
    "CGSystemLC",
    swig_CGSystemLC_Sf_SwigStatic_methods,
    swig_CGSystemLC_Sf_SwigStatic_attributes,
    swig_CGSystemLC_Sf_SwigStatic_constants,
    swig_CGSystemLC_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSystemLC_bases[] = {0,0};
static const char *swig_CGSystemLC_base_names[] = {"CGLogChannel *",0};
static swig_lua_class _wrap_class_CGSystemLC = { "CGSystemLC", "CGSystemLC", &SWIGTYPE_p_CGSystemLC,_proxy__wrap_new_CGSystemLC, swig_delete_CGSystemLC, swig_CGSystemLC_methods, swig_CGSystemLC_attributes, &swig_CGSystemLC_Sf_SwigStatic, swig_CGSystemLC_meta, swig_CGSystemLC_bases, swig_CGSystemLC_base_names };

static int _wrap_fRand(lua_State* L) {
  {
    int SWIG_arg = 0;
    float result;
    
    SWIG_check_num_args("Math::fRand",0,0)
    result = (float)Math::fRand();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fSRand(lua_State* L) {
  {
    int SWIG_arg = 0;
    float result;
    
    SWIG_check_num_args("Math::fSRand",0,0)
    result = (float)Math::fSRand();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fSqrt(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fSqrt",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fSqrt",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fSqrt(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fSin(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fSin",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fSin",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fSin(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fCos(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fCos",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fCos",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fCos(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fTan(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fTan",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fTan",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fTan(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fArcTan(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fArcTan",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fArcTan",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fArcTan(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fAbs(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fAbs",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fAbs",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fAbs(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fSign(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fSign",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fSign",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fSign(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bInRange(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    bool result;
    
    SWIG_check_num_args("Math::bInRange",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::bInRange",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::bInRange",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("Math::bInRange",3,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (bool)Math::bInRange(arg1,arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bEqual__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    bool result;
    
    SWIG_check_num_args("Math::bEqual",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::bEqual",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::bEqual",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("Math::bEqual",3,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (bool)Math::bEqual(arg1,arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bEqual__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    bool result;
    
    SWIG_check_num_args("Math::bEqual",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::bEqual",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::bEqual",2,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    result = (bool)Math::bEqual(arg1,arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bEqual(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_bEqual__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_bEqual__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bEqual'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Math::bEqual(float,float,float)\n"
    "    Math::bEqual(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_fClamp(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float result;
    
    SWIG_check_num_args("Math::fClamp",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fClamp",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::fClamp",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("Math::fClamp",3,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (float)Math::fClamp(arg1,arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fMin(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float result;
    
    SWIG_check_num_args("Math::fMin",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fMin",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::fMin",2,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    result = (float)Math::fMin(arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fMax(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float result;
    
    SWIG_check_num_args("Math::fMax",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fMax",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::fMax",2,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    result = (float)Math::fMax(arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fMod(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float result;
    
    SWIG_check_num_args("Math::fMod",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fMod",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::fMod",2,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    result = (float)Math::fMod(arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fFloor(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fFloor",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fFloor",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fFloor(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fCeil(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float result;
    
    SWIG_check_num_args("Math::fCeil",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fCeil",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (float)Math::fCeil(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fLerp(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float result;
    
    SWIG_check_num_args("Math::fLerp",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::fLerp",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::fLerp",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("Math::fLerp",3,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (float)Math::fLerp(arg1,arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvaluator_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvaluator *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvaluator::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvaluator::fGetValue",1,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGEvaluator_fGetValue",1,SWIGTYPE_p_CGEvaluator);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvaluator(void *obj) {
CGEvaluator *arg1 = (CGEvaluator *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGEvaluator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvaluator_methods[]= {
    { "fGetValue", _wrap_CGEvaluator_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvaluator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvaluator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvaluator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvaluator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvaluator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvaluator_Sf_SwigStatic = {
    "CGEvaluator",
    swig_CGEvaluator_Sf_SwigStatic_methods,
    swig_CGEvaluator_Sf_SwigStatic_attributes,
    swig_CGEvaluator_Sf_SwigStatic_constants,
    swig_CGEvaluator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvaluator_bases[] = {0};
static const char *swig_CGEvaluator_base_names[] = {0};
static swig_lua_class _wrap_class_CGEvaluator = { "CGEvaluator", "CGEvaluator", &SWIGTYPE_p_CGEvaluator,0, swig_delete_CGEvaluator, swig_CGEvaluator_methods, swig_CGEvaluator_attributes, &swig_CGEvaluator_Sf_SwigStatic, swig_CGEvaluator_meta, swig_CGEvaluator_bases, swig_CGEvaluator_base_names };

static int _wrap_CGEvalPeriodic_poGetAmplitude(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::poGetAmplitude",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::poGetAmplitude",1,"CGEvalPeriodic *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_poGetAmplitude",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    result = (CGEvaluator *)(arg1)->poGetAmplitude();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_SetAmplitude(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::SetAmplitude",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::SetAmplitude",1,"CGEvalPeriodic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalPeriodic::SetAmplitude",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_SetAmplitude",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGEvalPeriodic_SetAmplitude",2,SWIGTYPE_p_CGEvaluator);
    }
    
    (arg1)->SetAmplitude(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_poGetPhase(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::poGetPhase",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::poGetPhase",1,"CGEvalPeriodic *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_poGetPhase",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    result = (CGEvaluator *)(arg1)->poGetPhase();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_SetPhase(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::SetPhase",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::SetPhase",1,"CGEvalPeriodic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalPeriodic::SetPhase",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_SetPhase",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGEvalPeriodic_SetPhase",2,SWIGTYPE_p_CGEvaluator);
    }
    
    (arg1)->SetPhase(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_poGetFreqMult(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::poGetFreqMult",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::poGetFreqMult",1,"CGEvalPeriodic *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_poGetFreqMult",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    result = (CGEvaluator *)(arg1)->poGetFreqMult();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_SetFreqMult(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::SetFreqMult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::SetFreqMult",1,"CGEvalPeriodic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalPeriodic::SetFreqMult",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_SetFreqMult",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGEvalPeriodic_SetFreqMult",2,SWIGTYPE_p_CGEvaluator);
    }
    
    (arg1)->SetFreqMult(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_m_poAmplitude_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::m_poAmplitude",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::m_poAmplitude",1,"CGEvalPeriodic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalPeriodic::m_poAmplitude",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poAmplitude_set",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poAmplitude_set",2,SWIGTYPE_p_CGEvaluator);
    }
    
    if (arg1) (arg1)->m_poAmplitude = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_m_poAmplitude_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::m_poAmplitude",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::m_poAmplitude",1,"CGEvalPeriodic *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poAmplitude_get",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    result = (CGEvaluator *) ((arg1)->m_poAmplitude);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_m_poPhase_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::m_poPhase",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::m_poPhase",1,"CGEvalPeriodic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalPeriodic::m_poPhase",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poPhase_set",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poPhase_set",2,SWIGTYPE_p_CGEvaluator);
    }
    
    if (arg1) (arg1)->m_poPhase = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_m_poPhase_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::m_poPhase",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::m_poPhase",1,"CGEvalPeriodic *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poPhase_get",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    result = (CGEvaluator *) ((arg1)->m_poPhase);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_m_poFreqMult_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::m_poFreqMult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::m_poFreqMult",1,"CGEvalPeriodic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalPeriodic::m_poFreqMult",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poFreqMult_set",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poFreqMult_set",2,SWIGTYPE_p_CGEvaluator);
    }
    
    if (arg1) (arg1)->m_poFreqMult = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalPeriodic_m_poFreqMult_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalPeriodic *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalPeriodic::m_poFreqMult",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalPeriodic::m_poFreqMult",1,"CGEvalPeriodic *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalPeriodic,0))){
      SWIG_fail_ptr("CGEvalPeriodic_m_poFreqMult_get",1,SWIGTYPE_p_CGEvalPeriodic);
    }
    
    result = (CGEvaluator *) ((arg1)->m_poFreqMult);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalPeriodic(void *obj) {
CGEvalPeriodic *arg1 = (CGEvalPeriodic *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGEvalPeriodic_attributes[] = {
    { "m_poAmplitude", _wrap_CGEvalPeriodic_m_poAmplitude_get, _wrap_CGEvalPeriodic_m_poAmplitude_set },
    { "m_poPhase", _wrap_CGEvalPeriodic_m_poPhase_get, _wrap_CGEvalPeriodic_m_poPhase_set },
    { "m_poFreqMult", _wrap_CGEvalPeriodic_m_poFreqMult_get, _wrap_CGEvalPeriodic_m_poFreqMult_set },
    {0,0,0}
};
static swig_lua_method swig_CGEvalPeriodic_methods[]= {
    { "poGetAmplitude", _wrap_CGEvalPeriodic_poGetAmplitude},
    { "SetAmplitude", _wrap_CGEvalPeriodic_SetAmplitude},
    { "poGetPhase", _wrap_CGEvalPeriodic_poGetPhase},
    { "SetPhase", _wrap_CGEvalPeriodic_SetPhase},
    { "poGetFreqMult", _wrap_CGEvalPeriodic_poGetFreqMult},
    { "SetFreqMult", _wrap_CGEvalPeriodic_SetFreqMult},
    {0,0}
};
static swig_lua_method swig_CGEvalPeriodic_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalPeriodic_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalPeriodic_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalPeriodic_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalPeriodic_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalPeriodic_Sf_SwigStatic = {
    "CGEvalPeriodic",
    swig_CGEvalPeriodic_Sf_SwigStatic_methods,
    swig_CGEvalPeriodic_Sf_SwigStatic_attributes,
    swig_CGEvalPeriodic_Sf_SwigStatic_constants,
    swig_CGEvalPeriodic_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalPeriodic_bases[] = {0,0};
static const char *swig_CGEvalPeriodic_base_names[] = {"CGEvaluator *",0};
static swig_lua_class _wrap_class_CGEvalPeriodic = { "CGEvalPeriodic", "CGEvalPeriodic", &SWIGTYPE_p_CGEvalPeriodic,0, swig_delete_CGEvalPeriodic, swig_CGEvalPeriodic_methods, swig_CGEvalPeriodic_attributes, &swig_CGEvalPeriodic_Sf_SwigStatic, swig_CGEvalPeriodic_meta, swig_CGEvalPeriodic_bases, swig_CGEvalPeriodic_base_names };

static int _wrap_CGEvalTriangle_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalTriangle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalTriangle::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalTriangle::fGetValue",1,"CGEvalTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalTriangle,0))){
      SWIG_fail_ptr("CGEvalTriangle_fGetValue",1,SWIGTYPE_p_CGEvalTriangle);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGEvalTriangle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalTriangle *result = 0 ;
    
    SWIG_check_num_args("CGEvalTriangle::CGEvalTriangle",0,0)
    result = (CGEvalTriangle *)new CGEvalTriangle();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalTriangle,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalTriangle(void *obj) {
CGEvalTriangle *arg1 = (CGEvalTriangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalTriangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalTriangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalTriangle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalTriangle_methods[]= {
    { "fGetValue", _wrap_CGEvalTriangle_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalTriangle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalTriangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalTriangle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalTriangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalTriangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalTriangle_Sf_SwigStatic = {
    "CGEvalTriangle",
    swig_CGEvalTriangle_Sf_SwigStatic_methods,
    swig_CGEvalTriangle_Sf_SwigStatic_attributes,
    swig_CGEvalTriangle_Sf_SwigStatic_constants,
    swig_CGEvalTriangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalTriangle_bases[] = {0,0};
static const char *swig_CGEvalTriangle_base_names[] = {"CGEvalPeriodic *",0};
static swig_lua_class _wrap_class_CGEvalTriangle = { "CGEvalTriangle", "CGEvalTriangle", &SWIGTYPE_p_CGEvalTriangle,_proxy__wrap_new_CGEvalTriangle, swig_delete_CGEvalTriangle, swig_CGEvalTriangle_methods, swig_CGEvalTriangle_attributes, &swig_CGEvalTriangle_Sf_SwigStatic, swig_CGEvalTriangle_meta, swig_CGEvalTriangle_bases, swig_CGEvalTriangle_base_names };

static int _wrap_CGEvalBinary_poGetAOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalBinary *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalBinary::poGetAOp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalBinary::poGetAOp",1,"CGEvalBinary *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalBinary,0))){
      SWIG_fail_ptr("CGEvalBinary_poGetAOp",1,SWIGTYPE_p_CGEvalBinary);
    }
    
    result = (CGEvaluator *)(arg1)->poGetAOp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalBinary_SetAOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalBinary *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalBinary::SetAOp",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalBinary::SetAOp",1,"CGEvalBinary *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalBinary::SetAOp",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalBinary,0))){
      SWIG_fail_ptr("CGEvalBinary_SetAOp",1,SWIGTYPE_p_CGEvalBinary);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGEvalBinary_SetAOp",2,SWIGTYPE_p_CGEvaluator);
    }
    
    (arg1)->SetAOp(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalBinary_poGetBOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalBinary *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGEvalBinary::poGetBOp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalBinary::poGetBOp",1,"CGEvalBinary *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalBinary,0))){
      SWIG_fail_ptr("CGEvalBinary_poGetBOp",1,SWIGTYPE_p_CGEvalBinary);
    }
    
    result = (CGEvaluator *)(arg1)->poGetBOp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalBinary_SetBOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalBinary *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGEvalBinary::SetBOp",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalBinary::SetBOp",1,"CGEvalBinary *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGEvalBinary::SetBOp",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalBinary,0))){
      SWIG_fail_ptr("CGEvalBinary_SetBOp",1,SWIGTYPE_p_CGEvalBinary);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGEvalBinary_SetBOp",2,SWIGTYPE_p_CGEvaluator);
    }
    
    (arg1)->SetBOp(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalBinary(void *obj) {
CGEvalBinary *arg1 = (CGEvalBinary *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGEvalBinary_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalBinary_methods[]= {
    { "poGetAOp", _wrap_CGEvalBinary_poGetAOp},
    { "SetAOp", _wrap_CGEvalBinary_SetAOp},
    { "poGetBOp", _wrap_CGEvalBinary_poGetBOp},
    { "SetBOp", _wrap_CGEvalBinary_SetBOp},
    {0,0}
};
static swig_lua_method swig_CGEvalBinary_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalBinary_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalBinary_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalBinary_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalBinary_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalBinary_Sf_SwigStatic = {
    "CGEvalBinary",
    swig_CGEvalBinary_Sf_SwigStatic_methods,
    swig_CGEvalBinary_Sf_SwigStatic_attributes,
    swig_CGEvalBinary_Sf_SwigStatic_constants,
    swig_CGEvalBinary_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalBinary_bases[] = {0,0};
static const char *swig_CGEvalBinary_base_names[] = {"CGEvaluator *",0};
static swig_lua_class _wrap_class_CGEvalBinary = { "CGEvalBinary", "CGEvalBinary", &SWIGTYPE_p_CGEvalBinary,0, swig_delete_CGEvalBinary, swig_CGEvalBinary_methods, swig_CGEvalBinary_attributes, &swig_CGEvalBinary_Sf_SwigStatic, swig_CGEvalBinary_meta, swig_CGEvalBinary_bases, swig_CGEvalBinary_base_names };

static int _wrap_CGEvalSum_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSum *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalSum::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalSum::fGetValue",1,"CGEvalSum *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalSum,0))){
      SWIG_fail_ptr("CGEvalSum_fGetValue",1,SWIGTYPE_p_CGEvalSum);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGEvalSum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSum *result = 0 ;
    
    SWIG_check_num_args("CGEvalSum::CGEvalSum",0,0)
    result = (CGEvalSum *)new CGEvalSum();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalSum,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalSum(void *obj) {
CGEvalSum *arg1 = (CGEvalSum *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalSum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalSum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalSum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalSum_methods[]= {
    { "fGetValue", _wrap_CGEvalSum_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalSum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalSum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalSum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalSum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalSum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalSum_Sf_SwigStatic = {
    "CGEvalSum",
    swig_CGEvalSum_Sf_SwigStatic_methods,
    swig_CGEvalSum_Sf_SwigStatic_attributes,
    swig_CGEvalSum_Sf_SwigStatic_constants,
    swig_CGEvalSum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalSum_bases[] = {0,0};
static const char *swig_CGEvalSum_base_names[] = {"CGEvalBinary *",0};
static swig_lua_class _wrap_class_CGEvalSum = { "CGEvalSum", "CGEvalSum", &SWIGTYPE_p_CGEvalSum,_proxy__wrap_new_CGEvalSum, swig_delete_CGEvalSum, swig_CGEvalSum_methods, swig_CGEvalSum_attributes, &swig_CGEvalSum_Sf_SwigStatic, swig_CGEvalSum_meta, swig_CGEvalSum_bases, swig_CGEvalSum_base_names };

static int _wrap_CGEvalMult_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalMult *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalMult::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalMult::fGetValue",1,"CGEvalMult *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalMult,0))){
      SWIG_fail_ptr("CGEvalMult_fGetValue",1,SWIGTYPE_p_CGEvalMult);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGEvalMult(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalMult *result = 0 ;
    
    SWIG_check_num_args("CGEvalMult::CGEvalMult",0,0)
    result = (CGEvalMult *)new CGEvalMult();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalMult,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalMult(void *obj) {
CGEvalMult *arg1 = (CGEvalMult *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalMult(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalMult);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalMult_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalMult_methods[]= {
    { "fGetValue", _wrap_CGEvalMult_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalMult_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalMult_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalMult_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalMult_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalMult_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalMult_Sf_SwigStatic = {
    "CGEvalMult",
    swig_CGEvalMult_Sf_SwigStatic_methods,
    swig_CGEvalMult_Sf_SwigStatic_attributes,
    swig_CGEvalMult_Sf_SwigStatic_constants,
    swig_CGEvalMult_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalMult_bases[] = {0,0};
static const char *swig_CGEvalMult_base_names[] = {"CGEvalBinary *",0};
static swig_lua_class _wrap_class_CGEvalMult = { "CGEvalMult", "CGEvalMult", &SWIGTYPE_p_CGEvalMult,_proxy__wrap_new_CGEvalMult, swig_delete_CGEvalMult, swig_CGEvalMult_methods, swig_CGEvalMult_attributes, &swig_CGEvalMult_Sf_SwigStatic, swig_CGEvalMult_meta, swig_CGEvalMult_bases, swig_CGEvalMult_base_names };

static int _wrap_CGEvalSin_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSin *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalSin::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalSin::fGetValue",1,"CGEvalSin *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalSin,0))){
      SWIG_fail_ptr("CGEvalSin_fGetValue",1,SWIGTYPE_p_CGEvalSin);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGEvalSin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSin *result = 0 ;
    
    SWIG_check_num_args("CGEvalSin::CGEvalSin",0,0)
    result = (CGEvalSin *)new CGEvalSin();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalSin,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalSin(void *obj) {
CGEvalSin *arg1 = (CGEvalSin *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalSin(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalSin);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalSin_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalSin_methods[]= {
    { "fGetValue", _wrap_CGEvalSin_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalSin_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalSin_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalSin_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalSin_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalSin_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalSin_Sf_SwigStatic = {
    "CGEvalSin",
    swig_CGEvalSin_Sf_SwigStatic_methods,
    swig_CGEvalSin_Sf_SwigStatic_attributes,
    swig_CGEvalSin_Sf_SwigStatic_constants,
    swig_CGEvalSin_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalSin_bases[] = {0,0};
static const char *swig_CGEvalSin_base_names[] = {"CGEvalPeriodic *",0};
static swig_lua_class _wrap_class_CGEvalSin = { "CGEvalSin", "CGEvalSin", &SWIGTYPE_p_CGEvalSin,_proxy__wrap_new_CGEvalSin, swig_delete_CGEvalSin, swig_CGEvalSin_methods, swig_CGEvalSin_attributes, &swig_CGEvalSin_Sf_SwigStatic, swig_CGEvalSin_meta, swig_CGEvalSin_bases, swig_CGEvalSin_base_names };

static int _wrap_CGEvalSawTooth_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSawTooth *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalSawTooth::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalSawTooth::fGetValue",1,"CGEvalSawTooth *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalSawTooth,0))){
      SWIG_fail_ptr("CGEvalSawTooth_fGetValue",1,SWIGTYPE_p_CGEvalSawTooth);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGEvalSawTooth(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSawTooth *result = 0 ;
    
    SWIG_check_num_args("CGEvalSawTooth::CGEvalSawTooth",0,0)
    result = (CGEvalSawTooth *)new CGEvalSawTooth();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalSawTooth,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalSawTooth(void *obj) {
CGEvalSawTooth *arg1 = (CGEvalSawTooth *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalSawTooth(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalSawTooth);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalSawTooth_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalSawTooth_methods[]= {
    { "fGetValue", _wrap_CGEvalSawTooth_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalSawTooth_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalSawTooth_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalSawTooth_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalSawTooth_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalSawTooth_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalSawTooth_Sf_SwigStatic = {
    "CGEvalSawTooth",
    swig_CGEvalSawTooth_Sf_SwigStatic_methods,
    swig_CGEvalSawTooth_Sf_SwigStatic_attributes,
    swig_CGEvalSawTooth_Sf_SwigStatic_constants,
    swig_CGEvalSawTooth_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalSawTooth_bases[] = {0,0};
static const char *swig_CGEvalSawTooth_base_names[] = {"CGEvalPeriodic *",0};
static swig_lua_class _wrap_class_CGEvalSawTooth = { "CGEvalSawTooth", "CGEvalSawTooth", &SWIGTYPE_p_CGEvalSawTooth,_proxy__wrap_new_CGEvalSawTooth, swig_delete_CGEvalSawTooth, swig_CGEvalSawTooth_methods, swig_CGEvalSawTooth_attributes, &swig_CGEvalSawTooth_Sf_SwigStatic, swig_CGEvalSawTooth_meta, swig_CGEvalSawTooth_bases, swig_CGEvalSawTooth_base_names };

static int _wrap_CGEvalSquare_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSquare *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalSquare::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalSquare::fGetValue",1,"CGEvalSquare *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalSquare,0))){
      SWIG_fail_ptr("CGEvalSquare_fGetValue",1,SWIGTYPE_p_CGEvalSquare);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGEvalSquare(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalSquare *result = 0 ;
    
    SWIG_check_num_args("CGEvalSquare::CGEvalSquare",0,0)
    result = (CGEvalSquare *)new CGEvalSquare();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalSquare,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalSquare(void *obj) {
CGEvalSquare *arg1 = (CGEvalSquare *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalSquare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalSquare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalSquare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalSquare_methods[]= {
    { "fGetValue", _wrap_CGEvalSquare_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalSquare_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalSquare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalSquare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalSquare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalSquare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalSquare_Sf_SwigStatic = {
    "CGEvalSquare",
    swig_CGEvalSquare_Sf_SwigStatic_methods,
    swig_CGEvalSquare_Sf_SwigStatic_attributes,
    swig_CGEvalSquare_Sf_SwigStatic_constants,
    swig_CGEvalSquare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalSquare_bases[] = {0,0};
static const char *swig_CGEvalSquare_base_names[] = {"CGEvalPeriodic *",0};
static swig_lua_class _wrap_class_CGEvalSquare = { "CGEvalSquare", "CGEvalSquare", &SWIGTYPE_p_CGEvalSquare,_proxy__wrap_new_CGEvalSquare, swig_delete_CGEvalSquare, swig_CGEvalSquare_methods, swig_CGEvalSquare_attributes, &swig_CGEvalSquare_Sf_SwigStatic, swig_CGEvalSquare_meta, swig_CGEvalSquare_bases, swig_CGEvalSquare_base_names };

static int _wrap_CGEvalCos_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalCos *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalCos::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalCos::fGetValue",1,"CGEvalCos *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalCos,0))){
      SWIG_fail_ptr("CGEvalCos_fGetValue",1,SWIGTYPE_p_CGEvalCos);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGEvalCos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalCos *result = 0 ;
    
    SWIG_check_num_args("CGEvalCos::CGEvalCos",0,0)
    result = (CGEvalCos *)new CGEvalCos();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalCos,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalCos(void *obj) {
CGEvalCos *arg1 = (CGEvalCos *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalCos(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalCos);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalCos_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalCos_methods[]= {
    { "fGetValue", _wrap_CGEvalCos_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalCos_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalCos_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalCos_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalCos_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalCos_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalCos_Sf_SwigStatic = {
    "CGEvalCos",
    swig_CGEvalCos_Sf_SwigStatic_methods,
    swig_CGEvalCos_Sf_SwigStatic_attributes,
    swig_CGEvalCos_Sf_SwigStatic_constants,
    swig_CGEvalCos_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalCos_bases[] = {0,0};
static const char *swig_CGEvalCos_base_names[] = {"CGEvalPeriodic *",0};
static swig_lua_class _wrap_class_CGEvalCos = { "CGEvalCos", "CGEvalCos", &SWIGTYPE_p_CGEvalCos,_proxy__wrap_new_CGEvalCos, swig_delete_CGEvalCos, swig_CGEvalCos_methods, swig_CGEvalCos_attributes, &swig_CGEvalCos_Sf_SwigStatic, swig_CGEvalCos_meta, swig_CGEvalCos_bases, swig_CGEvalCos_base_names };

static int _wrap_new_CGEvalTime(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalTime *result = 0 ;
    
    SWIG_check_num_args("CGEvalTime::CGEvalTime",0,0)
    result = (CGEvalTime *)new CGEvalTime();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalTime,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalTime_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalTime *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalTime::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalTime::fGetValue",1,"CGEvalTime *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalTime,0))){
      SWIG_fail_ptr("CGEvalTime_fGetValue",1,SWIGTYPE_p_CGEvalTime);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalTime(void *obj) {
CGEvalTime *arg1 = (CGEvalTime *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalTime(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalTime);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalTime_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalTime_methods[]= {
    { "fGetValue", _wrap_CGEvalTime_fGetValue},
    {0,0}
};
static swig_lua_method swig_CGEvalTime_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalTime_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalTime_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalTime_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalTime_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalTime_Sf_SwigStatic = {
    "CGEvalTime",
    swig_CGEvalTime_Sf_SwigStatic_methods,
    swig_CGEvalTime_Sf_SwigStatic_attributes,
    swig_CGEvalTime_Sf_SwigStatic_constants,
    swig_CGEvalTime_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalTime_bases[] = {0,0};
static const char *swig_CGEvalTime_base_names[] = {"CGEvaluator *",0};
static swig_lua_class _wrap_class_CGEvalTime = { "CGEvalTime", "CGEvalTime", &SWIGTYPE_p_CGEvalTime,_proxy__wrap_new_CGEvalTime, swig_delete_CGEvalTime, swig_CGEvalTime_methods, swig_CGEvalTime_attributes, &swig_CGEvalTime_Sf_SwigStatic, swig_CGEvalTime_meta, swig_CGEvalTime_bases, swig_CGEvalTime_base_names };

static int _wrap_new_CGEvalConst(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalConst *result = 0 ;
    
    SWIG_check_num_args("CGEvalConst::CGEvalConst",0,0)
    result = (CGEvalConst *)new CGEvalConst();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvalConst,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalConst_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalConst *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalConst::fGetValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalConst::fGetValue",1,"CGEvalConst *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalConst,0))){
      SWIG_fail_ptr("CGEvalConst_fGetValue",1,SWIGTYPE_p_CGEvalConst);
    }
    
    result = (float)(arg1)->fGetValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalConst_fGetConstant(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalConst *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGEvalConst::fGetConstant",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalConst::fGetConstant",1,"CGEvalConst *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalConst,0))){
      SWIG_fail_ptr("CGEvalConst_fGetConstant",1,SWIGTYPE_p_CGEvalConst);
    }
    
    result = (float)(arg1)->fGetConstant();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGEvalConst_SetConstant(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGEvalConst *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGEvalConst::SetConstant",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGEvalConst::SetConstant",1,"CGEvalConst *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGEvalConst::SetConstant",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGEvalConst,0))){
      SWIG_fail_ptr("CGEvalConst_SetConstant",1,SWIGTYPE_p_CGEvalConst);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetConstant(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGEvalConst(void *obj) {
CGEvalConst *arg1 = (CGEvalConst *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGEvalConst(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGEvalConst);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGEvalConst_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGEvalConst_methods[]= {
    { "fGetValue", _wrap_CGEvalConst_fGetValue},
    { "fGetConstant", _wrap_CGEvalConst_fGetConstant},
    { "SetConstant", _wrap_CGEvalConst_SetConstant},
    {0,0}
};
static swig_lua_method swig_CGEvalConst_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGEvalConst_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGEvalConst_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGEvalConst_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGEvalConst_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGEvalConst_Sf_SwigStatic = {
    "CGEvalConst",
    swig_CGEvalConst_Sf_SwigStatic_methods,
    swig_CGEvalConst_Sf_SwigStatic_attributes,
    swig_CGEvalConst_Sf_SwigStatic_constants,
    swig_CGEvalConst_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGEvalConst_bases[] = {0,0};
static const char *swig_CGEvalConst_base_names[] = {"CGEvaluator *",0};
static swig_lua_class _wrap_class_CGEvalConst = { "CGEvalConst", "CGEvalConst", &SWIGTYPE_p_CGEvalConst,_proxy__wrap_new_CGEvalConst, swig_delete_CGEvalConst, swig_CGEvalConst_methods, swig_CGEvalConst_attributes, &swig_CGEvalConst_Sf_SwigStatic, swig_CGEvalConst_meta, swig_CGEvalConst_bases, swig_CGEvalConst_base_names };

static int _wrap_CGBoundingVolume_eGetType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBoundingVolume *arg1 = 0 ;
    EGBoundingVolumeType result;
    
    SWIG_check_num_args("CGBoundingVolume::eGetType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBoundingVolume::eGetType",1,"CGBoundingVolume const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("CGBoundingVolume_eGetType",1,SWIGTYPE_p_CGBoundingVolume);
    }
    
    result = (EGBoundingVolumeType)((CGBoundingVolume const *)arg1)->eGetType();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBoundingVolume_fGetVolume(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBoundingVolume *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBoundingVolume::fGetVolume",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBoundingVolume::fGetVolume",1,"CGBoundingVolume const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("CGBoundingVolume_fGetVolume",1,SWIGTYPE_p_CGBoundingVolume);
    }
    
    result = (float)((CGBoundingVolume const *)arg1)->fGetVolume();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBoundingVolume(void *obj) {
CGBoundingVolume *arg1 = (CGBoundingVolume *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGBoundingVolume_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBoundingVolume_methods[]= {
    { "eGetType", _wrap_CGBoundingVolume_eGetType},
    { "fGetVolume", _wrap_CGBoundingVolume_fGetVolume},
    {0,0}
};
static swig_lua_method swig_CGBoundingVolume_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBoundingVolume_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBoundingVolume_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBoundingVolume_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBoundingVolume_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBoundingVolume_Sf_SwigStatic = {
    "CGBoundingVolume",
    swig_CGBoundingVolume_Sf_SwigStatic_methods,
    swig_CGBoundingVolume_Sf_SwigStatic_attributes,
    swig_CGBoundingVolume_Sf_SwigStatic_constants,
    swig_CGBoundingVolume_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBoundingVolume_bases[] = {0};
static const char *swig_CGBoundingVolume_base_names[] = {0};
static swig_lua_class _wrap_class_CGBoundingVolume = { "CGBoundingVolume", "CGBoundingVolume", &SWIGTYPE_p_CGBoundingVolume,0, swig_delete_CGBoundingVolume, swig_CGBoundingVolume_methods, swig_CGBoundingVolume_attributes, &swig_CGBoundingVolume_Sf_SwigStatic, swig_CGBoundingVolume_meta, swig_CGBoundingVolume_bases, swig_CGBoundingVolume_base_names };

static int _wrap_new_CGVect3__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGVect3::CGVect3",0,0)
    result = (CGVect3 *)new CGVect3();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGVect3__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGVect3::CGVect3",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGVect3::CGVect3",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::CGVect3",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGVect3::CGVect3",3,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (CGVect3 *)new CGVect3(arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGVect3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGVect3__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_CGVect3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGVect3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGVect3::CGVect3()\n"
    "    CGVect3::CGVect3(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGVect3_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGVect3::Set",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Set",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::Set",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGVect3::Set",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGVect3::Set",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Set",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Set(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Point(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGVect3::Point",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Point",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::Point",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGVect3::Point",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Point",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->Point(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Assign(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGVect3::Assign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Assign",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::Assign",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Assign",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Assign",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Assign((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_CrossProd(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGVect3::CrossProd",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::CrossProd",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::CrossProd",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGVect3::CrossProd",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_CrossProd",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_CrossProd",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_CrossProd",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->CrossProd((CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Normal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    
    SWIG_check_num_args("CGVect3::Normal",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Normal",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::Normal",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGVect3::Normal",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGVect3::Normal",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Normal",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Normal",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Normal",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Normal",4,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Normal((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Orthogonal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGVect3::Orthogonal",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Orthogonal",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::Orthogonal",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Orthogonal",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Orthogonal",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Orthogonal((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_LineEq(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    
    SWIG_check_num_args("CGVect3::LineEq",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::LineEq",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::LineEq",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGVect3::LineEq",3,"CGVect3 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGVect3::LineEq",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_LineEq",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_LineEq",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_LineEq",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->LineEq((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Add__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGVect3::Add",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Add",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::Add",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Add",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Add",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Add((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Sub__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGVect3::Sub",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Sub",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::Sub",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Sub",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Sub",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Sub((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Mult__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGVect3::Mult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Mult",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::Mult",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Mult",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Mult",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Mult((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Scale(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGVect3::Scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Scale",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::Scale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Scale",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Scale(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Add__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGVect3::Add",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Add",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::Add",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGVect3::Add",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGVect3::Add",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Add",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Add(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Add(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGVect3_Add__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGVect3_Add__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGVect3_Add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGVect3::Add(CGVect3 const &)\n"
    "    CGVect3::Add(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGVect3_Sub__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGVect3::Sub",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Sub",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::Sub",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGVect3::Sub",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGVect3::Sub",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Sub",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Sub(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Sub(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGVect3_Sub__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGVect3_Sub__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGVect3_Sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGVect3::Sub(CGVect3 const &)\n"
    "    CGVect3::Sub(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGVect3_Mult__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGVect3::Mult",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Mult",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::Mult",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGVect3::Mult",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGVect3::Mult",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Mult",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Mult(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Mult(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGVect3_Mult__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGVect3_Mult__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGVect3_Mult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGVect3::Mult(CGVect3 const &)\n"
    "    CGVect3::Mult(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGVect3_fDotProd(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::fDotProd",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::fDotProd",1,"CGVect3 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::fDotProd",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fDotProd",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fDotProd",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)((CGVect3 const *)arg1)->fDotProd((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Interpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    
    SWIG_check_num_args("CGVect3::Interpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Interpolate",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::Interpolate",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGVect3::Interpolate",3,"CGVect3 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGVect3::Interpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Interpolate",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Interpolate",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Interpolate",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Interpolate((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_Normalize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CGVect3::Normalize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::Normalize",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_Normalize",1,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Normalize();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_fModule(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::fModule",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::fModule",1,"CGVect3 const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fModule",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)((CGVect3 const *)arg1)->fModule();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_fSqModule(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::fSqModule",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::fSqModule",1,"CGVect3 const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fSqModule",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)((CGVect3 const *)arg1)->fSqModule();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_fDistance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::fDistance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::fDistance",1,"CGVect3 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::fDistance",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fDistance",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fDistance",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)((CGVect3 const *)arg1)->fDistance((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_fSqDistance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::fSqDistance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::fSqDistance",1,"CGVect3 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::fSqDistance",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fSqDistance",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_fSqDistance",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)((CGVect3 const *)arg1)->fSqDistance((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_bInside(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGVect3::bInside",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::bInside",1,"CGVect3 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::bInside",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGVect3::bInside",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_bInside",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_bInside",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_bInside",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (bool)((CGVect3 const *)arg1)->bInside((CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_bEqual(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGVect3::bEqual",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::bEqual",1,"CGVect3 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGVect3::bEqual",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_bEqual",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_bEqual",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (bool)((CGVect3 const *)arg1)->bEqual((CGVect3 const &)*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_uiGetGreaterAxis(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGVect3::uiGetGreaterAxis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::uiGetGreaterAxis",1,"CGVect3 const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_uiGetGreaterAxis",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (uint)((CGVect3 const *)arg1)->uiGetGreaterAxis();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_oZero(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGVect3::oZero",0,0)
    result = (CGVect3 *) &CGVect3::oZero();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_oX(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGVect3::oX",0,0)
    result = (CGVect3 *) &CGVect3::oX();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_oY(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGVect3::oY",0,0)
    result = (CGVect3 *) &CGVect3::oY();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_oZ(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGVect3::oZ",0,0)
    result = (CGVect3 *) &CGVect3::oZ();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_v(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    uint arg2 ;
    float *result = 0 ;
    
    SWIG_check_num_args("CGVect3::v",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::v",1,"CGVect3 const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::v",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_v",1,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (float *) &((CGVect3 const *)arg1)->v(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_V(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("CGVect3::V",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::V",1,"CGVect3 const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_V",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (float *)((CGVect3 const *)arg1)->V();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_x_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGVect3::x",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::x",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::x",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_x_set",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->x = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_x_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::x",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::x",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_x_get",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (float) ((arg1)->x);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_y_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGVect3::y",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::y",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::y",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_y_set",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->y = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_y_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::y",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::y",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_y_get",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (float) ((arg1)->y);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_z_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGVect3::z",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::z",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGVect3::z",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_z_set",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->z = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGVect3_z_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGVect3::z",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGVect3::z",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGVect3_z_get",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (float) ((arg1)->z);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGVect3(void *obj) {
CGVect3 *arg1 = (CGVect3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGVect3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGVect3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGVect3_attributes[] = {
    { "x", _wrap_CGVect3_x_get, _wrap_CGVect3_x_set },
    { "y", _wrap_CGVect3_y_get, _wrap_CGVect3_y_set },
    { "z", _wrap_CGVect3_z_get, _wrap_CGVect3_z_set },
    {0,0,0}
};
static swig_lua_method swig_CGVect3_methods[]= {
    { "Set", _wrap_CGVect3_Set},
    { "Point", _wrap_CGVect3_Point},
    { "Assign", _wrap_CGVect3_Assign},
    { "CrossProd", _wrap_CGVect3_CrossProd},
    { "Normal", _wrap_CGVect3_Normal},
    { "Orthogonal", _wrap_CGVect3_Orthogonal},
    { "LineEq", _wrap_CGVect3_LineEq},
    { "Scale", _wrap_CGVect3_Scale},
    { "Add", _wrap_CGVect3_Add},
    { "Sub", _wrap_CGVect3_Sub},
    { "Mult", _wrap_CGVect3_Mult},
    { "fDotProd", _wrap_CGVect3_fDotProd},
    { "Interpolate", _wrap_CGVect3_Interpolate},
    { "Normalize", _wrap_CGVect3_Normalize},
    { "fModule", _wrap_CGVect3_fModule},
    { "fSqModule", _wrap_CGVect3_fSqModule},
    { "fDistance", _wrap_CGVect3_fDistance},
    { "fSqDistance", _wrap_CGVect3_fSqDistance},
    { "bInside", _wrap_CGVect3_bInside},
    { "bEqual", _wrap_CGVect3_bEqual},
    { "uiGetGreaterAxis", _wrap_CGVect3_uiGetGreaterAxis},
    { "v", _wrap_CGVect3_v},
    { "V", _wrap_CGVect3_V},
    {0,0}
};
static swig_lua_method swig_CGVect3_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGVect3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGVect3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGVect3_Sf_SwigStatic_methods[]= {
    { "oZero", _wrap_CGVect3_oZero},
    { "oX", _wrap_CGVect3_oX},
    { "oY", _wrap_CGVect3_oY},
    { "oZ", _wrap_CGVect3_oZ},
    {0,0}
};
static swig_lua_class* swig_CGVect3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGVect3_Sf_SwigStatic = {
    "CGVect3",
    swig_CGVect3_Sf_SwigStatic_methods,
    swig_CGVect3_Sf_SwigStatic_attributes,
    swig_CGVect3_Sf_SwigStatic_constants,
    swig_CGVect3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGVect3_bases[] = {0};
static const char *swig_CGVect3_base_names[] = {0};
static swig_lua_class _wrap_class_CGVect3 = { "CGVect3", "CGVect3", &SWIGTYPE_p_CGVect3,_proxy__wrap_new_CGVect3, swig_delete_CGVect3, swig_CGVect3_methods, swig_CGVect3_attributes, &swig_CGVect3_Sf_SwigStatic, swig_CGVect3_meta, swig_CGVect3_bases, swig_CGVect3_base_names };

static int _wrap_new_CGBVAABB__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVAABB *result = 0 ;
    
    SWIG_check_num_args("CGBVAABB::CGBVAABB",0,0)
    result = (CGBVAABB *)new CGBVAABB();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVAABB,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGBVAABB__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVAABB *arg1 = 0 ;
    CGBVAABB *result = 0 ;
    
    SWIG_check_num_args("CGBVAABB::CGBVAABB",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGBVAABB::CGBVAABB",1,"CGBVAABB const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVAABB,0))){
      SWIG_fail_ptr("new_CGBVAABB",1,SWIGTYPE_p_CGBVAABB);
    }
    
    result = (CGBVAABB *)new CGBVAABB((CGBVAABB const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVAABB,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGBVAABB(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGBVAABB__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGBVAABB, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGBVAABB__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGBVAABB'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGBVAABB::CGBVAABB()\n"
    "    CGBVAABB::CGBVAABB(CGBVAABB const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGBVAABB_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVAABB *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGBVAABB::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVAABB::Init",1,"CGBVAABB *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGBVAABB::Init",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGBVAABB::Init",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVAABB,0))){
      SWIG_fail_ptr("CGBVAABB_Init",1,SWIGTYPE_p_CGBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGBVAABB_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGBVAABB_Init",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init((CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVAABB_oGetMax(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVAABB *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGBVAABB::oGetMax",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVAABB::oGetMax",1,"CGBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVAABB,0))){
      SWIG_fail_ptr("CGBVAABB_oGetMax",1,SWIGTYPE_p_CGBVAABB);
    }
    
    result = (CGVect3 *) &((CGBVAABB const *)arg1)->oGetMax();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVAABB_oGetMin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVAABB *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGBVAABB::oGetMin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVAABB::oGetMin",1,"CGBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVAABB,0))){
      SWIG_fail_ptr("CGBVAABB_oGetMin",1,SWIGTYPE_p_CGBVAABB);
    }
    
    result = (CGVect3 *) &((CGBVAABB const *)arg1)->oGetMin();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVAABB_fGetVolume(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVAABB *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVAABB::fGetVolume",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVAABB::fGetVolume",1,"CGBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVAABB,0))){
      SWIG_fail_ptr("CGBVAABB_fGetVolume",1,SWIGTYPE_p_CGBVAABB);
    }
    
    result = (float)((CGBVAABB const *)arg1)->fGetVolume();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBVAABB(void *obj) {
CGBVAABB *arg1 = (CGBVAABB *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBVAABB(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBVAABB);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBVAABB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBVAABB_methods[]= {
    { "Init", _wrap_CGBVAABB_Init},
    { "oGetMax", _wrap_CGBVAABB_oGetMax},
    { "oGetMin", _wrap_CGBVAABB_oGetMin},
    { "fGetVolume", _wrap_CGBVAABB_fGetVolume},
    {0,0}
};
static swig_lua_method swig_CGBVAABB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBVAABB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBVAABB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBVAABB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBVAABB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBVAABB_Sf_SwigStatic = {
    "CGBVAABB",
    swig_CGBVAABB_Sf_SwigStatic_methods,
    swig_CGBVAABB_Sf_SwigStatic_attributes,
    swig_CGBVAABB_Sf_SwigStatic_constants,
    swig_CGBVAABB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBVAABB_bases[] = {0,0};
static const char *swig_CGBVAABB_base_names[] = {"CGBoundingVolume *",0};
static swig_lua_class _wrap_class_CGBVAABB = { "CGBVAABB", "CGBVAABB", &SWIGTYPE_p_CGBVAABB,_proxy__wrap_new_CGBVAABB, swig_delete_CGBVAABB, swig_CGBVAABB_methods, swig_CGBVAABB_attributes, &swig_CGBVAABB_Sf_SwigStatic, swig_CGBVAABB_meta, swig_CGBVAABB_bases, swig_CGBVAABB_base_names };

static int _wrap_new_CGBVSphere__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVSphere *result = 0 ;
    
    SWIG_check_num_args("CGBVSphere::CGBVSphere",0,0)
    result = (CGBVSphere *)new CGBVSphere();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVSphere,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGBVSphere__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVSphere *arg1 = 0 ;
    CGBVSphere *result = 0 ;
    
    SWIG_check_num_args("CGBVSphere::CGBVSphere",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGBVSphere::CGBVSphere",1,"CGBVSphere &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVSphere,0))){
      SWIG_fail_ptr("new_CGBVSphere",1,SWIGTYPE_p_CGBVSphere);
    }
    
    result = (CGBVSphere *)new CGBVSphere(*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVSphere,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGBVSphere(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGBVSphere__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGBVSphere, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGBVSphere__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGBVSphere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGBVSphere::CGBVSphere()\n"
    "    CGBVSphere::CGBVSphere(CGBVSphere &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGBVSphere_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVSphere *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGBVSphere::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVSphere::Init",1,"CGBVSphere *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGBVSphere::Init",2,"CGVect3 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGBVSphere::Init",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVSphere,0))){
      SWIG_fail_ptr("CGBVSphere_Init",1,SWIGTYPE_p_CGBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGBVSphere_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->Init((CGVect3 const &)*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVSphere_fGetRadius(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVSphere *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVSphere::fGetRadius",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVSphere::fGetRadius",1,"CGBVSphere const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVSphere,0))){
      SWIG_fail_ptr("CGBVSphere_fGetRadius",1,SWIGTYPE_p_CGBVSphere);
    }
    
    result = (float)((CGBVSphere const *)arg1)->fGetRadius();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVSphere_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVSphere *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGBVSphere::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVSphere::oGetCenter",1,"CGBVSphere const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVSphere,0))){
      SWIG_fail_ptr("CGBVSphere_oGetCenter",1,SWIGTYPE_p_CGBVSphere);
    }
    
    result = (CGVect3 *) &((CGBVSphere const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVSphere_fGetVolume(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVSphere *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVSphere::fGetVolume",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVSphere::fGetVolume",1,"CGBVSphere const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVSphere,0))){
      SWIG_fail_ptr("CGBVSphere_fGetVolume",1,SWIGTYPE_p_CGBVSphere);
    }
    
    result = (float)((CGBVSphere const *)arg1)->fGetVolume();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBVSphere(void *obj) {
CGBVSphere *arg1 = (CGBVSphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBVSphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBVSphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBVSphere_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBVSphere_methods[]= {
    { "Init", _wrap_CGBVSphere_Init},
    { "fGetRadius", _wrap_CGBVSphere_fGetRadius},
    { "oGetCenter", _wrap_CGBVSphere_oGetCenter},
    { "fGetVolume", _wrap_CGBVSphere_fGetVolume},
    {0,0}
};
static swig_lua_method swig_CGBVSphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBVSphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBVSphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBVSphere_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBVSphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBVSphere_Sf_SwigStatic = {
    "CGBVSphere",
    swig_CGBVSphere_Sf_SwigStatic_methods,
    swig_CGBVSphere_Sf_SwigStatic_attributes,
    swig_CGBVSphere_Sf_SwigStatic_constants,
    swig_CGBVSphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBVSphere_bases[] = {0,0};
static const char *swig_CGBVSphere_base_names[] = {"CGBoundingVolume *",0};
static swig_lua_class _wrap_class_CGBVSphere = { "CGBVSphere", "CGBVSphere", &SWIGTYPE_p_CGBVSphere,_proxy__wrap_new_CGBVSphere, swig_delete_CGBVSphere, swig_CGBVSphere_methods, swig_CGBVSphere_attributes, &swig_CGBVSphere_Sf_SwigStatic, swig_CGBVSphere_meta, swig_CGBVSphere_bases, swig_CGBVSphere_base_names };

static int _wrap_new_CGBVPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVPoint *result = 0 ;
    
    SWIG_check_num_args("CGBVPoint::CGBVPoint",0,0)
    result = (CGBVPoint *)new CGBVPoint();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVPoint,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVPoint_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVPoint *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGBVPoint::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVPoint::Init",1,"CGBVPoint *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGBVPoint::Init",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVPoint,0))){
      SWIG_fail_ptr("CGBVPoint_Init",1,SWIGTYPE_p_CGBVPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGBVPoint_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVPoint_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVPoint *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGBVPoint::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVPoint::oGetCenter",1,"CGBVPoint const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVPoint,0))){
      SWIG_fail_ptr("CGBVPoint_oGetCenter",1,SWIGTYPE_p_CGBVPoint);
    }
    
    result = (CGVect3 *) &((CGBVPoint const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVPoint_fGetVolume(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVPoint *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVPoint::fGetVolume",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVPoint::fGetVolume",1,"CGBVPoint const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVPoint,0))){
      SWIG_fail_ptr("CGBVPoint_fGetVolume",1,SWIGTYPE_p_CGBVPoint);
    }
    
    result = (float)((CGBVPoint const *)arg1)->fGetVolume();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBVPoint(void *obj) {
CGBVPoint *arg1 = (CGBVPoint *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBVPoint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBVPoint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBVPoint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBVPoint_methods[]= {
    { "Init", _wrap_CGBVPoint_Init},
    { "oGetCenter", _wrap_CGBVPoint_oGetCenter},
    { "fGetVolume", _wrap_CGBVPoint_fGetVolume},
    {0,0}
};
static swig_lua_method swig_CGBVPoint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBVPoint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBVPoint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBVPoint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBVPoint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBVPoint_Sf_SwigStatic = {
    "CGBVPoint",
    swig_CGBVPoint_Sf_SwigStatic_methods,
    swig_CGBVPoint_Sf_SwigStatic_attributes,
    swig_CGBVPoint_Sf_SwigStatic_constants,
    swig_CGBVPoint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBVPoint_bases[] = {0,0};
static const char *swig_CGBVPoint_base_names[] = {"CGBoundingVolume *",0};
static swig_lua_class _wrap_class_CGBVPoint = { "CGBVPoint", "CGBVPoint", &SWIGTYPE_p_CGBVPoint,_proxy__wrap_new_CGBVPoint, swig_delete_CGBVPoint, swig_CGBVPoint_methods, swig_CGBVPoint_attributes, &swig_CGBVPoint_Sf_SwigStatic, swig_CGBVPoint_meta, swig_CGBVPoint_bases, swig_CGBVPoint_base_names };

static int _wrap_new_CGBVCylinder(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVCylinder *result = 0 ;
    
    SWIG_check_num_args("CGBVCylinder::CGBVCylinder",0,0)
    result = (CGBVCylinder *)new CGBVCylinder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVCylinder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVCylinder_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVCylinder *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGBVCylinder::Init",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVCylinder::Init",1,"CGBVCylinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGBVCylinder::Init",2,"CGVect3 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGBVCylinder::Init",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGBVCylinder::Init",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVCylinder,0))){
      SWIG_fail_ptr("CGBVCylinder_Init",1,SWIGTYPE_p_CGBVCylinder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGBVCylinder_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Init((CGVect3 const &)*arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVCylinder_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVCylinder *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGBVCylinder::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVCylinder::oGetCenter",1,"CGBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVCylinder,0))){
      SWIG_fail_ptr("CGBVCylinder_oGetCenter",1,SWIGTYPE_p_CGBVCylinder);
    }
    
    result = (CGVect3 *) &((CGBVCylinder const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVCylinder_fGetRadius(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVCylinder *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVCylinder::fGetRadius",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVCylinder::fGetRadius",1,"CGBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVCylinder,0))){
      SWIG_fail_ptr("CGBVCylinder_fGetRadius",1,SWIGTYPE_p_CGBVCylinder);
    }
    
    result = (float)((CGBVCylinder const *)arg1)->fGetRadius();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVCylinder_fGetHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVCylinder *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVCylinder::fGetHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVCylinder::fGetHeight",1,"CGBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVCylinder,0))){
      SWIG_fail_ptr("CGBVCylinder_fGetHeight",1,SWIGTYPE_p_CGBVCylinder);
    }
    
    result = (float)((CGBVCylinder const *)arg1)->fGetHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVCylinder_fGetVolume(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVCylinder *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVCylinder::fGetVolume",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVCylinder::fGetVolume",1,"CGBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVCylinder,0))){
      SWIG_fail_ptr("CGBVCylinder_fGetVolume",1,SWIGTYPE_p_CGBVCylinder);
    }
    
    result = (float)((CGBVCylinder const *)arg1)->fGetVolume();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBVCylinder(void *obj) {
CGBVCylinder *arg1 = (CGBVCylinder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBVCylinder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBVCylinder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBVCylinder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBVCylinder_methods[]= {
    { "Init", _wrap_CGBVCylinder_Init},
    { "oGetCenter", _wrap_CGBVCylinder_oGetCenter},
    { "fGetRadius", _wrap_CGBVCylinder_fGetRadius},
    { "fGetHeight", _wrap_CGBVCylinder_fGetHeight},
    { "fGetVolume", _wrap_CGBVCylinder_fGetVolume},
    {0,0}
};
static swig_lua_method swig_CGBVCylinder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBVCylinder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBVCylinder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBVCylinder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBVCylinder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBVCylinder_Sf_SwigStatic = {
    "CGBVCylinder",
    swig_CGBVCylinder_Sf_SwigStatic_methods,
    swig_CGBVCylinder_Sf_SwigStatic_attributes,
    swig_CGBVCylinder_Sf_SwigStatic_constants,
    swig_CGBVCylinder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBVCylinder_bases[] = {0,0};
static const char *swig_CGBVCylinder_base_names[] = {"CGBoundingVolume *",0};
static swig_lua_class _wrap_class_CGBVCylinder = { "CGBVCylinder", "CGBVCylinder", &SWIGTYPE_p_CGBVCylinder,_proxy__wrap_new_CGBVCylinder, swig_delete_CGBVCylinder, swig_CGBVCylinder_methods, swig_CGBVCylinder_attributes, &swig_CGBVCylinder_Sf_SwigStatic, swig_CGBVCylinder_meta, swig_CGBVCylinder_bases, swig_CGBVCylinder_base_names };

static int _wrap_CGMatrix4x4_LoadIdentity(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::LoadIdentity",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::LoadIdentity",1,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_LoadIdentity",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->LoadIdentity();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_LoadFromAxes(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::LoadFromAxes",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::LoadFromAxes",1,"CGMatrix4x4 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::LoadFromAxes",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGMatrix4x4::LoadFromAxes",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGMatrix4x4::LoadFromAxes",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_LoadFromAxes",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_LoadFromAxes",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_LoadFromAxes",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_LoadFromAxes",4,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->LoadFromAxes((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Translate__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::Translate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Translate",1,"CGMatrix4x4 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::Translate",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Translate",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_Translate",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Translate((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Translate__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGMatrix4x4::Translate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Translate",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::Translate",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::Translate",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::Translate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Translate",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Translate(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Translate__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    char arg3 ;
    
    SWIG_check_num_args("CGMatrix4x4::Translate",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Translate",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::Translate",2,"float");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CGMatrix4x4::Translate",3,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Translate",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (lua_tostring(L, 3))[0];
    (arg1)->Translate(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGMatrix4x4_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_CGMatrix4x4_Translate__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGMatrix4x4_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::Translate(CGVect3 const &)\n"
    "    CGMatrix4x4::Translate(float,float,float)\n"
    "    CGMatrix4x4::Translate(float,char)\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_Scale__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::Scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Scale",1,"CGMatrix4x4 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::Scale",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Scale",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_Scale",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Scale((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Scale__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGMatrix4x4::Scale",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Scale",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::Scale",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::Scale",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::Scale",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Scale",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Scale(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Scale__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    char arg3 ;
    
    SWIG_check_num_args("CGMatrix4x4::Scale",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Scale",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::Scale",2,"float");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CGMatrix4x4::Scale",3,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Scale",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (lua_tostring(L, 3))[0];
    (arg1)->Scale(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGMatrix4x4_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_CGMatrix4x4_Scale__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGMatrix4x4_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::Scale(CGVect3 const &)\n"
    "    CGMatrix4x4::Scale(float,float,float)\n"
    "    CGMatrix4x4::Scale(float,char)\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_Rotate__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGMatrix4x4::Rotate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Rotate",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::Rotate",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::Rotate",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::Rotate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Rotate",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Rotate(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Rotate__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    char arg3 ;
    
    SWIG_check_num_args("CGMatrix4x4::Rotate",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Rotate",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::Rotate",2,"float");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CGMatrix4x4::Rotate",3,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Rotate",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (lua_tostring(L, 3))[0];
    (arg1)->Rotate(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Rotate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_CGMatrix4x4_Rotate__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGMatrix4x4_Rotate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::Rotate(float,float,float)\n"
    "    CGMatrix4x4::Rotate(float,char)\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_RotateFromArbitraryAxis__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGMatrix4x4::RotateFromArbitraryAxis",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_RotateFromArbitraryAxis",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->RotateFromArbitraryAxis(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_RotateFromArbitraryAxis__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::RotateFromArbitraryAxis",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGMatrix4x4::RotateFromArbitraryAxis",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_RotateFromArbitraryAxis",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_RotateFromArbitraryAxis",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->RotateFromArbitraryAxis(arg2,(CGVect3 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_RotateFromArbitraryAxis(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGMatrix4x4_RotateFromArbitraryAxis__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGMatrix4x4_RotateFromArbitraryAxis__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_RotateFromArbitraryAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::RotateFromArbitraryAxis(float,float,float,float)\n"
    "    CGMatrix4x4::RotateFromArbitraryAxis(float,CGVect3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_Multiply(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    CGMatrix4x4 *arg3 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::Multiply",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Multiply",1,"CGMatrix4x4 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::Multiply",2,"CGMatrix4x4 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGMatrix4x4::Multiply",3,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Multiply",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Multiply",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Multiply",3,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Multiply((CGMatrix4x4 const &)*arg2,(CGMatrix4x4 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_MultiplyBy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::MultiplyBy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::MultiplyBy",1,"CGMatrix4x4 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::MultiplyBy",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_MultiplyBy",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_MultiplyBy",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->MultiplyBy((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_TransformPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::TransformPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::TransformPoint",1,"CGMatrix4x4 const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMatrix4x4::TransformPoint",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_TransformPoint",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_TransformPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    ((CGMatrix4x4 const *)arg1)->TransformPoint(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_oTransformPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::oTransformPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::oTransformPoint",1,"CGMatrix4x4 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::oTransformPoint",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_oTransformPoint",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_oTransformPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (CGVect3 *) &((CGMatrix4x4 const *)arg1)->oTransformPoint((CGVect3 const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_TransformVector__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::TransformVector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::TransformVector",1,"CGMatrix4x4 const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMatrix4x4::TransformVector",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_TransformVector",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_TransformVector",2,SWIGTYPE_p_CGVect3);
    }
    
    ((CGMatrix4x4 const *)arg1)->TransformVector(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_oTransformVector__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::oTransformVector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::oTransformVector",1,"CGMatrix4x4 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::oTransformVector",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_oTransformVector",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_oTransformVector",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (CGVect3 *) &((CGMatrix4x4 const *)arg1)->oTransformVector((CGVect3 const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_TransformVector__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::TransformVector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::TransformVector",1,"CGMatrix4x4 const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMatrix4x4::TransformVector",2,"CGVect4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_TransformVector",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect4,0))){
      SWIG_fail_ptr("CGMatrix4x4_TransformVector",2,SWIGTYPE_p_CGVect4);
    }
    
    ((CGMatrix4x4 const *)arg1)->TransformVector(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_TransformVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGMatrix4x4_TransformVector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGMatrix4x4_TransformVector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_TransformVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::TransformVector(CGVect3 *) const\n"
    "    CGMatrix4x4::TransformVector(CGVect4 *) const\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_oTransformVector__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGVect4 *arg2 = 0 ;
    CGVect4 *result = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::oTransformVector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::oTransformVector",1,"CGMatrix4x4 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::oTransformVector",2,"CGVect4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_oTransformVector",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect4,0))){
      SWIG_fail_ptr("CGMatrix4x4_oTransformVector",2,SWIGTYPE_p_CGVect4);
    }
    
    result = (CGVect4 *) &((CGMatrix4x4 const *)arg1)->oTransformVector((CGVect4 const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_oTransformVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGMatrix4x4_oTransformVector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGMatrix4x4_oTransformVector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_oTransformVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::oTransformVector(CGVect3 const &) const\n"
    "    CGMatrix4x4::oTransformVector(CGVect4 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_oGetRow(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    CGVect4 *result = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::oGetRow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::oGetRow",1,"CGMatrix4x4 const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::oGetRow",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_oGetRow",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGVect4 *) &((CGMatrix4x4 const *)arg1)->oGetRow(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_oGetCol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    CGVect4 *result = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::oGetCol",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::oGetCol",1,"CGMatrix4x4 const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::oGetCol",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_oGetCol",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGVect4 *) &((CGMatrix4x4 const *)arg1)->oGetCol(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetRow__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    CGVect4 *arg3 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetRow",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetRow",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetRow",2,"uint");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGMatrix4x4::SetRow",3,"CGVect4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetRow",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetRow",3,SWIGTYPE_p_CGVect4);
    }
    
    (arg1)->SetRow(arg2,(CGVect4 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetCol__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    CGVect4 *arg3 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetCol",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetCol",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetCol",2,"uint");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGMatrix4x4::SetCol",3,"CGVect4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetCol",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetCol",3,SWIGTYPE_p_CGVect4);
    }
    
    (arg1)->SetCol(arg2,(CGVect4 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetRow__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetRow",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetRow",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetRow",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::SetRow",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::SetRow",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGMatrix4x4::SetRow",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CGMatrix4x4::SetRow",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetRow",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6);
    (arg1)->SetRow(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetCol__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetCol",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetCol",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetCol",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::SetCol",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::SetCol",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGMatrix4x4::SetCol",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CGMatrix4x4::SetCol",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetCol",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6);
    (arg1)->SetCol(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetRow__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetRow",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetRow",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetRow",2,"uint");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGMatrix4x4::SetRow",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetRow",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetRow",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetRow(arg2,(CGVect3 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetCol__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetCol",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetCol",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetCol",2,"uint");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGMatrix4x4::SetCol",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetCol",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetCol",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetCol(arg2,(CGVect3 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetRow__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetRow",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetRow",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetRow",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::SetRow",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::SetRow",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGMatrix4x4::SetRow",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetRow",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetRow(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetRow(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect4, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGMatrix4x4_SetRow__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGMatrix4x4_SetRow__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGMatrix4x4_SetRow__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_CGMatrix4x4_SetRow__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_SetRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::SetRow(uint,CGVect4 const &)\n"
    "    CGMatrix4x4::SetRow(uint,float,float,float,float)\n"
    "    CGMatrix4x4::SetRow(uint,CGVect3 const &)\n"
    "    CGMatrix4x4::SetRow(uint,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_SetCol__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGMatrix4x4::SetCol",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::SetCol",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::SetCol",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::SetCol",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::SetCol",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGMatrix4x4::SetCol",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_SetCol",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetCol(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_SetCol(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect4, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGMatrix4x4_SetCol__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGMatrix4x4_SetCol__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGMatrix4x4_SetCol__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_CGMatrix4x4_SetCol__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGMatrix4x4_SetCol'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMatrix4x4::SetCol(uint,CGVect4 const &)\n"
    "    CGMatrix4x4::SetCol(uint,float,float,float,float)\n"
    "    CGMatrix4x4::SetCol(uint,CGVect3 const &)\n"
    "    CGMatrix4x4::SetCol(uint,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGMatrix4x4_Transpose(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::Transpose",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Transpose",1,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Transpose",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transpose();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Inverse(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::Inverse",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Inverse",1,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Inverse",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Inverse();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_RTInverse(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::RTInverse",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::RTInverse",1,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_RTInverse",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->RTInverse();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Complementary(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::Complementary",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Complementary",1,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Complementary",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Complementary();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_fDeterminant(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGMatrix4x4::fDeterminant",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::fDeterminant",1,"CGMatrix4x4 const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_fDeterminant",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    result = (float)((CGMatrix4x4 const *)arg1)->fDeterminant();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_f3ColDeterminant(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    uint arg4 ;
    float result;
    
    SWIG_check_num_args("CGMatrix4x4::f3ColDeterminant",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::f3ColDeterminant",1,"CGMatrix4x4 const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::f3ColDeterminant",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::f3ColDeterminant",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::f3ColDeterminant",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_f3ColDeterminant",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (float)((CGMatrix4x4 const *)arg1)->f3ColDeterminant(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGMatrix4x4::Set",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::Set",1,"CGMatrix4x4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::Set",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::Set",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMatrix4x4::Set",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_Set",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Set(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_fGet(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    float result;
    
    SWIG_check_num_args("CGMatrix4x4::fGet",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::fGet",1,"CGMatrix4x4 const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMatrix4x4::fGet",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMatrix4x4::fGet",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_fGet",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = (float)((CGMatrix4x4 const *)arg1)->fGet(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4_pfGetData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::pfGetData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::pfGetData",1,"CGMatrix4x4 const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4_pfGetData",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    result = (float *)((CGMatrix4x4 const *)arg1)->pfGetData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMatrix4x4___mul(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    CGMatrix4x4 result;
    
    SWIG_check_num_args("CGMatrix4x4::operator *",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMatrix4x4::operator *",1,"CGMatrix4x4 const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMatrix4x4::operator *",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4___mul",1,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGMatrix4x4___mul",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    result = ((CGMatrix4x4 const *)arg1)->operator *((CGMatrix4x4 const &)*arg2);
    {
      CGMatrix4x4 * resultptr = new CGMatrix4x4(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGMatrix4x4,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGMatrix4x4(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGMatrix4x4::CGMatrix4x4",0,0)
    result = (CGMatrix4x4 *)new CGMatrix4x4();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGMatrix4x4(void *obj) {
CGMatrix4x4 *arg1 = (CGMatrix4x4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMatrix4x4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMatrix4x4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMatrix4x4_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGMatrix4x4_methods[]= {
    { "LoadIdentity", _wrap_CGMatrix4x4_LoadIdentity},
    { "LoadFromAxes", _wrap_CGMatrix4x4_LoadFromAxes},
    { "Translate", _wrap_CGMatrix4x4_Translate},
    { "Scale", _wrap_CGMatrix4x4_Scale},
    { "Rotate", _wrap_CGMatrix4x4_Rotate},
    { "RotateFromArbitraryAxis", _wrap_CGMatrix4x4_RotateFromArbitraryAxis},
    { "Multiply", _wrap_CGMatrix4x4_Multiply},
    { "MultiplyBy", _wrap_CGMatrix4x4_MultiplyBy},
    { "TransformPoint", _wrap_CGMatrix4x4_TransformPoint},
    { "oTransformPoint", _wrap_CGMatrix4x4_oTransformPoint},
    { "TransformVector", _wrap_CGMatrix4x4_TransformVector},
    { "oTransformVector", _wrap_CGMatrix4x4_oTransformVector},
    { "oGetRow", _wrap_CGMatrix4x4_oGetRow},
    { "oGetCol", _wrap_CGMatrix4x4_oGetCol},
    { "SetRow", _wrap_CGMatrix4x4_SetRow},
    { "SetCol", _wrap_CGMatrix4x4_SetCol},
    { "Transpose", _wrap_CGMatrix4x4_Transpose},
    { "Inverse", _wrap_CGMatrix4x4_Inverse},
    { "RTInverse", _wrap_CGMatrix4x4_RTInverse},
    { "Complementary", _wrap_CGMatrix4x4_Complementary},
    { "fDeterminant", _wrap_CGMatrix4x4_fDeterminant},
    { "f3ColDeterminant", _wrap_CGMatrix4x4_f3ColDeterminant},
    { "Set", _wrap_CGMatrix4x4_Set},
    { "fGet", _wrap_CGMatrix4x4_fGet},
    { "pfGetData", _wrap_CGMatrix4x4_pfGetData},
    { "__mul", _wrap_CGMatrix4x4___mul},
    {0,0}
};
static swig_lua_method swig_CGMatrix4x4_meta[] = {
    { "__mul", _wrap_CGMatrix4x4___mul},
    {0,0}
};

static swig_lua_attribute swig_CGMatrix4x4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMatrix4x4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMatrix4x4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMatrix4x4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMatrix4x4_Sf_SwigStatic = {
    "CGMatrix4x4",
    swig_CGMatrix4x4_Sf_SwigStatic_methods,
    swig_CGMatrix4x4_Sf_SwigStatic_attributes,
    swig_CGMatrix4x4_Sf_SwigStatic_constants,
    swig_CGMatrix4x4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMatrix4x4_bases[] = {0};
static const char *swig_CGMatrix4x4_base_names[] = {0};
static swig_lua_class _wrap_class_CGMatrix4x4 = { "CGMatrix4x4", "CGMatrix4x4", &SWIGTYPE_p_CGMatrix4x4,_proxy__wrap_new_CGMatrix4x4, swig_delete_CGMatrix4x4, swig_CGMatrix4x4_methods, swig_CGMatrix4x4_attributes, &swig_CGMatrix4x4_Sf_SwigStatic, swig_CGMatrix4x4_meta, swig_CGMatrix4x4_bases, swig_CGMatrix4x4_base_names };

static int _wrap_CGPlane_SetNormal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGPlane::SetNormal",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::SetNormal",1,"CGPlane *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::SetNormal",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_SetNormal",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_SetNormal",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetNormal((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_SetD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPlane::SetD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::SetD",1,"CGPlane *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPlane::SetD",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_SetD",1,SWIGTYPE_p_CGPlane);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetD(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_SetOrigin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGPlane::SetOrigin",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::SetOrigin",1,"CGPlane *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::SetOrigin",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_SetOrigin",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_SetOrigin",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetOrigin((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_GenerateFromVectors(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 arg2 ;
    CGVect3 arg3 ;
    CGVect3 arg4 ;
    CGVect3 *argp2 ;
    CGVect3 *argp3 ;
    CGVect3 *argp4 ;
    
    SWIG_check_num_args("CGPlane::GenerateFromVectors",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::GenerateFromVectors",1,"CGPlane *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::GenerateFromVectors",2,"CGVect3 const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGPlane::GenerateFromVectors",3,"CGVect3 const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGPlane::GenerateFromVectors",4,"CGVect3 const");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromVectors",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromVectors",2,SWIGTYPE_p_CGVect3);
    }
    arg2 = *argp2;
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromVectors",3,SWIGTYPE_p_CGVect3);
    }
    arg3 = *argp3;
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromVectors",4,SWIGTYPE_p_CGVect3);
    }
    arg4 = *argp4;
    
    (arg1)->GenerateFromVectors(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_GenerateFromPoints(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    
    SWIG_check_num_args("CGPlane::GenerateFromPoints",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::GenerateFromPoints",1,"CGPlane *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::GenerateFromPoints",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGPlane::GenerateFromPoints",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGPlane::GenerateFromPoints",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromPoints",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromPoints",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromPoints",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GenerateFromPoints",4,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->GenerateFromPoints((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_GeneratePlaneFromFields(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGPlane::GeneratePlaneFromFields",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::GeneratePlaneFromFields",1,"CGPlane *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::GeneratePlaneFromFields",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGPlane::GeneratePlaneFromFields",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_GeneratePlaneFromFields",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GeneratePlaneFromFields",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_GeneratePlaneFromFields",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->GeneratePlaneFromFields((CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_fGetDistanceToPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPlane::fGetDistanceToPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::fGetDistanceToPoint",1,"CGPlane const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::fGetDistanceToPoint",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_fGetDistanceToPoint",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_fGetDistanceToPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)((CGPlane const *)arg1)->fGetDistanceToPoint((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_bCoplanar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGPlane::bCoplanar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::bCoplanar",1,"CGPlane const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::bCoplanar",2,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_bCoplanar",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_bCoplanar",2,SWIGTYPE_p_CGPlane);
    }
    
    result = (bool)((CGPlane const *)arg1)->bCoplanar((CGPlane const &)*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_oGetNormal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGPlane::oGetNormal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::oGetNormal",1,"CGPlane const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_oGetNormal",1,SWIGTYPE_p_CGPlane);
    }
    
    result = (CGVect3 *) &((CGPlane const *)arg1)->oGetNormal();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_oGetOrigin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGPlane::oGetOrigin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::oGetOrigin",1,"CGPlane const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_oGetOrigin",1,SWIGTYPE_p_CGPlane);
    }
    
    result = (CGVect3 *) &((CGPlane const *)arg1)->oGetOrigin();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_fGetD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPlane::fGetD",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::fGetD",1,"CGPlane const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_fGetD",1,SWIGTYPE_p_CGPlane);
    }
    
    result = (float)((CGPlane const *)arg1)->fGetD();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_Transform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGPlane::Transform",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::Transform",1,"CGPlane *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::Transform",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_Transform",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGPlane_Transform",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_oProjectPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 result;
    
    SWIG_check_num_args("CGPlane::oProjectPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::oProjectPoint",1,"CGPlane const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPlane::oProjectPoint",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_oProjectPoint",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPlane_oProjectPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = ((CGPlane const *)arg1)->oProjectPoint((CGVect3 const &)*arg2);
    {
      CGVect3 * resultptr = new CGVect3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGVect3,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPlane_uiPlaneType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGPlane::uiPlaneType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPlane::uiPlaneType",1,"CGPlane const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGPlane_uiPlaneType",1,SWIGTYPE_p_CGPlane);
    }
    
    result = (uint)((CGPlane const *)arg1)->uiPlaneType();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *result = 0 ;
    
    SWIG_check_num_args("CGPlane::CGPlane",0,0)
    result = (CGPlane *)new CGPlane();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPlane,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPlane(void *obj) {
CGPlane *arg1 = (CGPlane *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPlane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPlane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPlane_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPlane_methods[]= {
    { "SetNormal", _wrap_CGPlane_SetNormal},
    { "SetD", _wrap_CGPlane_SetD},
    { "SetOrigin", _wrap_CGPlane_SetOrigin},
    { "GenerateFromVectors", _wrap_CGPlane_GenerateFromVectors},
    { "GenerateFromPoints", _wrap_CGPlane_GenerateFromPoints},
    { "GeneratePlaneFromFields", _wrap_CGPlane_GeneratePlaneFromFields},
    { "fGetDistanceToPoint", _wrap_CGPlane_fGetDistanceToPoint},
    { "bCoplanar", _wrap_CGPlane_bCoplanar},
    { "oGetNormal", _wrap_CGPlane_oGetNormal},
    { "oGetOrigin", _wrap_CGPlane_oGetOrigin},
    { "fGetD", _wrap_CGPlane_fGetD},
    { "Transform", _wrap_CGPlane_Transform},
    { "oProjectPoint", _wrap_CGPlane_oProjectPoint},
    { "uiPlaneType", _wrap_CGPlane_uiPlaneType},
    {0,0}
};
static swig_lua_method swig_CGPlane_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPlane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPlane_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPlane_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPlane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPlane_Sf_SwigStatic = {
    "CGPlane",
    swig_CGPlane_Sf_SwigStatic_methods,
    swig_CGPlane_Sf_SwigStatic_attributes,
    swig_CGPlane_Sf_SwigStatic_constants,
    swig_CGPlane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPlane_bases[] = {0};
static const char *swig_CGPlane_base_names[] = {0};
static swig_lua_class _wrap_class_CGPlane = { "CGPlane", "CGPlane", &SWIGTYPE_p_CGPlane,_proxy__wrap_new_CGPlane, swig_delete_CGPlane, swig_CGPlane_methods, swig_CGPlane_attributes, &swig_CGPlane_Sf_SwigStatic, swig_CGPlane_meta, swig_CGPlane_bases, swig_CGPlane_base_names };

static int _wrap_new_CGBVFrustum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVFrustum *result = 0 ;
    
    SWIG_check_num_args("CGBVFrustum::CGBVFrustum",0,0)
    result = (CGBVFrustum *)new CGBVFrustum();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVFrustum,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVFrustum_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVFrustum *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    
    SWIG_check_num_args("CGBVFrustum::Init",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVFrustum::Init",1,"CGBVFrustum *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGBVFrustum::Init",2,"CGMatrix4x4 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGBVFrustum::Init",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGBVFrustum::Init",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGBVFrustum::Init",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CGBVFrustum::Init",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGBVFrustum_Init",1,SWIGTYPE_p_CGBVFrustum);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGBVFrustum_Init",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6);
    (arg1)->Init((CGMatrix4x4 const &)*arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVFrustum_oGetPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVFrustum *arg1 = 0 ;
    uint arg2 ;
    CGPlane *result = 0 ;
    
    SWIG_check_num_args("CGBVFrustum::oGetPlane",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVFrustum::oGetPlane",1,"CGBVFrustum const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGBVFrustum::oGetPlane",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGBVFrustum_oGetPlane",1,SWIGTYPE_p_CGBVFrustum);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGPlane *) &((CGBVFrustum const *)arg1)->oGetPlane(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPlane,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBVFrustum_fGetVolume(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBVFrustum *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGBVFrustum::fGetVolume",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBVFrustum::fGetVolume",1,"CGBVFrustum const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGBVFrustum_fGetVolume",1,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (float)((CGBVFrustum const *)arg1)->fGetVolume();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBVFrustum(void *obj) {
CGBVFrustum *arg1 = (CGBVFrustum *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBVFrustum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBVFrustum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBVFrustum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBVFrustum_methods[]= {
    { "Init", _wrap_CGBVFrustum_Init},
    { "oGetPlane", _wrap_CGBVFrustum_oGetPlane},
    { "fGetVolume", _wrap_CGBVFrustum_fGetVolume},
    {0,0}
};
static swig_lua_method swig_CGBVFrustum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBVFrustum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBVFrustum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBVFrustum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBVFrustum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBVFrustum_Sf_SwigStatic = {
    "CGBVFrustum",
    swig_CGBVFrustum_Sf_SwigStatic_methods,
    swig_CGBVFrustum_Sf_SwigStatic_attributes,
    swig_CGBVFrustum_Sf_SwigStatic_constants,
    swig_CGBVFrustum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBVFrustum_bases[] = {0,0};
static const char *swig_CGBVFrustum_base_names[] = {"CGBoundingVolume *",0};
static swig_lua_class _wrap_class_CGBVFrustum = { "CGBVFrustum", "CGBVFrustum", &SWIGTYPE_p_CGBVFrustum,_proxy__wrap_new_CGBVFrustum, swig_delete_CGBVFrustum, swig_CGBVFrustum_methods, swig_CGBVFrustum_attributes, &swig_CGBVFrustum_Sf_SwigStatic, swig_CGBVFrustum_meta, swig_CGBVFrustum_bases, swig_CGBVFrustum_base_names };

static int _wrap_CGRay_InitFromFields(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGRay::InitFromFields",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::InitFromFields",1,"CGRay *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGRay::InitFromFields",2,"CGVect3 &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGRay::InitFromFields",3,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_InitFromFields",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_InitFromFields",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_InitFromFields",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->InitFromFields(*arg2,*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_InitFromPoints(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGRay::InitFromPoints",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::InitFromPoints",1,"CGRay *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGRay::InitFromPoints",2,"CGVect3 &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGRay::InitFromPoints",3,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_InitFromPoints",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_InitFromPoints",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_InitFromPoints",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->InitFromPoints(*arg2,*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_ProjectPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 result;
    
    SWIG_check_num_args("CGRay::ProjectPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::ProjectPoint",1,"CGRay *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGRay::ProjectPoint",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_ProjectPoint",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_ProjectPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (arg1)->ProjectPoint(*arg2);
    {
      CGVect3 * resultptr = new CGVect3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGVect3,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_GetDistanceToPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CGRay::GetDistanceToPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::GetDistanceToPoint",1,"CGRay *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGRay::GetDistanceToPoint",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_GetDistanceToPoint",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_GetDistanceToPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)(arg1)->GetDistanceToPoint(*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_GetSqDistanceToPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CGRay::GetSqDistanceToPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::GetSqDistanceToPoint",1,"CGRay *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGRay::GetSqDistanceToPoint",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_GetSqDistanceToPoint",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_GetSqDistanceToPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)(arg1)->GetSqDistanceToPoint(*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_GetPerpendicular(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 result;
    
    SWIG_check_num_args("CGRay::GetPerpendicular",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::GetPerpendicular",1,"CGRay *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGRay::GetPerpendicular",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_GetPerpendicular",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_GetPerpendicular",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (arg1)->GetPerpendicular(*arg2);
    {
      CGVect3 * resultptr = new CGVect3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGVect3,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_Origin_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGRay::Origin",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::Origin",1,"CGRay *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGRay::Origin",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_Origin_set",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_Origin_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->Origin = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_Origin_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGRay::Origin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::Origin",1,"CGRay *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_Origin_get",1,SWIGTYPE_p_CGRay);
    }
    
    result = (CGVect3 *)& ((arg1)->Origin);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_Dir_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGRay::Dir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::Dir",1,"CGRay *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGRay::Dir",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_Dir_set",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGRay_Dir_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->Dir = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRay_Dir_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGRay::Dir",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRay::Dir",1,"CGRay *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CGRay_Dir_get",1,SWIGTYPE_p_CGRay);
    }
    
    result = (CGVect3 *)& ((arg1)->Dir);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGRay(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *result = 0 ;
    
    SWIG_check_num_args("CGRay::CGRay",0,0)
    result = (CGRay *)new CGRay();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGRay,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGRay(void *obj) {
CGRay *arg1 = (CGRay *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGRay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGRay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGRay_attributes[] = {
    { "Origin", _wrap_CGRay_Origin_get, _wrap_CGRay_Origin_set },
    { "Dir", _wrap_CGRay_Dir_get, _wrap_CGRay_Dir_set },
    {0,0,0}
};
static swig_lua_method swig_CGRay_methods[]= {
    { "InitFromFields", _wrap_CGRay_InitFromFields},
    { "InitFromPoints", _wrap_CGRay_InitFromPoints},
    { "ProjectPoint", _wrap_CGRay_ProjectPoint},
    { "GetDistanceToPoint", _wrap_CGRay_GetDistanceToPoint},
    { "GetSqDistanceToPoint", _wrap_CGRay_GetSqDistanceToPoint},
    { "GetPerpendicular", _wrap_CGRay_GetPerpendicular},
    {0,0}
};
static swig_lua_method swig_CGRay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGRay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGRay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGRay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGRay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGRay_Sf_SwigStatic = {
    "CGRay",
    swig_CGRay_Sf_SwigStatic_methods,
    swig_CGRay_Sf_SwigStatic_attributes,
    swig_CGRay_Sf_SwigStatic_constants,
    swig_CGRay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGRay_bases[] = {0};
static const char *swig_CGRay_base_names[] = {0};
static swig_lua_class _wrap_class_CGRay = { "CGRay", "CGRay", &SWIGTYPE_p_CGRay,_proxy__wrap_new_CGRay, swig_delete_CGRay, swig_CGRay_methods, swig_CGRay_attributes, &swig_CGRay_Sf_SwigStatic, swig_CGRay_meta, swig_CGRay_bases, swig_CGRay_base_names };

static int _wrap_CGTriangle_Init__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::Init",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::Init",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_Init",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_Init__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGTriangle::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::Init",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::Init",2,"CGVect3 *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGTriangle::Init",3,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_Init",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_Init",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init(arg2,*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_Init(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGTriangle_Init__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGTriangle_Init__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGTriangle_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGTriangle::Init(CGVect3 *)\n"
    "    CGTriangle::Init(CGVect3 *,CGVect3 &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGTriangle_ComputeSegs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    
    SWIG_check_num_args("CGTriangle::ComputeSegs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::ComputeSegs",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_ComputeSegs",1,SWIGTYPE_p_CGTriangle);
    }
    
    (arg1)->ComputeSegs();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_ComputeAxis(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    
    SWIG_check_num_args("CGTriangle::ComputeAxis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::ComputeAxis",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_ComputeAxis",1,SWIGTYPE_p_CGTriangle);
    }
    
    (arg1)->ComputeAxis();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_ComputeAll(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    
    SWIG_check_num_args("CGTriangle::ComputeAll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::ComputeAll",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_ComputeAll",1,SWIGTYPE_p_CGTriangle);
    }
    
    (arg1)->ComputeAll();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_Normal_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::Normal",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::Normal",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::Normal",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_Normal_set",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_Normal_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->Normal = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_Normal_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::Normal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::Normal",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_Normal_get",1,SWIGTYPE_p_CGTriangle);
    }
    
    result = (CGVect3 *)& ((arg1)->Normal);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_VXs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::VXs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::VXs",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::VXs",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_VXs_set",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGTriangle_VXs_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->VXs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_VXs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::VXs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::VXs",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_VXs_get",1,SWIGTYPE_p_CGTriangle);
    }
    
    result = (CGVect3 *) ((arg1)->VXs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_s0_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::s0",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::s0",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::s0",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_s0_set",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_s0_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->s0 = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_s0_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::s0",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::s0",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_s0_get",1,SWIGTYPE_p_CGTriangle);
    }
    
    result = (CGVect3 *)& ((arg1)->s0);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_s1_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::s1",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::s1",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::s1",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_s1_set",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_s1_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->s1 = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_s1_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::s1",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::s1",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_s1_get",1,SWIGTYPE_p_CGTriangle);
    }
    
    result = (CGVect3 *)& ((arg1)->s1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_s2_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::s2",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::s2",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::s2",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_s2_set",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_s2_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->s2 = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_s2_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::s2",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::s2",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_s2_get",1,SWIGTYPE_p_CGTriangle);
    }
    
    result = (CGVect3 *)& ((arg1)->s2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_e1_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::e1",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::e1",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::e1",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_e1_set",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_e1_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->e1 = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_e1_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::e1",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::e1",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_e1_get",1,SWIGTYPE_p_CGTriangle);
    }
    
    result = (CGVect3 *)& ((arg1)->e1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_e2_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTriangle::e2",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::e2",1,"CGTriangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTriangle::e2",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_e2_set",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTriangle_e2_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->e2 = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTriangle_e2_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::e2",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTriangle::e2",1,"CGTriangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CGTriangle_e2_get",1,SWIGTYPE_p_CGTriangle);
    }
    
    result = (CGVect3 *)& ((arg1)->e2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGTriangle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *result = 0 ;
    
    SWIG_check_num_args("CGTriangle::CGTriangle",0,0)
    result = (CGTriangle *)new CGTriangle();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTriangle,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTriangle(void *obj) {
CGTriangle *arg1 = (CGTriangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTriangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTriangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTriangle_attributes[] = {
    { "Normal", _wrap_CGTriangle_Normal_get, _wrap_CGTriangle_Normal_set },
    { "VXs", _wrap_CGTriangle_VXs_get, _wrap_CGTriangle_VXs_set },
    { "s0", _wrap_CGTriangle_s0_get, _wrap_CGTriangle_s0_set },
    { "s1", _wrap_CGTriangle_s1_get, _wrap_CGTriangle_s1_set },
    { "s2", _wrap_CGTriangle_s2_get, _wrap_CGTriangle_s2_set },
    { "e1", _wrap_CGTriangle_e1_get, _wrap_CGTriangle_e1_set },
    { "e2", _wrap_CGTriangle_e2_get, _wrap_CGTriangle_e2_set },
    {0,0,0}
};
static swig_lua_method swig_CGTriangle_methods[]= {
    { "Init", _wrap_CGTriangle_Init},
    { "ComputeSegs", _wrap_CGTriangle_ComputeSegs},
    { "ComputeAxis", _wrap_CGTriangle_ComputeAxis},
    { "ComputeAll", _wrap_CGTriangle_ComputeAll},
    {0,0}
};
static swig_lua_method swig_CGTriangle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTriangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTriangle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTriangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTriangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTriangle_Sf_SwigStatic = {
    "CGTriangle",
    swig_CGTriangle_Sf_SwigStatic_methods,
    swig_CGTriangle_Sf_SwigStatic_attributes,
    swig_CGTriangle_Sf_SwigStatic_constants,
    swig_CGTriangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTriangle_bases[] = {0};
static const char *swig_CGTriangle_base_names[] = {0};
static swig_lua_class _wrap_class_CGTriangle = { "CGTriangle", "CGTriangle", &SWIGTYPE_p_CGTriangle,_proxy__wrap_new_CGTriangle, swig_delete_CGTriangle, swig_CGTriangle_methods, swig_CGTriangle_attributes, &swig_CGTriangle_Sf_SwigStatic, swig_CGTriangle_meta, swig_CGTriangle_bases, swig_CGTriangle_base_names };

static int _wrap_CGQuaternion_Slerp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGQuaternion *arg1 = 0 ;
    CGQuaternion *arg2 = 0 ;
    CGQuaternion *arg3 = 0 ;
    float arg4 ;
    
    SWIG_check_num_args("CGQuaternion::Slerp",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGQuaternion::Slerp",1,"CGQuaternion *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGQuaternion::Slerp",2,"CGQuaternion &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGQuaternion::Slerp",3,"CGQuaternion &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGQuaternion::Slerp",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGQuaternion,0))){
      SWIG_fail_ptr("CGQuaternion_Slerp",1,SWIGTYPE_p_CGQuaternion);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGQuaternion,0))){
      SWIG_fail_ptr("CGQuaternion_Slerp",2,SWIGTYPE_p_CGQuaternion);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGQuaternion,0))){
      SWIG_fail_ptr("CGQuaternion_Slerp",3,SWIGTYPE_p_CGQuaternion);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Slerp(*arg2,*arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGQuaternion_ToMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGQuaternion *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGQuaternion::ToMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGQuaternion::ToMatrix",1,"CGQuaternion *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGQuaternion,0))){
      SWIG_fail_ptr("CGQuaternion_ToMatrix",1,SWIGTYPE_p_CGQuaternion);
    }
    
    result = (CGMatrix4x4 *) &(arg1)->ToMatrix();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGQuaternion_FromMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGQuaternion *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGQuaternion::FromMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGQuaternion::FromMatrix",1,"CGQuaternion *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGQuaternion::FromMatrix",2,"CGMatrix4x4 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGQuaternion,0))){
      SWIG_fail_ptr("CGQuaternion_FromMatrix",1,SWIGTYPE_p_CGQuaternion);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGQuaternion_FromMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->FromMatrix(*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGQuaternion_FromVector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGQuaternion *arg1 = 0 ;
    CGVect4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGQuaternion::FromVector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGQuaternion::FromVector",1,"CGQuaternion *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGQuaternion::FromVector",2,"CGVect4 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGQuaternion,0))){
      SWIG_fail_ptr("CGQuaternion_FromVector",1,SWIGTYPE_p_CGQuaternion);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect4,0))){
      SWIG_fail_ptr("CGQuaternion_FromVector",2,SWIGTYPE_p_CGVect4);
    }
    
    (arg1)->FromVector(*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGQuaternion_FromComponents(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGQuaternion *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGQuaternion::FromComponents",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGQuaternion::FromComponents",1,"CGQuaternion *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGQuaternion::FromComponents",2,"CGVect3 &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGQuaternion::FromComponents",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGQuaternion,0))){
      SWIG_fail_ptr("CGQuaternion_FromComponents",1,SWIGTYPE_p_CGQuaternion);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGQuaternion_FromComponents",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->FromComponents(*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGQuaternion(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGQuaternion *result = 0 ;
    
    SWIG_check_num_args("CGQuaternion::CGQuaternion",0,0)
    result = (CGQuaternion *)new CGQuaternion();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGQuaternion,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGQuaternion(void *obj) {
CGQuaternion *arg1 = (CGQuaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGQuaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGQuaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGQuaternion_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGQuaternion_methods[]= {
    { "Slerp", _wrap_CGQuaternion_Slerp},
    { "ToMatrix", _wrap_CGQuaternion_ToMatrix},
    { "FromMatrix", _wrap_CGQuaternion_FromMatrix},
    { "FromVector", _wrap_CGQuaternion_FromVector},
    { "FromComponents", _wrap_CGQuaternion_FromComponents},
    {0,0}
};
static swig_lua_method swig_CGQuaternion_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGQuaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGQuaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGQuaternion_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGQuaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGQuaternion_Sf_SwigStatic = {
    "CGQuaternion",
    swig_CGQuaternion_Sf_SwigStatic_methods,
    swig_CGQuaternion_Sf_SwigStatic_attributes,
    swig_CGQuaternion_Sf_SwigStatic_constants,
    swig_CGQuaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGQuaternion_bases[] = {0};
static const char *swig_CGQuaternion_base_names[] = {0};
static swig_lua_class _wrap_class_CGQuaternion = { "CGQuaternion", "CGQuaternion", &SWIGTYPE_p_CGQuaternion,_proxy__wrap_new_CGQuaternion, swig_delete_CGQuaternion, swig_CGQuaternion_methods, swig_CGQuaternion_attributes, &swig_CGQuaternion_Sf_SwigStatic, swig_CGQuaternion_meta, swig_CGQuaternion_bases, swig_CGQuaternion_base_names };

static int _wrap_CGSegment_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSegment *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGSegment::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSegment::Init",1,"CGSegment *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSegment::Init",2,"CGVect3 &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGSegment::Init",3,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSegment,0))){
      SWIG_fail_ptr("CGSegment_Init",1,SWIGTYPE_p_CGSegment);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSegment_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSegment_Init",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init(*arg2,*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSegment_ProjectPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSegment *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 result;
    
    SWIG_check_num_args("CGSegment::ProjectPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSegment::ProjectPoint",1,"CGSegment *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSegment::ProjectPoint",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSegment,0))){
      SWIG_fail_ptr("CGSegment_ProjectPoint",1,SWIGTYPE_p_CGSegment);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSegment_ProjectPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (arg1)->ProjectPoint(*arg2);
    {
      CGVect3 * resultptr = new CGVect3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGVect3,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSegment(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSegment *result = 0 ;
    
    SWIG_check_num_args("CGSegment::CGSegment",0,0)
    result = (CGSegment *)new CGSegment();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSegment,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSegment(void *obj) {
CGSegment *arg1 = (CGSegment *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSegment(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSegment);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSegment_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSegment_methods[]= {
    { "Init", _wrap_CGSegment_Init},
    { "ProjectPoint", _wrap_CGSegment_ProjectPoint},
    {0,0}
};
static swig_lua_method swig_CGSegment_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSegment_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSegment_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSegment_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSegment_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSegment_Sf_SwigStatic = {
    "CGSegment",
    swig_CGSegment_Sf_SwigStatic_methods,
    swig_CGSegment_Sf_SwigStatic_attributes,
    swig_CGSegment_Sf_SwigStatic_constants,
    swig_CGSegment_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSegment_bases[] = {0};
static const char *swig_CGSegment_base_names[] = {0};
static swig_lua_class _wrap_class_CGSegment = { "CGSegment", "CGSegment", &SWIGTYPE_p_CGSegment,_proxy__wrap_new_CGSegment, swig_delete_CGSegment, swig_CGSegment_methods, swig_CGSegment_attributes, &swig_CGSegment_Sf_SwigStatic, swig_CGSegment_meta, swig_CGSegment_bases, swig_CGSegment_base_names };

static int _wrap_GetPNVertexs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGPlane *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    CGVect3 *arg5 = 0 ;
    
    SWIG_check_num_args("Math::GetPNVertexs",5,5)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::GetPNVertexs",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::GetPNVertexs",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::GetPNVertexs",3,"CGPlane const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("Math::GetPNVertexs",4,"CGVect3 &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("Math::GetPNVertexs",5,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("GetPNVertexs",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("GetPNVertexs",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("GetPNVertexs",3,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("GetPNVertexs",4,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("GetPNVertexs",5,SWIGTYPE_p_CGVect3);
    }
    
    Math::GetPNVertexs((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGPlane const &)*arg3,*arg4,*arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestBoxPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGPlane *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestBoxPlane",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestBoxPlane",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTestBoxPlane",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::iTestBoxPlane",3,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestBoxPlane",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestBoxPlane",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTestBoxPlane",3,SWIGTYPE_p_CGPlane);
    }
    
    result = (int)Math::iTestBoxPlane((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGPlane const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestSpherePlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGPlane *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestSpherePlane",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestSpherePlane",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::iTestSpherePlane",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::iTestSpherePlane",3,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestSpherePlane",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTestSpherePlane",3,SWIGTYPE_p_CGPlane);
    }
    
    result = (int)Math::iTestSpherePlane((CGVect3 const &)*arg1,arg2,(CGPlane const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestPointPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestPointPlane",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestPointPlane",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTestPointPlane",2,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestPointPlane",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTestPointPlane",2,SWIGTYPE_p_CGPlane);
    }
    
    result = (int)Math::iTestPointPlane((CGVect3 const &)*arg1,(CGPlane const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fTriPointDistance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("Math::fTriPointDistance",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::fTriPointDistance",1,"CGTriangle const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::fTriPointDistance",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("fTriPointDistance",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("fTriPointDistance",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)Math::fTriPointDistance((CGTriangle const &)*arg1,(CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_fTriPointSqDistance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("Math::fTriPointSqDistance",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::fTriPointSqDistance",1,"CGTriangle const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::fTriPointSqDistance",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("fTriPointSqDistance",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("fTriPointSqDistance",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)Math::fTriPointSqDistance((CGTriangle const &)*arg1,(CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_oNearestTriPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    CGVect3 result;
    
    SWIG_check_num_args("Math::oNearestTriPoint",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::oNearestTriPoint",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::oNearestTriPoint",2,"CGTriangle const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("oNearestTriPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("oNearestTriPoint",2,SWIGTYPE_p_CGTriangle);
    }
    
    result = Math::oNearestTriPoint((CGVect3 const &)*arg1,(CGTriangle const &)*arg2);
    {
      CGVect3 * resultptr = new CGVect3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGVect3,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GetMaxMins(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float *arg4 = 0 ;
    float *arg5 = 0 ;
    
    SWIG_check_num_args("Math::GetMaxMins",5,5)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("Math::GetMaxMins",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("Math::GetMaxMins",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("Math::GetMaxMins",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("Math::GetMaxMins",4,"float &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("Math::GetMaxMins",5,"float &");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("GetMaxMins",4,SWIGTYPE_p_float);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("GetMaxMins",5,SWIGTYPE_p_float);
    }
    
    Math::GetMaxMins(arg1,arg2,arg3,*arg4,*arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestRayTriIntersection__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestRayTriIntersection",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestRayTriIntersection",1,"CGRay const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTestRayTriIntersection",2,"CGTriangle const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("iTestRayTriIntersection",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("iTestRayTriIntersection",2,SWIGTYPE_p_CGTriangle);
    }
    
    result = (int)Math::iTestRayTriIntersection((CGRay const &)*arg1,(CGTriangle const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestRayTriIntersection__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestRayTriIntersection",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestRayTriIntersection",1,"CGRay const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTestRayTriIntersection",2,"CGTriangle const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Math::iTestRayTriIntersection",3,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("iTestRayTriIntersection",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("iTestRayTriIntersection",2,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestRayTriIntersection",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)Math::iTestRayTriIntersection((CGRay const &)*arg1,(CGTriangle const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestRayTriIntersection(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGRay, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGTriangle, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_iTestRayTriIntersection__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGRay, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGTriangle, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_iTestRayTriIntersection__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'iTestRayTriIntersection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Math::iTestRayTriIntersection(CGRay const &,CGTriangle const &)\n"
    "    Math::iTestRayTriIntersection(CGRay const &,CGTriangle const &,CGVect3 *)\n");
  lua_error(L);return 0;
}


static int _wrap_iTestSegTriIntersection__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestSegTriIntersection",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestSegTriIntersection",1,"CGRay const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTestSegTriIntersection",2,"CGTriangle const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("iTestSegTriIntersection",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("iTestSegTriIntersection",2,SWIGTYPE_p_CGTriangle);
    }
    
    result = (int)Math::iTestSegTriIntersection((CGRay const &)*arg1,(CGTriangle const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestSegTriIntersection__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestSegTriIntersection",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestSegTriIntersection",1,"CGRay const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTestSegTriIntersection",2,"CGTriangle const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Math::iTestSegTriIntersection",3,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("iTestSegTriIntersection",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("iTestSegTriIntersection",2,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestSegTriIntersection",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)Math::iTestSegTriIntersection((CGRay const &)*arg1,(CGTriangle const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestSegTriIntersection(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGRay, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGTriangle, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_iTestSegTriIntersection__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGRay, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGTriangle, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_iTestSegTriIntersection__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'iTestSegTriIntersection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Math::iTestSegTriIntersection(CGRay const &,CGTriangle const &)\n"
    "    Math::iTestSegTriIntersection(CGRay const &,CGTriangle const &,CGVect3 *)\n");
  lua_error(L);return 0;
}


static int _wrap_fGetT(lua_State* L) {
  {
    int SWIG_arg = 0;
    float result;
    
    SWIG_check_num_args("Math::fGetT",0,0)
    result = (float)Math::fGetT();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iPointInsideTriangle__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iPointInsideTriangle",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iPointInsideTriangle",1,"CGTriangle const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iPointInsideTriangle",2,"CGVect3 const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Math::iPointInsideTriangle",3,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("iPointInsideTriangle",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iPointInsideTriangle",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iPointInsideTriangle",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)Math::iPointInsideTriangle((CGTriangle const &)*arg1,(CGVect3 const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iPointInsideTriangle__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTriangle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iPointInsideTriangle",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iPointInsideTriangle",1,"CGTriangle const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iPointInsideTriangle",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("iPointInsideTriangle",1,SWIGTYPE_p_CGTriangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iPointInsideTriangle",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)Math::iPointInsideTriangle((CGTriangle const &)*arg1,(CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iPointInsideTriangle(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGTriangle, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_iPointInsideTriangle__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGTriangle, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_iPointInsideTriangle__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'iPointInsideTriangle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Math::iPointInsideTriangle(CGTriangle const &,CGVect3 const &,CGVect3 *)\n"
    "    Math::iPointInsideTriangle(CGTriangle const &,CGVect3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_iTest3PlaneIntersection(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    CGPlane *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTest3PlaneIntersection",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTest3PlaneIntersection",1,"CGPlane const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTest3PlaneIntersection",2,"CGPlane const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::iTest3PlaneIntersection",3,"CGPlane const &");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Math::iTest3PlaneIntersection",4,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTest3PlaneIntersection",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTest3PlaneIntersection",2,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTest3PlaneIntersection",3,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTest3PlaneIntersection",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)Math::iTest3PlaneIntersection((CGPlane const &)*arg1,(CGPlane const &)*arg2,(CGPlane const &)*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTest2PlaneIntersection(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPlane *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    CGRay *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTest2PlaneIntersection",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTest2PlaneIntersection",1,"CGPlane const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTest2PlaneIntersection",2,"CGPlane const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::iTest2PlaneIntersection",3,"CGRay const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTest2PlaneIntersection",1,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("iTest2PlaneIntersection",2,SWIGTYPE_p_CGPlane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("iTest2PlaneIntersection",3,SWIGTYPE_p_CGRay);
    }
    
    result = (int)Math::iTest2PlaneIntersection((CGPlane const &)*arg1,(CGPlane const &)*arg2,(CGRay const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_iTestRayAABBIntersection(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("Math::iTestRayAABBIntersection",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::iTestRayAABBIntersection",1,"CGRay const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::iTestRayAABBIntersection",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::iTestRayAABBIntersection",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("iTestRayAABBIntersection",1,SWIGTYPE_p_CGRay);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestRayAABBIntersection",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("iTestRayAABBIntersection",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)Math::iTestRayAABBIntersection((CGRay const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bBVsIntersect__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBoundingVolume *arg1 = 0 ;
    CGBoundingVolume *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("Math::bBVsIntersect",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::bBVsIntersect",1,"CGBoundingVolume const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::bBVsIntersect",2,"CGBoundingVolume const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("bBVsIntersect",1,SWIGTYPE_p_CGBoundingVolume);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("bBVsIntersect",2,SWIGTYPE_p_CGBoundingVolume);
    }
    
    result = (bool)Math::bBVsIntersect((CGBoundingVolume const &)*arg1,(CGBoundingVolume const &)*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bBVsIntersect__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBoundingVolume *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    CGBoundingVolume *arg3 = 0 ;
    CGMatrix4x4 *arg4 = 0 ;
    bool result;
    
    SWIG_check_num_args("Math::bBVsIntersect",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::bBVsIntersect",1,"CGBoundingVolume const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::bBVsIntersect",2,"CGMatrix4x4 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::bBVsIntersect",3,"CGBoundingVolume const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("Math::bBVsIntersect",4,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("bBVsIntersect",1,SWIGTYPE_p_CGBoundingVolume);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("bBVsIntersect",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("bBVsIntersect",3,SWIGTYPE_p_CGBoundingVolume);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("bBVsIntersect",4,SWIGTYPE_p_CGMatrix4x4);
    }
    
    result = (bool)Math::bBVsIntersect((CGBoundingVolume const &)*arg1,(CGMatrix4x4 const &)*arg2,(CGBoundingVolume const &)*arg3,(CGMatrix4x4 const &)*arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bBVsIntersect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGBoundingVolume, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGBoundingVolume, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bBVsIntersect__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGBoundingVolume, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGBoundingVolume, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_bBVsIntersect__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bBVsIntersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Math::bBVsIntersect(CGBoundingVolume const &,CGBoundingVolume const &)\n"
    "    Math::bBVsIntersect(CGBoundingVolume const &,CGMatrix4x4 const &,CGBoundingVolume const &,CGMatrix4x4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_bBVIntersectFrustum__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBoundingVolume *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    CGBVFrustum *arg3 = 0 ;
    bool result;
    
    SWIG_check_num_args("Math::bBVIntersectFrustum",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::bBVIntersectFrustum",1,"CGBoundingVolume const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::bBVIntersectFrustum",2,"CGMatrix4x4 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("Math::bBVIntersectFrustum",3,"CGBVFrustum const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("bBVIntersectFrustum",1,SWIGTYPE_p_CGBoundingVolume);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("bBVIntersectFrustum",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("bBVIntersectFrustum",3,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (bool)Math::bBVIntersectFrustum((CGBoundingVolume const &)*arg1,(CGMatrix4x4 const &)*arg2,(CGBVFrustum const &)*arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bBVIntersectFrustum__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBoundingVolume *arg1 = 0 ;
    CGBVFrustum *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("Math::bBVIntersectFrustum",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("Math::bBVIntersectFrustum",1,"CGBoundingVolume const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("Math::bBVIntersectFrustum",2,"CGBVFrustum const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBoundingVolume,0))){
      SWIG_fail_ptr("bBVIntersectFrustum",1,SWIGTYPE_p_CGBoundingVolume);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("bBVIntersectFrustum",2,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (bool)Math::bBVIntersectFrustum((CGBoundingVolume const &)*arg1,(CGBVFrustum const &)*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bBVIntersectFrustum(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGBoundingVolume, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGBVFrustum, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bBVIntersectFrustum__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGBoundingVolume, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGBVFrustum, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_bBVIntersectFrustum__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bBVIntersectFrustum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Math::bBVIntersectFrustum(CGBoundingVolume const &,CGMatrix4x4 const &,CGBVFrustum const &)\n"
    "    Math::bBVIntersectFrustum(CGBoundingVolume const &,CGBVFrustum const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_CGSmoother__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    CGSmoother *result = 0 ;
    
    SWIG_check_num_args("CGSmoother::CGSmoother",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGSmoother::CGSmoother",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    result = (CGSmoother *)new CGSmoother(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSmoother,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSmoother__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSmoother *result = 0 ;
    
    SWIG_check_num_args("CGSmoother::CGSmoother",0,0)
    result = (CGSmoother *)new CGSmoother();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSmoother,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSmoother(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGSmoother__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGSmoother__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGSmoother'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSmoother::CGSmoother(float)\n"
    "    CGSmoother::CGSmoother()\n");
  lua_error(L);return 0;
}


static int _wrap_CGSmoother_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSmoother *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGSmoother::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSmoother::Init",1,"CGSmoother *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSmoother::Init",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSmoother,0))){
      SWIG_fail_ptr("CGSmoother_Init",1,SWIGTYPE_p_CGSmoother);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSmoother_fValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSmoother *arg1 = 0 ;
    float arg2 ;
    float result;
    
    SWIG_check_num_args("CGSmoother::fValue",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSmoother::fValue",1,"CGSmoother *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSmoother::fValue",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSmoother,0))){
      SWIG_fail_ptr("CGSmoother_fValue",1,SWIGTYPE_p_CGSmoother);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (float)(arg1)->fValue(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSmoother(void *obj) {
CGSmoother *arg1 = (CGSmoother *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSmoother(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSmoother);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSmoother_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSmoother_methods[]= {
    { "Init", _wrap_CGSmoother_Init},
    { "fValue", _wrap_CGSmoother_fValue},
    {0,0}
};
static swig_lua_method swig_CGSmoother_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSmoother_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSmoother_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSmoother_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSmoother_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSmoother_Sf_SwigStatic = {
    "CGSmoother",
    swig_CGSmoother_Sf_SwigStatic_methods,
    swig_CGSmoother_Sf_SwigStatic_attributes,
    swig_CGSmoother_Sf_SwigStatic_constants,
    swig_CGSmoother_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSmoother_bases[] = {0};
static const char *swig_CGSmoother_base_names[] = {0};
static swig_lua_class _wrap_class_CGSmoother = { "CGSmoother", "CGSmoother", &SWIGTYPE_p_CGSmoother,_proxy__wrap_new_CGSmoother, swig_delete_CGSmoother, swig_CGSmoother_methods, swig_CGSmoother_attributes, &swig_CGSmoother_Sf_SwigStatic, swig_CGSmoother_meta, swig_CGSmoother_bases, swig_CGSmoother_base_names };

static int _wrap_new_CG4PCurve__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *result = 0 ;
    
    SWIG_check_num_args("CG4PCurve::CG4PCurve",0,0)
    result = (CG4PCurve *)new CG4PCurve();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CG4PCurve,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CG4PCurve__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    CG4PCurve *result = 0 ;
    
    SWIG_check_num_args("CG4PCurve::CG4PCurve",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CG4PCurve::CG4PCurve",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CG4PCurve::CG4PCurve",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CG4PCurve::CG4PCurve",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CG4PCurve::CG4PCurve",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("new_CG4PCurve",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("new_CG4PCurve",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("new_CG4PCurve",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("new_CG4PCurve",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (CG4PCurve *)new CG4PCurve((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CG4PCurve,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CG4PCurve__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CG4PCurve *result = 0 ;
    
    SWIG_check_num_args("CG4PCurve::CG4PCurve",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::CG4PCurve",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("new_CG4PCurve",1,SWIGTYPE_p_CGVect3);
    }
    
    result = (CG4PCurve *)new CG4PCurve(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CG4PCurve,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CG4PCurve(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CG4PCurve__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CG4PCurve__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_CG4PCurve__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CG4PCurve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CG4PCurve::CG4PCurve()\n"
    "    CG4PCurve::CG4PCurve(CGVect3 const &,CGVect3 const &,CGVect3 const &,CGVect3 const &)\n"
    "    CG4PCurve::CG4PCurve(CGVect3 *)\n");
  lua_error(L);return 0;
}


static int _wrap_CG4PCurve_Init__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CG4PCurve::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::Init",1,"CG4PCurve *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CG4PCurve::Init",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CG4PCurve,0))){
      SWIG_fail_ptr("CG4PCurve_Init",1,SWIGTYPE_p_CG4PCurve);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CG4PCurve_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CG4PCurve_Init__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    CGVect3 *arg5 = 0 ;
    
    SWIG_check_num_args("CG4PCurve::Init",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::Init",1,"CG4PCurve *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CG4PCurve::Init",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CG4PCurve::Init",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CG4PCurve::Init",4,"CGVect3 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CG4PCurve::Init",5,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CG4PCurve,0))){
      SWIG_fail_ptr("CG4PCurve_Init",1,SWIGTYPE_p_CG4PCurve);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CG4PCurve_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CG4PCurve_Init",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CG4PCurve_Init",4,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CG4PCurve_Init",5,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4,(CGVect3 const &)*arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CG4PCurve_Init(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CG4PCurve, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CG4PCurve_Init__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CG4PCurve, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_CG4PCurve_Init__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CG4PCurve_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CG4PCurve::Init(CGVect3 *)\n"
    "    CG4PCurve::Init(CGVect3 const &,CGVect3 const &,CGVect3 const &,CGVect3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CG4PCurve_oPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CG4PCurve::oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::oPos",1,"CG4PCurve const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CG4PCurve::oPos",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CG4PCurve,0))){
      SWIG_fail_ptr("CG4PCurve_oPos",1,SWIGTYPE_p_CG4PCurve);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &((CG4PCurve const *)arg1)->oPos(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CG4PCurve_oDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CG4PCurve::oDir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::oDir",1,"CG4PCurve const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CG4PCurve::oDir",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CG4PCurve,0))){
      SWIG_fail_ptr("CG4PCurve_oDir",1,SWIGTYPE_p_CG4PCurve);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &((CG4PCurve const *)arg1)->oDir(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CG4PCurve_oUp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CG4PCurve::oUp",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::oUp",1,"CG4PCurve const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CG4PCurve::oUp",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CG4PCurve,0))){
      SWIG_fail_ptr("CG4PCurve_oUp",1,SWIGTYPE_p_CG4PCurve);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &((CG4PCurve const *)arg1)->oUp(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CG4PCurve_m_oP_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *arg1 = 0 ;
    CGVect3 *arg2 = (CGVect3 *)0 ;
    
    SWIG_check_num_args("CG4PCurve::m_oP",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::m_oP",1,"CG4PCurve *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CG4PCurve::m_oP",2,"CGVect3 [4]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CG4PCurve,0))){
      SWIG_fail_ptr("CG4PCurve_m_oP_set",1,SWIGTYPE_p_CG4PCurve);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CG4PCurve_m_oP_set",2,SWIGTYPE_p_CGVect3);
    }
    
    {
      size_t ii;
      CGVect3 *b = (CGVect3 *) arg1->m_oP;
      for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((CGVect3 *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CG4PCurve_m_oP_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CG4PCurve *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CG4PCurve::m_oP",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CG4PCurve::m_oP",1,"CG4PCurve *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CG4PCurve,0))){
      SWIG_fail_ptr("CG4PCurve_m_oP_get",1,SWIGTYPE_p_CG4PCurve);
    }
    
    result = (CGVect3 *)(CGVect3 *) ((arg1)->m_oP);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CG4PCurve(void *obj) {
CG4PCurve *arg1 = (CG4PCurve *) obj;
delete arg1;
}
static int _proxy__wrap_new_CG4PCurve(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CG4PCurve);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CG4PCurve_attributes[] = {
    { "m_oP", _wrap_CG4PCurve_m_oP_get, _wrap_CG4PCurve_m_oP_set },
    {0,0,0}
};
static swig_lua_method swig_CG4PCurve_methods[]= {
    { "Init", _wrap_CG4PCurve_Init},
    { "oPos", _wrap_CG4PCurve_oPos},
    { "oDir", _wrap_CG4PCurve_oDir},
    { "oUp", _wrap_CG4PCurve_oUp},
    {0,0}
};
static swig_lua_method swig_CG4PCurve_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CG4PCurve_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CG4PCurve_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CG4PCurve_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CG4PCurve_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CG4PCurve_Sf_SwigStatic = {
    "CG4PCurve",
    swig_CG4PCurve_Sf_SwigStatic_methods,
    swig_CG4PCurve_Sf_SwigStatic_attributes,
    swig_CG4PCurve_Sf_SwigStatic_constants,
    swig_CG4PCurve_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CG4PCurve_bases[] = {0};
static const char *swig_CG4PCurve_base_names[] = {0};
static swig_lua_class _wrap_class_CG4PCurve = { "CG4PCurve", "CG4PCurve", &SWIGTYPE_p_CG4PCurve,_proxy__wrap_new_CG4PCurve, swig_delete_CG4PCurve, swig_CG4PCurve_methods, swig_CG4PCurve_attributes, &swig_CG4PCurve_Sf_SwigStatic, swig_CG4PCurve_meta, swig_CG4PCurve_bases, swig_CG4PCurve_base_names };

static int _wrap_new_CGCurve__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurve *result = 0 ;
    
    SWIG_check_num_args("CGCurve::CGCurve",0,0)
    result = (CGCurve *)new CGCurve();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCurve,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCurve__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    uint arg2 ;
    CGCurve *result = 0 ;
    
    SWIG_check_num_args("CGCurve::CGCurve",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurve::CGCurve",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCurve::CGCurve",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("new_CGCurve",1,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGCurve *)new CGCurve(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCurve,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCurve(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGCurve__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CGCurve__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGCurve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGCurve::CGCurve()\n"
    "    CGCurve::CGCurve(CGVect3 *,uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CGCurve_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurve *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGCurve::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurve::Init",1,"CGCurve *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCurve::Init",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCurve::Init",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurve,0))){
      SWIG_fail_ptr("CGCurve_Init",1,SWIGTYPE_p_CGCurve);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCurve_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurve_oPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurve *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCurve::oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurve::oPos",1,"CGCurve const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCurve::oPos",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurve,0))){
      SWIG_fail_ptr("CGCurve_oPos",1,SWIGTYPE_p_CGCurve);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &((CGCurve const *)arg1)->oPos(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurve_oDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurve *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCurve::oDir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurve::oDir",1,"CGCurve const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCurve::oDir",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurve,0))){
      SWIG_fail_ptr("CGCurve_oDir",1,SWIGTYPE_p_CGCurve);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &((CGCurve const *)arg1)->oDir(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurve_oUp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurve *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCurve::oUp",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurve::oUp",1,"CGCurve const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCurve::oUp",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurve,0))){
      SWIG_fail_ptr("CGCurve_oUp",1,SWIGTYPE_p_CGCurve);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &((CGCurve const *)arg1)->oUp(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurve_poControlPoints(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurve *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCurve::poControlPoints",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurve::poControlPoints",1,"CGCurve *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurve,0))){
      SWIG_fail_ptr("CGCurve_poControlPoints",1,SWIGTYPE_p_CGCurve);
    }
    
    result = (CGVect3 *)(arg1)->poControlPoints();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurve_uiNumControlPoints(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurve *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGCurve::uiNumControlPoints",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurve::uiNumControlPoints",1,"CGCurve *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurve,0))){
      SWIG_fail_ptr("CGCurve_uiNumControlPoints",1,SWIGTYPE_p_CGCurve);
    }
    
    result = (uint)(arg1)->uiNumControlPoints();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCurve(void *obj) {
CGCurve *arg1 = (CGCurve *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCurve(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCurve);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCurve_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCurve_methods[]= {
    { "Init", _wrap_CGCurve_Init},
    { "oPos", _wrap_CGCurve_oPos},
    { "oDir", _wrap_CGCurve_oDir},
    { "oUp", _wrap_CGCurve_oUp},
    { "poControlPoints", _wrap_CGCurve_poControlPoints},
    { "uiNumControlPoints", _wrap_CGCurve_uiNumControlPoints},
    {0,0}
};
static swig_lua_method swig_CGCurve_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCurve_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCurve_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCurve_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCurve_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCurve_Sf_SwigStatic = {
    "CGCurve",
    swig_CGCurve_Sf_SwigStatic_methods,
    swig_CGCurve_Sf_SwigStatic_attributes,
    swig_CGCurve_Sf_SwigStatic_constants,
    swig_CGCurve_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCurve_bases[] = {0};
static const char *swig_CGCurve_base_names[] = {0};
static swig_lua_class _wrap_class_CGCurve = { "CGCurve", "CGCurve", &SWIGTYPE_p_CGCurve,_proxy__wrap_new_CGCurve, swig_delete_CGCurve, swig_CGCurve_methods, swig_CGCurve_attributes, &swig_CGCurve_Sf_SwigStatic, swig_CGCurve_meta, swig_CGCurve_bases, swig_CGCurve_base_names };

static int _wrap_CGCurveDynamic_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurveDynamic *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGCurveDynamic::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurveDynamic::Init",1,"CGCurveDynamic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCurveDynamic::Init",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCurveDynamic::Init",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurveDynamic,0))){
      SWIG_fail_ptr("CGCurveDynamic_Init",1,SWIGTYPE_p_CGCurveDynamic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCurveDynamic_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurveDynamic_AddPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurveDynamic *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGCurveDynamic::AddPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurveDynamic::AddPoint",1,"CGCurveDynamic *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCurveDynamic::AddPoint",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurveDynamic,0))){
      SWIG_fail_ptr("CGCurveDynamic_AddPoint",1,SWIGTYPE_p_CGCurveDynamic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCurveDynamic_AddPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->AddPoint((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurveDynamic_m_oPntList_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurveDynamic *arg1 = 0 ;
    CGDynArray< CGVect3 > *arg2 = 0 ;
    
    SWIG_check_num_args("CGCurveDynamic::m_oPntList",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurveDynamic::m_oPntList",1,"CGCurveDynamic *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCurveDynamic::m_oPntList",2,"CGDynArray< CGVect3 > *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurveDynamic,0))){
      SWIG_fail_ptr("CGCurveDynamic_m_oPntList_set",1,SWIGTYPE_p_CGCurveDynamic);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGDynArrayT_CGVect3_t,0))){
      SWIG_fail_ptr("CGCurveDynamic_m_oPntList_set",2,SWIGTYPE_p_CGDynArrayT_CGVect3_t);
    }
    
    if (arg1) (arg1)->m_oPntList = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurveDynamic_m_oPntList_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurveDynamic *arg1 = 0 ;
    CGDynArray< CGVect3 > *result = 0 ;
    
    SWIG_check_num_args("CGCurveDynamic::m_oPntList",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurveDynamic::m_oPntList",1,"CGCurveDynamic *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurveDynamic,0))){
      SWIG_fail_ptr("CGCurveDynamic_m_oPntList_get",1,SWIGTYPE_p_CGCurveDynamic);
    }
    
    result = (CGDynArray< CGVect3 > *)& ((arg1)->m_oPntList);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGDynArrayT_CGVect3_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCurveDynamic(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurveDynamic *result = 0 ;
    
    SWIG_check_num_args("CGCurveDynamic::CGCurveDynamic",0,0)
    result = (CGCurveDynamic *)new CGCurveDynamic();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCurveDynamic,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCurveDynamic(void *obj) {
CGCurveDynamic *arg1 = (CGCurveDynamic *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCurveDynamic(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCurveDynamic);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCurveDynamic_attributes[] = {
    { "m_oPntList", _wrap_CGCurveDynamic_m_oPntList_get, _wrap_CGCurveDynamic_m_oPntList_set },
    {0,0,0}
};
static swig_lua_method swig_CGCurveDynamic_methods[]= {
    { "Init", _wrap_CGCurveDynamic_Init},
    { "AddPoint", _wrap_CGCurveDynamic_AddPoint},
    {0,0}
};
static swig_lua_method swig_CGCurveDynamic_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCurveDynamic_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCurveDynamic_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCurveDynamic_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCurveDynamic_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCurveDynamic_Sf_SwigStatic = {
    "CGCurveDynamic",
    swig_CGCurveDynamic_Sf_SwigStatic_methods,
    swig_CGCurveDynamic_Sf_SwigStatic_attributes,
    swig_CGCurveDynamic_Sf_SwigStatic_constants,
    swig_CGCurveDynamic_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCurveDynamic_bases[] = {0,0};
static const char *swig_CGCurveDynamic_base_names[] = {"CGCurve *",0};
static swig_lua_class _wrap_class_CGCurveDynamic = { "CGCurveDynamic", "CGCurveDynamic", &SWIGTYPE_p_CGCurveDynamic,_proxy__wrap_new_CGCurveDynamic, swig_delete_CGCurveDynamic, swig_CGCurveDynamic_methods, swig_CGCurveDynamic_attributes, &swig_CGCurveDynamic_Sf_SwigStatic, swig_CGCurveDynamic_meta, swig_CGCurveDynamic_bases, swig_CGCurveDynamic_base_names };

static int _wrap_new_CGRenderState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *result = 0 ;
    
    SWIG_check_num_args("CGRenderState::CGRenderState",0,0)
    result = (CGRenderState *)new CGRenderState();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGRenderState,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bDefferredMode_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGRenderState::m_bDefferredMode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bDefferredMode",1,"CGRenderState *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGRenderState::m_bDefferredMode",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bDefferredMode_set",1,SWIGTYPE_p_CGRenderState);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->m_bDefferredMode = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bDefferredMode_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGRenderState::m_bDefferredMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bDefferredMode",1,"CGRenderState *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bDefferredMode_get",1,SWIGTYPE_p_CGRenderState);
    }
    
    result = (bool) ((arg1)->m_bDefferredMode);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bFrustumCulling_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGRenderState::m_bFrustumCulling",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bFrustumCulling",1,"CGRenderState *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGRenderState::m_bFrustumCulling",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bFrustumCulling_set",1,SWIGTYPE_p_CGRenderState);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->m_bFrustumCulling = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bFrustumCulling_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGRenderState::m_bFrustumCulling",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bFrustumCulling",1,"CGRenderState *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bFrustumCulling_get",1,SWIGTYPE_p_CGRenderState);
    }
    
    result = (bool) ((arg1)->m_bFrustumCulling);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bBVRender_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGRenderState::m_bBVRender",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bBVRender",1,"CGRenderState *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGRenderState::m_bBVRender",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bBVRender_set",1,SWIGTYPE_p_CGRenderState);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->m_bBVRender = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bBVRender_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGRenderState::m_bBVRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bBVRender",1,"CGRenderState *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bBVRender_get",1,SWIGTYPE_p_CGRenderState);
    }
    
    result = (bool) ((arg1)->m_bBVRender);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bNormalRender_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGRenderState::m_bNormalRender",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bNormalRender",1,"CGRenderState *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGRenderState::m_bNormalRender",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bNormalRender_set",1,SWIGTYPE_p_CGRenderState);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->m_bNormalRender = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bNormalRender_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGRenderState::m_bNormalRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bNormalRender",1,"CGRenderState *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bNormalRender_get",1,SWIGTYPE_p_CGRenderState);
    }
    
    result = (bool) ((arg1)->m_bNormalRender);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bFlatRender_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGRenderState::m_bFlatRender",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bFlatRender",1,"CGRenderState *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGRenderState::m_bFlatRender",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bFlatRender_set",1,SWIGTYPE_p_CGRenderState);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->m_bFlatRender = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderState_m_bFlatRender_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderState *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGRenderState::m_bFlatRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderState::m_bFlatRender",1,"CGRenderState *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderState,0))){
      SWIG_fail_ptr("CGRenderState_m_bFlatRender_get",1,SWIGTYPE_p_CGRenderState);
    }
    
    result = (bool) ((arg1)->m_bFlatRender);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGRenderState(void *obj) {
CGRenderState *arg1 = (CGRenderState *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGRenderState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGRenderState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGRenderState_attributes[] = {
    { "m_bDefferredMode", _wrap_CGRenderState_m_bDefferredMode_get, _wrap_CGRenderState_m_bDefferredMode_set },
    { "m_bFrustumCulling", _wrap_CGRenderState_m_bFrustumCulling_get, _wrap_CGRenderState_m_bFrustumCulling_set },
    { "m_bBVRender", _wrap_CGRenderState_m_bBVRender_get, _wrap_CGRenderState_m_bBVRender_set },
    { "m_bNormalRender", _wrap_CGRenderState_m_bNormalRender_get, _wrap_CGRenderState_m_bNormalRender_set },
    { "m_bFlatRender", _wrap_CGRenderState_m_bFlatRender_get, _wrap_CGRenderState_m_bFlatRender_set },
    {0,0,0}
};
static swig_lua_method swig_CGRenderState_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGRenderState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGRenderState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGRenderState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGRenderState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGRenderState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGRenderState_Sf_SwigStatic = {
    "CGRenderState",
    swig_CGRenderState_Sf_SwigStatic_methods,
    swig_CGRenderState_Sf_SwigStatic_attributes,
    swig_CGRenderState_Sf_SwigStatic_constants,
    swig_CGRenderState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGRenderState_bases[] = {0};
static const char *swig_CGRenderState_base_names[] = {0};
static swig_lua_class _wrap_class_CGRenderState = { "CGRenderState", "CGRenderState", &SWIGTYPE_p_CGRenderState,_proxy__wrap_new_CGRenderState, swig_delete_CGRenderState, swig_CGRenderState_methods, swig_CGRenderState_attributes, &swig_CGRenderState_Sf_SwigStatic, swig_CGRenderState_meta, swig_CGRenderState_bases, swig_CGRenderState_base_names };

static int _wrap_CGRenderStats_m_uiNumTestedObjs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumTestedObjs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumTestedObjs",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_uiNumTestedObjs",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumTestedObjs_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiNumTestedObjs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumTestedObjs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumTestedObjs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumTestedObjs",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumTestedObjs_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (uint) ((arg1)->m_uiNumTestedObjs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumRenderedObjs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumRenderedObjs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedObjs",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedObjs",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumRenderedObjs_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiNumRenderedObjs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumRenderedObjs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumRenderedObjs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedObjs",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumRenderedObjs_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (uint) ((arg1)->m_uiNumRenderedObjs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumCulledObjs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumCulledObjs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumCulledObjs",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_uiNumCulledObjs",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumCulledObjs_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiNumCulledObjs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumCulledObjs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumCulledObjs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumCulledObjs",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumCulledObjs_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (uint) ((arg1)->m_uiNumCulledObjs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumRenderedTris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumRenderedTris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedTris",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedTris",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumRenderedTris_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiNumRenderedTris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumRenderedTris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumRenderedTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedTris",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumRenderedTris_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (uint) ((arg1)->m_uiNumRenderedTris);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumRenderedVerts_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumRenderedVerts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedVerts",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedVerts",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumRenderedVerts_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiNumRenderedVerts = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiNumRenderedVerts_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGRenderStats::m_uiNumRenderedVerts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiNumRenderedVerts",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiNumRenderedVerts_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (uint) ((arg1)->m_uiNumRenderedVerts);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_fFPS_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_fFPS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_fFPS",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_fFPS",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_fFPS_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fFPS = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_fFPS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGRenderStats::m_fFPS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_fFPS",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_fFPS_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (float) ((arg1)->m_fFPS);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_fDelta_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_fDelta",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_fDelta",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_fDelta",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_fDelta_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fDelta = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_fDelta_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGRenderStats::m_fDelta",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_fDelta",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_fDelta_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (float) ((arg1)->m_fDelta);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiCurrentFrame_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_uiCurrentFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiCurrentFrame",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_uiCurrentFrame",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiCurrentFrame_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiCurrentFrame = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_uiCurrentFrame_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGRenderStats::m_uiCurrentFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_uiCurrentFrame",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_uiCurrentFrame_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (uint) ((arg1)->m_uiCurrentFrame);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_fTotalTime_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGRenderStats::m_fTotalTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_fTotalTime",1,"CGRenderStats *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGRenderStats::m_fTotalTime",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_fTotalTime_set",1,SWIGTYPE_p_CGRenderStats);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fTotalTime = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGRenderStats_m_fTotalTime_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGRenderStats::m_fTotalTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGRenderStats::m_fTotalTime",1,"CGRenderStats *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRenderStats,0))){
      SWIG_fail_ptr("CGRenderStats_m_fTotalTime_get",1,SWIGTYPE_p_CGRenderStats);
    }
    
    result = (float) ((arg1)->m_fTotalTime);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGRenderStats(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderStats *result = 0 ;
    
    SWIG_check_num_args("CGRenderStats::CGRenderStats",0,0)
    result = (CGRenderStats *)new CGRenderStats();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGRenderStats,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGRenderStats(void *obj) {
CGRenderStats *arg1 = (CGRenderStats *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGRenderStats(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGRenderStats);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGRenderStats_attributes[] = {
    { "m_uiNumTestedObjs", _wrap_CGRenderStats_m_uiNumTestedObjs_get, _wrap_CGRenderStats_m_uiNumTestedObjs_set },
    { "m_uiNumRenderedObjs", _wrap_CGRenderStats_m_uiNumRenderedObjs_get, _wrap_CGRenderStats_m_uiNumRenderedObjs_set },
    { "m_uiNumCulledObjs", _wrap_CGRenderStats_m_uiNumCulledObjs_get, _wrap_CGRenderStats_m_uiNumCulledObjs_set },
    { "m_uiNumRenderedTris", _wrap_CGRenderStats_m_uiNumRenderedTris_get, _wrap_CGRenderStats_m_uiNumRenderedTris_set },
    { "m_uiNumRenderedVerts", _wrap_CGRenderStats_m_uiNumRenderedVerts_get, _wrap_CGRenderStats_m_uiNumRenderedVerts_set },
    { "m_fFPS", _wrap_CGRenderStats_m_fFPS_get, _wrap_CGRenderStats_m_fFPS_set },
    { "m_fDelta", _wrap_CGRenderStats_m_fDelta_get, _wrap_CGRenderStats_m_fDelta_set },
    { "m_uiCurrentFrame", _wrap_CGRenderStats_m_uiCurrentFrame_get, _wrap_CGRenderStats_m_uiCurrentFrame_set },
    { "m_fTotalTime", _wrap_CGRenderStats_m_fTotalTime_get, _wrap_CGRenderStats_m_fTotalTime_set },
    {0,0,0}
};
static swig_lua_method swig_CGRenderStats_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGRenderStats_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGRenderStats_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGRenderStats_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGRenderStats_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGRenderStats_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGRenderStats_Sf_SwigStatic = {
    "CGRenderStats",
    swig_CGRenderStats_Sf_SwigStatic_methods,
    swig_CGRenderStats_Sf_SwigStatic_attributes,
    swig_CGRenderStats_Sf_SwigStatic_constants,
    swig_CGRenderStats_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGRenderStats_bases[] = {0};
static const char *swig_CGRenderStats_base_names[] = {0};
static swig_lua_class _wrap_class_CGRenderStats = { "CGRenderStats", "CGRenderStats", &SWIGTYPE_p_CGRenderStats,_proxy__wrap_new_CGRenderStats, swig_delete_CGRenderStats, swig_CGRenderStats_methods, swig_CGRenderStats_attributes, &swig_CGRenderStats_Sf_SwigStatic, swig_CGRenderStats_meta, swig_CGRenderStats_bases, swig_CGRenderStats_base_names };

static int _wrap_CGDefferredMeshEntry_poMesh_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::poMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::poMesh",1,"CGDefferredMeshEntry *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGDefferredMeshEntry::poMesh",2,"CGBaseMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_poMesh_set",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGDefferredMeshEntry_poMesh_set",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    if (arg1) (arg1)->poMesh = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshEntry_poMesh_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    CGBaseMesh *result = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::poMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::poMesh",1,"CGDefferredMeshEntry *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_poMesh_get",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    result = (CGBaseMesh *) ((arg1)->poMesh);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBaseMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshEntry_oMatrix_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::oMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::oMatrix",1,"CGDefferredMeshEntry *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGDefferredMeshEntry::oMatrix",2,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_oMatrix_set",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_oMatrix_set",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    if (arg1) (arg1)->oMatrix = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshEntry_oMatrix_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::oMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::oMatrix",1,"CGDefferredMeshEntry *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_oMatrix_get",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    result = (CGMatrix4x4 *)& ((arg1)->oMatrix);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshEntry_poShader_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::poShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::poShader",1,"CGDefferredMeshEntry *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGDefferredMeshEntry::poShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_poShader_set",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGDefferredMeshEntry_poShader_set",2,SWIGTYPE_p_CGShader);
    }
    
    if (arg1) (arg1)->poShader = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshEntry_poShader_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::poShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::poShader",1,"CGDefferredMeshEntry *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_poShader_get",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    result = (CGShader *) ((arg1)->poShader);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshEntry_uiLights_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::uiLights",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::uiLights",1,"CGDefferredMeshEntry *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGDefferredMeshEntry::uiLights",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_uiLights_set",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->uiLights = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshEntry_uiLights_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGDefferredMeshEntry::uiLights",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshEntry::uiLights",1,"CGDefferredMeshEntry *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshEntry,0))){
      SWIG_fail_ptr("CGDefferredMeshEntry_uiLights_get",1,SWIGTYPE_p_CGDefferredMeshEntry);
    }
    
    result = (uint) ((arg1)->uiLights);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGDefferredMeshEntry(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshEntry *result = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshEntry::CGDefferredMeshEntry",0,0)
    result = (CGDefferredMeshEntry *)new CGDefferredMeshEntry();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGDefferredMeshEntry,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGDefferredMeshEntry(void *obj) {
CGDefferredMeshEntry *arg1 = (CGDefferredMeshEntry *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGDefferredMeshEntry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGDefferredMeshEntry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGDefferredMeshEntry_attributes[] = {
    { "poMesh", _wrap_CGDefferredMeshEntry_poMesh_get, _wrap_CGDefferredMeshEntry_poMesh_set },
    { "oMatrix", _wrap_CGDefferredMeshEntry_oMatrix_get, _wrap_CGDefferredMeshEntry_oMatrix_set },
    { "poShader", _wrap_CGDefferredMeshEntry_poShader_get, _wrap_CGDefferredMeshEntry_poShader_set },
    { "uiLights", _wrap_CGDefferredMeshEntry_uiLights_get, _wrap_CGDefferredMeshEntry_uiLights_set },
    {0,0,0}
};
static swig_lua_method swig_CGDefferredMeshEntry_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGDefferredMeshEntry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGDefferredMeshEntry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGDefferredMeshEntry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGDefferredMeshEntry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGDefferredMeshEntry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGDefferredMeshEntry_Sf_SwigStatic = {
    "CGDefferredMeshEntry",
    swig_CGDefferredMeshEntry_Sf_SwigStatic_methods,
    swig_CGDefferredMeshEntry_Sf_SwigStatic_attributes,
    swig_CGDefferredMeshEntry_Sf_SwigStatic_constants,
    swig_CGDefferredMeshEntry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGDefferredMeshEntry_bases[] = {0};
static const char *swig_CGDefferredMeshEntry_base_names[] = {0};
static swig_lua_class _wrap_class_CGDefferredMeshEntry = { "CGDefferredMeshEntry", "CGDefferredMeshEntry", &SWIGTYPE_p_CGDefferredMeshEntry,_proxy__wrap_new_CGDefferredMeshEntry, swig_delete_CGDefferredMeshEntry, swig_CGDefferredMeshEntry_methods, swig_CGDefferredMeshEntry_attributes, &swig_CGDefferredMeshEntry_Sf_SwigStatic, swig_CGDefferredMeshEntry_meta, swig_CGDefferredMeshEntry_bases, swig_CGDefferredMeshEntry_base_names };

static int _wrap_new_CGDefferredMeshDB(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *result = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshDB::CGDefferredMeshDB",0,0)
    result = (CGDefferredMeshDB *)new CGDefferredMeshDB();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGDefferredMeshDB,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshDB_Init__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGDefferredMeshDB::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshDB::Init",1,"CGDefferredMeshDB *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGDefferredMeshDB::Init",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshDB,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_Init",1,SWIGTYPE_p_CGDefferredMeshDB);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshDB_Init__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *arg1 = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshDB::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshDB::Init",1,"CGDefferredMeshDB *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshDB,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_Init",1,SWIGTYPE_p_CGDefferredMeshDB);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshDB_Init(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGDefferredMeshDB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CGDefferredMeshDB_Init__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGDefferredMeshDB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGDefferredMeshDB_Init__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGDefferredMeshDB_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGDefferredMeshDB::Init(uint)\n"
    "    CGDefferredMeshDB::Init()\n");
  lua_error(L);return 0;
}


static int _wrap_CGDefferredMeshDB_bInsertDefferredObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    CGShader *arg3 = 0 ;
    CGMatrix4x4 *arg4 = 0 ;
    uint arg5 ;
    bool result;
    
    SWIG_check_num_args("CGDefferredMeshDB::bInsertDefferredObject",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshDB::bInsertDefferredObject",1,"CGDefferredMeshDB *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGDefferredMeshDB::bInsertDefferredObject",2,"CGBaseMesh *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGDefferredMeshDB::bInsertDefferredObject",3,"CGShader *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGDefferredMeshDB::bInsertDefferredObject",4,"CGMatrix4x4 const &");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGDefferredMeshDB::bInsertDefferredObject",5,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshDB,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_bInsertDefferredObject",1,SWIGTYPE_p_CGDefferredMeshDB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_bInsertDefferredObject",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_bInsertDefferredObject",3,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_bInsertDefferredObject",4,SWIGTYPE_p_CGMatrix4x4);
    }
    
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    result = (bool)(arg1)->bInsertDefferredObject(arg2,arg3,(CGMatrix4x4 const &)*arg4,arg5);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshDB_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *arg1 = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshDB::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshDB::Invalidate",1,"CGDefferredMeshDB *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshDB,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_Invalidate",1,SWIGTYPE_p_CGDefferredMeshDB);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshDB_oGetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *arg1 = 0 ;
    uint arg2 ;
    CGDefferredMeshEntry *result = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshDB::oGetObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshDB::oGetObject",1,"CGDefferredMeshDB *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGDefferredMeshDB::oGetObject",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshDB,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_oGetObject",1,SWIGTYPE_p_CGDefferredMeshDB);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGDefferredMeshEntry *) &(arg1)->oGetObject(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGDefferredMeshEntry,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshDB_uiNumObjects(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGDefferredMeshDB::uiNumObjects",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshDB::uiNumObjects",1,"CGDefferredMeshDB *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshDB,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_uiNumObjects",1,SWIGTYPE_p_CGDefferredMeshDB);
    }
    
    result = (uint)(arg1)->uiNumObjects();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGDefferredMeshDB_Sort(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGDefferredMeshDB *arg1 = 0 ;
    
    SWIG_check_num_args("CGDefferredMeshDB::Sort",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGDefferredMeshDB::Sort",1,"CGDefferredMeshDB *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGDefferredMeshDB,0))){
      SWIG_fail_ptr("CGDefferredMeshDB_Sort",1,SWIGTYPE_p_CGDefferredMeshDB);
    }
    
    (arg1)->Sort();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGDefferredMeshDB(void *obj) {
CGDefferredMeshDB *arg1 = (CGDefferredMeshDB *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGDefferredMeshDB(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGDefferredMeshDB);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGDefferredMeshDB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGDefferredMeshDB_methods[]= {
    { "Init", _wrap_CGDefferredMeshDB_Init},
    { "bInsertDefferredObject", _wrap_CGDefferredMeshDB_bInsertDefferredObject},
    { "Invalidate", _wrap_CGDefferredMeshDB_Invalidate},
    { "oGetObject", _wrap_CGDefferredMeshDB_oGetObject},
    { "uiNumObjects", _wrap_CGDefferredMeshDB_uiNumObjects},
    { "Sort", _wrap_CGDefferredMeshDB_Sort},
    {0,0}
};
static swig_lua_method swig_CGDefferredMeshDB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGDefferredMeshDB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGDefferredMeshDB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGDefferredMeshDB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGDefferredMeshDB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGDefferredMeshDB_Sf_SwigStatic = {
    "CGDefferredMeshDB",
    swig_CGDefferredMeshDB_Sf_SwigStatic_methods,
    swig_CGDefferredMeshDB_Sf_SwigStatic_attributes,
    swig_CGDefferredMeshDB_Sf_SwigStatic_constants,
    swig_CGDefferredMeshDB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGDefferredMeshDB_bases[] = {0};
static const char *swig_CGDefferredMeshDB_base_names[] = {0};
static swig_lua_class _wrap_class_CGDefferredMeshDB = { "CGDefferredMeshDB", "CGDefferredMeshDB", &SWIGTYPE_p_CGDefferredMeshDB,_proxy__wrap_new_CGDefferredMeshDB, swig_delete_CGDefferredMeshDB, swig_CGDefferredMeshDB_methods, swig_CGDefferredMeshDB_attributes, &swig_CGDefferredMeshDB_Sf_SwigStatic, swig_CGDefferredMeshDB_meta, swig_CGDefferredMeshDB_bases, swig_CGDefferredMeshDB_base_names };

static int _wrap_new_CGColor__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGColor::CGColor",0,0)
    result = (CGColor *)new CGColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGColor__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGColor::CGColor",4,4)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGColor::CGColor",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGColor::CGColor",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGColor::CGColor",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGColor::CGColor",4,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    result = (CGColor *)new CGColor(arg1,arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_Set__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGColor::Set",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::Set",1,"CGColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGColor::Set",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGColor::Set",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGColor::Set",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGColor::Set",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_Set",1,SWIGTYPE_p_CGColor);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->Set(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGColor__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGColor::CGColor",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGColor::CGColor",1,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    result = (CGColor *)new CGColor(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGColor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGColor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGColor__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CGColor__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGColor::CGColor()\n"
    "    CGColor::CGColor(float,float,float,float)\n"
    "    CGColor::CGColor(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CGColor_Set__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGColor::Set",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::Set",1,"CGColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGColor::Set",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_Set",1,SWIGTYPE_p_CGColor);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Set(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_Set(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGColor_Set__SWIG_1(L);
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGColor_Set__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGColor_Set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGColor::Set(float,float,float,float)\n"
    "    CGColor::Set(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CGColor_Lerp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    CGColor *arg3 = 0 ;
    float arg4 ;
    
    SWIG_check_num_args("CGColor::Lerp",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::Lerp",1,"CGColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGColor::Lerp",2,"CGColor const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGColor::Lerp",3,"CGColor const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGColor::Lerp",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_Lerp",1,SWIGTYPE_p_CGColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_Lerp",2,SWIGTYPE_p_CGColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_Lerp",3,SWIGTYPE_p_CGColor);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Lerp((CGColor const &)*arg2,(CGColor const &)*arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_v(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("CGColor::v",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::v",1,"CGColor const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_v",1,SWIGTYPE_p_CGColor);
    }
    
    result = (float *)((CGColor const *)arg1)->v();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_r_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGColor::r",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::r",1,"CGColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGColor::r",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_r_set",1,SWIGTYPE_p_CGColor);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->r = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_r_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGColor::r",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::r",1,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_r_get",1,SWIGTYPE_p_CGColor);
    }
    
    result = (float) ((arg1)->r);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_g_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGColor::g",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::g",1,"CGColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGColor::g",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_g_set",1,SWIGTYPE_p_CGColor);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->g = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_g_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGColor::g",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::g",1,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_g_get",1,SWIGTYPE_p_CGColor);
    }
    
    result = (float) ((arg1)->g);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_b_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGColor::b",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::b",1,"CGColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGColor::b",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_b_set",1,SWIGTYPE_p_CGColor);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->b = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_b_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGColor::b",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::b",1,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_b_get",1,SWIGTYPE_p_CGColor);
    }
    
    result = (float) ((arg1)->b);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_a_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGColor::a",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::a",1,"CGColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGColor::a",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_a_set",1,SWIGTYPE_p_CGColor);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->a = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGColor_a_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGColor::a",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGColor::a",1,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGColor_a_get",1,SWIGTYPE_p_CGColor);
    }
    
    result = (float) ((arg1)->a);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGColor(void *obj) {
CGColor *arg1 = (CGColor *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGColor_attributes[] = {
    { "r", _wrap_CGColor_r_get, _wrap_CGColor_r_set },
    { "g", _wrap_CGColor_g_get, _wrap_CGColor_g_set },
    { "b", _wrap_CGColor_b_get, _wrap_CGColor_b_set },
    { "a", _wrap_CGColor_a_get, _wrap_CGColor_a_set },
    {0,0,0}
};
static swig_lua_method swig_CGColor_methods[]= {
    { "Set", _wrap_CGColor_Set},
    { "Lerp", _wrap_CGColor_Lerp},
    { "v", _wrap_CGColor_v},
    {0,0}
};
static swig_lua_method swig_CGColor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGColor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGColor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGColor_Sf_SwigStatic = {
    "CGColor",
    swig_CGColor_Sf_SwigStatic_methods,
    swig_CGColor_Sf_SwigStatic_attributes,
    swig_CGColor_Sf_SwigStatic_constants,
    swig_CGColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGColor_bases[] = {0};
static const char *swig_CGColor_base_names[] = {0};
static swig_lua_class _wrap_class_CGColor = { "CGColor", "CGColor", &SWIGTYPE_p_CGColor,_proxy__wrap_new_CGColor, swig_delete_CGColor, swig_CGColor_methods, swig_CGColor_attributes, &swig_CGColor_Sf_SwigStatic, swig_CGColor_meta, swig_CGColor_bases, swig_CGColor_base_names };

static int _wrap_CGE3DRenderer_bInit(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    handler arg2 = 0 ;
    uint arg3 ;
    uint arg4 ;
    uint arg5 ;
    uint arg6 ;
    bool result;
    
    SWIG_check_num_args("CGE3DRenderer::bInit",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::bInit",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::bInit",2,"handler");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGE3DRenderer::bInit",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGE3DRenderer::bInit",4,"uint");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGE3DRenderer::bInit",5,"uint");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CGE3DRenderer::bInit",6,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_bInit",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGE3DRenderer_bInit");
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
    arg6 = (uint)lua_tonumber(L, 6);
    result = (bool)(arg1)->bInit(arg2,arg3,arg4,arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_Finish(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::Finish",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::Finish",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_Finish",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->Finish();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_UploadProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGProgram *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::UploadProgram",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::UploadProgram",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::UploadProgram",2,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_UploadProgram",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGE3DRenderer_UploadProgram",2,SWIGTYPE_p_CGProgram);
    }
    
    (arg1)->UploadProgram(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_UpdateProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGProgram *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::UpdateProgram",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::UpdateProgram",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::UpdateProgram",2,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_UpdateProgram",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGE3DRenderer_UpdateProgram",2,SWIGTYPE_p_CGProgram);
    }
    
    (arg1)->UpdateProgram(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetCurrentProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGProgram *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetCurrentProgram",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetCurrentProgram",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::SetCurrentProgram",2,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCurrentProgram",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCurrentProgram",2,SWIGTYPE_p_CGProgram);
    }
    
    (arg1)->SetCurrentProgram(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_InvalidateProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGProgram *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::InvalidateProgram",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::InvalidateProgram",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::InvalidateProgram",2,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_InvalidateProgram",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGE3DRenderer_InvalidateProgram",2,SWIGTYPE_p_CGProgram);
    }
    
    (arg1)->InvalidateProgram(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetProgramParam(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGProgram *arg2 = 0 ;
    CGString *arg3 = 0 ;
    void *arg4 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetProgramParam",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetProgramParam",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::SetProgramParam",2,"CGProgram *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGE3DRenderer::SetProgramParam",3,"CGString const &");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CGE3DRenderer::SetProgramParam",4,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetProgramParam",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetProgramParam",2,SWIGTYPE_p_CGProgram);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetProgramParam",3,SWIGTYPE_p_CGString);
    }
    
    arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"CGE3DRenderer_SetProgramParam");
    (arg1)->SetProgramParam(arg2,(CGString const &)*arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_UploadTexture(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGTextureObj *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::UploadTexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::UploadTexture",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::UploadTexture",2,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_UploadTexture",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGE3DRenderer_UploadTexture",2,SWIGTYPE_p_CGTextureObj);
    }
    
    (arg1)->UploadTexture(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_UpdateTexture(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGTextureObj *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::UpdateTexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::UpdateTexture",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::UpdateTexture",2,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_UpdateTexture",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGE3DRenderer_UpdateTexture",2,SWIGTYPE_p_CGTextureObj);
    }
    
    (arg1)->UpdateTexture(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetCurrentTexture(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGTextureObj *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetCurrentTexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetCurrentTexture",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::SetCurrentTexture",2,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCurrentTexture",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCurrentTexture",2,SWIGTYPE_p_CGTextureObj);
    }
    
    (arg1)->SetCurrentTexture(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_InvalidateTexture(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGTextureObj *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::InvalidateTexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::InvalidateTexture",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::InvalidateTexture",2,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_InvalidateTexture",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGE3DRenderer_InvalidateTexture",2,SWIGTYPE_p_CGTextureObj);
    }
    
    (arg1)->InvalidateTexture(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_BeginRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::BeginRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::BeginRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_BeginRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->BeginRender();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_EndRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::EndRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::EndRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_EndRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->EndRender();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_RenderMesh__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::RenderMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::RenderMesh",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::RenderMesh",2,"CGBaseMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_RenderMesh",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGE3DRenderer_RenderMesh",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    (arg1)->RenderMesh(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_RenderMesh__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    CGShader *arg3 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::RenderMesh",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::RenderMesh",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::RenderMesh",2,"CGBaseMesh *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGE3DRenderer::RenderMesh",3,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_RenderMesh",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGE3DRenderer_RenderMesh",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGE3DRenderer_RenderMesh",3,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->RenderMesh(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_RenderMesh(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGE3DRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGBaseMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGE3DRenderer_RenderMesh__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGE3DRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGBaseMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGShader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGE3DRenderer_RenderMesh__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGE3DRenderer_RenderMesh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGE3DRenderer::RenderMesh(CGBaseMesh *)\n"
    "    CGE3DRenderer::RenderMesh(CGBaseMesh *,CGShader *)\n");
  lua_error(L);return 0;
}


static int _wrap_CGE3DRenderer_poCompileMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    CGShader *arg3 = 0 ;
    CGCompiledMesh *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::poCompileMesh",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::poCompileMesh",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::poCompileMesh",2,"CGMesh *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGE3DRenderer::poCompileMesh",3,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_poCompileMesh",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGE3DRenderer_poCompileMesh",2,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGE3DRenderer_poCompileMesh",3,SWIGTYPE_p_CGShader);
    }
    
    result = (CGCompiledMesh *)(arg1)->poCompileMesh(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCompiledMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_DestroyCompiledMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGCompiledMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::DestroyCompiledMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::DestroyCompiledMesh",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::DestroyCompiledMesh",2,"CGCompiledMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_DestroyCompiledMesh",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCompiledMesh,0))){
      SWIG_fail_ptr("CGE3DRenderer_DestroyCompiledMesh",2,SWIGTYPE_p_CGCompiledMesh);
    }
    
    (arg1)->DestroyCompiledMesh(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_RenderDefferredObjects(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::RenderDefferredObjects",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::RenderDefferredObjects",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_RenderDefferredObjects",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->RenderDefferredObjects();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_EnableBVRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::EnableBVRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::EnableBVRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_EnableBVRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->EnableBVRender();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_DisableBVRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::DisableBVRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::DisableBVRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_DisableBVRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->DisableBVRender();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_bIsUsingBBRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGE3DRenderer::bIsUsingBBRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::bIsUsingBBRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_bIsUsingBBRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (bool)(arg1)->bIsUsingBBRender();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_EnableNormalRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::EnableNormalRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::EnableNormalRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_EnableNormalRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->EnableNormalRender();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_DisableNormalRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::DisableNormalRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::DisableNormalRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_DisableNormalRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->DisableNormalRender();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_bIsUsingNormalRender(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGE3DRenderer::bIsUsingNormalRender",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::bIsUsingNormalRender",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_bIsUsingNormalRender",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (bool)(arg1)->bIsUsingNormalRender();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_EnableDefferredMode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::EnableDefferredMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::EnableDefferredMode",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_EnableDefferredMode",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->EnableDefferredMode();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_DisableDefferredMode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::DisableDefferredMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::DisableDefferredMode",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_DisableDefferredMode",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->DisableDefferredMode();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_bIsUsingDefferredMode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGE3DRenderer::bIsUsingDefferredMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::bIsUsingDefferredMode",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_bIsUsingDefferredMode",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (bool)(arg1)->bIsUsingDefferredMode();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_EnableFrustumCulling(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::EnableFrustumCulling",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::EnableFrustumCulling",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_EnableFrustumCulling",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->EnableFrustumCulling();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_DisableFrustumCulling(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::DisableFrustumCulling",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::DisableFrustumCulling",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_DisableFrustumCulling",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->DisableFrustumCulling();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_bIsUsingFrustumCulling(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGE3DRenderer::bIsUsingFrustumCulling",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::bIsUsingFrustumCulling",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_bIsUsingFrustumCulling",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (bool)(arg1)->bIsUsingFrustumCulling();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_EnableFlatRendering(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::EnableFlatRendering",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::EnableFlatRendering",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_EnableFlatRendering",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->EnableFlatRendering();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_DisableFlatRendering(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::DisableFlatRendering",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::DisableFlatRendering",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_DisableFlatRendering",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->DisableFlatRendering();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_bIsUsingFlatRendering(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGE3DRenderer::bIsUsingFlatRendering",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::bIsUsingFlatRendering",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_bIsUsingFlatRendering",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (bool)(arg1)->bIsUsingFlatRendering();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_PushWorldMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::PushWorldMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::PushWorldMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_PushWorldMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->PushWorldMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_PopWorldMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::PopWorldMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::PopWorldMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_PopWorldMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->PopWorldMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_ClearWorldMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::ClearWorldMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::ClearWorldMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_ClearWorldMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->ClearWorldMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_GetWorldMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::GetWorldMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::GetWorldMatrix",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::GetWorldMatrix",2,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_GetWorldMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_GetWorldMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->GetWorldMatrix(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetWorldMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetWorldMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetWorldMatrix",1,"CGE3DRenderer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGE3DRenderer::SetWorldMatrix",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetWorldMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetWorldMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->SetWorldMatrix((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_MultiplyMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::MultiplyMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::MultiplyMatrix",1,"CGE3DRenderer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGE3DRenderer::MultiplyMatrix",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_MultiplyMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_MultiplyMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->MultiplyMatrix((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_PreMultiplyMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::PreMultiplyMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::PreMultiplyMatrix",1,"CGE3DRenderer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGE3DRenderer::PreMultiplyMatrix",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_PreMultiplyMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_PreMultiplyMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->PreMultiplyMatrix((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetCurrentMaterial(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetCurrentMaterial",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetCurrentMaterial",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::SetCurrentMaterial",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCurrentMaterial",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCurrentMaterial",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetCurrentMaterial(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_poGetCurrentMaterial(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::poGetCurrentMaterial",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::poGetCurrentMaterial",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_poGetCurrentMaterial",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (CGShader *)(arg1)->poGetCurrentMaterial();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_PushCameraMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::PushCameraMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::PushCameraMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_PushCameraMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->PushCameraMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_PopCameraMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::PopCameraMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::PopCameraMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_PopCameraMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->PopCameraMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_ClearCameraMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::ClearCameraMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::ClearCameraMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_ClearCameraMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->ClearCameraMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_GetCameraMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::GetCameraMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::GetCameraMatrix",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::GetCameraMatrix",2,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_GetCameraMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_GetCameraMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->GetCameraMatrix(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetCameraMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetCameraMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetCameraMatrix",1,"CGE3DRenderer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGE3DRenderer::SetCameraMatrix",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCameraMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCameraMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->SetCameraMatrix((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_PushProjectorMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::PushProjectorMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::PushProjectorMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_PushProjectorMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->PushProjectorMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_PopProjectorMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::PopProjectorMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::PopProjectorMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_PopProjectorMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->PopProjectorMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_ClearProjectorMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::ClearProjectorMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::ClearProjectorMatrix",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_ClearProjectorMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    (arg1)->ClearProjectorMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_GetProjectorMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::GetProjectorMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::GetProjectorMatrix",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::GetProjectorMatrix",2,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_GetProjectorMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_GetProjectorMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->GetProjectorMatrix(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetProjectorMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetProjectorMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetProjectorMatrix",1,"CGE3DRenderer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGE3DRenderer::SetProjectorMatrix",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetProjectorMatrix",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetProjectorMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->SetProjectorMatrix((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetViewport(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGViewport *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetViewport",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetViewport",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::SetViewport",2,"CGViewport *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetViewport",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetViewport",2,SWIGTYPE_p_CGViewport);
    }
    
    (arg1)->SetViewport(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_poGetViewport(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGViewport *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::poGetViewport",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::poGetViewport",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_poGetViewport",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (CGViewport *)(arg1)->poGetViewport();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGViewport,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetCamera(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGCamera *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetCamera",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetCamera",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::SetCamera",2,"CGCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCamera",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetCamera",2,SWIGTYPE_p_CGCamera);
    }
    
    (arg1)->SetCamera(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_poGetCamera(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGCamera *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::poGetCamera",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::poGetCamera",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_poGetCamera",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (CGCamera *)(arg1)->poGetCamera();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCamera,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetProjector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGProjector *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetProjector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetProjector",1,"CGE3DRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGE3DRenderer::SetProjector",2,"CGProjector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetProjector",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetProjector",2,SWIGTYPE_p_CGProjector);
    }
    
    (arg1)->SetProjector(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_poGetProjector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGProjector *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::poGetProjector",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::poGetProjector",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_poGetProjector",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (CGProjector *)(arg1)->poGetProjector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGProjector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_fGetAspectRatio(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGE3DRenderer::fGetAspectRatio",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::fGetAspectRatio",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_fGetAspectRatio",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (float)(arg1)->fGetAspectRatio();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetScreenSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetScreenSize",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetScreenSize",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::SetScreenSize",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGE3DRenderer::SetScreenSize",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetScreenSize",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->SetScreenSize(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_uiGetScrTX(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGE3DRenderer::uiGetScrTX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::uiGetScrTX",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_uiGetScrTX",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (uint)(arg1)->uiGetScrTX();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_uiGetScrTY(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGE3DRenderer::uiGetScrTY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::uiGetScrTY",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_uiGetScrTY",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (uint)(arg1)->uiGetScrTY();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_ReadBuffer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    uint arg4 ;
    uint arg5 ;
    E3D_RenderBuffer_Type arg6 ;
    void *arg7 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::ReadBuffer",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::ReadBuffer",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::ReadBuffer",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGE3DRenderer::ReadBuffer",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGE3DRenderer::ReadBuffer",4,"uint");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGE3DRenderer::ReadBuffer",5,"uint");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CGE3DRenderer::ReadBuffer",6,"E3D_RenderBuffer_Type");
    if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("CGE3DRenderer::ReadBuffer",7,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_ReadBuffer",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    arg6 = (E3D_RenderBuffer_Type)(int)lua_tonumber(L, 6);
    arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"CGE3DRenderer_ReadBuffer");
    (arg1)->ReadBuffer(arg2,arg3,arg4,arg5,arg6,arg7);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_WriteBuffer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    uint arg4 ;
    uint arg5 ;
    E3D_RenderBuffer_Type arg6 ;
    void *arg7 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::WriteBuffer",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::WriteBuffer",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::WriteBuffer",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGE3DRenderer::WriteBuffer",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGE3DRenderer::WriteBuffer",4,"uint");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGE3DRenderer::WriteBuffer",5,"uint");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CGE3DRenderer::WriteBuffer",6,"E3D_RenderBuffer_Type");
    if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("CGE3DRenderer::WriteBuffer",7,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_WriteBuffer",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    arg6 = (E3D_RenderBuffer_Type)(int)lua_tonumber(L, 6);
    arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"CGE3DRenderer_WriteBuffer");
    (arg1)->WriteBuffer(arg2,arg3,arg4,arg5,arg6,arg7);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetStencilPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    E3D_StencilFunc arg2 ;
    int arg3 ;
    int arg4 ;
    E3D_StencilAction arg5 ;
    E3D_StencilAction arg6 ;
    E3D_StencilAction arg7 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetStencilPars",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetStencilPars",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::SetStencilPars",2,"E3D_StencilFunc");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGE3DRenderer::SetStencilPars",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGE3DRenderer::SetStencilPars",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGE3DRenderer::SetStencilPars",5,"E3D_StencilAction");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CGE3DRenderer::SetStencilPars",6,"E3D_StencilAction");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("CGE3DRenderer::SetStencilPars",7,"E3D_StencilAction");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetStencilPars",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2 = (E3D_StencilFunc)(int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (E3D_StencilAction)(int)lua_tonumber(L, 5);
    arg6 = (E3D_StencilAction)(int)lua_tonumber(L, 6);
    arg7 = (E3D_StencilAction)(int)lua_tonumber(L, 7);
    (arg1)->SetStencilPars(arg2,arg3,arg4,arg5,arg6,arg7);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetFogPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    E3D_FogMode arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    CGColor *arg6 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetFogPars",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetFogPars",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::SetFogPars",2,"E3D_FogMode");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGE3DRenderer::SetFogPars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGE3DRenderer::SetFogPars",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGE3DRenderer::SetFogPars",5,"float");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("CGE3DRenderer::SetFogPars",6,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetFogPars",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2 = (E3D_FogMode)(int)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetFogPars",6,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetFogPars(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetZPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    E3D_ZTestFunc arg2 ;
    E3D_ZWrite arg3 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetZPars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetZPars",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::SetZPars",2,"E3D_ZTestFunc");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGE3DRenderer::SetZPars",3,"E3D_ZWrite");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetZPars",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2 = (E3D_ZTestFunc)(int)lua_tonumber(L, 2);
    arg3 = (E3D_ZWrite)(int)lua_tonumber(L, 3);
    (arg1)->SetZPars(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetConstantColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetConstantColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetConstantColor",1,"CGE3DRenderer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGE3DRenderer::SetConstantColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetConstantColor",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetConstantColor",2,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetConstantColor((CGColor const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_oGetConstantColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::oGetConstantColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::oGetConstantColor",1,"CGE3DRenderer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGE3DRenderer::oGetConstantColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_oGetConstantColor",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGE3DRenderer_oGetConstantColor",2,SWIGTYPE_p_CGColor);
    }
    
    result = (CGColor *) &(arg1)->oGetConstantColor((CGColor const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_MaskChannels(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    
    SWIG_check_num_args("CGE3DRenderer::MaskChannels",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::MaskChannels",1,"CGE3DRenderer *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGE3DRenderer::MaskChannels",2,"bool");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("CGE3DRenderer::MaskChannels",3,"bool");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("CGE3DRenderer::MaskChannels",4,"bool");
    if(!lua_isboolean(L,5)) SWIG_fail_arg("CGE3DRenderer::MaskChannels",5,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_MaskChannels",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    arg3 = (lua_toboolean(L, 3)!=0);
    arg4 = (lua_toboolean(L, 4)!=0);
    arg5 = (lua_toboolean(L, 5)!=0);
    (arg1)->MaskChannels(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_ClearBuffer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    E3D_RenderBuffer_Type arg2 ;
    
    SWIG_check_num_args("CGE3DRenderer::ClearBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::ClearBuffer",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::ClearBuffer",2,"E3D_RenderBuffer_Type");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_ClearBuffer",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2 = (E3D_RenderBuffer_Type)(int)lua_tonumber(L, 2);
    (arg1)->ClearBuffer(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetupLight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    int arg2 ;
    CGLight *arg3 = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetupLight",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetupLight",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::SetupLight",2,"int");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGE3DRenderer::SetupLight",3,"CGLight const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetupLight",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetupLight",3,SWIGTYPE_p_CGLight);
    }
    
    (arg1)->SetupLight(arg2,(CGLight const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_SetLight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    int arg2 ;
    bool arg3 ;
    
    SWIG_check_num_args("CGE3DRenderer::SetLight",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::SetLight",1,"CGE3DRenderer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGE3DRenderer::SetLight",2,"int");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("CGE3DRenderer::SetLight",3,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_SetLight",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0);
    (arg1)->SetLight(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_oGetFrustum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGBVFrustum *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::oGetFrustum",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::oGetFrustum",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_oGetFrustum",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (CGBVFrustum *) &(arg1)->oGetFrustum();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVFrustum,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_oGetStats(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGRenderStats *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::oGetStats",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::oGetStats",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_oGetStats",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (CGRenderStats *) &(arg1)->oGetStats();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGRenderStats,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGE3DRenderer_oGetState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGE3DRenderer *arg1 = 0 ;
    CGRenderState *result = 0 ;
    
    SWIG_check_num_args("CGE3DRenderer::oGetState",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGE3DRenderer::oGetState",1,"CGE3DRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGE3DRenderer,0))){
      SWIG_fail_ptr("CGE3DRenderer_oGetState",1,SWIGTYPE_p_CGE3DRenderer);
    }
    
    result = (CGRenderState *) &(arg1)->oGetState();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGRenderState,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGE3DRenderer(void *obj) {
CGE3DRenderer *arg1 = (CGE3DRenderer *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGE3DRenderer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGE3DRenderer_methods[]= {
    { "bInit", _wrap_CGE3DRenderer_bInit},
    { "Finish", _wrap_CGE3DRenderer_Finish},
    { "UploadProgram", _wrap_CGE3DRenderer_UploadProgram},
    { "UpdateProgram", _wrap_CGE3DRenderer_UpdateProgram},
    { "SetCurrentProgram", _wrap_CGE3DRenderer_SetCurrentProgram},
    { "InvalidateProgram", _wrap_CGE3DRenderer_InvalidateProgram},
    { "SetProgramParam", _wrap_CGE3DRenderer_SetProgramParam},
    { "UploadTexture", _wrap_CGE3DRenderer_UploadTexture},
    { "UpdateTexture", _wrap_CGE3DRenderer_UpdateTexture},
    { "SetCurrentTexture", _wrap_CGE3DRenderer_SetCurrentTexture},
    { "InvalidateTexture", _wrap_CGE3DRenderer_InvalidateTexture},
    { "BeginRender", _wrap_CGE3DRenderer_BeginRender},
    { "EndRender", _wrap_CGE3DRenderer_EndRender},
    { "RenderMesh", _wrap_CGE3DRenderer_RenderMesh},
    { "poCompileMesh", _wrap_CGE3DRenderer_poCompileMesh},
    { "DestroyCompiledMesh", _wrap_CGE3DRenderer_DestroyCompiledMesh},
    { "RenderDefferredObjects", _wrap_CGE3DRenderer_RenderDefferredObjects},
    { "EnableBVRender", _wrap_CGE3DRenderer_EnableBVRender},
    { "DisableBVRender", _wrap_CGE3DRenderer_DisableBVRender},
    { "bIsUsingBBRender", _wrap_CGE3DRenderer_bIsUsingBBRender},
    { "EnableNormalRender", _wrap_CGE3DRenderer_EnableNormalRender},
    { "DisableNormalRender", _wrap_CGE3DRenderer_DisableNormalRender},
    { "bIsUsingNormalRender", _wrap_CGE3DRenderer_bIsUsingNormalRender},
    { "EnableDefferredMode", _wrap_CGE3DRenderer_EnableDefferredMode},
    { "DisableDefferredMode", _wrap_CGE3DRenderer_DisableDefferredMode},
    { "bIsUsingDefferredMode", _wrap_CGE3DRenderer_bIsUsingDefferredMode},
    { "EnableFrustumCulling", _wrap_CGE3DRenderer_EnableFrustumCulling},
    { "DisableFrustumCulling", _wrap_CGE3DRenderer_DisableFrustumCulling},
    { "bIsUsingFrustumCulling", _wrap_CGE3DRenderer_bIsUsingFrustumCulling},
    { "EnableFlatRendering", _wrap_CGE3DRenderer_EnableFlatRendering},
    { "DisableFlatRendering", _wrap_CGE3DRenderer_DisableFlatRendering},
    { "bIsUsingFlatRendering", _wrap_CGE3DRenderer_bIsUsingFlatRendering},
    { "PushWorldMatrix", _wrap_CGE3DRenderer_PushWorldMatrix},
    { "PopWorldMatrix", _wrap_CGE3DRenderer_PopWorldMatrix},
    { "ClearWorldMatrix", _wrap_CGE3DRenderer_ClearWorldMatrix},
    { "GetWorldMatrix", _wrap_CGE3DRenderer_GetWorldMatrix},
    { "SetWorldMatrix", _wrap_CGE3DRenderer_SetWorldMatrix},
    { "MultiplyMatrix", _wrap_CGE3DRenderer_MultiplyMatrix},
    { "PreMultiplyMatrix", _wrap_CGE3DRenderer_PreMultiplyMatrix},
    { "SetCurrentMaterial", _wrap_CGE3DRenderer_SetCurrentMaterial},
    { "poGetCurrentMaterial", _wrap_CGE3DRenderer_poGetCurrentMaterial},
    { "PushCameraMatrix", _wrap_CGE3DRenderer_PushCameraMatrix},
    { "PopCameraMatrix", _wrap_CGE3DRenderer_PopCameraMatrix},
    { "ClearCameraMatrix", _wrap_CGE3DRenderer_ClearCameraMatrix},
    { "GetCameraMatrix", _wrap_CGE3DRenderer_GetCameraMatrix},
    { "SetCameraMatrix", _wrap_CGE3DRenderer_SetCameraMatrix},
    { "PushProjectorMatrix", _wrap_CGE3DRenderer_PushProjectorMatrix},
    { "PopProjectorMatrix", _wrap_CGE3DRenderer_PopProjectorMatrix},
    { "ClearProjectorMatrix", _wrap_CGE3DRenderer_ClearProjectorMatrix},
    { "GetProjectorMatrix", _wrap_CGE3DRenderer_GetProjectorMatrix},
    { "SetProjectorMatrix", _wrap_CGE3DRenderer_SetProjectorMatrix},
    { "SetViewport", _wrap_CGE3DRenderer_SetViewport},
    { "poGetViewport", _wrap_CGE3DRenderer_poGetViewport},
    { "SetCamera", _wrap_CGE3DRenderer_SetCamera},
    { "poGetCamera", _wrap_CGE3DRenderer_poGetCamera},
    { "SetProjector", _wrap_CGE3DRenderer_SetProjector},
    { "poGetProjector", _wrap_CGE3DRenderer_poGetProjector},
    { "fGetAspectRatio", _wrap_CGE3DRenderer_fGetAspectRatio},
    { "SetScreenSize", _wrap_CGE3DRenderer_SetScreenSize},
    { "uiGetScrTX", _wrap_CGE3DRenderer_uiGetScrTX},
    { "uiGetScrTY", _wrap_CGE3DRenderer_uiGetScrTY},
    { "ReadBuffer", _wrap_CGE3DRenderer_ReadBuffer},
    { "WriteBuffer", _wrap_CGE3DRenderer_WriteBuffer},
    { "SetStencilPars", _wrap_CGE3DRenderer_SetStencilPars},
    { "SetFogPars", _wrap_CGE3DRenderer_SetFogPars},
    { "SetZPars", _wrap_CGE3DRenderer_SetZPars},
    { "SetConstantColor", _wrap_CGE3DRenderer_SetConstantColor},
    { "oGetConstantColor", _wrap_CGE3DRenderer_oGetConstantColor},
    { "MaskChannels", _wrap_CGE3DRenderer_MaskChannels},
    { "ClearBuffer", _wrap_CGE3DRenderer_ClearBuffer},
    { "SetupLight", _wrap_CGE3DRenderer_SetupLight},
    { "SetLight", _wrap_CGE3DRenderer_SetLight},
    { "oGetFrustum", _wrap_CGE3DRenderer_oGetFrustum},
    { "oGetStats", _wrap_CGE3DRenderer_oGetStats},
    { "oGetState", _wrap_CGE3DRenderer_oGetState},
    {0,0}
};
static swig_lua_method swig_CGE3DRenderer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGE3DRenderer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGE3DRenderer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGE3DRenderer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGE3DRenderer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGE3DRenderer_Sf_SwigStatic = {
    "CGE3DRenderer",
    swig_CGE3DRenderer_Sf_SwigStatic_methods,
    swig_CGE3DRenderer_Sf_SwigStatic_attributes,
    swig_CGE3DRenderer_Sf_SwigStatic_constants,
    swig_CGE3DRenderer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGE3DRenderer_bases[] = {0};
static const char *swig_CGE3DRenderer_base_names[] = {0};
static swig_lua_class _wrap_class_CGE3DRenderer = { "CGE3DRenderer", "CGE3DRenderer", &SWIGTYPE_p_CGE3DRenderer,0, swig_delete_CGE3DRenderer, swig_CGE3DRenderer_methods, swig_CGE3DRenderer_attributes, &swig_CGE3DRenderer_Sf_SwigStatic, swig_CGE3DRenderer_meta, swig_CGE3DRenderer_bases, swig_CGE3DRenderer_base_names };

static int _wrap_CGRenderer_I(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderer *result = 0 ;
    
    SWIG_check_num_args("CGRenderer::I",0,0)
    result = (CGRenderer *)CGRenderer::I();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGRenderer,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGRenderer(void *obj) {
CGRenderer *arg1 = (CGRenderer *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGRenderer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGRenderer_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGRenderer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGRenderer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGRenderer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGRenderer_Sf_SwigStatic_methods[]= {
    { "I", _wrap_CGRenderer_I},
    {0,0}
};
static swig_lua_class* swig_CGRenderer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGRenderer_Sf_SwigStatic = {
    "CGRenderer",
    swig_CGRenderer_Sf_SwigStatic_methods,
    swig_CGRenderer_Sf_SwigStatic_attributes,
    swig_CGRenderer_Sf_SwigStatic_constants,
    swig_CGRenderer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGRenderer_bases[] = {0,0};
static const char *swig_CGRenderer_base_names[] = {"CGE3DRenderer *",0};
static swig_lua_class _wrap_class_CGRenderer = { "CGRenderer", "CGRenderer", &SWIGTYPE_p_CGRenderer,0, swig_delete_CGRenderer, swig_CGRenderer_methods, swig_CGRenderer_attributes, &swig_CGRenderer_Sf_SwigStatic, swig_CGRenderer_meta, swig_CGRenderer_bases, swig_CGRenderer_base_names };

static int _wrap_new_CGRenderVars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRenderVars *result = 0 ;
    
    SWIG_check_num_args("CGRenderVars::CGRenderVars",0,0)
    result = (CGRenderVars *)new CGRenderVars();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGRenderVars,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGRenderVars(void *obj) {
CGRenderVars *arg1 = (CGRenderVars *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGRenderVars(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGRenderVars);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGRenderVars_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGRenderVars_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGRenderVars_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGRenderVars_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGRenderVars_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGRenderVars_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGRenderVars_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGRenderVars_Sf_SwigStatic = {
    "CGRenderVars",
    swig_CGRenderVars_Sf_SwigStatic_methods,
    swig_CGRenderVars_Sf_SwigStatic_attributes,
    swig_CGRenderVars_Sf_SwigStatic_constants,
    swig_CGRenderVars_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGRenderVars_bases[] = {0};
static const char *swig_CGRenderVars_base_names[] = {0};
static swig_lua_class _wrap_class_CGRenderVars = { "CGRenderVars", "CGRenderVars", &SWIGTYPE_p_CGRenderVars,_proxy__wrap_new_CGRenderVars, swig_delete_CGRenderVars, swig_CGRenderVars_methods, swig_CGRenderVars_attributes, &swig_CGRenderVars_Sf_SwigStatic, swig_CGRenderVars_meta, swig_CGRenderVars_bases, swig_CGRenderVars_base_names };

static int _wrap_new_CGViewport(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *result = 0 ;
    
    SWIG_check_num_args("CGViewport::CGViewport",0,0)
    result = (CGViewport *)new CGViewport();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGViewport,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_SetViewport(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGViewport::SetViewport",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::SetViewport",1,"CGViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGViewport::SetViewport",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGViewport::SetViewport",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGViewport::SetViewport",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGViewport::SetViewport",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_SetViewport",1,SWIGTYPE_p_CGViewport);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetViewport(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrCX_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGViewport::ScrCX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrCX",1,"CGViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGViewport::ScrCX",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrCX_set",1,SWIGTYPE_p_CGViewport);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ScrCX = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrCX_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGViewport::ScrCX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrCX",1,"CGViewport *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrCX_get",1,SWIGTYPE_p_CGViewport);
    }
    
    result = (float) ((arg1)->ScrCX);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrCY_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGViewport::ScrCY",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrCY",1,"CGViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGViewport::ScrCY",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrCY_set",1,SWIGTYPE_p_CGViewport);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ScrCY = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrCY_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGViewport::ScrCY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrCY",1,"CGViewport *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrCY_get",1,SWIGTYPE_p_CGViewport);
    }
    
    result = (float) ((arg1)->ScrCY);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrTX_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGViewport::ScrTX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrTX",1,"CGViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGViewport::ScrTX",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrTX_set",1,SWIGTYPE_p_CGViewport);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ScrTX = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrTX_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGViewport::ScrTX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrTX",1,"CGViewport *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrTX_get",1,SWIGTYPE_p_CGViewport);
    }
    
    result = (float) ((arg1)->ScrTX);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrTY_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGViewport::ScrTY",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrTY",1,"CGViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGViewport::ScrTY",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrTY_set",1,SWIGTYPE_p_CGViewport);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ScrTY = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGViewport_ScrTY_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGViewport *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGViewport::ScrTY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGViewport::ScrTY",1,"CGViewport *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGViewport_ScrTY_get",1,SWIGTYPE_p_CGViewport);
    }
    
    result = (float) ((arg1)->ScrTY);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGViewport(void *obj) {
CGViewport *arg1 = (CGViewport *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGViewport(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGViewport);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGViewport_attributes[] = {
    { "ScrCX", _wrap_CGViewport_ScrCX_get, _wrap_CGViewport_ScrCX_set },
    { "ScrCY", _wrap_CGViewport_ScrCY_get, _wrap_CGViewport_ScrCY_set },
    { "ScrTX", _wrap_CGViewport_ScrTX_get, _wrap_CGViewport_ScrTX_set },
    { "ScrTY", _wrap_CGViewport_ScrTY_get, _wrap_CGViewport_ScrTY_set },
    {0,0,0}
};
static swig_lua_method swig_CGViewport_methods[]= {
    { "SetViewport", _wrap_CGViewport_SetViewport},
    {0,0}
};
static swig_lua_method swig_CGViewport_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGViewport_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGViewport_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGViewport_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGViewport_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGViewport_Sf_SwigStatic = {
    "CGViewport",
    swig_CGViewport_Sf_SwigStatic_methods,
    swig_CGViewport_Sf_SwigStatic_attributes,
    swig_CGViewport_Sf_SwigStatic_constants,
    swig_CGViewport_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGViewport_bases[] = {0};
static const char *swig_CGViewport_base_names[] = {0};
static swig_lua_class _wrap_class_CGViewport = { "CGViewport", "CGViewport", &SWIGTYPE_p_CGViewport,_proxy__wrap_new_CGViewport, swig_delete_CGViewport, swig_CGViewport_methods, swig_CGViewport_attributes, &swig_CGViewport_Sf_SwigStatic, swig_CGViewport_meta, swig_CGViewport_bases, swig_CGViewport_base_names };

static int _wrap_CGCamera_SetPos__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGCamera::SetPos",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::SetPos",1,"CGCamera *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCamera::SetPos",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCamera::SetPos",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGCamera::SetPos",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_SetPos",1,SWIGTYPE_p_CGCamera);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetPos(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_SetPos__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGCamera::SetPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::SetPos",1,"CGCamera *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCamera::SetPos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_SetPos",1,SWIGTYPE_p_CGCamera);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCamera_SetPos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetPos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_SetPos(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGCamera_SetPos__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGCamera_SetPos__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGCamera_SetPos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGCamera::SetPos(float,float,float)\n"
    "    CGCamera::SetPos(CGVect3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGCamera_SetDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGCamera::SetDir",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::SetDir",1,"CGCamera *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCamera::SetDir",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCamera::SetDir",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGCamera::SetDir",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_SetDir",1,SWIGTYPE_p_CGCamera);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetDir(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_SetVectors(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    
    SWIG_check_num_args("CGCamera::SetVectors",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::SetVectors",1,"CGCamera *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCamera::SetVectors",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGCamera::SetVectors",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGCamera::SetVectors",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_SetVectors",1,SWIGTYPE_p_CGCamera);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCamera_SetVectors",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCamera_SetVectors",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCamera_SetVectors",4,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetVectors((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_LookAt(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGCamera::LookAt",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::LookAt",1,"CGCamera *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCamera::LookAt",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_LookAt",1,SWIGTYPE_p_CGCamera);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCamera_LookAt",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->LookAt((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_oGetPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCamera::oGetPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::oGetPos",1,"CGCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_oGetPos",1,SWIGTYPE_p_CGCamera);
    }
    
    result = (CGVect3 *) &(arg1)->oGetPos();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_oGetDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCamera::oGetDir",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::oGetDir",1,"CGCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_oGetDir",1,SWIGTYPE_p_CGCamera);
    }
    
    result = (CGVect3 *) &(arg1)->oGetDir();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_oGetSide(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCamera::oGetSide",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::oGetSide",1,"CGCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_oGetSide",1,SWIGTYPE_p_CGCamera);
    }
    
    result = (CGVect3 *) &(arg1)->oGetSide();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCamera_oGetUp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCamera::oGetUp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCamera::oGetUp",1,"CGCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGCamera_oGetUp",1,SWIGTYPE_p_CGCamera);
    }
    
    result = (CGVect3 *) &(arg1)->oGetUp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCamera(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCamera *result = 0 ;
    
    SWIG_check_num_args("CGCamera::CGCamera",0,0)
    result = (CGCamera *)new CGCamera();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCamera,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCamera(void *obj) {
CGCamera *arg1 = (CGCamera *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCamera(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCamera);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCamera_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCamera_methods[]= {
    { "SetPos", _wrap_CGCamera_SetPos},
    { "SetDir", _wrap_CGCamera_SetDir},
    { "SetVectors", _wrap_CGCamera_SetVectors},
    { "LookAt", _wrap_CGCamera_LookAt},
    { "oGetPos", _wrap_CGCamera_oGetPos},
    { "oGetDir", _wrap_CGCamera_oGetDir},
    { "oGetSide", _wrap_CGCamera_oGetSide},
    { "oGetUp", _wrap_CGCamera_oGetUp},
    {0,0}
};
static swig_lua_method swig_CGCamera_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCamera_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCamera_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCamera_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCamera_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCamera_Sf_SwigStatic = {
    "CGCamera",
    swig_CGCamera_Sf_SwigStatic_methods,
    swig_CGCamera_Sf_SwigStatic_attributes,
    swig_CGCamera_Sf_SwigStatic_constants,
    swig_CGCamera_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCamera_bases[] = {0};
static const char *swig_CGCamera_base_names[] = {0};
static swig_lua_class _wrap_class_CGCamera = { "CGCamera", "CGCamera", &SWIGTYPE_p_CGCamera,_proxy__wrap_new_CGCamera, swig_delete_CGCamera, swig_CGCamera_methods, swig_CGCamera_attributes, &swig_CGCamera_Sf_SwigStatic, swig_CGCamera_meta, swig_CGCamera_bases, swig_CGCamera_base_names };

static int _wrap_new_CGProjector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *result = 0 ;
    
    SWIG_check_num_args("CGProjector::CGProjector",0,0)
    result = (CGProjector *)new CGProjector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGProjector,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_fFOV_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGProjector::fFOV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::fFOV",1,"CGProjector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGProjector::fFOV",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_fFOV_set",1,SWIGTYPE_p_CGProjector);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fFOV = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_fFOV_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGProjector::fFOV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::fFOV",1,"CGProjector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_fFOV_get",1,SWIGTYPE_p_CGProjector);
    }
    
    result = (float) ((arg1)->fFOV);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_fNear_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGProjector::fNear",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::fNear",1,"CGProjector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGProjector::fNear",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_fNear_set",1,SWIGTYPE_p_CGProjector);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fNear = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_fNear_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGProjector::fNear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::fNear",1,"CGProjector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_fNear_get",1,SWIGTYPE_p_CGProjector);
    }
    
    result = (float) ((arg1)->fNear);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_fFar_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGProjector::fFar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::fFar",1,"CGProjector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGProjector::fFar",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_fFar_set",1,SWIGTYPE_p_CGProjector);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fFar = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_fFar_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGProjector::fFar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::fFar",1,"CGProjector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_fFar_get",1,SWIGTYPE_p_CGProjector);
    }
    
    result = (float) ((arg1)->fFar);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_ePrjType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    E3D_ProjectorType arg2 ;
    
    SWIG_check_num_args("CGProjector::ePrjType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::ePrjType",1,"CGProjector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGProjector::ePrjType",2,"E3D_ProjectorType");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_ePrjType_set",1,SWIGTYPE_p_CGProjector);
    }
    
    arg2 = (E3D_ProjectorType)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->ePrjType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProjector_ePrjType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProjector *arg1 = 0 ;
    E3D_ProjectorType result;
    
    SWIG_check_num_args("CGProjector::ePrjType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProjector::ePrjType",1,"CGProjector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGProjector_ePrjType_get",1,SWIGTYPE_p_CGProjector);
    }
    
    result = (E3D_ProjectorType) ((arg1)->ePrjType);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGProjector(void *obj) {
CGProjector *arg1 = (CGProjector *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGProjector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGProjector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGProjector_attributes[] = {
    { "fFOV", _wrap_CGProjector_fFOV_get, _wrap_CGProjector_fFOV_set },
    { "fNear", _wrap_CGProjector_fNear_get, _wrap_CGProjector_fNear_set },
    { "fFar", _wrap_CGProjector_fFar_get, _wrap_CGProjector_fFar_set },
    { "ePrjType", _wrap_CGProjector_ePrjType_get, _wrap_CGProjector_ePrjType_set },
    {0,0,0}
};
static swig_lua_method swig_CGProjector_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGProjector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGProjector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGProjector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGProjector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGProjector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGProjector_Sf_SwigStatic = {
    "CGProjector",
    swig_CGProjector_Sf_SwigStatic_methods,
    swig_CGProjector_Sf_SwigStatic_attributes,
    swig_CGProjector_Sf_SwigStatic_constants,
    swig_CGProjector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGProjector_bases[] = {0};
static const char *swig_CGProjector_base_names[] = {0};
static swig_lua_class _wrap_class_CGProjector = { "CGProjector", "CGProjector", &SWIGTYPE_p_CGProjector,_proxy__wrap_new_CGProjector, swig_delete_CGProjector, swig_CGProjector_methods, swig_CGProjector_attributes, &swig_CGProjector_Sf_SwigStatic, swig_CGProjector_meta, swig_CGProjector_bases, swig_CGProjector_base_names };

static int _wrap_CGGraphBV_Copy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBV::Copy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::Copy",1,"CGGraphBV *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBV::Copy",2,"CGGraphBV const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_Copy",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_Copy",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->Copy((CGGraphBV const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_Transform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBV::Transform",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::Transform",1,"CGGraphBV *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBV::Transform",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_Transform",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGGraphBV_Transform",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_Compute(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGGraphBV::Compute",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::Compute",1,"CGGraphBV *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphBV::Compute",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGraphBV::Compute",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_Compute",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBV_Compute",2,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Compute(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_GetRange(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    char arg2 ;
    float result;
    
    SWIG_check_num_args("CGGraphBV::GetRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::GetRange",1,"CGGraphBV const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGraphBV::GetRange",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_GetRange",1,SWIGTYPE_p_CGGraphBV);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (float)((CGGraphBV const *)arg1)->GetRange(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBV::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::oGetCenter",1,"CGGraphBV const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_oGetCenter",1,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (CGVect3 *) &((CGGraphBV const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_TestFrustum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGBVFrustum *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBV::TestFrustum",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::TestFrustum",1,"CGGraphBV const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBV::TestFrustum",2,"CGBVFrustum const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_TestFrustum",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGGraphBV_TestFrustum",2,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (int)((CGGraphBV const *)arg1)->TestFrustum((CGBVFrustum const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_eGetTypeID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    EGBoundingVolumeType result;
    
    SWIG_check_num_args("CGGraphBV::eGetTypeID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::eGetTypeID",1,"CGGraphBV const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_eGetTypeID",1,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (EGBoundingVolumeType)((CGGraphBV const *)arg1)->eGetTypeID();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_TestInside(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBV::TestInside",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::TestInside",1,"CGGraphBV const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBV::TestInside",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_TestInside",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBV_TestInside",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)((CGGraphBV const *)arg1)->TestInside((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_oGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGBoundingVolume *result = 0 ;
    
    SWIG_check_num_args("CGGraphBV::oGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::oGetBV",1,"CGGraphBV const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_oGetBV",1,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (CGBoundingVolume *) &((CGGraphBV const *)arg1)->oGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBoundingVolume,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_GetExtents(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBV::GetExtents",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::GetExtents",1,"CGGraphBV const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_GetExtents",1,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (CGVect3 *) &((CGGraphBV const *)arg1)->GetExtents();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_oGetMax(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBV::oGetMax",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::oGetMax",1,"CGGraphBV const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_oGetMax",1,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (CGVect3 *) &((CGGraphBV const *)arg1)->oGetMax();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBV_oGetMin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBV::oGetMin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBV::oGetMin",1,"CGGraphBV const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBV_oGetMin",1,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (CGVect3 *) &((CGGraphBV const *)arg1)->oGetMin();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphBV(void *obj) {
CGGraphBV *arg1 = (CGGraphBV *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGGraphBV_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphBV_methods[]= {
    { "Copy", _wrap_CGGraphBV_Copy},
    { "Transform", _wrap_CGGraphBV_Transform},
    { "Compute", _wrap_CGGraphBV_Compute},
    { "GetRange", _wrap_CGGraphBV_GetRange},
    { "oGetCenter", _wrap_CGGraphBV_oGetCenter},
    { "TestFrustum", _wrap_CGGraphBV_TestFrustum},
    { "eGetTypeID", _wrap_CGGraphBV_eGetTypeID},
    { "TestInside", _wrap_CGGraphBV_TestInside},
    { "oGetBV", _wrap_CGGraphBV_oGetBV},
    { "GetExtents", _wrap_CGGraphBV_GetExtents},
    { "oGetMax", _wrap_CGGraphBV_oGetMax},
    { "oGetMin", _wrap_CGGraphBV_oGetMin},
    {0,0}
};
static swig_lua_method swig_CGGraphBV_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphBV_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphBV_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphBV_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphBV_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphBV_Sf_SwigStatic = {
    "CGGraphBV",
    swig_CGGraphBV_Sf_SwigStatic_methods,
    swig_CGGraphBV_Sf_SwigStatic_attributes,
    swig_CGGraphBV_Sf_SwigStatic_constants,
    swig_CGGraphBV_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphBV_bases[] = {0};
static const char *swig_CGGraphBV_base_names[] = {0};
static swig_lua_class _wrap_class_CGGraphBV = { "CGGraphBV", "CGGraphBV", &SWIGTYPE_p_CGGraphBV,0, swig_delete_CGGraphBV, swig_CGGraphBV_methods, swig_CGGraphBV_attributes, &swig_CGGraphBV_Sf_SwigStatic, swig_CGGraphBV_meta, swig_CGGraphBV_bases, swig_CGGraphBV_base_names };

static int _wrap_new_CGBaseMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *result = 0 ;
    
    SWIG_check_num_args("CGBaseMesh::CGBaseMesh",0,0)
    result = (CGBaseMesh *)new CGBaseMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBaseMesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBaseMesh_SetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGBaseMesh::SetBV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBaseMesh::SetBV",1,"CGBaseMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGBaseMesh::SetBV",2,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGBaseMesh_SetBV",1,SWIGTYPE_p_CGBaseMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGBaseMesh_SetBV",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetBV(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBaseMesh_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGBaseMesh::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBaseMesh::poGetBV",1,"CGBaseMesh const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGBaseMesh_poGetBV",1,SWIGTYPE_p_CGBaseMesh);
    }
    
    result = (CGGraphBV *)((CGBaseMesh const *)arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBaseMesh_eGetType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *arg1 = 0 ;
    E3D_MeshType result;
    
    SWIG_check_num_args("CGBaseMesh::eGetType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBaseMesh::eGetType",1,"CGBaseMesh const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGBaseMesh_eGetType",1,SWIGTYPE_p_CGBaseMesh);
    }
    
    result = (E3D_MeshType)((CGBaseMesh const *)arg1)->eGetType();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBaseMesh_eGetPrimitiveType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *arg1 = 0 ;
    E3D_PrimitiveType result;
    
    SWIG_check_num_args("CGBaseMesh::eGetPrimitiveType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBaseMesh::eGetPrimitiveType",1,"CGBaseMesh const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGBaseMesh_eGetPrimitiveType",1,SWIGTYPE_p_CGBaseMesh);
    }
    
    result = (E3D_PrimitiveType)((CGBaseMesh const *)arg1)->eGetPrimitiveType();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBaseMesh_uiGetNumPrims(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGBaseMesh::uiGetNumPrims",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBaseMesh::uiGetNumPrims",1,"CGBaseMesh const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGBaseMesh_uiGetNumPrims",1,SWIGTYPE_p_CGBaseMesh);
    }
    
    result = (uint)((CGBaseMesh const *)arg1)->uiGetNumPrims();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBaseMesh_uiGetNumVXs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGBaseMesh::uiGetNumVXs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBaseMesh::uiGetNumVXs",1,"CGBaseMesh const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGBaseMesh_uiGetNumVXs",1,SWIGTYPE_p_CGBaseMesh);
    }
    
    result = (uint)((CGBaseMesh const *)arg1)->uiGetNumVXs();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBaseMesh_uiGetNumIndices(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBaseMesh *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGBaseMesh::uiGetNumIndices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBaseMesh::uiGetNumIndices",1,"CGBaseMesh const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGBaseMesh_uiGetNumIndices",1,SWIGTYPE_p_CGBaseMesh);
    }
    
    result = (uint)((CGBaseMesh const *)arg1)->uiGetNumIndices();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBaseMesh(void *obj) {
CGBaseMesh *arg1 = (CGBaseMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBaseMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBaseMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBaseMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBaseMesh_methods[]= {
    { "SetBV", _wrap_CGBaseMesh_SetBV},
    { "poGetBV", _wrap_CGBaseMesh_poGetBV},
    { "eGetType", _wrap_CGBaseMesh_eGetType},
    { "eGetPrimitiveType", _wrap_CGBaseMesh_eGetPrimitiveType},
    { "uiGetNumPrims", _wrap_CGBaseMesh_uiGetNumPrims},
    { "uiGetNumVXs", _wrap_CGBaseMesh_uiGetNumVXs},
    { "uiGetNumIndices", _wrap_CGBaseMesh_uiGetNumIndices},
    {0,0}
};
static swig_lua_method swig_CGBaseMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBaseMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBaseMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBaseMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBaseMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBaseMesh_Sf_SwigStatic = {
    "CGBaseMesh",
    swig_CGBaseMesh_Sf_SwigStatic_methods,
    swig_CGBaseMesh_Sf_SwigStatic_attributes,
    swig_CGBaseMesh_Sf_SwigStatic_constants,
    swig_CGBaseMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBaseMesh_bases[] = {0};
static const char *swig_CGBaseMesh_base_names[] = {0};
static swig_lua_class _wrap_class_CGBaseMesh = { "CGBaseMesh", "CGBaseMesh", &SWIGTYPE_p_CGBaseMesh,_proxy__wrap_new_CGBaseMesh, swig_delete_CGBaseMesh, swig_CGBaseMesh_methods, swig_CGBaseMesh_attributes, &swig_CGBaseMesh_Sf_SwigStatic, swig_CGBaseMesh_meta, swig_CGBaseMesh_bases, swig_CGBaseMesh_base_names };

static int _wrap_new_CGMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("CGMesh::CGMesh",0,0)
    result = (CGMesh *)new CGMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    E3D_PrimitiveType arg4 ;
    uint arg5 ;
    
    SWIG_check_num_args("CGMesh::Init",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::Init",1,"CGMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMesh::Init",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMesh::Init",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMesh::Init",4,"E3D_PrimitiveType");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGMesh::Init",5,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_Init",1,SWIGTYPE_p_CGMesh);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    arg4 = (E3D_PrimitiveType)(int)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    (arg1)->Init(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poVX_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poVX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poVX",1,"CGMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMesh::m_poVX",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poVX_set",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGMesh_m_poVX_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_poVX = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poVX_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poVX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poVX",1,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poVX_get",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGVect3 *) ((arg1)->m_poVX);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poUV_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect2 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poUV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poUV",1,"CGMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMesh::m_poUV",2,"CGVect2 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poUV_set",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect2,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGMesh_m_poUV_set",2,SWIGTYPE_p_CGVect2);
    }
    
    if (arg1) (arg1)->m_poUV = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poUV_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect2 *result = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poUV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poUV",1,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poUV_get",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGVect2 *) ((arg1)->m_poUV);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect2,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poVN_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poVN",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poVN",1,"CGMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMesh::m_poVN",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poVN_set",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGMesh_m_poVN_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_poVN = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poVN_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poVN",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poVN",1,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poVN_get",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGVect3 *) ((arg1)->m_poVN);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poVC_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poVC",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poVC",1,"CGMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMesh::m_poVC",2,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poVC_set",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGMesh_m_poVC_set",2,SWIGTYPE_p_CGColor);
    }
    
    if (arg1) (arg1)->m_poVC = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poVC_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poVC",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poVC",1,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poVC_get",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGColor *) ((arg1)->m_poVC);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poTN_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poTN",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poTN",1,"CGMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMesh::m_poTN",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poTN_set",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGMesh_m_poTN_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_poTN = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poTN_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poTN",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poTN",1,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poTN_get",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGVect3 *) ((arg1)->m_poTN);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poUV2_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect2 *arg2 = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poUV2",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poUV2",1,"CGMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMesh::m_poUV2",2,"CGVect2 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poUV2_set",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect2,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGMesh_m_poUV2_set",2,SWIGTYPE_p_CGVect2);
    }
    
    if (arg1) (arg1)->m_poUV2 = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_poUV2_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect2 *result = 0 ;
    
    SWIG_check_num_args("CGMesh::m_poUV2",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_poUV2",1,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_poUV2_get",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGVect2 *) ((arg1)->m_poUV2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect2,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_pusIdx_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    unsigned short *arg2 = 0 ;
    
    SWIG_check_num_args("CGMesh::m_pusIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_pusIdx",1,"CGMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMesh::m_pusIdx",2,"unsigned short *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_pusIdx_set",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGMesh_m_pusIdx_set",2,SWIGTYPE_p_unsigned_short);
    }
    
    if (arg1) (arg1)->m_pusIdx = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMesh_m_pusIdx_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    unsigned short *result = 0 ;
    
    SWIG_check_num_args("CGMesh::m_pusIdx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMesh::m_pusIdx",1,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGMesh_m_pusIdx_get",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (unsigned short *) ((arg1)->m_pusIdx);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGMesh(void *obj) {
CGMesh *arg1 = (CGMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMesh_attributes[] = {
    { "m_poVX", _wrap_CGMesh_m_poVX_get, _wrap_CGMesh_m_poVX_set },
    { "m_poUV", _wrap_CGMesh_m_poUV_get, _wrap_CGMesh_m_poUV_set },
    { "m_poVN", _wrap_CGMesh_m_poVN_get, _wrap_CGMesh_m_poVN_set },
    { "m_poVC", _wrap_CGMesh_m_poVC_get, _wrap_CGMesh_m_poVC_set },
    { "m_poTN", _wrap_CGMesh_m_poTN_get, _wrap_CGMesh_m_poTN_set },
    { "m_poUV2", _wrap_CGMesh_m_poUV2_get, _wrap_CGMesh_m_poUV2_set },
    { "m_pusIdx", _wrap_CGMesh_m_pusIdx_get, _wrap_CGMesh_m_pusIdx_set },
    {0,0,0}
};
static swig_lua_method swig_CGMesh_methods[]= {
    { "Init", _wrap_CGMesh_Init},
    {0,0}
};
static swig_lua_method swig_CGMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMesh_Sf_SwigStatic = {
    "CGMesh",
    swig_CGMesh_Sf_SwigStatic_methods,
    swig_CGMesh_Sf_SwigStatic_attributes,
    swig_CGMesh_Sf_SwigStatic_constants,
    swig_CGMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMesh_bases[] = {0,0};
static const char *swig_CGMesh_base_names[] = {"CGBaseMesh *",0};
static swig_lua_class _wrap_class_CGMesh = { "CGMesh", "CGMesh", &SWIGTYPE_p_CGMesh,_proxy__wrap_new_CGMesh, swig_delete_CGMesh, swig_CGMesh_methods, swig_CGMesh_attributes, &swig_CGMesh_Sf_SwigStatic, swig_CGMesh_meta, swig_CGMesh_bases, swig_CGMesh_base_names };

static int _wrap_new_CGMeshBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMeshBox *result = 0 ;
    
    SWIG_check_num_args("CGMeshBox::CGMeshBox",0,0)
    result = (CGMeshBox *)new CGMeshBox();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMeshBox,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGMeshBox(void *obj) {
CGMeshBox *arg1 = (CGMeshBox *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMeshBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMeshBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMeshBox_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGMeshBox_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGMeshBox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGMeshBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMeshBox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMeshBox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMeshBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMeshBox_Sf_SwigStatic = {
    "CGMeshBox",
    swig_CGMeshBox_Sf_SwigStatic_methods,
    swig_CGMeshBox_Sf_SwigStatic_attributes,
    swig_CGMeshBox_Sf_SwigStatic_constants,
    swig_CGMeshBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMeshBox_bases[] = {0,0};
static const char *swig_CGMeshBox_base_names[] = {"CGMesh *",0};
static swig_lua_class _wrap_class_CGMeshBox = { "CGMeshBox", "CGMeshBox", &SWIGTYPE_p_CGMeshBox,_proxy__wrap_new_CGMeshBox, swig_delete_CGMeshBox, swig_CGMeshBox_methods, swig_CGMeshBox_attributes, &swig_CGMeshBox_Sf_SwigStatic, swig_CGMeshBox_meta, swig_CGMeshBox_bases, swig_CGMeshBox_base_names };

static int _wrap_new_CGMeshSphere__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMeshSphere *result = 0 ;
    
    SWIG_check_num_args("CGMeshSphere::CGMeshSphere",0,0)
    result = (CGMeshSphere *)new CGMeshSphere();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMeshSphere,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGMeshSphere__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    float arg2 ;
    CGMeshSphere *result = 0 ;
    
    SWIG_check_num_args("CGMeshSphere::CGMeshSphere",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGMeshSphere::CGMeshSphere",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMeshSphere::CGMeshSphere",2,"float");
    arg1 = (int)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGMeshSphere *)new CGMeshSphere(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMeshSphere,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGMeshSphere(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGMeshSphere__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CGMeshSphere__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGMeshSphere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMeshSphere::CGMeshSphere()\n"
    "    CGMeshSphere::CGMeshSphere(int,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_CGMeshSphere(void *obj) {
CGMeshSphere *arg1 = (CGMeshSphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMeshSphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMeshSphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMeshSphere_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGMeshSphere_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGMeshSphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGMeshSphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMeshSphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMeshSphere_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMeshSphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMeshSphere_Sf_SwigStatic = {
    "CGMeshSphere",
    swig_CGMeshSphere_Sf_SwigStatic_methods,
    swig_CGMeshSphere_Sf_SwigStatic_attributes,
    swig_CGMeshSphere_Sf_SwigStatic_constants,
    swig_CGMeshSphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMeshSphere_bases[] = {0,0};
static const char *swig_CGMeshSphere_base_names[] = {"CGMesh *",0};
static swig_lua_class _wrap_class_CGMeshSphere = { "CGMeshSphere", "CGMeshSphere", &SWIGTYPE_p_CGMeshSphere,_proxy__wrap_new_CGMeshSphere, swig_delete_CGMeshSphere, swig_CGMeshSphere_methods, swig_CGMeshSphere_attributes, &swig_CGMeshSphere_Sf_SwigStatic, swig_CGMeshSphere_meta, swig_CGMeshSphere_bases, swig_CGMeshSphere_base_names };

static int _wrap_new_CGMeshRect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMeshRect *result = 0 ;
    
    SWIG_check_num_args("CGMeshRect::CGMeshRect",0,0)
    result = (CGMeshRect *)new CGMeshRect();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMeshRect,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGMeshRect(void *obj) {
CGMeshRect *arg1 = (CGMeshRect *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMeshRect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMeshRect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMeshRect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGMeshRect_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGMeshRect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGMeshRect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMeshRect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMeshRect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMeshRect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMeshRect_Sf_SwigStatic = {
    "CGMeshRect",
    swig_CGMeshRect_Sf_SwigStatic_methods,
    swig_CGMeshRect_Sf_SwigStatic_attributes,
    swig_CGMeshRect_Sf_SwigStatic_constants,
    swig_CGMeshRect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMeshRect_bases[] = {0,0};
static const char *swig_CGMeshRect_base_names[] = {"CGMesh *",0};
static swig_lua_class _wrap_class_CGMeshRect = { "CGMeshRect", "CGMeshRect", &SWIGTYPE_p_CGMeshRect,_proxy__wrap_new_CGMeshRect, swig_delete_CGMeshRect, swig_CGMeshRect_methods, swig_CGMeshRect_attributes, &swig_CGMeshRect_Sf_SwigStatic, swig_CGMeshRect_meta, swig_CGMeshRect_bases, swig_CGMeshRect_base_names };

static int _wrap_new_CGMeshCross(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMeshCross *result = 0 ;
    
    SWIG_check_num_args("CGMeshCross::CGMeshCross",0,0)
    result = (CGMeshCross *)new CGMeshCross();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMeshCross,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGMeshCross(void *obj) {
CGMeshCross *arg1 = (CGMeshCross *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMeshCross(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMeshCross);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMeshCross_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGMeshCross_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGMeshCross_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGMeshCross_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMeshCross_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMeshCross_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMeshCross_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMeshCross_Sf_SwigStatic = {
    "CGMeshCross",
    swig_CGMeshCross_Sf_SwigStatic_methods,
    swig_CGMeshCross_Sf_SwigStatic_attributes,
    swig_CGMeshCross_Sf_SwigStatic_constants,
    swig_CGMeshCross_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMeshCross_bases[] = {0,0};
static const char *swig_CGMeshCross_base_names[] = {"CGMesh *",0};
static swig_lua_class _wrap_class_CGMeshCross = { "CGMeshCross", "CGMeshCross", &SWIGTYPE_p_CGMeshCross,_proxy__wrap_new_CGMeshCross, swig_delete_CGMeshCross, swig_CGMeshCross_methods, swig_CGMeshCross_attributes, &swig_CGMeshCross_Sf_SwigStatic, swig_CGMeshCross_meta, swig_CGMeshCross_bases, swig_CGMeshCross_base_names };

static int _wrap_new_CGCompiledMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCompiledMesh *result = 0 ;
    
    SWIG_check_num_args("CGCompiledMesh::CGCompiledMesh",0,0)
    result = (CGCompiledMesh *)new CGCompiledMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCompiledMesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCompiledMesh_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCompiledMesh *arg1 = 0 ;
    handler arg2 = 0 ;
    E3D_PrimitiveType arg3 ;
    uint arg4 ;
    uint arg5 ;
    
    SWIG_check_num_args("CGCompiledMesh::Init",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCompiledMesh::Init",1,"CGCompiledMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCompiledMesh::Init",2,"handler");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCompiledMesh::Init",3,"E3D_PrimitiveType");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGCompiledMesh::Init",4,"uint");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGCompiledMesh::Init",5,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCompiledMesh,0))){
      SWIG_fail_ptr("CGCompiledMesh_Init",1,SWIGTYPE_p_CGCompiledMesh);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGCompiledMesh_Init");
    arg3 = (E3D_PrimitiveType)(int)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    (arg1)->Init(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCompiledMesh_hGetHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCompiledMesh *arg1 = 0 ;
    handler result;
    
    SWIG_check_num_args("CGCompiledMesh::hGetHandler",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCompiledMesh::hGetHandler",1,"CGCompiledMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCompiledMesh,0))){
      SWIG_fail_ptr("CGCompiledMesh_hGetHandler",1,SWIGTYPE_p_CGCompiledMesh);
    }
    
    result = (handler)(arg1)->hGetHandler();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCompiledMesh(void *obj) {
CGCompiledMesh *arg1 = (CGCompiledMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCompiledMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCompiledMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCompiledMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCompiledMesh_methods[]= {
    { "Init", _wrap_CGCompiledMesh_Init},
    { "hGetHandler", _wrap_CGCompiledMesh_hGetHandler},
    {0,0}
};
static swig_lua_method swig_CGCompiledMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCompiledMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCompiledMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCompiledMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCompiledMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCompiledMesh_Sf_SwigStatic = {
    "CGCompiledMesh",
    swig_CGCompiledMesh_Sf_SwigStatic_methods,
    swig_CGCompiledMesh_Sf_SwigStatic_attributes,
    swig_CGCompiledMesh_Sf_SwigStatic_constants,
    swig_CGCompiledMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCompiledMesh_bases[] = {0,0};
static const char *swig_CGCompiledMesh_base_names[] = {"CGBaseMesh *",0};
static swig_lua_class _wrap_class_CGCompiledMesh = { "CGCompiledMesh", "CGCompiledMesh", &SWIGTYPE_p_CGCompiledMesh,_proxy__wrap_new_CGCompiledMesh, swig_delete_CGCompiledMesh, swig_CGCompiledMesh_methods, swig_CGCompiledMesh_attributes, &swig_CGCompiledMesh_Sf_SwigStatic, swig_CGCompiledMesh_meta, swig_CGCompiledMesh_bases, swig_CGCompiledMesh_base_names };

static int _wrap_CGUnmanagedMesh_SetNumVXs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUnmanagedMesh *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGUnmanagedMesh::SetNumVXs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUnmanagedMesh::SetNumVXs",1,"CGUnmanagedMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGUnmanagedMesh::SetNumVXs",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUnmanagedMesh,0))){
      SWIG_fail_ptr("CGUnmanagedMesh_SetNumVXs",1,SWIGTYPE_p_CGUnmanagedMesh);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetNumVXs(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGUnmanagedMesh_SetNumPrims(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUnmanagedMesh *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGUnmanagedMesh::SetNumPrims",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUnmanagedMesh::SetNumPrims",1,"CGUnmanagedMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGUnmanagedMesh::SetNumPrims",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUnmanagedMesh,0))){
      SWIG_fail_ptr("CGUnmanagedMesh_SetNumPrims",1,SWIGTYPE_p_CGUnmanagedMesh);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetNumPrims(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGUnmanagedMesh_SetPrimitiveType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUnmanagedMesh *arg1 = 0 ;
    E3D_PrimitiveType arg2 ;
    
    SWIG_check_num_args("CGUnmanagedMesh::SetPrimitiveType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUnmanagedMesh::SetPrimitiveType",1,"CGUnmanagedMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGUnmanagedMesh::SetPrimitiveType",2,"E3D_PrimitiveType");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUnmanagedMesh,0))){
      SWIG_fail_ptr("CGUnmanagedMesh_SetPrimitiveType",1,SWIGTYPE_p_CGUnmanagedMesh);
    }
    
    arg2 = (E3D_PrimitiveType)(int)lua_tonumber(L, 2);
    (arg1)->SetPrimitiveType(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGUnmanagedMesh_Link(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUnmanagedMesh *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGUnmanagedMesh::Link",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUnmanagedMesh::Link",1,"CGUnmanagedMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGUnmanagedMesh::Link",2,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUnmanagedMesh,0))){
      SWIG_fail_ptr("CGUnmanagedMesh_Link",1,SWIGTYPE_p_CGUnmanagedMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGUnmanagedMesh_Link",2,SWIGTYPE_p_CGMesh);
    }
    
    (arg1)->Link(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGUnmanagedMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUnmanagedMesh *result = 0 ;
    
    SWIG_check_num_args("CGUnmanagedMesh::CGUnmanagedMesh",0,0)
    result = (CGUnmanagedMesh *)new CGUnmanagedMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGUnmanagedMesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGUnmanagedMesh(void *obj) {
CGUnmanagedMesh *arg1 = (CGUnmanagedMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGUnmanagedMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGUnmanagedMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGUnmanagedMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGUnmanagedMesh_methods[]= {
    { "SetNumVXs", _wrap_CGUnmanagedMesh_SetNumVXs},
    { "SetNumPrims", _wrap_CGUnmanagedMesh_SetNumPrims},
    { "SetPrimitiveType", _wrap_CGUnmanagedMesh_SetPrimitiveType},
    { "Link", _wrap_CGUnmanagedMesh_Link},
    {0,0}
};
static swig_lua_method swig_CGUnmanagedMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGUnmanagedMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGUnmanagedMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGUnmanagedMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGUnmanagedMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGUnmanagedMesh_Sf_SwigStatic = {
    "CGUnmanagedMesh",
    swig_CGUnmanagedMesh_Sf_SwigStatic_methods,
    swig_CGUnmanagedMesh_Sf_SwigStatic_attributes,
    swig_CGUnmanagedMesh_Sf_SwigStatic_constants,
    swig_CGUnmanagedMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGUnmanagedMesh_bases[] = {0,0};
static const char *swig_CGUnmanagedMesh_base_names[] = {"CGMesh *",0};
static swig_lua_class _wrap_class_CGUnmanagedMesh = { "CGUnmanagedMesh", "CGUnmanagedMesh", &SWIGTYPE_p_CGUnmanagedMesh,_proxy__wrap_new_CGUnmanagedMesh, swig_delete_CGUnmanagedMesh, swig_CGUnmanagedMesh_methods, swig_CGUnmanagedMesh_attributes, &swig_CGUnmanagedMesh_Sf_SwigStatic, swig_CGUnmanagedMesh_meta, swig_CGUnmanagedMesh_bases, swig_CGUnmanagedMesh_base_names };

static int _wrap_ComputePrimitiveNormals(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    
    SWIG_check_num_args("MeshUtils::ComputePrimitiveNormals",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::ComputePrimitiveNormals",1,"CGMesh &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("ComputePrimitiveNormals",1,SWIGTYPE_p_CGMesh);
    }
    
    MeshUtils::ComputePrimitiveNormals(*arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ComputeVertexNormals(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    
    SWIG_check_num_args("MeshUtils::ComputeVertexNormals",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::ComputeVertexNormals",1,"CGMesh &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("ComputeVertexNormals",1,SWIGTYPE_p_CGMesh);
    }
    
    MeshUtils::ComputeVertexNormals(*arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ComputeUVOrthoMapping(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    
    SWIG_check_num_args("MeshUtils::ComputeUVOrthoMapping",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::ComputeUVOrthoMapping",1,"CGMesh &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("ComputeUVOrthoMapping",1,SWIGTYPE_p_CGMesh);
    }
    
    MeshUtils::ComputeUVOrthoMapping(*arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TranslateMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("MeshUtils::TranslateMesh",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::TranslateMesh",1,"CGMesh &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("MeshUtils::TranslateMesh",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("TranslateMesh",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("TranslateMesh",2,SWIGTYPE_p_CGVect3);
    }
    
    MeshUtils::TranslateMesh(*arg1,*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ScaleMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("MeshUtils::ScaleMesh",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::ScaleMesh",1,"CGMesh &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("MeshUtils::ScaleMesh",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("ScaleMesh",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("ScaleMesh",2,SWIGTYPE_p_CGVect3);
    }
    
    MeshUtils::ScaleMesh(*arg1,*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_RotateMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("MeshUtils::RotateMesh",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::RotateMesh",1,"CGMesh &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("MeshUtils::RotateMesh",2,"CGVect3 &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("MeshUtils::RotateMesh",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("RotateMesh",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("RotateMesh",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    MeshUtils::RotateMesh(*arg1,*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TransformMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("MeshUtils::TransformMesh",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::TransformMesh",1,"CGMesh &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("MeshUtils::TransformMesh",2,"CGMatrix4x4 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("TransformMesh",1,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("TransformMesh",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    MeshUtils::TransformMesh(*arg1,*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_poComputeBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("MeshUtils::poComputeBV",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::poComputeBV",1,"CGMesh const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("poComputeBV",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGGraphBV *)MeshUtils::poComputeBV((CGMesh const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_poComputeBVAABB(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGGraphBVAABB *result = 0 ;
    
    SWIG_check_num_args("MeshUtils::poComputeBVAABB",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::poComputeBVAABB",1,"CGMesh const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("poComputeBVAABB",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGGraphBVAABB *)MeshUtils::poComputeBVAABB((CGMesh const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVAABB,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_poComputeBVSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMesh *arg1 = 0 ;
    CGGraphBVSphere *result = 0 ;
    
    SWIG_check_num_args("MeshUtils::poComputeBVSphere",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("MeshUtils::poComputeBVSphere",1,"CGMesh const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("poComputeBVSphere",1,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGGraphBVSphere *)MeshUtils::poComputeBVSphere((CGMesh const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVSphere,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGShaderExtDB(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderExtDB *result = 0 ;
    
    SWIG_check_num_args("CGShaderExtDB::CGShaderExtDB",0,0)
    result = (CGShaderExtDB *)new CGShaderExtDB();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderExtDB,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderExtDB_AddExtension(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CGShaderExtDB::AddExtension",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CGShaderExtDB::AddExtension",1,"char *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShaderExtDB::AddExtension",2,"void *");
    arg1 = (char *)lua_tostring(L, 1);
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CGShaderExtDB_AddExtension");
    CGShaderExtDB::AddExtension(arg1,arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderExtDB_pGetExtension(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CGShaderExtDB::pGetExtension",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CGShaderExtDB::pGetExtension",1,"char *");
    arg1 = (char *)lua_tostring(L, 1);
    result = (void *)CGShaderExtDB::pGetExtension(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderExtDB_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    
    SWIG_check_num_args("CGShaderExtDB::Invalidate",0,0)
    CGShaderExtDB::Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShaderExtDB(void *obj) {
CGShaderExtDB *arg1 = (CGShaderExtDB *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShaderExtDB(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShaderExtDB);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShaderExtDB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShaderExtDB_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGShaderExtDB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShaderExtDB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShaderExtDB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShaderExtDB_Sf_SwigStatic_methods[]= {
    { "AddExtension", _wrap_CGShaderExtDB_AddExtension},
    { "pGetExtension", _wrap_CGShaderExtDB_pGetExtension},
    { "Invalidate", _wrap_CGShaderExtDB_Invalidate},
    {0,0}
};
static swig_lua_class* swig_CGShaderExtDB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShaderExtDB_Sf_SwigStatic = {
    "CGShaderExtDB",
    swig_CGShaderExtDB_Sf_SwigStatic_methods,
    swig_CGShaderExtDB_Sf_SwigStatic_attributes,
    swig_CGShaderExtDB_Sf_SwigStatic_constants,
    swig_CGShaderExtDB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShaderExtDB_bases[] = {0};
static const char *swig_CGShaderExtDB_base_names[] = {0};
static swig_lua_class _wrap_class_CGShaderExtDB = { "CGShaderExtDB", "CGShaderExtDB", &SWIGTYPE_p_CGShaderExtDB,_proxy__wrap_new_CGShaderExtDB, swig_delete_CGShaderExtDB, swig_CGShaderExtDB_methods, swig_CGShaderExtDB_attributes, &swig_CGShaderExtDB_Sf_SwigStatic, swig_CGShaderExtDB_meta, swig_CGShaderExtDB_bases, swig_CGShaderExtDB_base_names };

static int _wrap_new_CGShaderInstruction__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderInstruction *result = 0 ;
    
    SWIG_check_num_args("CGShaderInstruction::CGShaderInstruction",0,0)
    result = (CGShaderInstruction *)new CGShaderInstruction();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderInstruction,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGShaderInstruction__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    E3D_ShaderInstructionType arg1 ;
    CGShaderInstruction *result = 0 ;
    
    SWIG_check_num_args("CGShaderInstruction::CGShaderInstruction",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGShaderInstruction::CGShaderInstruction",1,"E3D_ShaderInstructionType");
    arg1 = (E3D_ShaderInstructionType)(int)lua_tonumber(L, 1);
    result = (CGShaderInstruction *)new CGShaderInstruction(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderInstruction,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGShaderInstruction(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGShaderInstruction__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGShaderInstruction__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGShaderInstruction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGShaderInstruction::CGShaderInstruction()\n"
    "    CGShaderInstruction::CGShaderInstruction(E3D_ShaderInstructionType)\n");
  lua_error(L);return 0;
}


static int _wrap_CGShaderInstruction_eGetInstructionType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderInstruction *arg1 = 0 ;
    E3D_ShaderInstructionType result;
    
    SWIG_check_num_args("CGShaderInstruction::eGetInstructionType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderInstruction::eGetInstructionType",1,"CGShaderInstruction *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShaderInstruction,0))){
      SWIG_fail_ptr("CGShaderInstruction_eGetInstructionType",1,SWIGTYPE_p_CGShaderInstruction);
    }
    
    result = (E3D_ShaderInstructionType)(arg1)->eGetInstructionType();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShaderInstruction(void *obj) {
CGShaderInstruction *arg1 = (CGShaderInstruction *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShaderInstruction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShaderInstruction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShaderInstruction_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShaderInstruction_methods[]= {
    { "eGetInstructionType", _wrap_CGShaderInstruction_eGetInstructionType},
    {0,0}
};
static swig_lua_method swig_CGShaderInstruction_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShaderInstruction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShaderInstruction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShaderInstruction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShaderInstruction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShaderInstruction_Sf_SwigStatic = {
    "CGShaderInstruction",
    swig_CGShaderInstruction_Sf_SwigStatic_methods,
    swig_CGShaderInstruction_Sf_SwigStatic_attributes,
    swig_CGShaderInstruction_Sf_SwigStatic_constants,
    swig_CGShaderInstruction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShaderInstruction_bases[] = {0};
static const char *swig_CGShaderInstruction_base_names[] = {0};
static swig_lua_class _wrap_class_CGShaderInstruction = { "CGShaderInstruction", "CGShaderInstruction", &SWIGTYPE_p_CGShaderInstruction,_proxy__wrap_new_CGShaderInstruction, swig_delete_CGShaderInstruction, swig_CGShaderInstruction_methods, swig_CGShaderInstruction_attributes, &swig_CGShaderInstruction_Sf_SwigStatic, swig_CGShaderInstruction_meta, swig_CGShaderInstruction_bases, swig_CGShaderInstruction_base_names };

static int _wrap_new_CGShInsBlendOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsBlendOp *result = 0 ;
    
    SWIG_check_num_args("CGShInsBlendOp::CGShInsBlendOp",0,0)
    result = (CGShInsBlendOp *)new CGShInsBlendOp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsBlendOp,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsBlendOp_eGetBlendMode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsBlendOp *arg1 = 0 ;
    E3D_BlendMode result;
    
    SWIG_check_num_args("CGShInsBlendOp::eGetBlendMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsBlendOp::eGetBlendMode",1,"CGShInsBlendOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsBlendOp,0))){
      SWIG_fail_ptr("CGShInsBlendOp_eGetBlendMode",1,SWIGTYPE_p_CGShInsBlendOp);
    }
    
    result = (E3D_BlendMode)(arg1)->eGetBlendMode();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsBlendOp_SetBlendMode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsBlendOp *arg1 = 0 ;
    E3D_BlendMode arg2 ;
    
    SWIG_check_num_args("CGShInsBlendOp::SetBlendMode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsBlendOp::SetBlendMode",1,"CGShInsBlendOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsBlendOp::SetBlendMode",2,"E3D_BlendMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsBlendOp,0))){
      SWIG_fail_ptr("CGShInsBlendOp_SetBlendMode",1,SWIGTYPE_p_CGShInsBlendOp);
    }
    
    arg2 = (E3D_BlendMode)(int)lua_tonumber(L, 2);
    (arg1)->SetBlendMode(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsBlendOp(void *obj) {
CGShInsBlendOp *arg1 = (CGShInsBlendOp *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsBlendOp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsBlendOp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsBlendOp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsBlendOp_methods[]= {
    { "eGetBlendMode", _wrap_CGShInsBlendOp_eGetBlendMode},
    { "SetBlendMode", _wrap_CGShInsBlendOp_SetBlendMode},
    {0,0}
};
static swig_lua_method swig_CGShInsBlendOp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsBlendOp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsBlendOp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsBlendOp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsBlendOp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsBlendOp_SwigStatic = {
    "CGShInsBlendOp",
    swig_CGShInsBlendOp_SwigStatic_methods,
    swig_CGShInsBlendOp_SwigStatic_attributes,
    swig_CGShInsBlendOp_SwigStatic_constants,
    swig_CGShInsBlendOp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsBlendOp_bases[] = {0,0};
static const char *swig_CGShInsBlendOp_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsBlendOp = { "CGShInsBlendOp", "CGShInsBlendOp", &SWIGTYPE_p_CGShInsBlendOp,_proxy__wrap_new_CGShInsBlendOp, swig_delete_CGShInsBlendOp, swig_CGShInsBlendOp_methods, swig_CGShInsBlendOp_attributes, &swig_CGShInsBlendOp_SwigStatic, swig_CGShInsBlendOp_meta, swig_CGShInsBlendOp_bases, swig_CGShInsBlendOp_base_names };

static int _wrap_new_CGShInsSetTMU(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsSetTMU *result = 0 ;
    
    SWIG_check_num_args("CGShInsSetTMU::CGShInsSetTMU",0,0)
    result = (CGShInsSetTMU *)new CGShInsSetTMU();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsSetTMU,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsSetTMU_uiGetTMU(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsSetTMU *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGShInsSetTMU::uiGetTMU",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsSetTMU::uiGetTMU",1,"CGShInsSetTMU *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsSetTMU,0))){
      SWIG_fail_ptr("CGShInsSetTMU_uiGetTMU",1,SWIGTYPE_p_CGShInsSetTMU);
    }
    
    result = (uint)(arg1)->uiGetTMU();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsSetTMU_SetTMU(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsSetTMU *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGShInsSetTMU::SetTMU",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsSetTMU::SetTMU",1,"CGShInsSetTMU *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsSetTMU::SetTMU",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsSetTMU,0))){
      SWIG_fail_ptr("CGShInsSetTMU_SetTMU",1,SWIGTYPE_p_CGShInsSetTMU);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetTMU(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsSetTMU(void *obj) {
CGShInsSetTMU *arg1 = (CGShInsSetTMU *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsSetTMU(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsSetTMU);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsSetTMU_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsSetTMU_methods[]= {
    { "uiGetTMU", _wrap_CGShInsSetTMU_uiGetTMU},
    { "SetTMU", _wrap_CGShInsSetTMU_SetTMU},
    {0,0}
};
static swig_lua_method swig_CGShInsSetTMU_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsSetTMU_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsSetTMU_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsSetTMU_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsSetTMU_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsSetTMU_Sf_SwigStatic = {
    "CGShInsSetTMU",
    swig_CGShInsSetTMU_Sf_SwigStatic_methods,
    swig_CGShInsSetTMU_Sf_SwigStatic_attributes,
    swig_CGShInsSetTMU_Sf_SwigStatic_constants,
    swig_CGShInsSetTMU_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsSetTMU_bases[] = {0,0};
static const char *swig_CGShInsSetTMU_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsSetTMU = { "CGShInsSetTMU", "CGShInsSetTMU", &SWIGTYPE_p_CGShInsSetTMU,_proxy__wrap_new_CGShInsSetTMU, swig_delete_CGShInsSetTMU, swig_CGShInsSetTMU_methods, swig_CGShInsSetTMU_attributes, &swig_CGShInsSetTMU_Sf_SwigStatic, swig_CGShInsSetTMU_meta, swig_CGShInsSetTMU_bases, swig_CGShInsSetTMU_base_names };

static int _wrap_new_CGShInsTexOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *result = 0 ;
    
    SWIG_check_num_args("CGShInsTexOp::CGShInsTexOp",0,0)
    result = (CGShInsTexOp *)new CGShInsTexOp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsTexOp,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_eGetTexOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    EShInsTexOp result;
    
    SWIG_check_num_args("CGShInsTexOp::eGetTexOp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::eGetTexOp",1,"CGShInsTexOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_eGetTexOp",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    result = (EShInsTexOp)(arg1)->eGetTexOp();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_SetTexOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    EShInsTexOp arg2 ;
    
    SWIG_check_num_args("CGShInsTexOp::SetTexOp",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::SetTexOp",1,"CGShInsTexOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsTexOp::SetTexOp",2,"EShInsTexOp");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_SetTexOp",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    arg2 = (EShInsTexOp)(int)lua_tonumber(L, 2);
    (arg1)->SetTexOp(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_poGetEvaluator(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGShInsTexOp::poGetEvaluator",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::poGetEvaluator",1,"CGShInsTexOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_poGetEvaluator",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    result = (CGEvaluator *)(arg1)->poGetEvaluator();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_SetEvaluator(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsTexOp::SetEvaluator",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::SetEvaluator",1,"CGShInsTexOp *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShInsTexOp::SetEvaluator",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_SetEvaluator",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGShInsTexOp_SetEvaluator",2,SWIGTYPE_p_CGEvaluator);
    }
    
    (arg1)->SetEvaluator(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_poMat_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsTexOp::m_poMat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_poMat",1,"CGShInsTexOp *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShInsTexOp::m_poMat",2,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_poMat_set",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGShInsTexOp_m_poMat_set",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    if (arg1) (arg1)->m_poMat = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_poMat_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGShInsTexOp::m_poMat",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_poMat",1,"CGShInsTexOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_poMat_get",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    result = (CGMatrix4x4 *) ((arg1)->m_poMat);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_uiImgRows_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGShInsTexOp::m_uiImgRows",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_uiImgRows",1,"CGShInsTexOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsTexOp::m_uiImgRows",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_uiImgRows_set",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiImgRows = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_uiImgRows_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGShInsTexOp::m_uiImgRows",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_uiImgRows",1,"CGShInsTexOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_uiImgRows_get",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    result = (uint) ((arg1)->m_uiImgRows);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_uiImgCols_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGShInsTexOp::m_uiImgCols",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_uiImgCols",1,"CGShInsTexOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsTexOp::m_uiImgCols",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_uiImgCols_set",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiImgCols = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_uiImgCols_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGShInsTexOp::m_uiImgCols",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_uiImgCols",1,"CGShInsTexOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_uiImgCols_get",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    result = (uint) ((arg1)->m_uiImgCols);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_fFreq_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGShInsTexOp::m_fFreq",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_fFreq",1,"CGShInsTexOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsTexOp::m_fFreq",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_fFreq_set",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fFreq = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexOp_m_fFreq_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexOp *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGShInsTexOp::m_fFreq",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexOp::m_fFreq",1,"CGShInsTexOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexOp,0))){
      SWIG_fail_ptr("CGShInsTexOp_m_fFreq_get",1,SWIGTYPE_p_CGShInsTexOp);
    }
    
    result = (float) ((arg1)->m_fFreq);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsTexOp(void *obj) {
CGShInsTexOp *arg1 = (CGShInsTexOp *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsTexOp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsTexOp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsTexOp_attributes[] = {
    { "m_poMat", _wrap_CGShInsTexOp_m_poMat_get, _wrap_CGShInsTexOp_m_poMat_set },
    { "m_uiImgRows", _wrap_CGShInsTexOp_m_uiImgRows_get, _wrap_CGShInsTexOp_m_uiImgRows_set },
    { "m_uiImgCols", _wrap_CGShInsTexOp_m_uiImgCols_get, _wrap_CGShInsTexOp_m_uiImgCols_set },
    { "m_fFreq", _wrap_CGShInsTexOp_m_fFreq_get, _wrap_CGShInsTexOp_m_fFreq_set },
    {0,0,0}
};
static swig_lua_method swig_CGShInsTexOp_methods[]= {
    { "eGetTexOp", _wrap_CGShInsTexOp_eGetTexOp},
    { "SetTexOp", _wrap_CGShInsTexOp_SetTexOp},
    { "poGetEvaluator", _wrap_CGShInsTexOp_poGetEvaluator},
    { "SetEvaluator", _wrap_CGShInsTexOp_SetEvaluator},
    {0,0}
};
static swig_lua_method swig_CGShInsTexOp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsTexOp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsTexOp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsTexOp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsTexOp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsTexOp_SwigStatic = {
    "CGShInsTexOp",
    swig_CGShInsTexOp_SwigStatic_methods,
    swig_CGShInsTexOp_SwigStatic_attributes,
    swig_CGShInsTexOp_SwigStatic_constants,
    swig_CGShInsTexOp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsTexOp_bases[] = {0,0};
static const char *swig_CGShInsTexOp_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsTexOp = { "CGShInsTexOp", "CGShInsTexOp", &SWIGTYPE_p_CGShInsTexOp,_proxy__wrap_new_CGShInsTexOp, swig_delete_CGShInsTexOp, swig_CGShInsTexOp_methods, swig_CGShInsTexOp_attributes, &swig_CGShInsTexOp_SwigStatic, swig_CGShInsTexOp_meta, swig_CGShInsTexOp_bases, swig_CGShInsTexOp_base_names };

static int _wrap_new_CGShInsGeoOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsGeoOp *result = 0 ;
    
    SWIG_check_num_args("CGShInsGeoOp::CGShInsGeoOp",0,0)
    result = (CGShInsGeoOp *)new CGShInsGeoOp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsGeoOp,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsGeoOp_eGetGeoOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsGeoOp *arg1 = 0 ;
    EShInsGeoOp result;
    
    SWIG_check_num_args("CGShInsGeoOp::eGetGeoOp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsGeoOp::eGetGeoOp",1,"CGShInsGeoOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsGeoOp,0))){
      SWIG_fail_ptr("CGShInsGeoOp_eGetGeoOp",1,SWIGTYPE_p_CGShInsGeoOp);
    }
    
    result = (EShInsGeoOp)(arg1)->eGetGeoOp();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsGeoOp_SetGOpType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsGeoOp *arg1 = 0 ;
    EShInsGeoOp arg2 ;
    
    SWIG_check_num_args("CGShInsGeoOp::SetGOpType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsGeoOp::SetGOpType",1,"CGShInsGeoOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsGeoOp::SetGOpType",2,"EShInsGeoOp");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsGeoOp,0))){
      SWIG_fail_ptr("CGShInsGeoOp_SetGOpType",1,SWIGTYPE_p_CGShInsGeoOp);
    }
    
    arg2 = (EShInsGeoOp)(int)lua_tonumber(L, 2);
    (arg1)->SetGOpType(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsGeoOp_poGetEvaluator(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsGeoOp *arg1 = 0 ;
    CGEvaluator *result = 0 ;
    
    SWIG_check_num_args("CGShInsGeoOp::poGetEvaluator",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsGeoOp::poGetEvaluator",1,"CGShInsGeoOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsGeoOp,0))){
      SWIG_fail_ptr("CGShInsGeoOp_poGetEvaluator",1,SWIGTYPE_p_CGShInsGeoOp);
    }
    
    result = (CGEvaluator *)(arg1)->poGetEvaluator();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGEvaluator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsGeoOp_SetEvaluator(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsGeoOp *arg1 = 0 ;
    CGEvaluator *arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsGeoOp::SetEvaluator",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsGeoOp::SetEvaluator",1,"CGShInsGeoOp *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShInsGeoOp::SetEvaluator",2,"CGEvaluator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsGeoOp,0))){
      SWIG_fail_ptr("CGShInsGeoOp_SetEvaluator",1,SWIGTYPE_p_CGShInsGeoOp);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGEvaluator,0))){
      SWIG_fail_ptr("CGShInsGeoOp_SetEvaluator",2,SWIGTYPE_p_CGEvaluator);
    }
    
    (arg1)->SetEvaluator(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsGeoOp(void *obj) {
CGShInsGeoOp *arg1 = (CGShInsGeoOp *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsGeoOp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsGeoOp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsGeoOp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsGeoOp_methods[]= {
    { "eGetGeoOp", _wrap_CGShInsGeoOp_eGetGeoOp},
    { "SetGOpType", _wrap_CGShInsGeoOp_SetGOpType},
    { "poGetEvaluator", _wrap_CGShInsGeoOp_poGetEvaluator},
    { "SetEvaluator", _wrap_CGShInsGeoOp_SetEvaluator},
    {0,0}
};
static swig_lua_method swig_CGShInsGeoOp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsGeoOp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsGeoOp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsGeoOp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsGeoOp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsGeoOp_SwigStatic = {
    "CGShInsGeoOp",
    swig_CGShInsGeoOp_SwigStatic_methods,
    swig_CGShInsGeoOp_SwigStatic_attributes,
    swig_CGShInsGeoOp_SwigStatic_constants,
    swig_CGShInsGeoOp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsGeoOp_bases[] = {0,0};
static const char *swig_CGShInsGeoOp_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsGeoOp = { "CGShInsGeoOp", "CGShInsGeoOp", &SWIGTYPE_p_CGShInsGeoOp,_proxy__wrap_new_CGShInsGeoOp, swig_delete_CGShInsGeoOp, swig_CGShInsGeoOp_methods, swig_CGShInsGeoOp_attributes, &swig_CGShInsGeoOp_SwigStatic, swig_CGShInsGeoOp_meta, swig_CGShInsGeoOp_bases, swig_CGShInsGeoOp_base_names };

static int _wrap_new_CGShInsWireframe(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsWireframe *result = 0 ;
    
    SWIG_check_num_args("CGShInsWireframe::CGShInsWireframe",0,0)
    result = (CGShInsWireframe *)new CGShInsWireframe();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsWireframe,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsWireframe_SetColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsWireframe *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsWireframe::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsWireframe::SetColor",1,"CGShInsWireframe *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGShInsWireframe::SetColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsWireframe,0))){
      SWIG_fail_ptr("CGShInsWireframe_SetColor",1,SWIGTYPE_p_CGShInsWireframe);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGShInsWireframe_SetColor",2,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetColor((CGColor const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsWireframe_oGetColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsWireframe *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGShInsWireframe::oGetColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsWireframe::oGetColor",1,"CGShInsWireframe *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsWireframe,0))){
      SWIG_fail_ptr("CGShInsWireframe_oGetColor",1,SWIGTYPE_p_CGShInsWireframe);
    }
    
    result = (CGColor *) &(arg1)->oGetColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsWireframe(void *obj) {
CGShInsWireframe *arg1 = (CGShInsWireframe *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsWireframe(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsWireframe);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsWireframe_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsWireframe_methods[]= {
    { "SetColor", _wrap_CGShInsWireframe_SetColor},
    { "oGetColor", _wrap_CGShInsWireframe_oGetColor},
    {0,0}
};
static swig_lua_method swig_CGShInsWireframe_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsWireframe_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsWireframe_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsWireframe_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsWireframe_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsWireframe_Sf_SwigStatic = {
    "CGShInsWireframe",
    swig_CGShInsWireframe_Sf_SwigStatic_methods,
    swig_CGShInsWireframe_Sf_SwigStatic_attributes,
    swig_CGShInsWireframe_Sf_SwigStatic_constants,
    swig_CGShInsWireframe_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsWireframe_bases[] = {0,0};
static const char *swig_CGShInsWireframe_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsWireframe = { "CGShInsWireframe", "CGShInsWireframe", &SWIGTYPE_p_CGShInsWireframe,_proxy__wrap_new_CGShInsWireframe, swig_delete_CGShInsWireframe, swig_CGShInsWireframe_methods, swig_CGShInsWireframe_attributes, &swig_CGShInsWireframe_Sf_SwigStatic, swig_CGShInsWireframe_meta, swig_CGShInsWireframe_bases, swig_CGShInsWireframe_base_names };

static int _wrap_new_CGShInsExtension(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsExtension *result = 0 ;
    
    SWIG_check_num_args("CGShInsExtension::CGShInsExtension",0,0)
    result = (CGShInsExtension *)new CGShInsExtension();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsExtension,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsExtension_pFunction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsExtension *arg1 = 0 ;
    TExtensionFunction result;
    
    SWIG_check_num_args("CGShInsExtension::pFunction",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsExtension::pFunction",1,"CGShInsExtension *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsExtension,0))){
      SWIG_fail_ptr("CGShInsExtension_pFunction",1,SWIGTYPE_p_CGShInsExtension);
    }
    
    result = (TExtensionFunction)(arg1)->pFunction();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsExtension_SetFunction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsExtension *arg1 = 0 ;
    TExtensionFunction arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsExtension::SetFunction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsExtension::SetFunction",1,"CGShInsExtension *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShInsExtension::SetFunction",2,"TExtensionFunction");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsExtension,0))){
      SWIG_fail_ptr("CGShInsExtension_SetFunction",1,SWIGTYPE_p_CGShInsExtension);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__void,0))){
      SWIG_fail_ptr("CGShInsExtension_SetFunction",2,SWIGTYPE_p_f_p_void__void);
    }
    
    (arg1)->SetFunction(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsExtension(void *obj) {
CGShInsExtension *arg1 = (CGShInsExtension *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsExtension(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsExtension);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsExtension_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsExtension_methods[]= {
    { "pFunction", _wrap_CGShInsExtension_pFunction},
    { "SetFunction", _wrap_CGShInsExtension_SetFunction},
    {0,0}
};
static swig_lua_method swig_CGShInsExtension_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsExtension_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsExtension_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsExtension_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsExtension_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsExtension_Sf_SwigStatic = {
    "CGShInsExtension",
    swig_CGShInsExtension_Sf_SwigStatic_methods,
    swig_CGShInsExtension_Sf_SwigStatic_attributes,
    swig_CGShInsExtension_Sf_SwigStatic_constants,
    swig_CGShInsExtension_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsExtension_bases[] = {0,0};
static const char *swig_CGShInsExtension_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsExtension = { "CGShInsExtension", "CGShInsExtension", &SWIGTYPE_p_CGShInsExtension,_proxy__wrap_new_CGShInsExtension, swig_delete_CGShInsExtension, swig_CGShInsExtension_methods, swig_CGShInsExtension_attributes, &swig_CGShInsExtension_Sf_SwigStatic, swig_CGShInsExtension_meta, swig_CGShInsExtension_bases, swig_CGShInsExtension_base_names };

static int _wrap_new_CGShInsColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsColor *result = 0 ;
    
    SWIG_check_num_args("CGShInsColor::CGShInsColor",0,0)
    result = (CGShInsColor *)new CGShInsColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsColor,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsColor_SetColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsColor *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsColor::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsColor::SetColor",1,"CGShInsColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGShInsColor::SetColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsColor,0))){
      SWIG_fail_ptr("CGShInsColor_SetColor",1,SWIGTYPE_p_CGShInsColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGShInsColor_SetColor",2,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetColor((CGColor const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsColor_oGetColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsColor *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGShInsColor::oGetColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsColor::oGetColor",1,"CGShInsColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsColor,0))){
      SWIG_fail_ptr("CGShInsColor_oGetColor",1,SWIGTYPE_p_CGShInsColor);
    }
    
    result = (CGColor *) &(arg1)->oGetColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsColor(void *obj) {
CGShInsColor *arg1 = (CGShInsColor *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsColor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsColor_methods[]= {
    { "SetColor", _wrap_CGShInsColor_SetColor},
    { "oGetColor", _wrap_CGShInsColor_oGetColor},
    {0,0}
};
static swig_lua_method swig_CGShInsColor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsColor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsColor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsColor_Sf_SwigStatic = {
    "CGShInsColor",
    swig_CGShInsColor_Sf_SwigStatic_methods,
    swig_CGShInsColor_Sf_SwigStatic_attributes,
    swig_CGShInsColor_Sf_SwigStatic_constants,
    swig_CGShInsColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsColor_bases[] = {0,0};
static const char *swig_CGShInsColor_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsColor = { "CGShInsColor", "CGShInsColor", &SWIGTYPE_p_CGShInsColor,_proxy__wrap_new_CGShInsColor, swig_delete_CGShInsColor, swig_CGShInsColor_methods, swig_CGShInsColor_attributes, &swig_CGShInsColor_Sf_SwigStatic, swig_CGShInsColor_meta, swig_CGShInsColor_bases, swig_CGShInsColor_base_names };

static int _wrap_new_CGMipMap__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *result = 0 ;
    
    SWIG_check_num_args("CGMipMap::CGMipMap",0,0)
    result = (CGMipMap *)new CGMipMap();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMipMap,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGMipMap__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    uint arg2 ;
    uint arg3 ;
    EImageFormat arg4 ;
    CGMipMap *result = 0 ;
    
    SWIG_check_num_args("CGMipMap::CGMipMap",4,4)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGMipMap::CGMipMap",1,"uint");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMipMap::CGMipMap",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGMipMap::CGMipMap",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGMipMap::CGMipMap",4,"EImageFormat");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    arg4 = (EImageFormat)(int)lua_tonumber(L, 4);
    result = (CGMipMap *)new CGMipMap(arg1,arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMipMap,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGMipMap(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGMipMap__SWIG_0(L);
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CGMipMap__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGMipMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGMipMap::CGMipMap()\n"
    "    CGMipMap::CGMipMap(uint,uint,uint,EImageFormat)\n");
  lua_error(L);return 0;
}


static int _wrap_CGMipMap_m_uiTX_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGMipMap::m_uiTX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_uiTX",1,"CGMipMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMipMap::m_uiTX",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_uiTX_set",1,SWIGTYPE_p_CGMipMap);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiTX = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_uiTX_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGMipMap::m_uiTX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_uiTX",1,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_uiTX_get",1,SWIGTYPE_p_CGMipMap);
    }
    
    result = (uint) ((arg1)->m_uiTX);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_uiTY_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGMipMap::m_uiTY",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_uiTY",1,"CGMipMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMipMap::m_uiTY",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_uiTY_set",1,SWIGTYPE_p_CGMipMap);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiTY = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_uiTY_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGMipMap::m_uiTY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_uiTY",1,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_uiTY_get",1,SWIGTYPE_p_CGMipMap);
    }
    
    result = (uint) ((arg1)->m_uiTY);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_uiNumLODs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGMipMap::m_uiNumLODs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_uiNumLODs",1,"CGMipMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMipMap::m_uiNumLODs",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_uiNumLODs_set",1,SWIGTYPE_p_CGMipMap);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiNumLODs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_uiNumLODs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGMipMap::m_uiNumLODs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_uiNumLODs",1,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_uiNumLODs_get",1,SWIGTYPE_p_CGMipMap);
    }
    
    result = (uint) ((arg1)->m_uiNumLODs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_eFormat_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    EImageFormat arg2 ;
    
    SWIG_check_num_args("CGMipMap::m_eFormat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_eFormat",1,"CGMipMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGMipMap::m_eFormat",2,"EImageFormat");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_eFormat_set",1,SWIGTYPE_p_CGMipMap);
    }
    
    arg2 = (EImageFormat)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_eFormat = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_eFormat_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    EImageFormat result;
    
    SWIG_check_num_args("CGMipMap::m_eFormat",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_eFormat",1,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_eFormat_get",1,SWIGTYPE_p_CGMipMap);
    }
    
    result = (EImageFormat) ((arg1)->m_eFormat);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_pLOD_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    void **arg2 = (void **)0 ;
    
    SWIG_check_num_args("CGMipMap::m_pLOD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_pLOD",1,"CGMipMap *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMipMap::m_pLOD",2,"void *[16]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_pLOD_set",1,SWIGTYPE_p_CGMipMap);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_void,0))){
      SWIG_fail_ptr("CGMipMap_m_pLOD_set",2,SWIGTYPE_p_p_void);
    }
    
    {
      size_t ii;
      void * *b = (void * *) arg1->m_pLOD;
      for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((void * *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_pLOD_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    void **result = 0 ;
    
    SWIG_check_num_args("CGMipMap::m_pLOD",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_pLOD",1,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_pLOD_get",1,SWIGTYPE_p_CGMipMap);
    }
    
    result = (void **)(void **) ((arg1)->m_pLOD);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_pPalette_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CGMipMap::m_pPalette",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_pPalette",1,"CGMipMap *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMipMap::m_pPalette",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_pPalette_set",1,SWIGTYPE_p_CGMipMap);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CGMipMap_m_pPalette_set");
    if (arg1) (arg1)->m_pPalette = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_pPalette_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CGMipMap::m_pPalette",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_pPalette",1,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_pPalette_get",1,SWIGTYPE_p_CGMipMap);
    }
    
    result = (void *) ((arg1)->m_pPalette);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_poHandler_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGMipMap::m_poHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_poHandler",1,"CGMipMap *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGMipMap::m_poHandler",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_poHandler_set",1,SWIGTYPE_p_CGMipMap);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGMipMap_m_poHandler_set");
    if (arg1) (arg1)->m_poHandler = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMap_m_poHandler_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    handler result;
    
    SWIG_check_num_args("CGMipMap::m_poHandler",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMap::m_poHandler",1,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGMipMap_m_poHandler_get",1,SWIGTYPE_p_CGMipMap);
    }
    
    result = (handler) ((arg1)->m_poHandler);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGMipMap(void *obj) {
CGMipMap *arg1 = (CGMipMap *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMipMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMipMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMipMap_attributes[] = {
    { "m_uiTX", _wrap_CGMipMap_m_uiTX_get, _wrap_CGMipMap_m_uiTX_set },
    { "m_uiTY", _wrap_CGMipMap_m_uiTY_get, _wrap_CGMipMap_m_uiTY_set },
    { "m_uiNumLODs", _wrap_CGMipMap_m_uiNumLODs_get, _wrap_CGMipMap_m_uiNumLODs_set },
    { "m_eFormat", _wrap_CGMipMap_m_eFormat_get, _wrap_CGMipMap_m_eFormat_set },
    { "m_pLOD", _wrap_CGMipMap_m_pLOD_get, _wrap_CGMipMap_m_pLOD_set },
    { "m_pPalette", _wrap_CGMipMap_m_pPalette_get, _wrap_CGMipMap_m_pPalette_set },
    { "m_poHandler", _wrap_CGMipMap_m_poHandler_get, _wrap_CGMipMap_m_poHandler_set },
    {0,0,0}
};
static swig_lua_method swig_CGMipMap_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGMipMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGMipMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMipMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMipMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMipMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMipMap_SwigStatic = {
    "CGMipMap",
    swig_CGMipMap_SwigStatic_methods,
    swig_CGMipMap_SwigStatic_attributes,
    swig_CGMipMap_SwigStatic_constants,
    swig_CGMipMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMipMap_bases[] = {0,0};
static const char *swig_CGMipMap_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGMipMap = { "CGMipMap", "CGMipMap", &SWIGTYPE_p_CGMipMap,_proxy__wrap_new_CGMipMap, swig_delete_CGMipMap, swig_CGMipMap_methods, swig_CGMipMap_attributes, &swig_CGMipMap_SwigStatic, swig_CGMipMap_meta, swig_CGMipMap_bases, swig_CGMipMap_base_names };

static int _wrap_new_CGTextureObj(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *result = 0 ;
    
    SWIG_check_num_args("CGTextureObj::CGTextureObj",0,0)
    result = (CGTextureObj *)new CGTextureObj();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextureObj,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    
    SWIG_check_num_args("CGTextureObj::Think",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::Think",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_Think",1,SWIGTYPE_p_CGTextureObj);
    }
    
    (arg1)->Think();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_poMipMap_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    CGMipMap *arg2 = 0 ;
    
    SWIG_check_num_args("CGTextureObj::m_poMipMap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_poMipMap",1,"CGTextureObj *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTextureObj::m_poMipMap",2,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_poMipMap_set",1,SWIGTYPE_p_CGTextureObj);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMipMap,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGTextureObj_m_poMipMap_set",2,SWIGTYPE_p_CGMipMap);
    }
    
    if (arg1) (arg1)->m_poMipMap = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_poMipMap_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    CGMipMap *result = 0 ;
    
    SWIG_check_num_args("CGTextureObj::m_poMipMap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_poMipMap",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_poMipMap_get",1,SWIGTYPE_p_CGTextureObj);
    }
    
    result = (CGMipMap *) ((arg1)->m_poMipMap);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMipMap,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiUWrap_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGTextureObj::m_uiUWrap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiUWrap",1,"CGTextureObj *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTextureObj::m_uiUWrap",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiUWrap_set",1,SWIGTYPE_p_CGTextureObj);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiUWrap = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiUWrap_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGTextureObj::m_uiUWrap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiUWrap",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiUWrap_get",1,SWIGTYPE_p_CGTextureObj);
    }
    
    result = (uint) ((arg1)->m_uiUWrap);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiVWrap_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGTextureObj::m_uiVWrap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiVWrap",1,"CGTextureObj *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTextureObj::m_uiVWrap",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiVWrap_set",1,SWIGTYPE_p_CGTextureObj);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiVWrap = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiVWrap_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGTextureObj::m_uiVWrap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiVWrap",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiVWrap_get",1,SWIGTYPE_p_CGTextureObj);
    }
    
    result = (uint) ((arg1)->m_uiVWrap);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiMinFilter_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGTextureObj::m_uiMinFilter",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiMinFilter",1,"CGTextureObj *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTextureObj::m_uiMinFilter",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiMinFilter_set",1,SWIGTYPE_p_CGTextureObj);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiMinFilter = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiMinFilter_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGTextureObj::m_uiMinFilter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiMinFilter",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiMinFilter_get",1,SWIGTYPE_p_CGTextureObj);
    }
    
    result = (uint) ((arg1)->m_uiMinFilter);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiMaxFilter_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGTextureObj::m_uiMaxFilter",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiMaxFilter",1,"CGTextureObj *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTextureObj::m_uiMaxFilter",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiMaxFilter_set",1,SWIGTYPE_p_CGTextureObj);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiMaxFilter = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiMaxFilter_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGTextureObj::m_uiMaxFilter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiMaxFilter",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiMaxFilter_get",1,SWIGTYPE_p_CGTextureObj);
    }
    
    result = (uint) ((arg1)->m_uiMaxFilter);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiHandler_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGTextureObj::m_uiHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiHandler",1,"CGTextureObj *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTextureObj::m_uiHandler",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiHandler_set",1,SWIGTYPE_p_CGTextureObj);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiHandler = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_m_uiHandler_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGTextureObj::m_uiHandler",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::m_uiHandler",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_m_uiHandler_get",1,SWIGTYPE_p_CGTextureObj);
    }
    
    result = (uint) ((arg1)->m_uiHandler);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTextureObj_bValid(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTextureObj *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGTextureObj::bValid",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTextureObj::bValid",1,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTextureObj,0))){
      SWIG_fail_ptr("CGTextureObj_bValid",1,SWIGTYPE_p_CGTextureObj);
    }
    
    result = (bool)(arg1)->bValid();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTextureObj(void *obj) {
CGTextureObj *arg1 = (CGTextureObj *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTextureObj(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTextureObj);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTextureObj_attributes[] = {
    { "m_poMipMap", _wrap_CGTextureObj_m_poMipMap_get, _wrap_CGTextureObj_m_poMipMap_set },
    { "m_uiUWrap", _wrap_CGTextureObj_m_uiUWrap_get, _wrap_CGTextureObj_m_uiUWrap_set },
    { "m_uiVWrap", _wrap_CGTextureObj_m_uiVWrap_get, _wrap_CGTextureObj_m_uiVWrap_set },
    { "m_uiMinFilter", _wrap_CGTextureObj_m_uiMinFilter_get, _wrap_CGTextureObj_m_uiMinFilter_set },
    { "m_uiMaxFilter", _wrap_CGTextureObj_m_uiMaxFilter_get, _wrap_CGTextureObj_m_uiMaxFilter_set },
    { "m_uiHandler", _wrap_CGTextureObj_m_uiHandler_get, _wrap_CGTextureObj_m_uiHandler_set },
    {0,0,0}
};
static swig_lua_method swig_CGTextureObj_methods[]= {
    { "Think", _wrap_CGTextureObj_Think},
    { "bValid", _wrap_CGTextureObj_bValid},
    {0,0}
};
static swig_lua_method swig_CGTextureObj_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTextureObj_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTextureObj_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTextureObj_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTextureObj_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTextureObj_Sf_SwigStatic = {
    "CGTextureObj",
    swig_CGTextureObj_Sf_SwigStatic_methods,
    swig_CGTextureObj_Sf_SwigStatic_attributes,
    swig_CGTextureObj_Sf_SwigStatic_constants,
    swig_CGTextureObj_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTextureObj_bases[] = {0,0};
static const char *swig_CGTextureObj_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGTextureObj = { "CGTextureObj", "CGTextureObj", &SWIGTYPE_p_CGTextureObj,_proxy__wrap_new_CGTextureObj, swig_delete_CGTextureObj, swig_CGTextureObj_methods, swig_CGTextureObj_attributes, &swig_CGTextureObj_Sf_SwigStatic, swig_CGTextureObj_meta, swig_CGTextureObj_bases, swig_CGTextureObj_base_names };

static int _wrap_new_CGShInsTexture(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexture *result = 0 ;
    
    SWIG_check_num_args("CGShInsTexture::CGShInsTexture",0,0)
    result = (CGShInsTexture *)new CGShInsTexture();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsTexture,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexture_m_poTex_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexture *arg1 = 0 ;
    CGTextureObj *arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsTexture::m_poTex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexture::m_poTex",1,"CGShInsTexture *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShInsTexture::m_poTex",2,"CGTextureObj *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexture,0))){
      SWIG_fail_ptr("CGShInsTexture_m_poTex_set",1,SWIGTYPE_p_CGShInsTexture);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTextureObj,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGShInsTexture_m_poTex_set",2,SWIGTYPE_p_CGTextureObj);
    }
    
    if (arg1) (arg1)->m_poTex = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsTexture_m_poTex_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsTexture *arg1 = 0 ;
    CGTextureObj *result = 0 ;
    
    SWIG_check_num_args("CGShInsTexture::m_poTex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsTexture::m_poTex",1,"CGShInsTexture *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsTexture,0))){
      SWIG_fail_ptr("CGShInsTexture_m_poTex_get",1,SWIGTYPE_p_CGShInsTexture);
    }
    
    result = (CGTextureObj *) ((arg1)->m_poTex);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextureObj,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsTexture(void *obj) {
CGShInsTexture *arg1 = (CGShInsTexture *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsTexture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsTexture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsTexture_attributes[] = {
    { "m_poTex", _wrap_CGShInsTexture_m_poTex_get, _wrap_CGShInsTexture_m_poTex_set },
    {0,0,0}
};
static swig_lua_method swig_CGShInsTexture_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGShInsTexture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsTexture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsTexture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsTexture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsTexture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsTexture_Sf_SwigStatic = {
    "CGShInsTexture",
    swig_CGShInsTexture_Sf_SwigStatic_methods,
    swig_CGShInsTexture_Sf_SwigStatic_attributes,
    swig_CGShInsTexture_Sf_SwigStatic_constants,
    swig_CGShInsTexture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsTexture_bases[] = {0,0};
static const char *swig_CGShInsTexture_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsTexture = { "CGShInsTexture", "CGShInsTexture", &SWIGTYPE_p_CGShInsTexture,_proxy__wrap_new_CGShInsTexture, swig_delete_CGShInsTexture, swig_CGShInsTexture_methods, swig_CGShInsTexture_attributes, &swig_CGShInsTexture_Sf_SwigStatic, swig_CGShInsTexture_meta, swig_CGShInsTexture_bases, swig_CGShInsTexture_base_names };

static int _wrap_new_CGProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *result = 0 ;
    
    SWIG_check_num_args("CGProgram::CGProgram",0,0)
    result = (CGProgram *)new CGProgram();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGProgram,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_hVS_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGProgram::m_hVS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_hVS",1,"CGProgram *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGProgram::m_hVS",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_hVS_set",1,SWIGTYPE_p_CGProgram);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGProgram_m_hVS_set");
    if (arg1) (arg1)->m_hVS = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_hVS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    handler result;
    
    SWIG_check_num_args("CGProgram::m_hVS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_hVS",1,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_hVS_get",1,SWIGTYPE_p_CGProgram);
    }
    
    result = (handler) ((arg1)->m_hVS);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_hPS_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGProgram::m_hPS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_hPS",1,"CGProgram *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGProgram::m_hPS",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_hPS_set",1,SWIGTYPE_p_CGProgram);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGProgram_m_hPS_set");
    if (arg1) (arg1)->m_hPS = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_hPS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    handler result;
    
    SWIG_check_num_args("CGProgram::m_hPS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_hPS",1,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_hPS_get",1,SWIGTYPE_p_CGProgram);
    }
    
    result = (handler) ((arg1)->m_hPS);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_hProgram_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGProgram::m_hProgram",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_hProgram",1,"CGProgram *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGProgram::m_hProgram",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_hProgram_set",1,SWIGTYPE_p_CGProgram);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGProgram_m_hProgram_set");
    if (arg1) (arg1)->m_hProgram = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_hProgram_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    handler result;
    
    SWIG_check_num_args("CGProgram::m_hProgram",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_hProgram",1,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_hProgram_get",1,SWIGTYPE_p_CGProgram);
    }
    
    result = (handler) ((arg1)->m_hProgram);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_pucVSData_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CGProgram::m_pucVSData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_pucVSData",1,"CGProgram *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGProgram::m_pucVSData",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_pucVSData_set",1,SWIGTYPE_p_CGProgram);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      delete [] arg1->m_pucVSData;
      if (arg2) {
        arg1->m_pucVSData = (char *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->m_pucVSData, (const char *)arg2);
      } else {
        arg1->m_pucVSData = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_pucVSData_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("CGProgram::m_pucVSData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_pucVSData",1,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_pucVSData_get",1,SWIGTYPE_p_CGProgram);
    }
    
    result = (char *) ((arg1)->m_pucVSData);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_pucPSData_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CGProgram::m_pucPSData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_pucPSData",1,"CGProgram *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGProgram::m_pucPSData",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_pucPSData_set",1,SWIGTYPE_p_CGProgram);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      delete [] arg1->m_pucPSData;
      if (arg2) {
        arg1->m_pucPSData = (char *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->m_pucPSData, (const char *)arg2);
      } else {
        arg1->m_pucPSData = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgram_m_pucPSData_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgram *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("CGProgram::m_pucPSData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgram::m_pucPSData",1,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGProgram_m_pucPSData_get",1,SWIGTYPE_p_CGProgram);
    }
    
    result = (char *) ((arg1)->m_pucPSData);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGProgram(void *obj) {
CGProgram *arg1 = (CGProgram *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGProgram(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGProgram);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGProgram_attributes[] = {
    { "m_hVS", _wrap_CGProgram_m_hVS_get, _wrap_CGProgram_m_hVS_set },
    { "m_hPS", _wrap_CGProgram_m_hPS_get, _wrap_CGProgram_m_hPS_set },
    { "m_hProgram", _wrap_CGProgram_m_hProgram_get, _wrap_CGProgram_m_hProgram_set },
    { "m_pucVSData", _wrap_CGProgram_m_pucVSData_get, _wrap_CGProgram_m_pucVSData_set },
    { "m_pucPSData", _wrap_CGProgram_m_pucPSData_get, _wrap_CGProgram_m_pucPSData_set },
    {0,0,0}
};
static swig_lua_method swig_CGProgram_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGProgram_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGProgram_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGProgram_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGProgram_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGProgram_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGProgram_Sf_SwigStatic = {
    "CGProgram",
    swig_CGProgram_Sf_SwigStatic_methods,
    swig_CGProgram_Sf_SwigStatic_attributes,
    swig_CGProgram_Sf_SwigStatic_constants,
    swig_CGProgram_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGProgram_bases[] = {0,0};
static const char *swig_CGProgram_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGProgram = { "CGProgram", "CGProgram", &SWIGTYPE_p_CGProgram,_proxy__wrap_new_CGProgram, swig_delete_CGProgram, swig_CGProgram_methods, swig_CGProgram_attributes, &swig_CGProgram_Sf_SwigStatic, swig_CGProgram_meta, swig_CGProgram_bases, swig_CGProgram_base_names };

static int _wrap_new_CGShInsProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsProgram *result = 0 ;
    
    SWIG_check_num_args("CGShInsProgram::CGShInsProgram",0,0)
    result = (CGShInsProgram *)new CGShInsProgram();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsProgram,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsProgram_SetProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsProgram *arg1 = 0 ;
    CGProgram *arg2 = 0 ;
    
    SWIG_check_num_args("CGShInsProgram::SetProgram",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsProgram::SetProgram",1,"CGShInsProgram *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShInsProgram::SetProgram",2,"CGProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsProgram,0))){
      SWIG_fail_ptr("CGShInsProgram_SetProgram",1,SWIGTYPE_p_CGShInsProgram);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProgram,0))){
      SWIG_fail_ptr("CGShInsProgram_SetProgram",2,SWIGTYPE_p_CGProgram);
    }
    
    (arg1)->SetProgram(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsProgram_poGetProgram(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsProgram *arg1 = 0 ;
    CGProgram *result = 0 ;
    
    SWIG_check_num_args("CGShInsProgram::poGetProgram",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsProgram::poGetProgram",1,"CGShInsProgram *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsProgram,0))){
      SWIG_fail_ptr("CGShInsProgram_poGetProgram",1,SWIGTYPE_p_CGShInsProgram);
    }
    
    result = (CGProgram *)(arg1)->poGetProgram();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGProgram,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsProgram(void *obj) {
CGShInsProgram *arg1 = (CGShInsProgram *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsProgram(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsProgram);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsProgram_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsProgram_methods[]= {
    { "SetProgram", _wrap_CGShInsProgram_SetProgram},
    { "poGetProgram", _wrap_CGShInsProgram_poGetProgram},
    {0,0}
};
static swig_lua_method swig_CGShInsProgram_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsProgram_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsProgram_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsProgram_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsProgram_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsProgram_Sf_SwigStatic = {
    "CGShInsProgram",
    swig_CGShInsProgram_Sf_SwigStatic_methods,
    swig_CGShInsProgram_Sf_SwigStatic_attributes,
    swig_CGShInsProgram_Sf_SwigStatic_constants,
    swig_CGShInsProgram_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsProgram_bases[] = {0,0};
static const char *swig_CGShInsProgram_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsProgram = { "CGShInsProgram", "CGShInsProgram", &SWIGTYPE_p_CGShInsProgram,_proxy__wrap_new_CGShInsProgram, swig_delete_CGShInsProgram, swig_CGShInsProgram_methods, swig_CGShInsProgram_attributes, &swig_CGShInsProgram_Sf_SwigStatic, swig_CGShInsProgram_meta, swig_CGShInsProgram_bases, swig_CGShInsProgram_base_names };

static int _wrap_new_CGShInsZOp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsZOp *result = 0 ;
    
    SWIG_check_num_args("CGShInsZOp::CGShInsZOp",0,0)
    result = (CGShInsZOp *)new CGShInsZOp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShInsZOp,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsZOp_eGetZTestFunc(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsZOp *arg1 = 0 ;
    E3D_ZTestFunc result;
    
    SWIG_check_num_args("CGShInsZOp::eGetZTestFunc",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsZOp::eGetZTestFunc",1,"CGShInsZOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsZOp,0))){
      SWIG_fail_ptr("CGShInsZOp_eGetZTestFunc",1,SWIGTYPE_p_CGShInsZOp);
    }
    
    result = (E3D_ZTestFunc)(arg1)->eGetZTestFunc();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsZOp_SetZTestFunc(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsZOp *arg1 = 0 ;
    E3D_ZTestFunc arg2 ;
    
    SWIG_check_num_args("CGShInsZOp::SetZTestFunc",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsZOp::SetZTestFunc",1,"CGShInsZOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsZOp::SetZTestFunc",2,"E3D_ZTestFunc");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsZOp,0))){
      SWIG_fail_ptr("CGShInsZOp_SetZTestFunc",1,SWIGTYPE_p_CGShInsZOp);
    }
    
    arg2 = (E3D_ZTestFunc)(int)lua_tonumber(L, 2);
    (arg1)->SetZTestFunc(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsZOp_eGetZWrite(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsZOp *arg1 = 0 ;
    E3D_ZWrite result;
    
    SWIG_check_num_args("CGShInsZOp::eGetZWrite",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsZOp::eGetZWrite",1,"CGShInsZOp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsZOp,0))){
      SWIG_fail_ptr("CGShInsZOp_eGetZWrite",1,SWIGTYPE_p_CGShInsZOp);
    }
    
    result = (E3D_ZWrite)(arg1)->eGetZWrite();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShInsZOp_SetZWrite(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShInsZOp *arg1 = 0 ;
    E3D_ZWrite arg2 ;
    
    SWIG_check_num_args("CGShInsZOp::SetZWrite",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShInsZOp::SetZWrite",1,"CGShInsZOp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShInsZOp::SetZWrite",2,"E3D_ZWrite");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShInsZOp,0))){
      SWIG_fail_ptr("CGShInsZOp_SetZWrite",1,SWIGTYPE_p_CGShInsZOp);
    }
    
    arg2 = (E3D_ZWrite)(int)lua_tonumber(L, 2);
    (arg1)->SetZWrite(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShInsZOp(void *obj) {
CGShInsZOp *arg1 = (CGShInsZOp *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShInsZOp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShInsZOp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShInsZOp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShInsZOp_methods[]= {
    { "eGetZTestFunc", _wrap_CGShInsZOp_eGetZTestFunc},
    { "SetZTestFunc", _wrap_CGShInsZOp_SetZTestFunc},
    { "eGetZWrite", _wrap_CGShInsZOp_eGetZWrite},
    { "SetZWrite", _wrap_CGShInsZOp_SetZWrite},
    {0,0}
};
static swig_lua_method swig_CGShInsZOp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShInsZOp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShInsZOp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShInsZOp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShInsZOp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShInsZOp_SwigStatic = {
    "CGShInsZOp",
    swig_CGShInsZOp_SwigStatic_methods,
    swig_CGShInsZOp_SwigStatic_attributes,
    swig_CGShInsZOp_SwigStatic_constants,
    swig_CGShInsZOp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShInsZOp_bases[] = {0,0};
static const char *swig_CGShInsZOp_base_names[] = {"CGShaderInstruction *",0};
static swig_lua_class _wrap_class_CGShInsZOp = { "CGShInsZOp", "CGShInsZOp", &SWIGTYPE_p_CGShInsZOp,_proxy__wrap_new_CGShInsZOp, swig_delete_CGShInsZOp, swig_CGShInsZOp_methods, swig_CGShInsZOp_attributes, &swig_CGShInsZOp_SwigStatic, swig_CGShInsZOp_meta, swig_CGShInsZOp_bases, swig_CGShInsZOp_base_names };

static int _wrap_new_CGShaderDefWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderDefWH *result = 0 ;
    
    SWIG_check_num_args("CGShaderDefWH::CGShaderDefWH",0,0)
    result = (CGShaderDefWH *)new CGShaderDefWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderDefWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShaderDefWH(void *obj) {
CGShaderDefWH *arg1 = (CGShaderDefWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShaderDefWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShaderDefWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShaderDefWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShaderDefWH_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGShaderDefWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShaderDefWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShaderDefWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShaderDefWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShaderDefWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShaderDefWH_Sf_SwigStatic = {
    "CGShaderDefWH",
    swig_CGShaderDefWH_Sf_SwigStatic_methods,
    swig_CGShaderDefWH_Sf_SwigStatic_attributes,
    swig_CGShaderDefWH_Sf_SwigStatic_constants,
    swig_CGShaderDefWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShaderDefWH_bases[] = {0};
static const char *swig_CGShaderDefWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGShaderDefWH = { "CGShaderDefWH", "CGShaderDefWH", &SWIGTYPE_p_CGShaderDefWH,_proxy__wrap_new_CGShaderDefWH, swig_delete_CGShaderDefWH, swig_CGShaderDefWH_methods, swig_CGShaderDefWH_attributes, &swig_CGShaderDefWH_Sf_SwigStatic, swig_CGShaderDefWH_meta, swig_CGShaderDefWH_bases, swig_CGShaderDefWH_base_names };

static int _wrap_CGShaderDefFileWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderDefFileWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGTextResource *result = 0 ;
    
    SWIG_check_num_args("CGShaderDefFileWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderDefFileWH::poLoadResource",1,"CGShaderDefFileWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGShaderDefFileWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShaderDefFileWH,0))){
      SWIG_fail_ptr("CGShaderDefFileWH_poLoadResource",1,SWIGTYPE_p_CGShaderDefFileWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGShaderDefFileWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGTextResource *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderDefFileWH_Reload(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderDefFileWH *arg1 = 0 ;
    
    SWIG_check_num_args("CGShaderDefFileWH::Reload",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderDefFileWH::Reload",1,"CGShaderDefFileWH *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShaderDefFileWH,0))){
      SWIG_fail_ptr("CGShaderDefFileWH_Reload",1,SWIGTYPE_p_CGShaderDefFileWH);
    }
    
    (arg1)->Reload();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGShaderDefFileWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderDefFileWH *result = 0 ;
    
    SWIG_check_num_args("CGShaderDefFileWH::CGShaderDefFileWH",0,0)
    result = (CGShaderDefFileWH *)new CGShaderDefFileWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderDefFileWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShaderDefFileWH(void *obj) {
CGShaderDefFileWH *arg1 = (CGShaderDefFileWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShaderDefFileWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShaderDefFileWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShaderDefFileWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShaderDefFileWH_methods[]= {
    { "poLoadResource", _wrap_CGShaderDefFileWH_poLoadResource},
    { "Reload", _wrap_CGShaderDefFileWH_Reload},
    {0,0}
};
static swig_lua_method swig_CGShaderDefFileWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShaderDefFileWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShaderDefFileWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShaderDefFileWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShaderDefFileWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShaderDefFileWH_Sf_SwigStatic = {
    "CGShaderDefFileWH",
    swig_CGShaderDefFileWH_Sf_SwigStatic_methods,
    swig_CGShaderDefFileWH_Sf_SwigStatic_attributes,
    swig_CGShaderDefFileWH_Sf_SwigStatic_constants,
    swig_CGShaderDefFileWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShaderDefFileWH_bases[] = {0};
static const char *swig_CGShaderDefFileWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGShaderDefFileWH = { "CGShaderDefFileWH", "CGShaderDefFileWH", &SWIGTYPE_p_CGShaderDefFileWH,_proxy__wrap_new_CGShaderDefFileWH, swig_delete_CGShaderDefFileWH, swig_CGShaderDefFileWH_methods, swig_CGShaderDefFileWH_attributes, &swig_CGShaderDefFileWH_Sf_SwigStatic, swig_CGShaderDefFileWH_meta, swig_CGShaderDefFileWH_bases, swig_CGShaderDefFileWH_base_names };

static int _wrap_new_CGShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGShader::CGShader",0,0)
    result = (CGShader *)new CGShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_AddInstruction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    CGShaderInstruction *arg2 = 0 ;
    
    SWIG_check_num_args("CGShader::AddInstruction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::AddInstruction",1,"CGShader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShader::AddInstruction",2,"CGShaderInstruction *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_AddInstruction",1,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShaderInstruction,0))){
      SWIG_fail_ptr("CGShader_AddInstruction",2,SWIGTYPE_p_CGShaderInstruction);
    }
    
    (arg1)->AddInstruction(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_PushInstruction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    CGShaderInstruction *arg2 = 0 ;
    
    SWIG_check_num_args("CGShader::PushInstruction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::PushInstruction",1,"CGShader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShader::PushInstruction",2,"CGShaderInstruction *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_PushInstruction",1,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShaderInstruction,0))){
      SWIG_fail_ptr("CGShader_PushInstruction",2,SWIGTYPE_p_CGShaderInstruction);
    }
    
    (arg1)->PushInstruction(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_pGetInstruction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    uint arg2 ;
    CGShaderInstruction *result = 0 ;
    
    SWIG_check_num_args("CGShader::pGetInstruction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::pGetInstruction",1,"CGShader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShader::pGetInstruction",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_pGetInstruction",1,SWIGTYPE_p_CGShader);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGShaderInstruction *)(arg1)->pGetInstruction(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderInstruction,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_iGetNumInstructions(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CGShader::iGetNumInstructions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::iGetNumInstructions",1,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_iGetNumInstructions",1,SWIGTYPE_p_CGShader);
    }
    
    result = (int)(arg1)->iGetNumInstructions();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    
    SWIG_check_num_args("CGShader::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::Invalidate",1,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_Invalidate",1,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_RefCopy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGShader::RefCopy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::RefCopy",1,"CGShader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShader::RefCopy",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_RefCopy",1,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_RefCopy",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->RefCopy(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_poInsts_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    CGShaderInstruction **arg2 = 0 ;
    
    SWIG_check_num_args("CGShader::poInsts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::poInsts",1,"CGShader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGShader::poInsts",2,"CGShaderInstruction **");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_poInsts_set",1,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_CGShaderInstruction,0))){
      SWIG_fail_ptr("CGShader_poInsts_set",2,SWIGTYPE_p_p_CGShaderInstruction);
    }
    
    if (arg1) (arg1)->poInsts = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_poInsts_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    CGShaderInstruction **result = 0 ;
    
    SWIG_check_num_args("CGShader::poInsts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::poInsts",1,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_poInsts_get",1,SWIGTYPE_p_CGShader);
    }
    
    result = (CGShaderInstruction **) ((arg1)->poInsts);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_CGShaderInstruction,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_m_uiNumInsts_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGShader::m_uiNumInsts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::m_uiNumInsts",1,"CGShader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShader::m_uiNumInsts",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_m_uiNumInsts_set",1,SWIGTYPE_p_CGShader);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiNumInsts = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_m_uiNumInsts_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGShader::m_uiNumInsts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::m_uiNumInsts",1,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_m_uiNumInsts_get",1,SWIGTYPE_p_CGShader);
    }
    
    result = (uint) ((arg1)->m_uiNumInsts);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_bIsTransparent(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGShader::bIsTransparent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::bIsTransparent",1,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_bIsTransparent",1,SWIGTYPE_p_CGShader);
    }
    
    result = (bool)(arg1)->bIsTransparent();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_SetupShaderFlags(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    
    SWIG_check_num_args("CGShader::SetupShaderFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::SetupShaderFlags",1,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_SetupShaderFlags",1,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetupShaderFlags();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_m_uiShFlags_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGShader::m_uiShFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::m_uiShFlags",1,"CGShader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShader::m_uiShFlags",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_m_uiShFlags_set",1,SWIGTYPE_p_CGShader);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiShFlags = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShader_m_uiShFlags_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShader *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGShader::m_uiShFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShader::m_uiShFlags",1,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGShader_m_uiShFlags_get",1,SWIGTYPE_p_CGShader);
    }
    
    result = (uint) ((arg1)->m_uiShFlags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShader(void *obj) {
CGShader *arg1 = (CGShader *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShader_attributes[] = {
    { "poInsts", _wrap_CGShader_poInsts_get, _wrap_CGShader_poInsts_set },
    { "m_uiNumInsts", _wrap_CGShader_m_uiNumInsts_get, _wrap_CGShader_m_uiNumInsts_set },
    { "m_uiShFlags", _wrap_CGShader_m_uiShFlags_get, _wrap_CGShader_m_uiShFlags_set },
    {0,0,0}
};
static swig_lua_method swig_CGShader_methods[]= {
    { "AddInstruction", _wrap_CGShader_AddInstruction},
    { "PushInstruction", _wrap_CGShader_PushInstruction},
    { "pGetInstruction", _wrap_CGShader_pGetInstruction},
    { "iGetNumInstructions", _wrap_CGShader_iGetNumInstructions},
    { "Invalidate", _wrap_CGShader_Invalidate},
    { "RefCopy", _wrap_CGShader_RefCopy},
    { "bIsTransparent", _wrap_CGShader_bIsTransparent},
    { "SetupShaderFlags", _wrap_CGShader_SetupShaderFlags},
    {0,0}
};
static swig_lua_method swig_CGShader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShader_Sf_SwigStatic = {
    "CGShader",
    swig_CGShader_Sf_SwigStatic_methods,
    swig_CGShader_Sf_SwigStatic_attributes,
    swig_CGShader_Sf_SwigStatic_constants,
    swig_CGShader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShader_bases[] = {0,0};
static const char *swig_CGShader_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGShader = { "CGShader", "CGShader", &SWIGTYPE_p_CGShader,_proxy__wrap_new_CGShader, swig_delete_CGShader, swig_CGShader_methods, swig_CGShader_attributes, &swig_CGShader_Sf_SwigStatic, swig_CGShader_meta, swig_CGShader_bases, swig_CGShader_base_names };

static int _wrap_new_CGShaderWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderWH *result = 0 ;
    
    SWIG_check_num_args("CGShaderWH::CGShaderWH",0,0)
    result = (CGShaderWH *)new CGShaderWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderWH_Invalidate__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderWH *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CGShaderWH::Invalidate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderWH::Invalidate",1,"CGShaderWH *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShaderWH::Invalidate",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShaderWH,0))){
      SWIG_fail_ptr("CGShaderWH_Invalidate",1,SWIGTYPE_p_CGShaderWH);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Invalidate(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderWH_Invalidate__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderWH *arg1 = 0 ;
    
    SWIG_check_num_args("CGShaderWH::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderWH::Invalidate",1,"CGShaderWH *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShaderWH,0))){
      SWIG_fail_ptr("CGShaderWH_Invalidate",1,SWIGTYPE_p_CGShaderWH);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderWH_Invalidate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGShaderWH, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CGShaderWH_Invalidate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGShaderWH, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGShaderWH_Invalidate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGShaderWH_Invalidate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGShaderWH::Invalidate(int)\n"
    "    CGShaderWH::Invalidate()\n");
  lua_error(L);return 0;
}


static int _wrap_CGShaderWH_InvalidateElem(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderWH *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CGShaderWH::InvalidateElem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderWH::InvalidateElem",1,"CGShaderWH *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShaderWH::InvalidateElem",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShaderWH,0))){
      SWIG_fail_ptr("CGShaderWH_InvalidateElem",1,SWIGTYPE_p_CGShaderWH);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->InvalidateElem(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderWH_poCreateShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGShaderWH::poCreateShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderWH::poCreateShader",1,"CGShaderWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGShaderWH::poCreateShader",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGShaderWH,0))){
      SWIG_fail_ptr("CGShaderWH_poCreateShader",1,SWIGTYPE_p_CGShaderWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGShaderWH_poCreateShader",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGShader *)(arg1)->poCreateShader((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShaderWH(void *obj) {
CGShaderWH *arg1 = (CGShaderWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShaderWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShaderWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShaderWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShaderWH_methods[]= {
    { "Invalidate", _wrap_CGShaderWH_Invalidate},
    { "InvalidateElem", _wrap_CGShaderWH_InvalidateElem},
    { "poCreateShader", _wrap_CGShaderWH_poCreateShader},
    {0,0}
};
static swig_lua_method swig_CGShaderWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShaderWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShaderWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShaderWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGShaderWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShaderWH_Sf_SwigStatic = {
    "CGShaderWH",
    swig_CGShaderWH_Sf_SwigStatic_methods,
    swig_CGShaderWH_Sf_SwigStatic_attributes,
    swig_CGShaderWH_Sf_SwigStatic_constants,
    swig_CGShaderWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShaderWH_bases[] = {0};
static const char *swig_CGShaderWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGShaderWH = { "CGShaderWH", "CGShaderWH", &SWIGTYPE_p_CGShaderWH,_proxy__wrap_new_CGShaderWH, swig_delete_CGShaderWH, swig_CGShaderWH_methods, swig_CGShaderWH_attributes, &swig_CGShaderWH_Sf_SwigStatic, swig_CGShaderWH_meta, swig_CGShaderWH_bases, swig_CGShaderWH_base_names };

static int _wrap_new_CGShaderParser(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderParser *result = 0 ;
    
    SWIG_check_num_args("CGShaderParser::CGShaderParser",0,0)
    result = (CGShaderParser *)new CGShaderParser();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderParser,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderParser_poCreateShaderFromTexture(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGShaderParser::poCreateShaderFromTexture",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGShaderParser::poCreateShaderFromTexture",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGShaderParser_poCreateShaderFromTexture",1,SWIGTYPE_p_CGString);
    }
    
    result = (CGShader *)CGShaderParser::poCreateShaderFromTexture((CGString const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderParser_poParseShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGShaderParser::poParseShader",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGShaderParser::poParseShader",1,"CGString const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGShaderParser::poParseShader",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGShaderParser_poParseShader",1,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGShaderParser_poParseShader",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGShader *)CGShaderParser::poParseShader((CGString const &)*arg1,(CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShaderParser(void *obj) {
CGShaderParser *arg1 = (CGShaderParser *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShaderParser(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShaderParser);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShaderParser_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShaderParser_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGShaderParser_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShaderParser_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShaderParser_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShaderParser_Sf_SwigStatic_methods[]= {
    { "poCreateShaderFromTexture", _wrap_CGShaderParser_poCreateShaderFromTexture},
    { "poParseShader", _wrap_CGShaderParser_poParseShader},
    {0,0}
};
static swig_lua_class* swig_CGShaderParser_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShaderParser_Sf_SwigStatic = {
    "CGShaderParser",
    swig_CGShaderParser_Sf_SwigStatic_methods,
    swig_CGShaderParser_Sf_SwigStatic_attributes,
    swig_CGShaderParser_Sf_SwigStatic_constants,
    swig_CGShaderParser_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShaderParser_bases[] = {0};
static const char *swig_CGShaderParser_base_names[] = {0};
static swig_lua_class _wrap_class_CGShaderParser = { "CGShaderParser", "CGShaderParser", &SWIGTYPE_p_CGShaderParser,_proxy__wrap_new_CGShaderParser, swig_delete_CGShaderParser, swig_CGShaderParser_methods, swig_CGShaderParser_attributes, &swig_CGShaderParser_Sf_SwigStatic, swig_CGShaderParser_meta, swig_CGShaderParser_bases, swig_CGShaderParser_base_names };

static int _wrap_new_CGShaderUtils(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGShaderUtils *result = 0 ;
    
    SWIG_check_num_args("CGShaderUtils::CGShaderUtils",0,0)
    result = (CGShaderUtils *)new CGShaderUtils();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShaderUtils,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderUtils_poGenerateShaderFromMipMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMap *arg1 = 0 ;
    char *arg2 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGShaderUtils::poGenerateShaderFromMipMap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGShaderUtils::poGenerateShaderFromMipMap",1,"CGMipMap const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGShaderUtils::poGenerateShaderFromMipMap",2,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CGShaderUtils_poGenerateShaderFromMipMap",1,SWIGTYPE_p_CGMipMap);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGShader *)CGShaderUtils::poGenerateShaderFromMipMap((CGMipMap const *)arg1,(char const *)arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderUtils_poGenerateShaderFromColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGColor *arg1 = 0 ;
    char *arg2 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGShaderUtils::poGenerateShaderFromColor",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGShaderUtils::poGenerateShaderFromColor",1,"CGColor const &");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGShaderUtils::poGenerateShaderFromColor",2,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGShaderUtils_poGenerateShaderFromColor",1,SWIGTYPE_p_CGColor);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGShader *)CGShaderUtils::poGenerateShaderFromColor((CGColor const &)*arg1,(char const *)arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderUtils_SetupTilingFlags(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    int arg2 ;
    
    SWIG_check_num_args("CGShaderUtils::SetupTilingFlags",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGShaderUtils::SetupTilingFlags",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShaderUtils::SetupTilingFlags",2,"int");
    arg1 = (int)lua_tonumber(L, 1);
    arg2 = (int)lua_tonumber(L, 2);
    CGShaderUtils::SetupTilingFlags(arg1,arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGShaderUtils_SetupFilterFlags(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    int arg2 ;
    
    SWIG_check_num_args("CGShaderUtils::SetupFilterFlags",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGShaderUtils::SetupFilterFlags",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGShaderUtils::SetupFilterFlags",2,"int");
    arg1 = (int)lua_tonumber(L, 1);
    arg2 = (int)lua_tonumber(L, 2);
    CGShaderUtils::SetupFilterFlags(arg1,arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGShaderUtils(void *obj) {
CGShaderUtils *arg1 = (CGShaderUtils *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGShaderUtils(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGShaderUtils);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGShaderUtils_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGShaderUtils_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGShaderUtils_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGShaderUtils_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGShaderUtils_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGShaderUtils_Sf_SwigStatic_methods[]= {
    { "poGenerateShaderFromMipMap", _wrap_CGShaderUtils_poGenerateShaderFromMipMap},
    { "poGenerateShaderFromColor", _wrap_CGShaderUtils_poGenerateShaderFromColor},
    { "SetupTilingFlags", _wrap_CGShaderUtils_SetupTilingFlags},
    { "SetupFilterFlags", _wrap_CGShaderUtils_SetupFilterFlags},
    {0,0}
};
static swig_lua_class* swig_CGShaderUtils_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGShaderUtils_Sf_SwigStatic = {
    "CGShaderUtils",
    swig_CGShaderUtils_Sf_SwigStatic_methods,
    swig_CGShaderUtils_Sf_SwigStatic_attributes,
    swig_CGShaderUtils_Sf_SwigStatic_constants,
    swig_CGShaderUtils_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGShaderUtils_bases[] = {0};
static const char *swig_CGShaderUtils_base_names[] = {0};
static swig_lua_class _wrap_class_CGShaderUtils = { "CGShaderUtils", "CGShaderUtils", &SWIGTYPE_p_CGShaderUtils,_proxy__wrap_new_CGShaderUtils, swig_delete_CGShaderUtils, swig_CGShaderUtils_methods, swig_CGShaderUtils_attributes, &swig_CGShaderUtils_Sf_SwigStatic, swig_CGShaderUtils_meta, swig_CGShaderUtils_bases, swig_CGShaderUtils_base_names };

static int _wrap_new_CGMipMapWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMapWH *result = 0 ;
    
    SWIG_check_num_args("CGMipMapWH::CGMipMapWH",0,0)
    result = (CGMipMapWH *)new CGMipMapWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMipMapWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMapWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMapWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGMipMap *result = 0 ;
    
    SWIG_check_num_args("CGMipMapWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMapWH::poLoadResource",1,"CGMipMapWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMipMapWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMapWH,0))){
      SWIG_fail_ptr("CGMipMapWH_poLoadResource",1,SWIGTYPE_p_CGMipMapWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGMipMapWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGMipMap *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMipMap,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGMipMapWH_AlternatePath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGMipMapWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGMipMapWH::AlternatePath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGMipMapWH::AlternatePath",1,"CGMipMapWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGMipMapWH::AlternatePath",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGMipMapWH,0))){
      SWIG_fail_ptr("CGMipMapWH_AlternatePath",1,SWIGTYPE_p_CGMipMapWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGMipMapWH_AlternatePath",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->AlternatePath((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGMipMapWH(void *obj) {
CGMipMapWH *arg1 = (CGMipMapWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGMipMapWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGMipMapWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGMipMapWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGMipMapWH_methods[]= {
    { "poLoadResource", _wrap_CGMipMapWH_poLoadResource},
    { "AlternatePath", _wrap_CGMipMapWH_AlternatePath},
    {0,0}
};
static swig_lua_method swig_CGMipMapWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGMipMapWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGMipMapWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGMipMapWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGMipMapWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGMipMapWH_Sf_SwigStatic = {
    "CGMipMapWH",
    swig_CGMipMapWH_Sf_SwigStatic_methods,
    swig_CGMipMapWH_Sf_SwigStatic_attributes,
    swig_CGMipMapWH_Sf_SwigStatic_constants,
    swig_CGMipMapWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGMipMapWH_bases[] = {0};
static const char *swig_CGMipMapWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGMipMapWH = { "CGMipMapWH", "CGMipMapWH", &SWIGTYPE_p_CGMipMapWH,_proxy__wrap_new_CGMipMapWH, swig_delete_CGMipMapWH, swig_CGMipMapWH_methods, swig_CGMipMapWH_attributes, &swig_CGMipMapWH_Sf_SwigStatic, swig_CGMipMapWH_meta, swig_CGMipMapWH_bases, swig_CGMipMapWH_base_names };

static int _wrap_new_CGTexObjWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTexObjWH *result = 0 ;
    
    SWIG_check_num_args("CGTexObjWH::CGTexObjWH",0,0)
    result = (CGTexObjWH *)new CGTexObjWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTexObjWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTexObjWH(void *obj) {
CGTexObjWH *arg1 = (CGTexObjWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTexObjWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTexObjWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTexObjWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTexObjWH_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGTexObjWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTexObjWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTexObjWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTexObjWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTexObjWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTexObjWH_Sf_SwigStatic = {
    "CGTexObjWH",
    swig_CGTexObjWH_Sf_SwigStatic_methods,
    swig_CGTexObjWH_Sf_SwigStatic_attributes,
    swig_CGTexObjWH_Sf_SwigStatic_constants,
    swig_CGTexObjWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTexObjWH_bases[] = {0};
static const char *swig_CGTexObjWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGTexObjWH = { "CGTexObjWH", "CGTexObjWH", &SWIGTYPE_p_CGTexObjWH,_proxy__wrap_new_CGTexObjWH, swig_delete_CGTexObjWH, swig_CGTexObjWH_methods, swig_CGTexObjWH_attributes, &swig_CGTexObjWH_Sf_SwigStatic, swig_CGTexObjWH_meta, swig_CGTexObjWH_bases, swig_CGTexObjWH_base_names };

static int _wrap_new_CGProgramWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgramWH *result = 0 ;
    
    SWIG_check_num_args("CGProgramWH::CGProgramWH",0,0)
    result = (CGProgramWH *)new CGProgramWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGProgramWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgramWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgramWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGProgram *result = 0 ;
    
    SWIG_check_num_args("CGProgramWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgramWH::poLoadResource",1,"CGProgramWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGProgramWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgramWH,0))){
      SWIG_fail_ptr("CGProgramWH_poLoadResource",1,SWIGTYPE_p_CGProgramWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGProgramWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGProgram *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGProgram,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGProgramWH_AlternatePath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGProgramWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGProgramWH::AlternatePath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGProgramWH::AlternatePath",1,"CGProgramWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGProgramWH::AlternatePath",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGProgramWH,0))){
      SWIG_fail_ptr("CGProgramWH_AlternatePath",1,SWIGTYPE_p_CGProgramWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGProgramWH_AlternatePath",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->AlternatePath((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGProgramWH(void *obj) {
CGProgramWH *arg1 = (CGProgramWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGProgramWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGProgramWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGProgramWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGProgramWH_methods[]= {
    { "poLoadResource", _wrap_CGProgramWH_poLoadResource},
    { "AlternatePath", _wrap_CGProgramWH_AlternatePath},
    {0,0}
};
static swig_lua_method swig_CGProgramWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGProgramWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGProgramWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGProgramWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGProgramWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGProgramWH_Sf_SwigStatic = {
    "CGProgramWH",
    swig_CGProgramWH_Sf_SwigStatic_methods,
    swig_CGProgramWH_Sf_SwigStatic_attributes,
    swig_CGProgramWH_Sf_SwigStatic_constants,
    swig_CGProgramWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGProgramWH_bases[] = {0};
static const char *swig_CGProgramWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGProgramWH = { "CGProgramWH", "CGProgramWH", &SWIGTYPE_p_CGProgramWH,_proxy__wrap_new_CGProgramWH, swig_delete_CGProgramWH, swig_CGProgramWH_methods, swig_CGProgramWH_attributes, &swig_CGProgramWH_Sf_SwigStatic, swig_CGProgramWH_meta, swig_CGProgramWH_bases, swig_CGProgramWH_base_names };

static int _wrap_new_CGLight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *result = 0 ;
    
    SWIG_check_num_args("CGLight::CGLight",0,0)
    result = (CGLight *)new CGLight();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLight,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oLitAmb_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGLight::m_oLitAmb",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oLitAmb",1,"CGLight *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGLight::m_oLitAmb",2,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oLitAmb_set",1,SWIGTYPE_p_CGLight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGLight_m_oLitAmb_set",2,SWIGTYPE_p_CGColor);
    }
    
    if (arg1) (arg1)->m_oLitAmb = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oLitAmb_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGLight::m_oLitAmb",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oLitAmb",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oLitAmb_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (CGColor *)& ((arg1)->m_oLitAmb);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oLitDiff_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGLight::m_oLitDiff",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oLitDiff",1,"CGLight *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGLight::m_oLitDiff",2,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oLitDiff_set",1,SWIGTYPE_p_CGLight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGLight_m_oLitDiff_set",2,SWIGTYPE_p_CGColor);
    }
    
    if (arg1) (arg1)->m_oLitDiff = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oLitDiff_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGLight::m_oLitDiff",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oLitDiff",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oLitDiff_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (CGColor *)& ((arg1)->m_oLitDiff);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oLitSpec_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGLight::m_oLitSpec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oLitSpec",1,"CGLight *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGLight::m_oLitSpec",2,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oLitSpec_set",1,SWIGTYPE_p_CGLight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGLight_m_oLitSpec_set",2,SWIGTYPE_p_CGColor);
    }
    
    if (arg1) (arg1)->m_oLitSpec = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oLitSpec_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGLight::m_oLitSpec",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oLitSpec",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oLitSpec_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (CGColor *)& ((arg1)->m_oLitSpec);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGLight::m_oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oPos",1,"CGLight *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGLight::m_oPos",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oPos_set",1,SWIGTYPE_p_CGLight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGLight_m_oPos_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oPos = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGLight::m_oPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oPos",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oPos_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oDir_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGLight::m_oDir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oDir",1,"CGLight *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGLight::m_oDir",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oDir_set",1,SWIGTYPE_p_CGLight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGLight_m_oDir_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oDir = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_oDir_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGLight::m_oDir",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_oDir",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_oDir_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oDir);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fSpExp_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGLight::m_fSpExp",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fSpExp",1,"CGLight *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLight::m_fSpExp",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fSpExp_set",1,SWIGTYPE_p_CGLight);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fSpExp = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fSpExp_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGLight::m_fSpExp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fSpExp",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fSpExp_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (float) ((arg1)->m_fSpExp);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fSpCutOff_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGLight::m_fSpCutOff",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fSpCutOff",1,"CGLight *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLight::m_fSpCutOff",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fSpCutOff_set",1,SWIGTYPE_p_CGLight);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fSpCutOff = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fSpCutOff_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGLight::m_fSpCutOff",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fSpCutOff",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fSpCutOff_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (float) ((arg1)->m_fSpCutOff);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fCAtt_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGLight::m_fCAtt",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fCAtt",1,"CGLight *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLight::m_fCAtt",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fCAtt_set",1,SWIGTYPE_p_CGLight);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fCAtt = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fCAtt_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGLight::m_fCAtt",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fCAtt",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fCAtt_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (float) ((arg1)->m_fCAtt);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fLAtt_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGLight::m_fLAtt",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fLAtt",1,"CGLight *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLight::m_fLAtt",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fLAtt_set",1,SWIGTYPE_p_CGLight);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fLAtt = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fLAtt_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGLight::m_fLAtt",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fLAtt",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fLAtt_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (float) ((arg1)->m_fLAtt);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fQAtt_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGLight::m_fQAtt",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fQAtt",1,"CGLight *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLight::m_fQAtt",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fQAtt_set",1,SWIGTYPE_p_CGLight);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fQAtt = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_fQAtt_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGLight::m_fQAtt",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_fQAtt",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_fQAtt_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (float) ((arg1)->m_fQAtt);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_eType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    eLightType arg2 ;
    
    SWIG_check_num_args("CGLight::m_eType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_eType",1,"CGLight *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLight::m_eType",2,"eLightType");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_eType_set",1,SWIGTYPE_p_CGLight);
    }
    
    arg2 = (eLightType)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_eType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLight_m_eType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLight *arg1 = 0 ;
    eLightType result;
    
    SWIG_check_num_args("CGLight::m_eType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLight::m_eType",1,"CGLight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLight,0))){
      SWIG_fail_ptr("CGLight_m_eType_get",1,SWIGTYPE_p_CGLight);
    }
    
    result = (eLightType) ((arg1)->m_eType);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGLight(void *obj) {
CGLight *arg1 = (CGLight *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGLight(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGLight);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGLight_attributes[] = {
    { "m_oLitAmb", _wrap_CGLight_m_oLitAmb_get, _wrap_CGLight_m_oLitAmb_set },
    { "m_oLitDiff", _wrap_CGLight_m_oLitDiff_get, _wrap_CGLight_m_oLitDiff_set },
    { "m_oLitSpec", _wrap_CGLight_m_oLitSpec_get, _wrap_CGLight_m_oLitSpec_set },
    { "m_oPos", _wrap_CGLight_m_oPos_get, _wrap_CGLight_m_oPos_set },
    { "m_oDir", _wrap_CGLight_m_oDir_get, _wrap_CGLight_m_oDir_set },
    { "m_fSpExp", _wrap_CGLight_m_fSpExp_get, _wrap_CGLight_m_fSpExp_set },
    { "m_fSpCutOff", _wrap_CGLight_m_fSpCutOff_get, _wrap_CGLight_m_fSpCutOff_set },
    { "m_fCAtt", _wrap_CGLight_m_fCAtt_get, _wrap_CGLight_m_fCAtt_set },
    { "m_fLAtt", _wrap_CGLight_m_fLAtt_get, _wrap_CGLight_m_fLAtt_set },
    { "m_fQAtt", _wrap_CGLight_m_fQAtt_get, _wrap_CGLight_m_fQAtt_set },
    { "m_eType", _wrap_CGLight_m_eType_get, _wrap_CGLight_m_eType_set },
    {0,0,0}
};
static swig_lua_method swig_CGLight_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGLight_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGLight_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGLight_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGLight_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGLight_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGLight_Sf_SwigStatic = {
    "CGLight",
    swig_CGLight_Sf_SwigStatic_methods,
    swig_CGLight_Sf_SwigStatic_attributes,
    swig_CGLight_Sf_SwigStatic_constants,
    swig_CGLight_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGLight_bases[] = {0};
static const char *swig_CGLight_base_names[] = {0};
static swig_lua_class _wrap_class_CGLight = { "CGLight", "CGLight", &SWIGTYPE_p_CGLight,_proxy__wrap_new_CGLight, swig_delete_CGLight, swig_CGLight_methods, swig_CGLight_attributes, &swig_CGLight_Sf_SwigStatic, swig_CGLight_meta, swig_CGLight_bases, swig_CGLight_base_names };

static int _wrap_CGGraphBVAABB_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::Init",1,"CGGraphBVAABB *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVAABB::Init",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGGraphBVAABB::Init",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Init",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Init",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init((CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_Copy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::Copy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::Copy",1,"CGGraphBVAABB *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVAABB::Copy",2,"CGGraphBV const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Copy",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Copy",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->Copy((CGGraphBV const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_Compute(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGGraphBVAABB::Compute",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::Compute",1,"CGGraphBVAABB *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphBVAABB::Compute",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGraphBVAABB::Compute",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Compute",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Compute",2,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Compute(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_Transform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::Transform",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::Transform",1,"CGGraphBVAABB *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVAABB::Transform",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Transform",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGGraphBVAABB_Transform",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_GetRange(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    char arg2 ;
    float result;
    
    SWIG_check_num_args("CGGraphBVAABB::GetRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::GetRange",1,"CGGraphBVAABB const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGraphBVAABB::GetRange",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_GetRange",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (float)((CGGraphBVAABB const *)arg1)->GetRange(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::oGetCenter",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_oGetCenter",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (CGVect3 *) &((CGGraphBVAABB const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_TestFrustum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGBVFrustum *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVAABB::TestFrustum",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::TestFrustum",1,"CGGraphBVAABB const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVAABB::TestFrustum",2,"CGBVFrustum const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_TestFrustum",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGGraphBVAABB_TestFrustum",2,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (int)((CGGraphBVAABB const *)arg1)->TestFrustum((CGBVFrustum const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_eGetTypeID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    EGBoundingVolumeType result;
    
    SWIG_check_num_args("CGGraphBVAABB::eGetTypeID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::eGetTypeID",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_eGetTypeID",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (EGBoundingVolumeType)((CGGraphBVAABB const *)arg1)->eGetTypeID();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_TestInside(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVAABB::TestInside",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::TestInside",1,"CGGraphBVAABB const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVAABB::TestInside",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_TestInside",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVAABB_TestInside",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)((CGGraphBVAABB const *)arg1)->TestInside((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_oGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGBoundingVolume *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::oGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::oGetBV",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_oGetBV",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (CGBoundingVolume *) &((CGGraphBVAABB const *)arg1)->oGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBoundingVolume,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_GetExtents(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::GetExtents",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::GetExtents",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_GetExtents",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (CGVect3 *) &((CGGraphBVAABB const *)arg1)->GetExtents();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_oGetMax(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::oGetMax",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::oGetMax",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_oGetMax",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (CGVect3 *) &((CGGraphBVAABB const *)arg1)->oGetMax();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_oGetMin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::oGetMin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::oGetMin",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_oGetMin",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (CGVect3 *) &((CGGraphBVAABB const *)arg1)->oGetMin();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_GetAxis(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    char arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::GetAxis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::GetAxis",1,"CGGraphBVAABB const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGraphBVAABB::GetAxis",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_GetAxis",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (CGVect3 *) &((CGGraphBVAABB const *)arg1)->GetAxis(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_oGetBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGBVAABB *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::oGetBox",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::oGetBox",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_oGetBox",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (CGBVAABB *) &((CGGraphBVAABB const *)arg1)->oGetBox();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVAABB,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVAABB_poGetPoints(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::poGetPoints",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVAABB::poGetPoints",1,"CGGraphBVAABB const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CGGraphBVAABB_poGetPoints",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    result = (CGVect3 *)((CGGraphBVAABB const *)arg1)->poGetPoints();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphBVAABB(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVAABB::CGGraphBVAABB",0,0)
    result = (CGGraphBVAABB *)new CGGraphBVAABB();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVAABB,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphBVAABB(void *obj) {
CGGraphBVAABB *arg1 = (CGGraphBVAABB *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphBVAABB(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphBVAABB);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphBVAABB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphBVAABB_methods[]= {
    { "Init", _wrap_CGGraphBVAABB_Init},
    { "Copy", _wrap_CGGraphBVAABB_Copy},
    { "Compute", _wrap_CGGraphBVAABB_Compute},
    { "Transform", _wrap_CGGraphBVAABB_Transform},
    { "GetRange", _wrap_CGGraphBVAABB_GetRange},
    { "oGetCenter", _wrap_CGGraphBVAABB_oGetCenter},
    { "TestFrustum", _wrap_CGGraphBVAABB_TestFrustum},
    { "eGetTypeID", _wrap_CGGraphBVAABB_eGetTypeID},
    { "TestInside", _wrap_CGGraphBVAABB_TestInside},
    { "oGetBV", _wrap_CGGraphBVAABB_oGetBV},
    { "GetExtents", _wrap_CGGraphBVAABB_GetExtents},
    { "oGetMax", _wrap_CGGraphBVAABB_oGetMax},
    { "oGetMin", _wrap_CGGraphBVAABB_oGetMin},
    { "GetAxis", _wrap_CGGraphBVAABB_GetAxis},
    { "oGetBox", _wrap_CGGraphBVAABB_oGetBox},
    { "poGetPoints", _wrap_CGGraphBVAABB_poGetPoints},
    {0,0}
};
static swig_lua_method swig_CGGraphBVAABB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphBVAABB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphBVAABB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphBVAABB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphBVAABB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphBVAABB_Sf_SwigStatic = {
    "CGGraphBVAABB",
    swig_CGGraphBVAABB_Sf_SwigStatic_methods,
    swig_CGGraphBVAABB_Sf_SwigStatic_attributes,
    swig_CGGraphBVAABB_Sf_SwigStatic_constants,
    swig_CGGraphBVAABB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphBVAABB_bases[] = {0,0};
static const char *swig_CGGraphBVAABB_base_names[] = {"CGGraphBV *",0};
static swig_lua_class _wrap_class_CGGraphBVAABB = { "CGGraphBVAABB", "CGGraphBVAABB", &SWIGTYPE_p_CGGraphBVAABB,_proxy__wrap_new_CGGraphBVAABB, swig_delete_CGGraphBVAABB, swig_CGGraphBVAABB_methods, swig_CGGraphBVAABB_attributes, &swig_CGGraphBVAABB_Sf_SwigStatic, swig_CGGraphBVAABB_meta, swig_CGGraphBVAABB_bases, swig_CGGraphBVAABB_base_names };

static int _wrap_CGGraphBVSphere_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGGraphBVSphere::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::Init",1,"CGGraphBVSphere *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVSphere::Init",2,"CGVect3 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGraphBVSphere::Init",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Init",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->Init((CGVect3 const &)*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_Copy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVSphere::Copy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::Copy",1,"CGGraphBVSphere *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVSphere::Copy",2,"CGGraphBV const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Copy",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Copy",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->Copy((CGGraphBV const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_Compute(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGGraphBVSphere::Compute",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::Compute",1,"CGGraphBVSphere *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphBVSphere::Compute",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGraphBVSphere::Compute",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Compute",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Compute",2,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Compute(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_Transform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVSphere::Transform",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::Transform",1,"CGGraphBVSphere *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVSphere::Transform",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Transform",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGGraphBVSphere_Transform",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_GetRange(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    char arg2 ;
    float result;
    
    SWIG_check_num_args("CGGraphBVSphere::GetRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::GetRange",1,"CGGraphBVSphere const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGraphBVSphere::GetRange",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_GetRange",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (float)((CGGraphBVSphere const *)arg1)->GetRange(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVSphere::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::oGetCenter",1,"CGGraphBVSphere const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_oGetCenter",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    result = (CGVect3 *) &((CGGraphBVSphere const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_TestFrustum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGBVFrustum *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVSphere::TestFrustum",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::TestFrustum",1,"CGGraphBVSphere const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVSphere::TestFrustum",2,"CGBVFrustum const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_TestFrustum",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGGraphBVSphere_TestFrustum",2,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (int)((CGGraphBVSphere const *)arg1)->TestFrustum((CGBVFrustum const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_TestInside(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVSphere::TestInside",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::TestInside",1,"CGGraphBVSphere const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVSphere::TestInside",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_TestInside",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVSphere_TestInside",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)((CGGraphBVSphere const *)arg1)->TestInside((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_eGetTypeID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    EGBoundingVolumeType result;
    
    SWIG_check_num_args("CGGraphBVSphere::eGetTypeID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::eGetTypeID",1,"CGGraphBVSphere const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_eGetTypeID",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    result = (EGBoundingVolumeType)((CGGraphBVSphere const *)arg1)->eGetTypeID();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_oGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGBoundingVolume *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVSphere::oGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::oGetBV",1,"CGGraphBVSphere const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_oGetBV",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    result = (CGBoundingVolume *) &((CGGraphBVSphere const *)arg1)->oGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBoundingVolume,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVSphere_oGetSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGBVSphere *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVSphere::oGetSphere",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVSphere::oGetSphere",1,"CGGraphBVSphere const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CGGraphBVSphere_oGetSphere",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    result = (CGBVSphere *) &((CGGraphBVSphere const *)arg1)->oGetSphere();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVSphere,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphBVSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVSphere::CGGraphBVSphere",0,0)
    result = (CGGraphBVSphere *)new CGGraphBVSphere();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVSphere,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphBVSphere(void *obj) {
CGGraphBVSphere *arg1 = (CGGraphBVSphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphBVSphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphBVSphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphBVSphere_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphBVSphere_methods[]= {
    { "Init", _wrap_CGGraphBVSphere_Init},
    { "Copy", _wrap_CGGraphBVSphere_Copy},
    { "Compute", _wrap_CGGraphBVSphere_Compute},
    { "Transform", _wrap_CGGraphBVSphere_Transform},
    { "GetRange", _wrap_CGGraphBVSphere_GetRange},
    { "oGetCenter", _wrap_CGGraphBVSphere_oGetCenter},
    { "TestFrustum", _wrap_CGGraphBVSphere_TestFrustum},
    { "TestInside", _wrap_CGGraphBVSphere_TestInside},
    { "eGetTypeID", _wrap_CGGraphBVSphere_eGetTypeID},
    { "oGetBV", _wrap_CGGraphBVSphere_oGetBV},
    { "oGetSphere", _wrap_CGGraphBVSphere_oGetSphere},
    {0,0}
};
static swig_lua_method swig_CGGraphBVSphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphBVSphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphBVSphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphBVSphere_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphBVSphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphBVSphere_Sf_SwigStatic = {
    "CGGraphBVSphere",
    swig_CGGraphBVSphere_Sf_SwigStatic_methods,
    swig_CGGraphBVSphere_Sf_SwigStatic_attributes,
    swig_CGGraphBVSphere_Sf_SwigStatic_constants,
    swig_CGGraphBVSphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphBVSphere_bases[] = {0,0};
static const char *swig_CGGraphBVSphere_base_names[] = {"CGGraphBV *",0};
static swig_lua_class _wrap_class_CGGraphBVSphere = { "CGGraphBVSphere", "CGGraphBVSphere", &SWIGTYPE_p_CGGraphBVSphere,_proxy__wrap_new_CGGraphBVSphere, swig_delete_CGGraphBVSphere, swig_CGGraphBVSphere_methods, swig_CGGraphBVSphere_attributes, &swig_CGGraphBVSphere_Sf_SwigStatic, swig_CGGraphBVSphere_meta, swig_CGGraphBVSphere_bases, swig_CGGraphBVSphere_base_names };

static int _wrap_CGGraphBVCylinder_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::Init",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::Init",1,"CGGraphBVCylinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVCylinder::Init",2,"CGVect3 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGraphBVCylinder::Init",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGGraphBVCylinder::Init",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Init",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Init((CGVect3 const &)*arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_Copy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::Copy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::Copy",1,"CGGraphBVCylinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVCylinder::Copy",2,"CGGraphBV const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Copy",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Copy",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->Copy((CGGraphBV const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_Transform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::Transform",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::Transform",1,"CGGraphBVCylinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVCylinder::Transform",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Transform",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Transform",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_Compute(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::Compute",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::Compute",1,"CGGraphBVCylinder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphBVCylinder::Compute",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGraphBVCylinder::Compute",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Compute",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_Compute",2,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Compute(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_GetRange(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    char arg2 ;
    float result;
    
    SWIG_check_num_args("CGGraphBVCylinder::GetRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::GetRange",1,"CGGraphBVCylinder const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGraphBVCylinder::GetRange",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_GetRange",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (float)((CGGraphBVCylinder const *)arg1)->GetRange(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::oGetCenter",1,"CGGraphBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_oGetCenter",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    result = (CGVect3 *) &((CGGraphBVCylinder const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_TestFrustum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGBVFrustum *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVCylinder::TestFrustum",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::TestFrustum",1,"CGGraphBVCylinder const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVCylinder::TestFrustum",2,"CGBVFrustum const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_TestFrustum",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_TestFrustum",2,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (int)((CGGraphBVCylinder const *)arg1)->TestFrustum((CGBVFrustum const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_TestInside(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVCylinder::TestInside",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::TestInside",1,"CGGraphBVCylinder const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVCylinder::TestInside",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_TestInside",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_TestInside",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)((CGGraphBVCylinder const *)arg1)->TestInside((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_eGetTypeID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    EGBoundingVolumeType result;
    
    SWIG_check_num_args("CGGraphBVCylinder::eGetTypeID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::eGetTypeID",1,"CGGraphBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_eGetTypeID",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    result = (EGBoundingVolumeType)((CGGraphBVCylinder const *)arg1)->eGetTypeID();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_GetCylinder(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGBVCylinder *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::GetCylinder",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::GetCylinder",1,"CGGraphBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_GetCylinder",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    result = (CGBVCylinder *) &((CGGraphBVCylinder const *)arg1)->GetCylinder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVCylinder,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVCylinder_oGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *arg1 = 0 ;
    CGBoundingVolume *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::oGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVCylinder::oGetBV",1,"CGGraphBVCylinder const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVCylinder,0))){
      SWIG_fail_ptr("CGGraphBVCylinder_oGetBV",1,SWIGTYPE_p_CGGraphBVCylinder);
    }
    
    result = (CGBoundingVolume *) &((CGGraphBVCylinder const *)arg1)->oGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBoundingVolume,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphBVCylinder(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVCylinder *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVCylinder::CGGraphBVCylinder",0,0)
    result = (CGGraphBVCylinder *)new CGGraphBVCylinder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVCylinder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphBVCylinder(void *obj) {
CGGraphBVCylinder *arg1 = (CGGraphBVCylinder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphBVCylinder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphBVCylinder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphBVCylinder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphBVCylinder_methods[]= {
    { "Init", _wrap_CGGraphBVCylinder_Init},
    { "Copy", _wrap_CGGraphBVCylinder_Copy},
    { "Transform", _wrap_CGGraphBVCylinder_Transform},
    { "Compute", _wrap_CGGraphBVCylinder_Compute},
    { "GetRange", _wrap_CGGraphBVCylinder_GetRange},
    { "oGetCenter", _wrap_CGGraphBVCylinder_oGetCenter},
    { "TestFrustum", _wrap_CGGraphBVCylinder_TestFrustum},
    { "TestInside", _wrap_CGGraphBVCylinder_TestInside},
    { "eGetTypeID", _wrap_CGGraphBVCylinder_eGetTypeID},
    { "GetCylinder", _wrap_CGGraphBVCylinder_GetCylinder},
    { "oGetBV", _wrap_CGGraphBVCylinder_oGetBV},
    {0,0}
};
static swig_lua_method swig_CGGraphBVCylinder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphBVCylinder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphBVCylinder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphBVCylinder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphBVCylinder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphBVCylinder_Sf_SwigStatic = {
    "CGGraphBVCylinder",
    swig_CGGraphBVCylinder_Sf_SwigStatic_methods,
    swig_CGGraphBVCylinder_Sf_SwigStatic_attributes,
    swig_CGGraphBVCylinder_Sf_SwigStatic_constants,
    swig_CGGraphBVCylinder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphBVCylinder_bases[] = {0,0};
static const char *swig_CGGraphBVCylinder_base_names[] = {"CGGraphBV *",0};
static swig_lua_class _wrap_class_CGGraphBVCylinder = { "CGGraphBVCylinder", "CGGraphBVCylinder", &SWIGTYPE_p_CGGraphBVCylinder,_proxy__wrap_new_CGGraphBVCylinder, swig_delete_CGGraphBVCylinder, swig_CGGraphBVCylinder_methods, swig_CGGraphBVCylinder_attributes, &swig_CGGraphBVCylinder_Sf_SwigStatic, swig_CGGraphBVCylinder_meta, swig_CGGraphBVCylinder_bases, swig_CGGraphBVCylinder_base_names };

static int _wrap_CGGraphBVPoint_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVPoint::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::Init",1,"CGGraphBVPoint *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVPoint::Init",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Init",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Init",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Init((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_Copy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVPoint::Copy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::Copy",1,"CGGraphBVPoint *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVPoint::Copy",2,"CGGraphBV const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Copy",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Copy",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->Copy((CGGraphBV const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_Compute(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGGraphBVPoint::Compute",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::Compute",1,"CGGraphBVPoint *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphBVPoint::Compute",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGraphBVPoint::Compute",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Compute",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Compute",2,SWIGTYPE_p_CGVect3);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Compute(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_Transform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphBVPoint::Transform",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::Transform",1,"CGGraphBVPoint *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVPoint::Transform",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Transform",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGGraphBVPoint_Transform",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_oGetCenter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVPoint::oGetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::oGetCenter",1,"CGGraphBVPoint const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_oGetCenter",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    result = (CGVect3 *) &((CGGraphBVPoint const *)arg1)->oGetCenter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_GetRange(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    char arg2 ;
    float result;
    
    SWIG_check_num_args("CGGraphBVPoint::GetRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::GetRange",1,"CGGraphBVPoint const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGraphBVPoint::GetRange",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_GetRange",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (float)((CGGraphBVPoint const *)arg1)->GetRange(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_TestFrustum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGBVFrustum *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVPoint::TestFrustum",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::TestFrustum",1,"CGGraphBVPoint const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVPoint::TestFrustum",2,"CGBVFrustum const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_TestFrustum",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBVFrustum,0))){
      SWIG_fail_ptr("CGGraphBVPoint_TestFrustum",2,SWIGTYPE_p_CGBVFrustum);
    }
    
    result = (int)((CGGraphBVPoint const *)arg1)->TestFrustum((CGBVFrustum const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_eGetTypeID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    EGBoundingVolumeType result;
    
    SWIG_check_num_args("CGGraphBVPoint::eGetTypeID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::eGetTypeID",1,"CGGraphBVPoint const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_eGetTypeID",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    result = (EGBoundingVolumeType)((CGGraphBVPoint const *)arg1)->eGetTypeID();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_TestInside(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVPoint::TestInside",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::TestInside",1,"CGGraphBVPoint const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphBVPoint::TestInside",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_TestInside",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphBVPoint_TestInside",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)((CGGraphBVPoint const *)arg1)->TestInside((CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_oGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGBoundingVolume *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVPoint::oGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::oGetBV",1,"CGGraphBVPoint const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_oGetBV",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    result = (CGBoundingVolume *) &((CGGraphBVPoint const *)arg1)->oGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBoundingVolume,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVPoint_oGetPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *arg1 = 0 ;
    CGBVPoint *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVPoint::oGetPoint",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphBVPoint::oGetPoint",1,"CGGraphBVPoint const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVPoint,0))){
      SWIG_fail_ptr("CGGraphBVPoint_oGetPoint",1,SWIGTYPE_p_CGGraphBVPoint);
    }
    
    result = (CGBVPoint *) &((CGGraphBVPoint const *)arg1)->oGetPoint();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVPoint,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphBVPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVPoint *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVPoint::CGGraphBVPoint",0,0)
    result = (CGGraphBVPoint *)new CGGraphBVPoint();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVPoint,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphBVPoint(void *obj) {
CGGraphBVPoint *arg1 = (CGGraphBVPoint *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphBVPoint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphBVPoint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphBVPoint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphBVPoint_methods[]= {
    { "Init", _wrap_CGGraphBVPoint_Init},
    { "Copy", _wrap_CGGraphBVPoint_Copy},
    { "Compute", _wrap_CGGraphBVPoint_Compute},
    { "Transform", _wrap_CGGraphBVPoint_Transform},
    { "oGetCenter", _wrap_CGGraphBVPoint_oGetCenter},
    { "GetRange", _wrap_CGGraphBVPoint_GetRange},
    { "TestFrustum", _wrap_CGGraphBVPoint_TestFrustum},
    { "eGetTypeID", _wrap_CGGraphBVPoint_eGetTypeID},
    { "TestInside", _wrap_CGGraphBVPoint_TestInside},
    { "oGetBV", _wrap_CGGraphBVPoint_oGetBV},
    { "oGetPoint", _wrap_CGGraphBVPoint_oGetPoint},
    {0,0}
};
static swig_lua_method swig_CGGraphBVPoint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphBVPoint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphBVPoint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphBVPoint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphBVPoint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphBVPoint_Sf_SwigStatic = {
    "CGGraphBVPoint",
    swig_CGGraphBVPoint_Sf_SwigStatic_methods,
    swig_CGGraphBVPoint_Sf_SwigStatic_attributes,
    swig_CGGraphBVPoint_Sf_SwigStatic_constants,
    swig_CGGraphBVPoint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphBVPoint_bases[] = {0,0};
static const char *swig_CGGraphBVPoint_base_names[] = {"CGGraphBV *",0};
static swig_lua_class _wrap_class_CGGraphBVPoint = { "CGGraphBVPoint", "CGGraphBVPoint", &SWIGTYPE_p_CGGraphBVPoint,_proxy__wrap_new_CGGraphBVPoint, swig_delete_CGGraphBVPoint, swig_CGGraphBVPoint_methods, swig_CGGraphBVPoint_attributes, &swig_CGGraphBVPoint_Sf_SwigStatic, swig_CGGraphBVPoint_meta, swig_CGGraphBVPoint_bases, swig_CGGraphBVPoint_base_names };

static int _wrap_CGGraphBVFactory_poCreate__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVFactory::poCreate",0,0)
    result = (CGGraphBV *)CGGraphBVFactory::poCreate();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVFactory_poCreate__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    EGBoundingVolumeType arg1 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVFactory::poCreate",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGGraphBVFactory::poCreate",1,"EGBoundingVolumeType");
    arg1 = (EGBoundingVolumeType)(int)lua_tonumber(L, 1);
    result = (CGGraphBV *)CGGraphBVFactory::poCreate(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVFactory_poCreate(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_CGGraphBVFactory_poCreate__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_CGGraphBVFactory_poCreate__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGGraphBVFactory_poCreate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGraphBVFactory::poCreate()\n"
    "    CGGraphBVFactory::poCreate(EGBoundingVolumeType)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGraphBVFactory_SetBVMode(lua_State* L) {
  {
    int SWIG_arg = 0;
    EGBoundingVolumeType arg1 ;
    
    SWIG_check_num_args("CGGraphBVFactory::SetBVMode",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGGraphBVFactory::SetBVMode",1,"EGBoundingVolumeType");
    arg1 = (EGBoundingVolumeType)(int)lua_tonumber(L, 1);
    CGGraphBVFactory::SetBVMode(arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVFactory_eGetBVMode(lua_State* L) {
  {
    int SWIG_arg = 0;
    EGBoundingVolumeType result;
    
    SWIG_check_num_args("CGGraphBVFactory::eGetBVMode",0,0)
    result = (EGBoundingVolumeType)CGGraphBVFactory::eGetBVMode();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphBVFactory(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVFactory *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVFactory::CGGraphBVFactory",0,0)
    result = (CGGraphBVFactory *)new CGGraphBVFactory();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVFactory,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphBVFactory(void *obj) {
CGGraphBVFactory *arg1 = (CGGraphBVFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphBVFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphBVFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphBVFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphBVFactory_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGGraphBVFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphBVFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphBVFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphBVFactory_Sf_SwigStatic_methods[]= {
    { "poCreate", _wrap_CGGraphBVFactory_poCreate},
    { "SetBVMode", _wrap_CGGraphBVFactory_SetBVMode},
    { "eGetBVMode", _wrap_CGGraphBVFactory_eGetBVMode},
    {0,0}
};
static swig_lua_class* swig_CGGraphBVFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphBVFactory_Sf_SwigStatic = {
    "CGGraphBVFactory",
    swig_CGGraphBVFactory_Sf_SwigStatic_methods,
    swig_CGGraphBVFactory_Sf_SwigStatic_attributes,
    swig_CGGraphBVFactory_Sf_SwigStatic_constants,
    swig_CGGraphBVFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphBVFactory_bases[] = {0};
static const char *swig_CGGraphBVFactory_base_names[] = {0};
static swig_lua_class _wrap_class_CGGraphBVFactory = { "CGGraphBVFactory", "CGGraphBVFactory", &SWIGTYPE_p_CGGraphBVFactory,_proxy__wrap_new_CGGraphBVFactory, swig_delete_CGGraphBVFactory, swig_CGGraphBVFactory_methods, swig_CGGraphBVFactory_attributes, &swig_CGGraphBVFactory_Sf_SwigStatic, swig_CGGraphBVFactory_meta, swig_CGGraphBVFactory_bases, swig_CGGraphBVFactory_base_names };

static int _wrap_CGSceneVisitor_Visit__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneBSPNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneCamera *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneCamera);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneInstance,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneInstance);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_4(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneLeaf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneLeaf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_5(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneMux *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneMux *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneMux);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_6(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_7(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneScreenRect *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_8(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneSwitch *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneSwitch);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_9(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_10(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneAnimNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneAnimNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_11(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneAnimMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_12(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneAnimGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_13(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneAnimTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit__SWIG_14(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneVisitor *arg1 = 0 ;
    CGSceneAnimActionSet *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneVisitor::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneVisitor::Visit",1,"CGSceneVisitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneVisitor::Visit",2,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",1,SWIGTYPE_p_CGSceneVisitor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneVisitor_Visit",2,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneVisitor_Visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneBSPNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneInstance, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneLeaf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneMux, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneScreenRect, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneSwitch, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimActionSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_14(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneVisitor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneVisitor_Visit__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGSceneVisitor_Visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSceneVisitor::Visit(CGSceneNode *)\n"
    "    CGSceneVisitor::Visit(CGSceneBSPNode *)\n"
    "    CGSceneVisitor::Visit(CGSceneCamera *)\n"
    "    CGSceneVisitor::Visit(CGSceneInstance *)\n"
    "    CGSceneVisitor::Visit(CGSceneLeaf *)\n"
    "    CGSceneVisitor::Visit(CGSceneMux *)\n"
    "    CGSceneVisitor::Visit(CGSceneGroup *)\n"
    "    CGSceneVisitor::Visit(CGSceneScreenRect *)\n"
    "    CGSceneVisitor::Visit(CGSceneSwitch *)\n"
    "    CGSceneVisitor::Visit(CGSceneTransf *)\n"
    "    CGSceneVisitor::Visit(CGSceneAnimNode *)\n"
    "    CGSceneVisitor::Visit(CGSceneAnimMesh *)\n"
    "    CGSceneVisitor::Visit(CGSceneAnimGroup *)\n"
    "    CGSceneVisitor::Visit(CGSceneAnimTransf *)\n"
    "    CGSceneVisitor::Visit(CGSceneAnimActionSet *)\n");
  lua_error(L);return 0;
}


static void swig_delete_CGSceneVisitor(void *obj) {
CGSceneVisitor *arg1 = (CGSceneVisitor *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGSceneVisitor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneVisitor_methods[]= {
    { "Visit", _wrap_CGSceneVisitor_Visit},
    {0,0}
};
static swig_lua_method swig_CGSceneVisitor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneVisitor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneVisitor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneVisitor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneVisitor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneVisitor_Sf_SwigStatic = {
    "CGSceneVisitor",
    swig_CGSceneVisitor_Sf_SwigStatic_methods,
    swig_CGSceneVisitor_Sf_SwigStatic_attributes,
    swig_CGSceneVisitor_Sf_SwigStatic_constants,
    swig_CGSceneVisitor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneVisitor_bases[] = {0};
static const char *swig_CGSceneVisitor_base_names[] = {0};
static swig_lua_class _wrap_class_CGSceneVisitor = { "CGSceneVisitor", "CGSceneVisitor", &SWIGTYPE_p_CGSceneVisitor,0, swig_delete_CGSceneVisitor, swig_CGSceneVisitor_methods, swig_CGSceneVisitor_attributes, &swig_CGSceneVisitor_Sf_SwigStatic, swig_CGSceneVisitor_meta, swig_CGSceneVisitor_bases, swig_CGSceneVisitor_base_names };

static int _wrap_CGSceneNode_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneNode::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneNode::Accept",1,"CGSceneNode *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneNode::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneNode_Accept",1,SWIGTYPE_p_CGSceneNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneNode_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneNode_Deref(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneNode::Deref",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneNode::Deref",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneNode_Deref",1,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->Deref();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneNode_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneNode::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneNode::poGetBV",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneNode_poGetBV",1,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneNode_eGetNodeType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    ESceneNodeType result;
    
    SWIG_check_num_args("CGSceneNode::eGetNodeType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneNode::eGetNodeType",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneNode_eGetNodeType",1,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (ESceneNodeType)(arg1)->eGetNodeType();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneNode_bIsVisible(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGSceneNode::bIsVisible",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneNode::bIsVisible",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneNode_bIsVisible",1,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (bool)(arg1)->bIsVisible();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneNode(void *obj) {
CGSceneNode *arg1 = (CGSceneNode *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGSceneNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneNode_methods[]= {
    { "Accept", _wrap_CGSceneNode_Accept},
    { "Deref", _wrap_CGSceneNode_Deref},
    { "poGetBV", _wrap_CGSceneNode_poGetBV},
    { "eGetNodeType", _wrap_CGSceneNode_eGetNodeType},
    { "bIsVisible", _wrap_CGSceneNode_bIsVisible},
    {0,0}
};
static swig_lua_method swig_CGSceneNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneNode_Sf_SwigStatic = {
    "CGSceneNode",
    swig_CGSceneNode_Sf_SwigStatic_methods,
    swig_CGSceneNode_Sf_SwigStatic_attributes,
    swig_CGSceneNode_Sf_SwigStatic_constants,
    swig_CGSceneNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneNode_bases[] = {0,0};
static const char *swig_CGSceneNode_base_names[] = {"CGReferenceCounter *",0};
static swig_lua_class _wrap_class_CGSceneNode = { "CGSceneNode", "CGSceneNode", &SWIGTYPE_p_CGSceneNode,0, swig_delete_CGSceneNode, swig_CGSceneNode_methods, swig_CGSceneNode_attributes, &swig_CGSceneNode_Sf_SwigStatic, swig_CGSceneNode_meta, swig_CGSceneNode_bases, swig_CGSceneNode_base_names };

static int _wrap_new_CGSceneBSPNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::CGSceneBSPNode",0,0)
    result = (CGSceneBSPNode *)new CGSceneBSPNode();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneBSPNode,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_Setup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    CGSceneNode *arg3 = 0 ;
    CGPlane *arg4 = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::Setup",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::Setup",1,"CGSceneBSPNode *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneBSPNode::Setup",2,"CGSceneNode *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGSceneBSPNode::Setup",3,"CGSceneNode *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGSceneBSPNode::Setup",4,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_Setup",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_Setup",2,SWIGTYPE_p_CGSceneNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_Setup",3,SWIGTYPE_p_CGSceneNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGSceneBSPNode_Setup",4,SWIGTYPE_p_CGPlane);
    }
    
    (arg1)->Setup(arg2,arg3,(CGPlane const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_SetBackNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::SetBackNode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::SetBackNode",1,"CGSceneBSPNode *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneBSPNode::SetBackNode",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetBackNode",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetBackNode",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->SetBackNode(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_SetFrontNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::SetFrontNode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::SetFrontNode",1,"CGSceneBSPNode *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneBSPNode::SetFrontNode",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetFrontNode",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetFrontNode",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->SetFrontNode(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_poGetBackNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::poGetBackNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::poGetBackNode",1,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_poGetBackNode",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    result = (CGSceneNode *)(arg1)->poGetBackNode();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_poGetFrontNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::poGetFrontNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::poGetFrontNode",1,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_poGetFrontNode",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    result = (CGSceneNode *)(arg1)->poGetFrontNode();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_SetPartitionPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::SetPartitionPlane",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::SetPartitionPlane",1,"CGSceneBSPNode *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneBSPNode::SetPartitionPlane",2,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetPartitionPlane",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetPartitionPlane",2,SWIGTYPE_p_CGPlane);
    }
    
    (arg1)->SetPartitionPlane((CGPlane const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_oGetPartitionPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGPlane *result = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::oGetPartitionPlane",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::oGetPartitionPlane",1,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_oGetPartitionPlane",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    result = (CGPlane *) &(arg1)->oGetPartitionPlane();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPlane,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_SetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::SetBV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::SetBV",1,"CGSceneBSPNode *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneBSPNode::SetBV",2,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetBV",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGSceneBSPNode_SetBV",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetBV(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::poGetBV",1,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_poGetBV",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneBSPNode_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneBSPNode::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneBSPNode::Accept",1,"CGSceneBSPNode *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneBSPNode::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSceneBSPNode_Accept",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneBSPNode_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneBSPNode(void *obj) {
CGSceneBSPNode *arg1 = (CGSceneBSPNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneBSPNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneBSPNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneBSPNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneBSPNode_methods[]= {
    { "Setup", _wrap_CGSceneBSPNode_Setup},
    { "SetBackNode", _wrap_CGSceneBSPNode_SetBackNode},
    { "SetFrontNode", _wrap_CGSceneBSPNode_SetFrontNode},
    { "poGetBackNode", _wrap_CGSceneBSPNode_poGetBackNode},
    { "poGetFrontNode", _wrap_CGSceneBSPNode_poGetFrontNode},
    { "SetPartitionPlane", _wrap_CGSceneBSPNode_SetPartitionPlane},
    { "oGetPartitionPlane", _wrap_CGSceneBSPNode_oGetPartitionPlane},
    { "SetBV", _wrap_CGSceneBSPNode_SetBV},
    { "poGetBV", _wrap_CGSceneBSPNode_poGetBV},
    { "Accept", _wrap_CGSceneBSPNode_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneBSPNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneBSPNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneBSPNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneBSPNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneBSPNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneBSPNode_Sf_SwigStatic = {
    "CGSceneBSPNode",
    swig_CGSceneBSPNode_Sf_SwigStatic_methods,
    swig_CGSceneBSPNode_Sf_SwigStatic_attributes,
    swig_CGSceneBSPNode_Sf_SwigStatic_constants,
    swig_CGSceneBSPNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneBSPNode_bases[] = {0,0};
static const char *swig_CGSceneBSPNode_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneBSPNode = { "CGSceneBSPNode", "CGSceneBSPNode", &SWIGTYPE_p_CGSceneBSPNode,_proxy__wrap_new_CGSceneBSPNode, swig_delete_CGSceneBSPNode, swig_CGSceneBSPNode_methods, swig_CGSceneBSPNode_attributes, &swig_CGSceneBSPNode_Sf_SwigStatic, swig_CGSceneBSPNode_meta, swig_CGSceneBSPNode_bases, swig_CGSceneBSPNode_base_names };

static int _wrap_new_CGSceneGroup__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *result = 0 ;
    
    SWIG_check_num_args("CGSceneGroup::CGSceneGroup",0,0)
    result = (CGSceneGroup *)new CGSceneGroup();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneGroup,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSceneGroup__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CGSceneGroup *result = 0 ;
    
    SWIG_check_num_args("CGSceneGroup::CGSceneGroup",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGSceneGroup::CGSceneGroup",1,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    result = (CGSceneGroup *)new CGSceneGroup(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneGroup,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSceneGroup(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGSceneGroup__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CGSceneGroup__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGSceneGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSceneGroup::CGSceneGroup()\n"
    "    CGSceneGroup::CGSceneGroup(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CGSceneGroup_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneGroup::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::Init",1,"CGSceneGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneGroup::Init",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_Init",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneGroup::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::Clear",1,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_Clear",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    (arg1)->Clear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_DelObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneGroup::DelObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::DelObject",1,"CGSceneGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneGroup::DelObject",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_DelObject",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->DelObject(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_iAddObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGSceneGroup::iAddObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::iAddObject",1,"CGSceneGroup *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneGroup::iAddObject",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_iAddObject",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneGroup_iAddObject",2,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (int)(arg1)->iAddObject(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_SetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGSceneGroup::SetObject",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::SetObject",1,"CGSceneGroup *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneGroup::SetObject",2,"CGSceneNode *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneGroup::SetObject",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_SetObject",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneGroup_SetObject",2,SWIGTYPE_p_CGSceneNode);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->SetObject(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_poGetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    uint arg2 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneGroup::poGetObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::poGetObject",1,"CGSceneGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneGroup::poGetObject",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_poGetObject",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGSceneNode *)(arg1)->poGetObject(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_uiNumSubObjs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneGroup::uiNumSubObjs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::uiNumSubObjs",1,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_uiNumSubObjs",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    result = (uint)(arg1)->uiNumSubObjs();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_SetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneGroup::SetBV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::SetBV",1,"CGSceneGroup *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneGroup::SetBV",2,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_SetBV",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGSceneGroup_SetBV",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetBV(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneGroup::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::poGetBV",1,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_poGetBV",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneGroup_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneGroup::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneGroup::Accept",1,"CGSceneGroup *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneGroup::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSceneGroup_Accept",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneGroup_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneGroup(void *obj) {
CGSceneGroup *arg1 = (CGSceneGroup *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneGroup(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneGroup);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneGroup_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneGroup_methods[]= {
    { "Init", _wrap_CGSceneGroup_Init},
    { "Clear", _wrap_CGSceneGroup_Clear},
    { "DelObject", _wrap_CGSceneGroup_DelObject},
    { "iAddObject", _wrap_CGSceneGroup_iAddObject},
    { "SetObject", _wrap_CGSceneGroup_SetObject},
    { "poGetObject", _wrap_CGSceneGroup_poGetObject},
    { "uiNumSubObjs", _wrap_CGSceneGroup_uiNumSubObjs},
    { "SetBV", _wrap_CGSceneGroup_SetBV},
    { "poGetBV", _wrap_CGSceneGroup_poGetBV},
    { "Accept", _wrap_CGSceneGroup_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneGroup_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneGroup_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneGroup_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneGroup_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneGroup_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneGroup_SwigStatic = {
    "CGSceneGroup",
    swig_CGSceneGroup_SwigStatic_methods,
    swig_CGSceneGroup_SwigStatic_attributes,
    swig_CGSceneGroup_SwigStatic_constants,
    swig_CGSceneGroup_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneGroup_bases[] = {0,0};
static const char *swig_CGSceneGroup_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneGroup = { "CGSceneGroup", "CGSceneGroup", &SWIGTYPE_p_CGSceneGroup,_proxy__wrap_new_CGSceneGroup, swig_delete_CGSceneGroup, swig_CGSceneGroup_methods, swig_CGSceneGroup_attributes, &swig_CGSceneGroup_SwigStatic, swig_CGSceneGroup_meta, swig_CGSceneGroup_bases, swig_CGSceneGroup_base_names };

static int _wrap_new_CGSceneCamera(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *result = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::CGSceneCamera",0,0)
    result = (CGSceneCamera *)new CGSceneCamera();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneCamera,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneCamera_SetCamera(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *arg1 = 0 ;
    CGCamera *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::SetCamera",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneCamera::SetCamera",1,"CGSceneCamera *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneCamera::SetCamera",2,"CGCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_SetCamera",1,SWIGTYPE_p_CGSceneCamera);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_SetCamera",2,SWIGTYPE_p_CGCamera);
    }
    
    (arg1)->SetCamera(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneCamera_SetViewport(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *arg1 = 0 ;
    CGViewport *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::SetViewport",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneCamera::SetViewport",1,"CGSceneCamera *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneCamera::SetViewport",2,"CGViewport *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_SetViewport",1,SWIGTYPE_p_CGSceneCamera);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CGSceneCamera_SetViewport",2,SWIGTYPE_p_CGViewport);
    }
    
    (arg1)->SetViewport(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneCamera_SetProjector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *arg1 = 0 ;
    CGProjector *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::SetProjector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneCamera::SetProjector",1,"CGSceneCamera *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneCamera::SetProjector",2,"CGProjector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_SetProjector",1,SWIGTYPE_p_CGSceneCamera);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGProjector,0))){
      SWIG_fail_ptr("CGSceneCamera_SetProjector",2,SWIGTYPE_p_CGProjector);
    }
    
    (arg1)->SetProjector(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneCamera_poGetCamera(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *arg1 = 0 ;
    CGCamera *result = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::poGetCamera",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneCamera::poGetCamera",1,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_poGetCamera",1,SWIGTYPE_p_CGSceneCamera);
    }
    
    result = (CGCamera *)(arg1)->poGetCamera();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCamera,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneCamera_poGetViewport(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *arg1 = 0 ;
    CGViewport *result = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::poGetViewport",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneCamera::poGetViewport",1,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_poGetViewport",1,SWIGTYPE_p_CGSceneCamera);
    }
    
    result = (CGViewport *)(arg1)->poGetViewport();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGViewport,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneCamera_poGetProjector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *arg1 = 0 ;
    CGProjector *result = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::poGetProjector",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneCamera::poGetProjector",1,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_poGetProjector",1,SWIGTYPE_p_CGSceneCamera);
    }
    
    result = (CGProjector *)(arg1)->poGetProjector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGProjector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneCamera_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneCamera *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneCamera::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneCamera::Accept",1,"CGSceneCamera *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneCamera::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSceneCamera_Accept",1,SWIGTYPE_p_CGSceneCamera);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneCamera_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneCamera(void *obj) {
CGSceneCamera *arg1 = (CGSceneCamera *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneCamera(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneCamera);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneCamera_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneCamera_methods[]= {
    { "SetCamera", _wrap_CGSceneCamera_SetCamera},
    { "SetViewport", _wrap_CGSceneCamera_SetViewport},
    { "SetProjector", _wrap_CGSceneCamera_SetProjector},
    { "poGetCamera", _wrap_CGSceneCamera_poGetCamera},
    { "poGetViewport", _wrap_CGSceneCamera_poGetViewport},
    { "poGetProjector", _wrap_CGSceneCamera_poGetProjector},
    { "Accept", _wrap_CGSceneCamera_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneCamera_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneCamera_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneCamera_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneCamera_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneCamera_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneCamera_Sf_SwigStatic = {
    "CGSceneCamera",
    swig_CGSceneCamera_Sf_SwigStatic_methods,
    swig_CGSceneCamera_Sf_SwigStatic_attributes,
    swig_CGSceneCamera_Sf_SwigStatic_constants,
    swig_CGSceneCamera_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneCamera_bases[] = {0,0};
static const char *swig_CGSceneCamera_base_names[] = {"CGSceneGroup *",0};
static swig_lua_class _wrap_class_CGSceneCamera = { "CGSceneCamera", "CGSceneCamera", &SWIGTYPE_p_CGSceneCamera,_proxy__wrap_new_CGSceneCamera, swig_delete_CGSceneCamera, swig_CGSceneCamera_methods, swig_CGSceneCamera_attributes, &swig_CGSceneCamera_Sf_SwigStatic, swig_CGSceneCamera_meta, swig_CGSceneCamera_bases, swig_CGSceneCamera_base_names };

static int _wrap_new_CGSceneTransf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::CGSceneTransf",0,0)
    result = (CGSceneTransf *)new CGSceneTransf();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneTransf,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_SetPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::SetPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::SetPos",1,"CGSceneTransf *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneTransf::SetPos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_SetPos",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_SetPos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetPos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_oPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::oPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::oPos",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_oPos",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (CGVect3 *) &(arg1)->oPos();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_SetDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::SetDir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::SetDir",1,"CGSceneTransf *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneTransf::SetDir",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_SetDir",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_SetDir",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetDir((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_oDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::oDir",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::oDir",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_oDir",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (CGVect3 *) &(arg1)->oDir();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_SetUp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::SetUp",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::SetUp",1,"CGSceneTransf *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneTransf::SetUp",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_SetUp",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_SetUp",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetUp((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_oUp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::oUp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::oUp",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_oUp",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (CGVect3 *) &(arg1)->oUp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_SetSide(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::SetSide",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::SetSide",1,"CGSceneTransf *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneTransf::SetSide",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_SetSide",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_SetSide",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetSide((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_oSide(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::oSide",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::oSide",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_oSide",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (CGVect3 *) &(arg1)->oSide();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_Setup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    CGVect3 *arg5 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::Setup",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::Setup",1,"CGSceneTransf *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneTransf::Setup",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGSceneTransf::Setup",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGSceneTransf::Setup",4,"CGVect3 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CGSceneTransf::Setup",5,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_Setup",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_Setup",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_Setup",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_Setup",4,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGSceneTransf_Setup",5,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Setup((CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4,(CGVect3 const &)*arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_SetTransf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::SetTransf",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::SetTransf",1,"CGSceneTransf *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneTransf::SetTransf",2,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_SetTransf",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGSceneTransf_SetTransf",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->SetTransf((CGMatrix4x4 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_oTransf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::oTransf",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::oTransf",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_oTransf",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (CGMatrix4x4 *) &(arg1)->oTransf();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_SetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::SetObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::SetObject",1,"CGSceneTransf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneTransf::SetObject",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_SetObject",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneTransf_SetObject",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->SetObject(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_poGetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::poGetObject",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::poGetObject",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_poGetObject",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (CGSceneNode *)(arg1)->poGetObject();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_SetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::SetBV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::SetBV",1,"CGSceneTransf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneTransf::SetBV",2,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_SetBV",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGSceneTransf_SetBV",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetBV(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::poGetBV",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_poGetBV",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneTransf_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneTransf::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneTransf::Accept",1,"CGSceneTransf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneTransf::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSceneTransf_Accept",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneTransf_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneTransf(void *obj) {
CGSceneTransf *arg1 = (CGSceneTransf *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneTransf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneTransf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneTransf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneTransf_methods[]= {
    { "SetPos", _wrap_CGSceneTransf_SetPos},
    { "oPos", _wrap_CGSceneTransf_oPos},
    { "SetDir", _wrap_CGSceneTransf_SetDir},
    { "oDir", _wrap_CGSceneTransf_oDir},
    { "SetUp", _wrap_CGSceneTransf_SetUp},
    { "oUp", _wrap_CGSceneTransf_oUp},
    { "SetSide", _wrap_CGSceneTransf_SetSide},
    { "oSide", _wrap_CGSceneTransf_oSide},
    { "Setup", _wrap_CGSceneTransf_Setup},
    { "SetTransf", _wrap_CGSceneTransf_SetTransf},
    { "oTransf", _wrap_CGSceneTransf_oTransf},
    { "SetObject", _wrap_CGSceneTransf_SetObject},
    { "poGetObject", _wrap_CGSceneTransf_poGetObject},
    { "SetBV", _wrap_CGSceneTransf_SetBV},
    { "poGetBV", _wrap_CGSceneTransf_poGetBV},
    { "Accept", _wrap_CGSceneTransf_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneTransf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneTransf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneTransf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneTransf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneTransf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneTransf_Sf_SwigStatic = {
    "CGSceneTransf",
    swig_CGSceneTransf_Sf_SwigStatic_methods,
    swig_CGSceneTransf_Sf_SwigStatic_attributes,
    swig_CGSceneTransf_Sf_SwigStatic_constants,
    swig_CGSceneTransf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneTransf_bases[] = {0,0};
static const char *swig_CGSceneTransf_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneTransf = { "CGSceneTransf", "CGSceneTransf", &SWIGTYPE_p_CGSceneTransf,_proxy__wrap_new_CGSceneTransf, swig_delete_CGSceneTransf, swig_CGSceneTransf_methods, swig_CGSceneTransf_attributes, &swig_CGSceneTransf_Sf_SwigStatic, swig_CGSceneTransf_meta, swig_CGSceneTransf_bases, swig_CGSceneTransf_base_names };

static int _wrap_new_CGSceneInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneInstance *result = 0 ;
    
    SWIG_check_num_args("CGSceneInstance::CGSceneInstance",0,0)
    result = (CGSceneInstance *)new CGSceneInstance();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneInstance(void *obj) {
CGSceneInstance *arg1 = (CGSceneInstance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneInstance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneInstance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneInstance_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGSceneInstance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneInstance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneInstance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneInstance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneInstance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneInstance_Sf_SwigStatic = {
    "CGSceneInstance",
    swig_CGSceneInstance_Sf_SwigStatic_methods,
    swig_CGSceneInstance_Sf_SwigStatic_attributes,
    swig_CGSceneInstance_Sf_SwigStatic_constants,
    swig_CGSceneInstance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneInstance_bases[] = {0,0};
static const char *swig_CGSceneInstance_base_names[] = {"CGSceneTransf *",0};
static swig_lua_class _wrap_class_CGSceneInstance = { "CGSceneInstance", "CGSceneInstance", &SWIGTYPE_p_CGSceneInstance,_proxy__wrap_new_CGSceneInstance, swig_delete_CGSceneInstance, swig_CGSceneInstance_methods, swig_CGSceneInstance_attributes, &swig_CGSceneInstance_Sf_SwigStatic, swig_CGSceneInstance_meta, swig_CGSceneInstance_bases, swig_CGSceneInstance_base_names };

static int _wrap_new_CGSceneLeaf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *result = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::CGSceneLeaf",0,0)
    result = (CGSceneLeaf *)new CGSceneLeaf();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneLeaf,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneLeaf_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneLeaf::Clear",1,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneLeaf_Clear",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    (arg1)->Clear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneLeaf_SetMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::SetMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneLeaf::SetMesh",1,"CGSceneLeaf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneLeaf::SetMesh",2,"CGBaseMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneLeaf_SetMesh",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CGSceneLeaf_SetMesh",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    (arg1)->SetMesh(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneLeaf_poGetMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    CGBaseMesh *result = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::poGetMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneLeaf::poGetMesh",1,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneLeaf_poGetMesh",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    result = (CGBaseMesh *)(arg1)->poGetMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBaseMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneLeaf_SetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::SetShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneLeaf::SetShader",1,"CGSceneLeaf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneLeaf::SetShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneLeaf_SetShader",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGSceneLeaf_SetShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneLeaf_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::poGetShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneLeaf::poGetShader",1,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneLeaf_poGetShader",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    result = (CGShader *)(arg1)->poGetShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneLeaf_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneLeaf::poGetBV",1,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneLeaf_poGetBV",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneLeaf_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneLeaf::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneLeaf::Accept",1,"CGSceneLeaf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneLeaf::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSceneLeaf_Accept",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneLeaf_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneLeaf(void *obj) {
CGSceneLeaf *arg1 = (CGSceneLeaf *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneLeaf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneLeaf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneLeaf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneLeaf_methods[]= {
    { "Clear", _wrap_CGSceneLeaf_Clear},
    { "SetMesh", _wrap_CGSceneLeaf_SetMesh},
    { "poGetMesh", _wrap_CGSceneLeaf_poGetMesh},
    { "SetShader", _wrap_CGSceneLeaf_SetShader},
    { "poGetShader", _wrap_CGSceneLeaf_poGetShader},
    { "poGetBV", _wrap_CGSceneLeaf_poGetBV},
    { "Accept", _wrap_CGSceneLeaf_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneLeaf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneLeaf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneLeaf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneLeaf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneLeaf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneLeaf_Sf_SwigStatic = {
    "CGSceneLeaf",
    swig_CGSceneLeaf_Sf_SwigStatic_methods,
    swig_CGSceneLeaf_Sf_SwigStatic_attributes,
    swig_CGSceneLeaf_Sf_SwigStatic_constants,
    swig_CGSceneLeaf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneLeaf_bases[] = {0,0};
static const char *swig_CGSceneLeaf_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneLeaf = { "CGSceneLeaf", "CGSceneLeaf", &SWIGTYPE_p_CGSceneLeaf,_proxy__wrap_new_CGSceneLeaf, swig_delete_CGSceneLeaf, swig_CGSceneLeaf_methods, swig_CGSceneLeaf_attributes, &swig_CGSceneLeaf_Sf_SwigStatic, swig_CGSceneLeaf_meta, swig_CGSceneLeaf_bases, swig_CGSceneLeaf_base_names };

static int _wrap_new_CGSceneMux(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *result = 0 ;
    
    SWIG_check_num_args("CGSceneMux::CGSceneMux",0,0)
    result = (CGSceneMux *)new CGSceneMux();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneMux,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneMux_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneMux::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneMux::Init",1,"CGSceneMux *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneMux::Init",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneMux_Init",1,SWIGTYPE_p_CGSceneMux);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneMux_SelectAll(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneMux::SelectAll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneMux::SelectAll",1,"CGSceneMux *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneMux_SelectAll",1,SWIGTYPE_p_CGSceneMux);
    }
    
    (arg1)->SelectAll();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneMux_SelectNone(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneMux::SelectNone",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneMux::SelectNone",1,"CGSceneMux *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneMux_SelectNone",1,SWIGTYPE_p_CGSceneMux);
    }
    
    (arg1)->SelectNone();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneMux_Select(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneMux::Select",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneMux::Select",1,"CGSceneMux *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneMux::Select",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneMux_Select",1,SWIGTYPE_p_CGSceneMux);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Select(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneMux_Deselect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneMux::Deselect",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneMux::Deselect",1,"CGSceneMux *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneMux::Deselect",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneMux_Deselect",1,SWIGTYPE_p_CGSceneMux);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Deselect(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneMux_bIsSelected(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *arg1 = 0 ;
    uint arg2 ;
    bool result;
    
    SWIG_check_num_args("CGSceneMux::bIsSelected",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneMux::bIsSelected",1,"CGSceneMux *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneMux::bIsSelected",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneMux_bIsSelected",1,SWIGTYPE_p_CGSceneMux);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (bool)(arg1)->bIsSelected(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneMux_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneMux *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneMux::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneMux::Accept",1,"CGSceneMux *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneMux::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSceneMux_Accept",1,SWIGTYPE_p_CGSceneMux);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneMux_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneMux(void *obj) {
CGSceneMux *arg1 = (CGSceneMux *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneMux(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneMux);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneMux_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneMux_methods[]= {
    { "Init", _wrap_CGSceneMux_Init},
    { "SelectAll", _wrap_CGSceneMux_SelectAll},
    { "SelectNone", _wrap_CGSceneMux_SelectNone},
    { "Select", _wrap_CGSceneMux_Select},
    { "Deselect", _wrap_CGSceneMux_Deselect},
    { "bIsSelected", _wrap_CGSceneMux_bIsSelected},
    { "Accept", _wrap_CGSceneMux_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneMux_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneMux_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneMux_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneMux_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneMux_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneMux_Sf_SwigStatic = {
    "CGSceneMux",
    swig_CGSceneMux_Sf_SwigStatic_methods,
    swig_CGSceneMux_Sf_SwigStatic_attributes,
    swig_CGSceneMux_Sf_SwigStatic_constants,
    swig_CGSceneMux_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneMux_bases[] = {0,0};
static const char *swig_CGSceneMux_base_names[] = {"CGSceneGroup *",0};
static swig_lua_class _wrap_class_CGSceneMux = { "CGSceneMux", "CGSceneMux", &SWIGTYPE_p_CGSceneMux,_proxy__wrap_new_CGSceneMux, swig_delete_CGSceneMux, swig_CGSceneMux_methods, swig_CGSceneMux_attributes, &swig_CGSceneMux_Sf_SwigStatic, swig_CGSceneMux_meta, swig_CGSceneMux_bases, swig_CGSceneMux_base_names };

static int _wrap_new_CGSceneScreenRect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *result = 0 ;
    
    SWIG_check_num_args("CGSceneScreenRect::CGSceneScreenRect",0,0)
    result = (CGSceneScreenRect *)new CGSceneScreenRect();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneScreenRect,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneScreenRect_SetRect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGSceneScreenRect::SetRect",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneScreenRect::SetRect",1,"CGSceneScreenRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneScreenRect::SetRect",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneScreenRect::SetRect",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGSceneScreenRect::SetRect",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGSceneScreenRect::SetRect",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneScreenRect_SetRect",1,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetRect(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneScreenRect_SetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneScreenRect::SetShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneScreenRect::SetShader",1,"CGSceneScreenRect *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneScreenRect::SetShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneScreenRect_SetShader",1,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGSceneScreenRect_SetShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneScreenRect_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGSceneScreenRect::poGetShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneScreenRect::poGetShader",1,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneScreenRect_poGetShader",1,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    result = (CGShader *)(arg1)->poGetShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneScreenRect_oGetMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGSceneScreenRect::oGetMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneScreenRect::oGetMatrix",1,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneScreenRect_oGetMatrix",1,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    result = (CGMatrix4x4 *) &(arg1)->oGetMatrix();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneScreenRect_poGetMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *arg1 = 0 ;
    CGBaseMesh *result = 0 ;
    
    SWIG_check_num_args("CGSceneScreenRect::poGetMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneScreenRect::poGetMesh",1,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneScreenRect_poGetMesh",1,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    result = (CGBaseMesh *)(arg1)->poGetMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBaseMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneScreenRect_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneScreenRect::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneScreenRect::poGetBV",1,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneScreenRect_poGetBV",1,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneScreenRect_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneScreenRect *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneScreenRect::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneScreenRect::Accept",1,"CGSceneScreenRect *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneScreenRect::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSceneScreenRect_Accept",1,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneScreenRect_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneScreenRect(void *obj) {
CGSceneScreenRect *arg1 = (CGSceneScreenRect *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneScreenRect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneScreenRect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneScreenRect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneScreenRect_methods[]= {
    { "SetRect", _wrap_CGSceneScreenRect_SetRect},
    { "SetShader", _wrap_CGSceneScreenRect_SetShader},
    { "poGetShader", _wrap_CGSceneScreenRect_poGetShader},
    { "oGetMatrix", _wrap_CGSceneScreenRect_oGetMatrix},
    { "poGetMesh", _wrap_CGSceneScreenRect_poGetMesh},
    { "poGetBV", _wrap_CGSceneScreenRect_poGetBV},
    { "Accept", _wrap_CGSceneScreenRect_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneScreenRect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneScreenRect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneScreenRect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneScreenRect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneScreenRect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneScreenRect_Sf_SwigStatic = {
    "CGSceneScreenRect",
    swig_CGSceneScreenRect_Sf_SwigStatic_methods,
    swig_CGSceneScreenRect_Sf_SwigStatic_attributes,
    swig_CGSceneScreenRect_Sf_SwigStatic_constants,
    swig_CGSceneScreenRect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneScreenRect_bases[] = {0,0};
static const char *swig_CGSceneScreenRect_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneScreenRect = { "CGSceneScreenRect", "CGSceneScreenRect", &SWIGTYPE_p_CGSceneScreenRect,_proxy__wrap_new_CGSceneScreenRect, swig_delete_CGSceneScreenRect, swig_CGSceneScreenRect_methods, swig_CGSceneScreenRect_attributes, &swig_CGSceneScreenRect_Sf_SwigStatic, swig_CGSceneScreenRect_meta, swig_CGSceneScreenRect_bases, swig_CGSceneScreenRect_base_names };

static int _wrap_new_CGSceneSwitch(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *result = 0 ;
    
    SWIG_check_num_args("CGSceneSwitch::CGSceneSwitch",0,0)
    result = (CGSceneSwitch *)new CGSceneSwitch();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneSwitch,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_SetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneSwitch::SetObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::SetObject",1,"CGSceneSwitch *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneSwitch::SetObject",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_SetObject",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneSwitch_SetObject",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->SetObject(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_poGetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneSwitch::poGetObject",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::poGetObject",1,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_poGetObject",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    result = (CGSceneNode *)(arg1)->poGetObject();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_Enable__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGSceneSwitch::Enable",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::Enable",1,"CGSceneSwitch *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGSceneSwitch::Enable",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_Enable",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->Enable(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_Enable__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneSwitch::Enable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::Enable",1,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_Enable",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    (arg1)->Enable();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_Enable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneSwitch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CGSceneSwitch_Enable__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneSwitch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGSceneSwitch_Enable__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGSceneSwitch_Enable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSceneSwitch::Enable(bool)\n"
    "    CGSceneSwitch::Enable()\n");
  lua_error(L);return 0;
}


static int _wrap_CGSceneSwitch_Disable(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneSwitch::Disable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::Disable",1,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_Disable",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    (arg1)->Disable();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_bEnabled(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGSceneSwitch::bEnabled",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::bEnabled",1,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_bEnabled",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    result = (bool)(arg1)->bEnabled();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneSwitch::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::poGetBV",1,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_poGetBV",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneSwitch_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneSwitch *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneSwitch::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneSwitch::Accept",1,"CGSceneSwitch *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneSwitch::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSceneSwitch_Accept",1,SWIGTYPE_p_CGSceneSwitch);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneSwitch_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneSwitch(void *obj) {
CGSceneSwitch *arg1 = (CGSceneSwitch *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneSwitch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneSwitch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneSwitch_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneSwitch_methods[]= {
    { "SetObject", _wrap_CGSceneSwitch_SetObject},
    { "poGetObject", _wrap_CGSceneSwitch_poGetObject},
    { "Enable", _wrap_CGSceneSwitch_Enable},
    { "Disable", _wrap_CGSceneSwitch_Disable},
    { "bEnabled", _wrap_CGSceneSwitch_bEnabled},
    { "poGetBV", _wrap_CGSceneSwitch_poGetBV},
    { "Accept", _wrap_CGSceneSwitch_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneSwitch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneSwitch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneSwitch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneSwitch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneSwitch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneSwitch_Sf_SwigStatic = {
    "CGSceneSwitch",
    swig_CGSceneSwitch_Sf_SwigStatic_methods,
    swig_CGSceneSwitch_Sf_SwigStatic_attributes,
    swig_CGSceneSwitch_Sf_SwigStatic_constants,
    swig_CGSceneSwitch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneSwitch_bases[] = {0,0};
static const char *swig_CGSceneSwitch_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneSwitch = { "CGSceneSwitch", "CGSceneSwitch", &SWIGTYPE_p_CGSceneSwitch,_proxy__wrap_new_CGSceneSwitch, swig_delete_CGSceneSwitch, swig_CGSceneSwitch_methods, swig_CGSceneSwitch_attributes, &swig_CGSceneSwitch_Sf_SwigStatic, swig_CGSceneSwitch_meta, swig_CGSceneSwitch_bases, swig_CGSceneSwitch_base_names };

static int _wrap_CGSceneAnimNode_SetAnimState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimNode *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGSceneAnimNode::SetAnimState",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimNode::SetAnimState",1,"CGSceneAnimNode *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimNode::SetAnimState",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneAnimNode::SetAnimState",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGSceneAnimNode::SetAnimState",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSceneAnimNode_SetAnimState",1,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetAnimState(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimNode_uiGetNumStates(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimNode *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimNode::uiGetNumStates",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimNode::uiGetNumStates",1,"CGSceneAnimNode const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSceneAnimNode_uiGetNumStates",1,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    result = (uint)((CGSceneAnimNode const *)arg1)->uiGetNumStates();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimNode_poGetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimNode *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimNode::poGetStateBVol",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimNode::poGetStateBVol",1,"CGSceneAnimNode *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimNode::poGetStateBVol",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSceneAnimNode_poGetStateBVol",1,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CGGraphBV *)(arg1)->poGetStateBVol(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimNode_SetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimNode *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *arg3 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimNode::SetStateBVol",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimNode::SetStateBVol",1,"CGSceneAnimNode *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimNode::SetStateBVol",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGSceneAnimNode::SetStateBVol",3,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSceneAnimNode_SetStateBVol",1,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGSceneAnimNode_SetStateBVol",3,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetStateBVol(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneAnimNode(void *obj) {
CGSceneAnimNode *arg1 = (CGSceneAnimNode *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGSceneAnimNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneAnimNode_methods[]= {
    { "SetAnimState", _wrap_CGSceneAnimNode_SetAnimState},
    { "uiGetNumStates", _wrap_CGSceneAnimNode_uiGetNumStates},
    { "poGetStateBVol", _wrap_CGSceneAnimNode_poGetStateBVol},
    { "SetStateBVol", _wrap_CGSceneAnimNode_SetStateBVol},
    {0,0}
};
static swig_lua_method swig_CGSceneAnimNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneAnimNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneAnimNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneAnimNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneAnimNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneAnimNode_Sf_SwigStatic = {
    "CGSceneAnimNode",
    swig_CGSceneAnimNode_Sf_SwigStatic_methods,
    swig_CGSceneAnimNode_Sf_SwigStatic_attributes,
    swig_CGSceneAnimNode_Sf_SwigStatic_constants,
    swig_CGSceneAnimNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneAnimNode_bases[] = {0,0};
static const char *swig_CGSceneAnimNode_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneAnimNode = { "CGSceneAnimNode", "CGSceneAnimNode", &SWIGTYPE_p_CGSceneAnimNode,0, swig_delete_CGSceneAnimNode, swig_CGSceneAnimNode_methods, swig_CGSceneAnimNode_attributes, &swig_CGSceneAnimNode_Sf_SwigStatic, swig_CGSceneAnimNode_meta, swig_CGSceneAnimNode_bases, swig_CGSceneAnimNode_base_names };

static int _wrap_CAnimAction_m_uiIniFrame_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CAnimAction::m_uiIniFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_uiIniFrame",1,"CAnimAction *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CAnimAction::m_uiIniFrame",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_uiIniFrame_set",1,SWIGTYPE_p_CAnimAction);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiIniFrame = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CAnimAction_m_uiIniFrame_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CAnimAction::m_uiIniFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_uiIniFrame",1,"CAnimAction *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_uiIniFrame_get",1,SWIGTYPE_p_CAnimAction);
    }
    
    result = (uint) ((arg1)->m_uiIniFrame);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CAnimAction_m_uiEndFrame_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CAnimAction::m_uiEndFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_uiEndFrame",1,"CAnimAction *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CAnimAction::m_uiEndFrame",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_uiEndFrame_set",1,SWIGTYPE_p_CAnimAction);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiEndFrame = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CAnimAction_m_uiEndFrame_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CAnimAction::m_uiEndFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_uiEndFrame",1,"CAnimAction *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_uiEndFrame_get",1,SWIGTYPE_p_CAnimAction);
    }
    
    result = (uint) ((arg1)->m_uiEndFrame);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CAnimAction_m_fFrameTime_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CAnimAction::m_fFrameTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_fFrameTime",1,"CAnimAction *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CAnimAction::m_fFrameTime",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_fFrameTime_set",1,SWIGTYPE_p_CAnimAction);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fFrameTime = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CAnimAction_m_fFrameTime_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CAnimAction::m_fFrameTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_fFrameTime",1,"CAnimAction *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_fFrameTime_get",1,SWIGTYPE_p_CAnimAction);
    }
    
    result = (float) ((arg1)->m_fFrameTime);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CAnimAction_m_bLoop_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CAnimAction::m_bLoop",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_bLoop",1,"CAnimAction *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CAnimAction::m_bLoop",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_bLoop_set",1,SWIGTYPE_p_CAnimAction);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->m_bLoop = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CAnimAction_m_bLoop_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CAnimAction::m_bLoop",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CAnimAction::m_bLoop",1,"CAnimAction *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CAnimAction,0))){
      SWIG_fail_ptr("CAnimAction_m_bLoop_get",1,SWIGTYPE_p_CAnimAction);
    }
    
    result = (bool) ((arg1)->m_bLoop);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CAnimAction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CAnimAction *result = 0 ;
    
    SWIG_check_num_args("CAnimAction::CAnimAction",0,0)
    result = (CAnimAction *)new CAnimAction();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CAnimAction,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CAnimAction(void *obj) {
CAnimAction *arg1 = (CAnimAction *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAnimAction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAnimAction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAnimAction_attributes[] = {
    { "m_uiIniFrame", _wrap_CAnimAction_m_uiIniFrame_get, _wrap_CAnimAction_m_uiIniFrame_set },
    { "m_uiEndFrame", _wrap_CAnimAction_m_uiEndFrame_get, _wrap_CAnimAction_m_uiEndFrame_set },
    { "m_fFrameTime", _wrap_CAnimAction_m_fFrameTime_get, _wrap_CAnimAction_m_fFrameTime_set },
    { "m_bLoop", _wrap_CAnimAction_m_bLoop_get, _wrap_CAnimAction_m_bLoop_set },
    {0,0,0}
};
static swig_lua_method swig_CAnimAction_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAnimAction_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAnimAction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAnimAction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAnimAction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAnimAction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAnimAction_Sf_SwigStatic = {
    "CAnimAction",
    swig_CAnimAction_Sf_SwigStatic_methods,
    swig_CAnimAction_Sf_SwigStatic_attributes,
    swig_CAnimAction_Sf_SwigStatic_constants,
    swig_CAnimAction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAnimAction_bases[] = {0};
static const char *swig_CAnimAction_base_names[] = {0};
static swig_lua_class _wrap_class_CAnimAction = { "CAnimAction", "CAnimAction", &SWIGTYPE_p_CAnimAction,_proxy__wrap_new_CAnimAction, swig_delete_CAnimAction, swig_CAnimAction_methods, swig_CAnimAction_attributes, &swig_CAnimAction_Sf_SwigStatic, swig_CAnimAction_meta, swig_CAnimAction_bases, swig_CAnimAction_base_names };

static int _wrap_new_CGSceneAnimActionSet(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::CGSceneAnimActionSet",0,0)
    result = (CGSceneAnimActionSet *)new CGSceneAnimActionSet();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimActionSet,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_uiAddAction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    CGString *arg2 = 0 ;
    uint arg3 ;
    uint arg4 ;
    float arg5 ;
    bool arg6 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimActionSet::uiAddAction",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::uiAddAction",1,"CGSceneAnimActionSet *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::uiAddAction",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneAnimActionSet::uiAddAction",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGSceneAnimActionSet::uiAddAction",4,"uint");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGSceneAnimActionSet::uiAddAction",5,"float");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("CGSceneAnimActionSet::uiAddAction",6,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_uiAddAction",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_uiAddAction",2,SWIGTYPE_p_CGString);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (lua_toboolean(L, 6)!=0);
    result = (uint)(arg1)->uiAddAction((CGString const &)*arg2,arg3,arg4,arg5,arg6);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_uiNumActions(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimActionSet::uiNumActions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::uiNumActions",1,"CGSceneAnimActionSet const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_uiNumActions",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    result = (uint)((CGSceneAnimActionSet const *)arg1)->uiNumActions();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_sGetActionName(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    uint arg2 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::sGetActionName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::sGetActionName",1,"CGSceneAnimActionSet *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::sGetActionName",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_sGetActionName",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGString *) &(arg1)->sGetActionName(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_oGetAnimAction__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    uint arg2 ;
    CAnimAction *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::oGetAnimAction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::oGetAnimAction",1,"CGSceneAnimActionSet *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::oGetAnimAction",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_oGetAnimAction",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CAnimAction *) &(arg1)->oGetAnimAction(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CAnimAction,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_oGetAnimAction__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CAnimAction *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::oGetAnimAction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::oGetAnimAction",1,"CGSceneAnimActionSet *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::oGetAnimAction",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_oGetAnimAction",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_oGetAnimAction",2,SWIGTYPE_p_CGString);
    }
    
    result = (CAnimAction *) &(arg1)->oGetAnimAction((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CAnimAction,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_oGetAnimAction(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneAnimActionSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSceneAnimActionSet_oGetAnimAction__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneAnimActionSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGSceneAnimActionSet_oGetAnimAction__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGSceneAnimActionSet_oGetAnimAction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSceneAnimActionSet::oGetAnimAction(uint)\n"
    "    CGSceneAnimActionSet::oGetAnimAction(CGString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGSceneAnimActionSet_SetAction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::SetAction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::SetAction",1,"CGSceneAnimActionSet *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::SetAction",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_SetAction",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetAction(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_Enable(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::Enable",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::Enable",1,"CGSceneAnimActionSet *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::Enable",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_Enable",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->Enable(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_UpdateAnimState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::UpdateAnimState",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::UpdateAnimState",1,"CGSceneAnimActionSet *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::UpdateAnimState",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_UpdateAnimState",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->UpdateAnimState(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_poGetAnimObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    CGSceneAnimNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::poGetAnimObject",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::poGetAnimObject",1,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_poGetAnimObject",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    result = (CGSceneAnimNode *)(arg1)->poGetAnimObject();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_SetAnimObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    CGSceneAnimNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::SetAnimObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::SetAnimObject",1,"CGSceneAnimActionSet *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::SetAnimObject",2,"CGSceneAnimNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_SetAnimObject",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_SetAnimObject",2,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    (arg1)->SetAnimObject(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::poGetBV",1,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_poGetBV",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimActionSet_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimActionSet *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimActionSet::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimActionSet::Accept",1,"CGSceneAnimActionSet *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimActionSet::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_Accept",1,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneAnimActionSet_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneAnimActionSet(void *obj) {
CGSceneAnimActionSet *arg1 = (CGSceneAnimActionSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneAnimActionSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneAnimActionSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneAnimActionSet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneAnimActionSet_methods[]= {
    { "uiAddAction", _wrap_CGSceneAnimActionSet_uiAddAction},
    { "uiNumActions", _wrap_CGSceneAnimActionSet_uiNumActions},
    { "sGetActionName", _wrap_CGSceneAnimActionSet_sGetActionName},
    { "oGetAnimAction", _wrap_CGSceneAnimActionSet_oGetAnimAction},
    { "SetAction", _wrap_CGSceneAnimActionSet_SetAction},
    { "Enable", _wrap_CGSceneAnimActionSet_Enable},
    { "UpdateAnimState", _wrap_CGSceneAnimActionSet_UpdateAnimState},
    { "poGetAnimObject", _wrap_CGSceneAnimActionSet_poGetAnimObject},
    { "SetAnimObject", _wrap_CGSceneAnimActionSet_SetAnimObject},
    { "poGetBV", _wrap_CGSceneAnimActionSet_poGetBV},
    { "Accept", _wrap_CGSceneAnimActionSet_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneAnimActionSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneAnimActionSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneAnimActionSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneAnimActionSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneAnimActionSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneAnimActionSet_Sf_SwigStatic = {
    "CGSceneAnimActionSet",
    swig_CGSceneAnimActionSet_Sf_SwigStatic_methods,
    swig_CGSceneAnimActionSet_Sf_SwigStatic_attributes,
    swig_CGSceneAnimActionSet_Sf_SwigStatic_constants,
    swig_CGSceneAnimActionSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneAnimActionSet_bases[] = {0,0};
static const char *swig_CGSceneAnimActionSet_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CGSceneAnimActionSet = { "CGSceneAnimActionSet", "CGSceneAnimActionSet", &SWIGTYPE_p_CGSceneAnimActionSet,_proxy__wrap_new_CGSceneAnimActionSet, swig_delete_CGSceneAnimActionSet, swig_CGSceneAnimActionSet_methods, swig_CGSceneAnimActionSet_attributes, &swig_CGSceneAnimActionSet_Sf_SwigStatic, swig_CGSceneAnimActionSet_meta, swig_CGSceneAnimActionSet_bases, swig_CGSceneAnimActionSet_base_names };

static int _wrap_new_CGSceneAnimGroup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::CGSceneAnimGroup",0,0)
    result = (CGSceneAnimGroup *)new CGSceneAnimGroup();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimGroup,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_Setup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::Setup",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::Setup",1,"CGSceneAnimGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimGroup::Setup",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_Setup",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Setup(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_SetAnimState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::SetAnimState",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::SetAnimState",1,"CGSceneAnimGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimGroup::SetAnimState",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneAnimGroup::SetAnimState",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGSceneAnimGroup::SetAnimState",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_SetAnimState",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetAnimState(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_uiGetNumStates(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimGroup::uiGetNumStates",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::uiGetNumStates",1,"CGSceneAnimGroup const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_uiGetNumStates",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    result = (uint)((CGSceneAnimGroup const *)arg1)->uiGetNumStates();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_ComputeStatesBVols(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::ComputeStatesBVols",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::ComputeStatesBVols",1,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_ComputeStatesBVols",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    (arg1)->ComputeStatesBVols();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_poGetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::poGetStateBVol",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::poGetStateBVol",1,"CGSceneAnimGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimGroup::poGetStateBVol",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_poGetStateBVol",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CGGraphBV *)(arg1)->poGetStateBVol(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_SetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *arg3 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::SetStateBVol",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::SetStateBVol",1,"CGSceneAnimGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimGroup::SetStateBVol",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGSceneAnimGroup::SetStateBVol",3,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_SetStateBVol",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_SetStateBVol",3,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetStateBVol(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_uiAddAnimObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    CGSceneAnimNode *arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimGroup::uiAddAnimObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::uiAddAnimObject",1,"CGSceneAnimGroup *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimGroup::uiAddAnimObject",2,"CGSceneAnimNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_uiAddAnimObject",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_uiAddAnimObject",2,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    result = (uint)(arg1)->uiAddAnimObject(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_poGetAnimObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    uint arg2 ;
    CGSceneAnimNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::poGetAnimObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::poGetAnimObject",1,"CGSceneAnimGroup *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimGroup::poGetAnimObject",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_poGetAnimObject",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGSceneAnimNode *)(arg1)->poGetAnimObject(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_uiNumAnimObjects(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimGroup::uiNumAnimObjects",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::uiNumAnimObjects",1,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_uiNumAnimObjects",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    result = (uint)(arg1)->uiNumAnimObjects();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::Clear",1,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_Clear",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    (arg1)->Clear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::poGetBV",1,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_poGetBV",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimGroup_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimGroup *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimGroup::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimGroup::Accept",1,"CGSceneAnimGroup *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimGroup::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_Accept",1,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneAnimGroup_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneAnimGroup(void *obj) {
CGSceneAnimGroup *arg1 = (CGSceneAnimGroup *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneAnimGroup(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneAnimGroup);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneAnimGroup_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneAnimGroup_methods[]= {
    { "Setup", _wrap_CGSceneAnimGroup_Setup},
    { "SetAnimState", _wrap_CGSceneAnimGroup_SetAnimState},
    { "uiGetNumStates", _wrap_CGSceneAnimGroup_uiGetNumStates},
    { "ComputeStatesBVols", _wrap_CGSceneAnimGroup_ComputeStatesBVols},
    { "poGetStateBVol", _wrap_CGSceneAnimGroup_poGetStateBVol},
    { "SetStateBVol", _wrap_CGSceneAnimGroup_SetStateBVol},
    { "uiAddAnimObject", _wrap_CGSceneAnimGroup_uiAddAnimObject},
    { "poGetAnimObject", _wrap_CGSceneAnimGroup_poGetAnimObject},
    { "uiNumAnimObjects", _wrap_CGSceneAnimGroup_uiNumAnimObjects},
    { "Clear", _wrap_CGSceneAnimGroup_Clear},
    { "poGetBV", _wrap_CGSceneAnimGroup_poGetBV},
    { "Accept", _wrap_CGSceneAnimGroup_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneAnimGroup_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneAnimGroup_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneAnimGroup_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneAnimGroup_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneAnimGroup_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneAnimGroup_SwigStatic = {
    "CGSceneAnimGroup",
    swig_CGSceneAnimGroup_SwigStatic_methods,
    swig_CGSceneAnimGroup_SwigStatic_attributes,
    swig_CGSceneAnimGroup_SwigStatic_constants,
    swig_CGSceneAnimGroup_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneAnimGroup_bases[] = {0,0};
static const char *swig_CGSceneAnimGroup_base_names[] = {"CGSceneAnimNode *",0};
static swig_lua_class _wrap_class_CGSceneAnimGroup = { "CGSceneAnimGroup", "CGSceneAnimGroup", &SWIGTYPE_p_CGSceneAnimGroup,_proxy__wrap_new_CGSceneAnimGroup, swig_delete_CGSceneAnimGroup, swig_CGSceneAnimGroup_methods, swig_CGSceneAnimGroup_attributes, &swig_CGSceneAnimGroup_SwigStatic, swig_CGSceneAnimGroup_meta, swig_CGSceneAnimGroup_bases, swig_CGSceneAnimGroup_base_names };

static int _wrap_new_CGSceneAnimMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::CGSceneAnimMesh",0,0)
    result = (CGSceneAnimMesh *)new CGSceneAnimMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimMesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_Setup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    uint arg3 ;
    uint arg4 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::Setup",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::Setup",1,"CGSceneAnimMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimMesh::Setup",2,"CGMesh *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneAnimMesh::Setup",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGSceneAnimMesh::Setup",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_Setup",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_Setup",2,SWIGTYPE_p_CGMesh);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    (arg1)->Setup(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_SetAnimState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::SetAnimState",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::SetAnimState",1,"CGSceneAnimMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimMesh::SetAnimState",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneAnimMesh::SetAnimState",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGSceneAnimMesh::SetAnimState",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_SetAnimState",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetAnimState(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_uiGetNumStates(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimMesh::uiGetNumStates",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::uiGetNumStates",1,"CGSceneAnimMesh const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_uiGetNumStates",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    result = (uint)((CGSceneAnimMesh const *)arg1)->uiGetNumStates();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_ComputeStatesBVols(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::ComputeStatesBVols",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::ComputeStatesBVols",1,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_ComputeStatesBVols",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    (arg1)->ComputeStatesBVols();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_poGetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::poGetStateBVol",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::poGetStateBVol",1,"CGSceneAnimMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimMesh::poGetStateBVol",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_poGetStateBVol",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CGGraphBV *)(arg1)->poGetStateBVol(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_SetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *arg3 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::SetStateBVol",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::SetStateBVol",1,"CGSceneAnimMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimMesh::SetStateBVol",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGSceneAnimMesh::SetStateBVol",3,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_SetStateBVol",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_SetStateBVol",3,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetStateBVol(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_uiGetNumFrameVXs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimMesh::uiGetNumFrameVXs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::uiGetNumFrameVXs",1,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_uiGetNumFrameVXs",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    result = (uint)(arg1)->uiGetNumFrameVXs();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_poGetMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::poGetMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::poGetMesh",1,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_poGetMesh",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    result = (CGMesh *)(arg1)->poGetMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_poGetVertices(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::poGetVertices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::poGetVertices",1,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_poGetVertices",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    result = (CGVect3 *)(arg1)->poGetVertices();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_poGetNormals(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::poGetNormals",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::poGetNormals",1,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_poGetNormals",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    result = (CGVect3 *)(arg1)->poGetNormals();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_SetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::SetShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::SetShader",1,"CGSceneAnimMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimMesh::SetShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_SetShader",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_SetShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::poGetShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::poGetShader",1,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_poGetShader",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    result = (CGShader *)(arg1)->poGetShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::poGetBV",1,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_poGetBV",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimMesh_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimMesh *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimMesh::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimMesh::Accept",1,"CGSceneAnimMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimMesh::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_Accept",1,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneAnimMesh_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneAnimMesh(void *obj) {
CGSceneAnimMesh *arg1 = (CGSceneAnimMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneAnimMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneAnimMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneAnimMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneAnimMesh_methods[]= {
    { "Setup", _wrap_CGSceneAnimMesh_Setup},
    { "SetAnimState", _wrap_CGSceneAnimMesh_SetAnimState},
    { "uiGetNumStates", _wrap_CGSceneAnimMesh_uiGetNumStates},
    { "ComputeStatesBVols", _wrap_CGSceneAnimMesh_ComputeStatesBVols},
    { "poGetStateBVol", _wrap_CGSceneAnimMesh_poGetStateBVol},
    { "SetStateBVol", _wrap_CGSceneAnimMesh_SetStateBVol},
    { "uiGetNumFrameVXs", _wrap_CGSceneAnimMesh_uiGetNumFrameVXs},
    { "poGetMesh", _wrap_CGSceneAnimMesh_poGetMesh},
    { "poGetVertices", _wrap_CGSceneAnimMesh_poGetVertices},
    { "poGetNormals", _wrap_CGSceneAnimMesh_poGetNormals},
    { "SetShader", _wrap_CGSceneAnimMesh_SetShader},
    { "poGetShader", _wrap_CGSceneAnimMesh_poGetShader},
    { "poGetBV", _wrap_CGSceneAnimMesh_poGetBV},
    { "Accept", _wrap_CGSceneAnimMesh_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneAnimMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneAnimMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneAnimMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneAnimMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneAnimMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneAnimMesh_Sf_SwigStatic = {
    "CGSceneAnimMesh",
    swig_CGSceneAnimMesh_Sf_SwigStatic_methods,
    swig_CGSceneAnimMesh_Sf_SwigStatic_attributes,
    swig_CGSceneAnimMesh_Sf_SwigStatic_constants,
    swig_CGSceneAnimMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneAnimMesh_bases[] = {0,0};
static const char *swig_CGSceneAnimMesh_base_names[] = {"CGSceneAnimNode *",0};
static swig_lua_class _wrap_class_CGSceneAnimMesh = { "CGSceneAnimMesh", "CGSceneAnimMesh", &SWIGTYPE_p_CGSceneAnimMesh,_proxy__wrap_new_CGSceneAnimMesh, swig_delete_CGSceneAnimMesh, swig_CGSceneAnimMesh_methods, swig_CGSceneAnimMesh_attributes, &swig_CGSceneAnimMesh_Sf_SwigStatic, swig_CGSceneAnimMesh_meta, swig_CGSceneAnimMesh_bases, swig_CGSceneAnimMesh_base_names };

static int _wrap_new_CGSceneAnimTransf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::CGSceneAnimTransf",0,0)
    result = (CGSceneAnimTransf *)new CGSceneAnimTransf();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimTransf,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_Setup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::Setup",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::Setup",1,"CGSceneAnimTransf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimTransf::Setup",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_Setup",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Setup(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_SetAnimState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::SetAnimState",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::SetAnimState",1,"CGSceneAnimTransf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimTransf::SetAnimState",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSceneAnimTransf::SetAnimState",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGSceneAnimTransf::SetAnimState",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_SetAnimState",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetAnimState(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_uiGetNumStates(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGSceneAnimTransf::uiGetNumStates",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::uiGetNumStates",1,"CGSceneAnimTransf const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_uiGetNumStates",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    result = (uint)((CGSceneAnimTransf const *)arg1)->uiGetNumStates();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_ComputeStatesBVols(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::ComputeStatesBVols",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::ComputeStatesBVols",1,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_ComputeStatesBVols",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    (arg1)->ComputeStatesBVols();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_poGetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::poGetStateBVol",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::poGetStateBVol",1,"CGSceneAnimTransf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimTransf::poGetStateBVol",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_poGetStateBVol",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CGGraphBV *)(arg1)->poGetStateBVol(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_SetStateBVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    int arg2 ;
    CGGraphBV *arg3 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::SetStateBVol",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::SetStateBVol",1,"CGSceneAnimTransf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSceneAnimTransf::SetStateBVol",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGSceneAnimTransf::SetStateBVol",3,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_SetStateBVol",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_SetStateBVol",3,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetStateBVol(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_GetCurrentTranform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::GetCurrentTranform",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::GetCurrentTranform",1,"CGSceneAnimTransf const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_GetCurrentTranform",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    result = (CGMatrix4x4 *) &((CGSceneAnimTransf const *)arg1)->GetCurrentTranform();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_SetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::SetObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::SetObject",1,"CGSceneAnimTransf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimTransf::SetObject",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_SetObject",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_SetObject",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->SetObject(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_poGetObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::poGetObject",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::poGetObject",1,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_poGetObject",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    result = (CGSceneNode *)(arg1)->poGetObject();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_poGetStateTransforms(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::poGetStateTransforms",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::poGetStateTransforms",1,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_poGetStateTransforms",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    result = (CGMatrix4x4 *)(arg1)->poGetStateTransforms();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::poGetBV",1,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_poGetBV",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneAnimTransf_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneAnimTransf *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneAnimTransf::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneAnimTransf::Accept",1,"CGSceneAnimTransf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneAnimTransf::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_Accept",1,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CGSceneAnimTransf_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneAnimTransf(void *obj) {
CGSceneAnimTransf *arg1 = (CGSceneAnimTransf *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneAnimTransf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneAnimTransf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneAnimTransf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSceneAnimTransf_methods[]= {
    { "Setup", _wrap_CGSceneAnimTransf_Setup},
    { "SetAnimState", _wrap_CGSceneAnimTransf_SetAnimState},
    { "uiGetNumStates", _wrap_CGSceneAnimTransf_uiGetNumStates},
    { "ComputeStatesBVols", _wrap_CGSceneAnimTransf_ComputeStatesBVols},
    { "poGetStateBVol", _wrap_CGSceneAnimTransf_poGetStateBVol},
    { "SetStateBVol", _wrap_CGSceneAnimTransf_SetStateBVol},
    { "GetCurrentTranform", _wrap_CGSceneAnimTransf_GetCurrentTranform},
    { "SetObject", _wrap_CGSceneAnimTransf_SetObject},
    { "poGetObject", _wrap_CGSceneAnimTransf_poGetObject},
    { "poGetStateTransforms", _wrap_CGSceneAnimTransf_poGetStateTransforms},
    { "poGetBV", _wrap_CGSceneAnimTransf_poGetBV},
    { "Accept", _wrap_CGSceneAnimTransf_Accept},
    {0,0}
};
static swig_lua_method swig_CGSceneAnimTransf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneAnimTransf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneAnimTransf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneAnimTransf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneAnimTransf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneAnimTransf_Sf_SwigStatic = {
    "CGSceneAnimTransf",
    swig_CGSceneAnimTransf_Sf_SwigStatic_methods,
    swig_CGSceneAnimTransf_Sf_SwigStatic_attributes,
    swig_CGSceneAnimTransf_Sf_SwigStatic_constants,
    swig_CGSceneAnimTransf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneAnimTransf_bases[] = {0,0};
static const char *swig_CGSceneAnimTransf_base_names[] = {"CGSceneAnimNode *",0};
static swig_lua_class _wrap_class_CGSceneAnimTransf = { "CGSceneAnimTransf", "CGSceneAnimTransf", &SWIGTYPE_p_CGSceneAnimTransf,_proxy__wrap_new_CGSceneAnimTransf, swig_delete_CGSceneAnimTransf, swig_CGSceneAnimTransf_methods, swig_CGSceneAnimTransf_attributes, &swig_CGSceneAnimTransf_Sf_SwigStatic, swig_CGSceneAnimTransf_meta, swig_CGSceneAnimTransf_bases, swig_CGSceneAnimTransf_base_names };

static int _wrap_C3DLoader_poLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    C3DLoader *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("C3DLoader::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("C3DLoader::poLoad",1,"C3DLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("C3DLoader::poLoad",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_C3DLoader,0))){
      SWIG_fail_ptr("C3DLoader_poLoad",1,SWIGTYPE_p_C3DLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("C3DLoader_poLoad",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGSceneNode *)(arg1)->poLoad((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_C3DLoader(void *obj) {
C3DLoader *arg1 = (C3DLoader *) obj;
delete arg1;
}
static swig_lua_attribute swig_C3DLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_C3DLoader_methods[]= {
    { "poLoad", _wrap_C3DLoader_poLoad},
    {0,0}
};
static swig_lua_method swig_C3DLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_C3DLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_C3DLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_C3DLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_C3DLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_C3DLoader_Sf_SwigStatic = {
    "C3DLoader",
    swig_C3DLoader_Sf_SwigStatic_methods,
    swig_C3DLoader_Sf_SwigStatic_attributes,
    swig_C3DLoader_Sf_SwigStatic_constants,
    swig_C3DLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_C3DLoader_bases[] = {0};
static const char *swig_C3DLoader_base_names[] = {0};
static swig_lua_class _wrap_class_C3DLoader = { "C3DLoader", "C3DLoader", &SWIGTYPE_p_C3DLoader,0, swig_delete_C3DLoader, swig_C3DLoader_methods, swig_C3DLoader_attributes, &swig_C3DLoader_Sf_SwigStatic, swig_C3DLoader_meta, swig_C3DLoader_bases, swig_C3DLoader_base_names };

static int _wrap_T3DS_Chunk_m_usID_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    T3DS_Chunk *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("T3DS_Chunk::m_usID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("T3DS_Chunk::m_usID",1,"T3DS_Chunk *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("T3DS_Chunk::m_usID",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_T3DS_Chunk,0))){
      SWIG_fail_ptr("T3DS_Chunk_m_usID_set",1,SWIGTYPE_p_T3DS_Chunk);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_usID = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_T3DS_Chunk_m_usID_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    T3DS_Chunk *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("T3DS_Chunk::m_usID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("T3DS_Chunk::m_usID",1,"T3DS_Chunk *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_T3DS_Chunk,0))){
      SWIG_fail_ptr("T3DS_Chunk_m_usID_get",1,SWIGTYPE_p_T3DS_Chunk);
    }
    
    result = (unsigned short) ((arg1)->m_usID);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_T3DS_Chunk_m_uiLen_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    T3DS_Chunk *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("T3DS_Chunk::m_uiLen",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("T3DS_Chunk::m_uiLen",1,"T3DS_Chunk *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("T3DS_Chunk::m_uiLen",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_T3DS_Chunk,0))){
      SWIG_fail_ptr("T3DS_Chunk_m_uiLen_set",1,SWIGTYPE_p_T3DS_Chunk);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiLen = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_T3DS_Chunk_m_uiLen_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    T3DS_Chunk *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("T3DS_Chunk::m_uiLen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("T3DS_Chunk::m_uiLen",1,"T3DS_Chunk *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_T3DS_Chunk,0))){
      SWIG_fail_ptr("T3DS_Chunk_m_uiLen_get",1,SWIGTYPE_p_T3DS_Chunk);
    }
    
    result = (uint) ((arg1)->m_uiLen);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_T3DS_Chunk_m_pData_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    T3DS_Chunk *arg1 = 0 ;
    pointer arg2 = 0 ;
    
    SWIG_check_num_args("T3DS_Chunk::m_pData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("T3DS_Chunk::m_pData",1,"T3DS_Chunk *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("T3DS_Chunk::m_pData",2,"pointer");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_T3DS_Chunk,0))){
      SWIG_fail_ptr("T3DS_Chunk_m_pData_set",1,SWIGTYPE_p_T3DS_Chunk);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("T3DS_Chunk_m_pData_set",2,SWIGTYPE_p_unsigned_char);
    }
    
    if (arg1) (arg1)->m_pData = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_T3DS_Chunk_m_pData_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    T3DS_Chunk *arg1 = 0 ;
    pointer result;
    
    SWIG_check_num_args("T3DS_Chunk::m_pData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("T3DS_Chunk::m_pData",1,"T3DS_Chunk *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_T3DS_Chunk,0))){
      SWIG_fail_ptr("T3DS_Chunk_m_pData_get",1,SWIGTYPE_p_T3DS_Chunk);
    }
    
    result = (pointer) ((arg1)->m_pData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_T3DS_Chunk(lua_State* L) {
  {
    int SWIG_arg = 0;
    T3DS_Chunk *result = 0 ;
    
    SWIG_check_num_args("T3DS_Chunk::T3DS_Chunk",0,0)
    result = (T3DS_Chunk *)new T3DS_Chunk();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_T3DS_Chunk,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_T3DS_Chunk(void *obj) {
T3DS_Chunk *arg1 = (T3DS_Chunk *) obj;
delete arg1;
}
static int _proxy__wrap_new_T3DS_Chunk(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_T3DS_Chunk);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_T3DS_Chunk_attributes[] = {
    { "m_usID", _wrap_T3DS_Chunk_m_usID_get, _wrap_T3DS_Chunk_m_usID_set },
    { "m_uiLen", _wrap_T3DS_Chunk_m_uiLen_get, _wrap_T3DS_Chunk_m_uiLen_set },
    { "m_pData", _wrap_T3DS_Chunk_m_pData_get, _wrap_T3DS_Chunk_m_pData_set },
    {0,0,0}
};
static swig_lua_method swig_T3DS_Chunk_methods[]= {
    {0,0}
};
static swig_lua_method swig_T3DS_Chunk_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_T3DS_Chunk_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_T3DS_Chunk_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_T3DS_Chunk_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_T3DS_Chunk_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_T3DS_Chunk_Sf_SwigStatic = {
    "T3DS_Chunk",
    swig_T3DS_Chunk_Sf_SwigStatic_methods,
    swig_T3DS_Chunk_Sf_SwigStatic_attributes,
    swig_T3DS_Chunk_Sf_SwigStatic_constants,
    swig_T3DS_Chunk_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_T3DS_Chunk_bases[] = {0};
static const char *swig_T3DS_Chunk_base_names[] = {0};
static swig_lua_class _wrap_class_T3DS_Chunk = { "T3DS_Chunk", "T3DS_Chunk", &SWIGTYPE_p_T3DS_Chunk,_proxy__wrap_new_T3DS_Chunk, swig_delete_T3DS_Chunk, swig_T3DS_Chunk_methods, swig_T3DS_Chunk_attributes, &swig_T3DS_Chunk_Sf_SwigStatic, swig_T3DS_Chunk_meta, swig_T3DS_Chunk_bases, swig_T3DS_Chunk_base_names };

static int _wrap_new_CLoader3DS(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoader3DS *result = 0 ;
    
    SWIG_check_num_args("CLoader3DS::CLoader3DS",0,0)
    result = (CLoader3DS *)new CLoader3DS();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLoader3DS,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoader3DS_poLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoader3DS *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoader3DS::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoader3DS::poLoad",1,"CLoader3DS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLoader3DS::poLoad",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoader3DS,0))){
      SWIG_fail_ptr("CLoader3DS_poLoad",1,SWIGTYPE_p_CLoader3DS);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CLoader3DS_poLoad",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGSceneNode *)(arg1)->poLoad((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLoader3DS(void *obj) {
CLoader3DS *arg1 = (CLoader3DS *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLoader3DS(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLoader3DS);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLoader3DS_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLoader3DS_methods[]= {
    { "poLoad", _wrap_CLoader3DS_poLoad},
    {0,0}
};
static swig_lua_method swig_CLoader3DS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLoader3DS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLoader3DS_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLoader3DS_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLoader3DS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLoader3DS_Sf_SwigStatic = {
    "CLoader3DS",
    swig_CLoader3DS_Sf_SwigStatic_methods,
    swig_CLoader3DS_Sf_SwigStatic_attributes,
    swig_CLoader3DS_Sf_SwigStatic_constants,
    swig_CLoader3DS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLoader3DS_bases[] = {0,0};
static const char *swig_CLoader3DS_base_names[] = {"C3DLoader *",0};
static swig_lua_class _wrap_class_CLoader3DS = { "CLoader3DS", "CLoader3DS", &SWIGTYPE_p_CLoader3DS,_proxy__wrap_new_CLoader3DS, swig_delete_CLoader3DS, swig_CLoader3DS_methods, swig_CLoader3DS_attributes, &swig_CLoader3DS_Sf_SwigStatic, swig_CLoader3DS_meta, swig_CLoader3DS_bases, swig_CLoader3DS_base_names };

static int _wrap_new_SCNUt_Triangle(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::SCNUt_Triangle",0,0)
    result = (SCNUt_Triangle *)new SCNUt_Triangle();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_Triangle,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VXs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect3 *arg2 = (CGVect3 *)0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VXs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VXs",1,"SCNUt_Triangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Triangle::VXs",2,"CGVect3 [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VXs_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VXs_set",2,SWIGTYPE_p_CGVect3);
    }
    
    {
      size_t ii;
      CGVect3 *b = (CGVect3 *) arg1->VXs;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((CGVect3 *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VXs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VXs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VXs",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VXs_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (CGVect3 *)(CGVect3 *) ((arg1)->VXs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_UVs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect2 *arg2 = (CGVect2 *)0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::UVs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::UVs",1,"SCNUt_Triangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Triangle::UVs",2,"CGVect2 [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_UVs_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect2,0))){
      SWIG_fail_ptr("SCNUt_Triangle_UVs_set",2,SWIGTYPE_p_CGVect2);
    }
    
    {
      size_t ii;
      CGVect2 *b = (CGVect2 *) arg1->UVs;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((CGVect2 *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_UVs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect2 *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::UVs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::UVs",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_UVs_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (CGVect2 *)(CGVect2 *) ((arg1)->UVs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect2,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VCs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect4 *arg2 = (CGVect4 *)0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VCs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VCs",1,"SCNUt_Triangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Triangle::VCs",2,"CGVect4 [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VCs_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect4,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VCs_set",2,SWIGTYPE_p_CGVect4);
    }
    
    {
      size_t ii;
      CGVect4 *b = (CGVect4 *) arg1->VCs;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((CGVect4 *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VCs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect4 *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VCs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VCs",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VCs_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (CGVect4 *)(CGVect4 *) ((arg1)->VCs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VNs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect3 *arg2 = (CGVect3 *)0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VNs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VNs",1,"SCNUt_Triangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Triangle::VNs",2,"CGVect3 [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VNs_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VNs_set",2,SWIGTYPE_p_CGVect3);
    }
    
    {
      size_t ii;
      CGVect3 *b = (CGVect3 *) arg1->VNs;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((CGVect3 *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VNs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VNs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VNs",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VNs_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (CGVect3 *)(CGVect3 *) ((arg1)->VNs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_Material_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_Triangle::Material",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::Material",1,"SCNUt_Triangle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_Triangle::Material",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_Material_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->Material = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_Material_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_Triangle::Material",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::Material",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_Material_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (int) ((arg1)->Material);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_Side_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    SCNUt_ePolyState arg2 ;
    
    SWIG_check_num_args("SCNUt_Triangle::Side",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::Side",1,"SCNUt_Triangle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_Triangle::Side",2,"SCNUt_ePolyState");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_Side_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    arg2 = (SCNUt_ePolyState)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->Side = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_Side_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    SCNUt_ePolyState result;
    
    SWIG_check_num_args("SCNUt_Triangle::Side",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::Side",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_Side_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (SCNUt_ePolyState) ((arg1)->Side);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VertexSide_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    SCNUt_ePolyState *arg2 = (SCNUt_ePolyState *)0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VertexSide",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VertexSide",1,"SCNUt_Triangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Triangle::VertexSide",2,"SCNUt_ePolyState [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VertexSide_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_ePolyState,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VertexSide_set",2,SWIGTYPE_p_SCNUt_ePolyState);
    }
    
    {
      size_t ii;
      SCNUt_ePolyState *b = (SCNUt_ePolyState *) arg1->VertexSide;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((SCNUt_ePolyState *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_VertexSide_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    SCNUt_ePolyState *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::VertexSide",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::VertexSide",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_VertexSide_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (SCNUt_ePolyState *)(SCNUt_ePolyState *) ((arg1)->VertexSide);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_ePolyState,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_DProds_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::DProds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::DProds",1,"SCNUt_Triangle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Triangle::DProds",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_DProds_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SCNUt_Triangle_DProds_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->DProds;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_DProds_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Triangle::DProds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::DProds",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_DProds_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (float *)(float *) ((arg1)->DProds);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_iFlags_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("SCNUt_Triangle::iFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::iFlags",1,"SCNUt_Triangle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_Triangle::iFlags",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_iFlags_set",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iFlags = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Triangle_iFlags_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("SCNUt_Triangle::iFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Triangle::iFlags",1,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_Triangle_iFlags_get",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    result = (unsigned int) ((arg1)->iFlags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_Triangle(void *obj) {
SCNUt_Triangle *arg1 = (SCNUt_Triangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_Triangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_Triangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_Triangle_attributes[] = {
    { "VXs", _wrap_SCNUt_Triangle_VXs_get, _wrap_SCNUt_Triangle_VXs_set },
    { "UVs", _wrap_SCNUt_Triangle_UVs_get, _wrap_SCNUt_Triangle_UVs_set },
    { "VCs", _wrap_SCNUt_Triangle_VCs_get, _wrap_SCNUt_Triangle_VCs_set },
    { "VNs", _wrap_SCNUt_Triangle_VNs_get, _wrap_SCNUt_Triangle_VNs_set },
    { "Material", _wrap_SCNUt_Triangle_Material_get, _wrap_SCNUt_Triangle_Material_set },
    { "Side", _wrap_SCNUt_Triangle_Side_get, _wrap_SCNUt_Triangle_Side_set },
    { "VertexSide", _wrap_SCNUt_Triangle_VertexSide_get, _wrap_SCNUt_Triangle_VertexSide_set },
    { "DProds", _wrap_SCNUt_Triangle_DProds_get, _wrap_SCNUt_Triangle_DProds_set },
    { "iFlags", _wrap_SCNUt_Triangle_iFlags_get, _wrap_SCNUt_Triangle_iFlags_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_Triangle_methods[]= {
    {0,0}
};
static swig_lua_method swig_SCNUt_Triangle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_Triangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_Triangle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_Triangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_Triangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_Triangle_Sf_SwigStatic = {
    "SCNUt_Triangle",
    swig_SCNUt_Triangle_Sf_SwigStatic_methods,
    swig_SCNUt_Triangle_Sf_SwigStatic_attributes,
    swig_SCNUt_Triangle_Sf_SwigStatic_constants,
    swig_SCNUt_Triangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_Triangle_bases[] = {0};
static const char *swig_SCNUt_Triangle_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_Triangle = { "SCNUt_Triangle", "SCNUt_Triangle", &SWIGTYPE_p_SCNUt_Triangle,_proxy__wrap_new_SCNUt_Triangle, swig_delete_SCNUt_Triangle, swig_SCNUt_Triangle_methods, swig_SCNUt_Triangle_attributes, &swig_SCNUt_Triangle_Sf_SwigStatic, swig_SCNUt_Triangle_meta, swig_SCNUt_Triangle_bases, swig_SCNUt_Triangle_base_names };

static int _wrap_new_SCNUt_TriScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriScene::SCNUt_TriScene",0,0)
    result = (SCNUt_TriScene *)new SCNUt_TriScene();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriScene_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriScene *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("SCNUt_TriScene::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriScene::Init",1,"SCNUt_TriScene *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriScene::Init",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriScene_Init",1,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriScene_Tris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriScene *arg1 = 0 ;
    SCNUt_Triangle *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriScene::Tris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriScene::Tris",1,"SCNUt_TriScene *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriScene::Tris",2,"SCNUt_Triangle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriScene_Tris_set",1,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_Triangle,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_TriScene_Tris_set",2,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    if (arg1) (arg1)->Tris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriScene_Tris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriScene *arg1 = 0 ;
    SCNUt_Triangle *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriScene::Tris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriScene::Tris",1,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriScene_Tris_get",1,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (SCNUt_Triangle *) ((arg1)->Tris);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_Triangle,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriScene_NumTris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriScene *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("SCNUt_TriScene::NumTris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriScene::NumTris",1,"SCNUt_TriScene *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriScene::NumTris",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriScene_NumTris_set",1,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->NumTris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriScene_NumTris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriScene *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("SCNUt_TriScene::NumTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriScene::NumTris",1,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriScene_NumTris_get",1,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (uint) ((arg1)->NumTris);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_TriScene(void *obj) {
SCNUt_TriScene *arg1 = (SCNUt_TriScene *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriScene(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriScene);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriScene_attributes[] = {
    { "Tris", _wrap_SCNUt_TriScene_Tris_get, _wrap_SCNUt_TriScene_Tris_set },
    { "NumTris", _wrap_SCNUt_TriScene_NumTris_get, _wrap_SCNUt_TriScene_NumTris_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriScene_methods[]= {
    { "Init", _wrap_SCNUt_TriScene_Init},
    {0,0}
};
static swig_lua_method swig_SCNUt_TriScene_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriScene_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriScene_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriScene_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriScene_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriScene_Sf_SwigStatic = {
    "SCNUt_TriScene",
    swig_SCNUt_TriScene_Sf_SwigStatic_methods,
    swig_SCNUt_TriScene_Sf_SwigStatic_attributes,
    swig_SCNUt_TriScene_Sf_SwigStatic_constants,
    swig_SCNUt_TriScene_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriScene_bases[] = {0};
static const char *swig_SCNUt_TriScene_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TriScene = { "SCNUt_TriScene", "SCNUt_TriScene", &SWIGTYPE_p_SCNUt_TriScene,_proxy__wrap_new_SCNUt_TriScene, swig_delete_SCNUt_TriScene, swig_SCNUt_TriScene_methods, swig_SCNUt_TriScene_attributes, &swig_SCNUt_TriScene_Sf_SwigStatic, swig_SCNUt_TriScene_meta, swig_SCNUt_TriScene_bases, swig_SCNUt_TriScene_base_names };

static int _wrap_new_SCNUt_TriSceneAccumulator(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneAccumulator *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneAccumulator::SCNUt_TriSceneAccumulator",0,0)
    result = (SCNUt_TriSceneAccumulator *)new SCNUt_TriSceneAccumulator();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriSceneAccumulator,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneAccumulator_AddTriScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneAccumulator *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneAccumulator::AddTriScene",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneAccumulator::AddTriScene",1,"SCNUt_TriSceneAccumulator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriSceneAccumulator::AddTriScene",2,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneAccumulator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneAccumulator_AddTriScene",1,SWIGTYPE_p_SCNUt_TriSceneAccumulator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriSceneAccumulator_AddTriScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    (arg1)->AddTriScene(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneAccumulator_Init__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneAccumulator *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_TriSceneAccumulator::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneAccumulator::Init",1,"SCNUt_TriSceneAccumulator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneAccumulator::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneAccumulator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneAccumulator_Init",1,SWIGTYPE_p_SCNUt_TriSceneAccumulator);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneAccumulator_Init__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneAccumulator *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("SCNUt_TriSceneAccumulator::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneAccumulator::Init",1,"SCNUt_TriSceneAccumulator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneAccumulator::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("SCNUt_TriSceneAccumulator::Init",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneAccumulator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneAccumulator_Init",1,SWIGTYPE_p_SCNUt_TriSceneAccumulator);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneAccumulator_Init(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SCNUt_TriSceneAccumulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SCNUt_TriSceneAccumulator_Init__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SCNUt_TriSceneAccumulator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SCNUt_TriSceneAccumulator_Init__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SCNUt_TriSceneAccumulator_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SCNUt_TriSceneAccumulator::Init(int)\n"
    "    SCNUt_TriSceneAccumulator::Init(int,int)\n");
  lua_error(L);return 0;
}


static void swig_delete_SCNUt_TriSceneAccumulator(void *obj) {
SCNUt_TriSceneAccumulator *arg1 = (SCNUt_TriSceneAccumulator *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriSceneAccumulator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriSceneAccumulator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriSceneAccumulator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneAccumulator_methods[]= {
    { "AddTriScene", _wrap_SCNUt_TriSceneAccumulator_AddTriScene},
    { "Init", _wrap_SCNUt_TriSceneAccumulator_Init},
    {0,0}
};
static swig_lua_method swig_SCNUt_TriSceneAccumulator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic = {
    "SCNUt_TriSceneAccumulator",
    swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_methods,
    swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_attributes,
    swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_constants,
    swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriSceneAccumulator_bases[] = {0,0};
static const char *swig_SCNUt_TriSceneAccumulator_base_names[] = {"SCNUt_TriScene *",0};
static swig_lua_class _wrap_class_SCNUt_TriSceneAccumulator = { "SCNUt_TriSceneAccumulator", "SCNUt_TriSceneAccumulator", &SWIGTYPE_p_SCNUt_TriSceneAccumulator,_proxy__wrap_new_SCNUt_TriSceneAccumulator, swig_delete_SCNUt_TriSceneAccumulator, swig_SCNUt_TriSceneAccumulator_methods, swig_SCNUt_TriSceneAccumulator_attributes, &swig_SCNUt_TriSceneAccumulator_Sf_SwigStatic, swig_SCNUt_TriSceneAccumulator_meta, swig_SCNUt_TriSceneAccumulator_bases, swig_SCNUt_TriSceneAccumulator_base_names };

static int _wrap_new_SCNUt_MaterialTable(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_MaterialTable *result = 0 ;
    
    SWIG_check_num_args("SCNUt_MaterialTable::SCNUt_MaterialTable",0,0)
    result = (SCNUt_MaterialTable *)new SCNUt_MaterialTable();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_MaterialTable,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_MaterialTable(void *obj) {
SCNUt_MaterialTable *arg1 = (SCNUt_MaterialTable *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_MaterialTable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_MaterialTable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_MaterialTable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_MaterialTable_methods[]= {
    {0,0}
};
static swig_lua_method swig_SCNUt_MaterialTable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_MaterialTable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_MaterialTable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_MaterialTable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_MaterialTable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_MaterialTable_Sf_SwigStatic = {
    "SCNUt_MaterialTable",
    swig_SCNUt_MaterialTable_Sf_SwigStatic_methods,
    swig_SCNUt_MaterialTable_Sf_SwigStatic_attributes,
    swig_SCNUt_MaterialTable_Sf_SwigStatic_constants,
    swig_SCNUt_MaterialTable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_MaterialTable_bases[] = {0};
static const char *swig_SCNUt_MaterialTable_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_MaterialTable = { "SCNUt_MaterialTable", "SCNUt_MaterialTable", &SWIGTYPE_p_SCNUt_MaterialTable,_proxy__wrap_new_SCNUt_MaterialTable, swig_delete_SCNUt_MaterialTable, swig_SCNUt_MaterialTable_methods, swig_SCNUt_MaterialTable_attributes, &swig_SCNUt_MaterialTable_Sf_SwigStatic, swig_SCNUt_MaterialTable_meta, swig_SCNUt_MaterialTable_bases, swig_SCNUt_MaterialTable_base_names };

static int _wrap_new_SCNUt_TriSceneLoader(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneLoader *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneLoader::SCNUt_TriSceneLoader",0,0)
    result = (SCNUt_TriSceneLoader *)new SCNUt_TriSceneLoader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriSceneLoader,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneLoader_poLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneLoader *arg1 = 0 ;
    char *arg2 = 0 ;
    SCNUt_MaterialTable *arg3 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneLoader::poLoad",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneLoader::poLoad",1,"SCNUt_TriSceneLoader *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SCNUt_TriSceneLoader::poLoad",2,"char *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_TriSceneLoader::poLoad",3,"SCNUt_MaterialTable &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneLoader,0))){
      SWIG_fail_ptr("SCNUt_TriSceneLoader_poLoad",1,SWIGTYPE_p_SCNUt_TriSceneLoader);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_TriSceneLoader_poLoad",3,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    result = (SCNUt_TriScene *)(arg1)->poLoad(arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_TriSceneLoader(void *obj) {
SCNUt_TriSceneLoader *arg1 = (SCNUt_TriSceneLoader *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriSceneLoader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriSceneLoader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriSceneLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneLoader_methods[]= {
    { "poLoad", _wrap_SCNUt_TriSceneLoader_poLoad},
    {0,0}
};
static swig_lua_method swig_SCNUt_TriSceneLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriSceneLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriSceneLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriSceneLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriSceneLoader_Sf_SwigStatic = {
    "SCNUt_TriSceneLoader",
    swig_SCNUt_TriSceneLoader_Sf_SwigStatic_methods,
    swig_SCNUt_TriSceneLoader_Sf_SwigStatic_attributes,
    swig_SCNUt_TriSceneLoader_Sf_SwigStatic_constants,
    swig_SCNUt_TriSceneLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriSceneLoader_bases[] = {0};
static const char *swig_SCNUt_TriSceneLoader_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TriSceneLoader = { "SCNUt_TriSceneLoader", "SCNUt_TriSceneLoader", &SWIGTYPE_p_SCNUt_TriSceneLoader,_proxy__wrap_new_SCNUt_TriSceneLoader, swig_delete_SCNUt_TriSceneLoader, swig_SCNUt_TriSceneLoader_methods, swig_SCNUt_TriSceneLoader_attributes, &swig_SCNUt_TriSceneLoader_Sf_SwigStatic, swig_SCNUt_TriSceneLoader_meta, swig_SCNUt_TriSceneLoader_bases, swig_SCNUt_TriSceneLoader_base_names };

static int _wrap_new_SCNUt_TriSceneSaver(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSaver *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSaver::SCNUt_TriSceneSaver",0,0)
    result = (SCNUt_TriSceneSaver *)new SCNUt_TriSceneSaver();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriSceneSaver,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSaver_Save(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSaver *arg1 = 0 ;
    char *arg2 = 0 ;
    SCNUt_TriScene *arg3 = 0 ;
    SCNUt_MaterialTable *arg4 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSaver::Save",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSaver::Save",1,"SCNUt_TriSceneSaver *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SCNUt_TriSceneSaver::Save",2,"char *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SCNUt_TriSceneSaver::Save",3,"SCNUt_TriScene *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SCNUt_TriSceneSaver::Save",4,"SCNUt_MaterialTable *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSaver,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_Save",1,SWIGTYPE_p_SCNUt_TriSceneSaver);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_Save",3,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_Save",4,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    (arg1)->Save(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSaver_pszMaterials_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSaver *arg1 = 0 ;
    char **arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSaver::pszMaterials",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSaver::pszMaterials",1,"SCNUt_TriSceneSaver *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriSceneSaver::pszMaterials",2,"char **");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSaver,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_pszMaterials_set",1,SWIGTYPE_p_SCNUt_TriSceneSaver);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_pszMaterials_set",2,SWIGTYPE_p_p_char);
    }
    
    if (arg1) (arg1)->pszMaterials = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSaver_pszMaterials_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSaver *arg1 = 0 ;
    char **result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSaver::pszMaterials",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSaver::pszMaterials",1,"SCNUt_TriSceneSaver *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSaver,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_pszMaterials_get",1,SWIGTYPE_p_SCNUt_TriSceneSaver);
    }
    
    result = (char **) ((arg1)->pszMaterials);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_char,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSaver_iNumMaterials_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSaver *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSaver::iNumMaterials",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSaver::iNumMaterials",1,"SCNUt_TriSceneSaver *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneSaver::iNumMaterials",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSaver,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_iNumMaterials_set",1,SWIGTYPE_p_SCNUt_TriSceneSaver);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumMaterials = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSaver_iNumMaterials_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSaver *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneSaver::iNumMaterials",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSaver::iNumMaterials",1,"SCNUt_TriSceneSaver *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSaver,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSaver_iNumMaterials_get",1,SWIGTYPE_p_SCNUt_TriSceneSaver);
    }
    
    result = (int) ((arg1)->iNumMaterials);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_TriSceneSaver(void *obj) {
SCNUt_TriSceneSaver *arg1 = (SCNUt_TriSceneSaver *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriSceneSaver(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriSceneSaver);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriSceneSaver_attributes[] = {
    { "pszMaterials", _wrap_SCNUt_TriSceneSaver_pszMaterials_get, _wrap_SCNUt_TriSceneSaver_pszMaterials_set },
    { "iNumMaterials", _wrap_SCNUt_TriSceneSaver_iNumMaterials_get, _wrap_SCNUt_TriSceneSaver_iNumMaterials_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSaver_methods[]= {
    { "Save", _wrap_SCNUt_TriSceneSaver_Save},
    {0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSaver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriSceneSaver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriSceneSaver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSaver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriSceneSaver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriSceneSaver_Sf_SwigStatic = {
    "SCNUt_TriSceneSaver",
    swig_SCNUt_TriSceneSaver_Sf_SwigStatic_methods,
    swig_SCNUt_TriSceneSaver_Sf_SwigStatic_attributes,
    swig_SCNUt_TriSceneSaver_Sf_SwigStatic_constants,
    swig_SCNUt_TriSceneSaver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriSceneSaver_bases[] = {0};
static const char *swig_SCNUt_TriSceneSaver_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TriSceneSaver = { "SCNUt_TriSceneSaver", "SCNUt_TriSceneSaver", &SWIGTYPE_p_SCNUt_TriSceneSaver,_proxy__wrap_new_SCNUt_TriSceneSaver, swig_delete_SCNUt_TriSceneSaver, swig_SCNUt_TriSceneSaver_methods, swig_SCNUt_TriSceneSaver_attributes, &swig_SCNUt_TriSceneSaver_Sf_SwigStatic, swig_SCNUt_TriSceneSaver_meta, swig_SCNUt_TriSceneSaver_bases, swig_SCNUt_TriSceneSaver_base_names };

static int _wrap_TVertexRef_m_uiTri_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TVertexRef *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("TVertexRef::m_uiTri",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TVertexRef::m_uiTri",1,"TVertexRef *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TVertexRef::m_uiTri",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TVertexRef,0))){
      SWIG_fail_ptr("TVertexRef_m_uiTri_set",1,SWIGTYPE_p_TVertexRef);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiTri = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TVertexRef_m_uiTri_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TVertexRef *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("TVertexRef::m_uiTri",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TVertexRef::m_uiTri",1,"TVertexRef *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TVertexRef,0))){
      SWIG_fail_ptr("TVertexRef_m_uiTri_get",1,SWIGTYPE_p_TVertexRef);
    }
    
    result = (uint) ((arg1)->m_uiTri);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TVertexRef_m_uiVX_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TVertexRef *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("TVertexRef::m_uiVX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TVertexRef::m_uiVX",1,"TVertexRef *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TVertexRef::m_uiVX",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TVertexRef,0))){
      SWIG_fail_ptr("TVertexRef_m_uiVX_set",1,SWIGTYPE_p_TVertexRef);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiVX = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TVertexRef_m_uiVX_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TVertexRef *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("TVertexRef::m_uiVX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TVertexRef::m_uiVX",1,"TVertexRef *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TVertexRef,0))){
      SWIG_fail_ptr("TVertexRef_m_uiVX_get",1,SWIGTYPE_p_TVertexRef);
    }
    
    result = (uint) ((arg1)->m_uiVX);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_TVertexRef(lua_State* L) {
  {
    int SWIG_arg = 0;
    TVertexRef *result = 0 ;
    
    SWIG_check_num_args("TVertexRef::TVertexRef",0,0)
    result = (TVertexRef *)new TVertexRef();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TVertexRef,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_TVertexRef(void *obj) {
TVertexRef *arg1 = (TVertexRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_TVertexRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TVertexRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TVertexRef_attributes[] = {
    { "m_uiTri", _wrap_TVertexRef_m_uiTri_get, _wrap_TVertexRef_m_uiTri_set },
    { "m_uiVX", _wrap_TVertexRef_m_uiVX_get, _wrap_TVertexRef_m_uiVX_set },
    {0,0,0}
};
static swig_lua_method swig_TVertexRef_methods[]= {
    {0,0}
};
static swig_lua_method swig_TVertexRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TVertexRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TVertexRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TVertexRef_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TVertexRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TVertexRef_Sf_SwigStatic = {
    "TVertexRef",
    swig_TVertexRef_Sf_SwigStatic_methods,
    swig_TVertexRef_Sf_SwigStatic_attributes,
    swig_TVertexRef_Sf_SwigStatic_constants,
    swig_TVertexRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TVertexRef_bases[] = {0};
static const char *swig_TVertexRef_base_names[] = {0};
static swig_lua_class _wrap_class_TVertexRef = { "TVertexRef", "TVertexRef", &SWIGTYPE_p_TVertexRef,_proxy__wrap_new_TVertexRef, swig_delete_TVertexRef, swig_TVertexRef_methods, swig_TVertexRef_attributes, &swig_TVertexRef_Sf_SwigStatic, swig_TVertexRef_meta, swig_TVertexRef_bases, swig_TVertexRef_base_names };

static int _wrap_CCompactMeshData_m_poMesh_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCompactMeshData *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CCompactMeshData::m_poMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCompactMeshData::m_poMesh",1,"CCompactMeshData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCompactMeshData::m_poMesh",2,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCompactMeshData,0))){
      SWIG_fail_ptr("CCompactMeshData_m_poMesh_set",1,SWIGTYPE_p_CCompactMeshData);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCompactMeshData_m_poMesh_set",2,SWIGTYPE_p_CGMesh);
    }
    
    if (arg1) (arg1)->m_poMesh = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCompactMeshData_m_poMesh_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCompactMeshData *arg1 = 0 ;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("CCompactMeshData::m_poMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCompactMeshData::m_poMesh",1,"CCompactMeshData *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCompactMeshData,0))){
      SWIG_fail_ptr("CCompactMeshData_m_poMesh_get",1,SWIGTYPE_p_CCompactMeshData);
    }
    
    result = (CGMesh *) ((arg1)->m_poMesh);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCompactMeshData_m_oInvTable_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCompactMeshData *arg1 = 0 ;
    CGDynArray< TVertexRef > *arg2 = 0 ;
    
    SWIG_check_num_args("CCompactMeshData::m_oInvTable",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCompactMeshData::m_oInvTable",1,"CCompactMeshData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCompactMeshData::m_oInvTable",2,"CGDynArray< TVertexRef > *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCompactMeshData,0))){
      SWIG_fail_ptr("CCompactMeshData_m_oInvTable_set",1,SWIGTYPE_p_CCompactMeshData);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGDynArrayT_TVertexRef_t,0))){
      SWIG_fail_ptr("CCompactMeshData_m_oInvTable_set",2,SWIGTYPE_p_CGDynArrayT_TVertexRef_t);
    }
    
    if (arg1) (arg1)->m_oInvTable = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCompactMeshData_m_oInvTable_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCompactMeshData *arg1 = 0 ;
    CGDynArray< TVertexRef > *result = 0 ;
    
    SWIG_check_num_args("CCompactMeshData::m_oInvTable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCompactMeshData::m_oInvTable",1,"CCompactMeshData *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCompactMeshData,0))){
      SWIG_fail_ptr("CCompactMeshData_m_oInvTable_get",1,SWIGTYPE_p_CCompactMeshData);
    }
    
    result = (CGDynArray< TVertexRef > *)& ((arg1)->m_oInvTable);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGDynArrayT_TVertexRef_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCompactMeshData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCompactMeshData *result = 0 ;
    
    SWIG_check_num_args("CCompactMeshData::CCompactMeshData",0,0)
    result = (CCompactMeshData *)new CCompactMeshData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCompactMeshData,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCompactMeshData(void *obj) {
CCompactMeshData *arg1 = (CCompactMeshData *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCompactMeshData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCompactMeshData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCompactMeshData_attributes[] = {
    { "m_poMesh", _wrap_CCompactMeshData_m_poMesh_get, _wrap_CCompactMeshData_m_poMesh_set },
    { "m_oInvTable", _wrap_CCompactMeshData_m_oInvTable_get, _wrap_CCompactMeshData_m_oInvTable_set },
    {0,0,0}
};
static swig_lua_method swig_CCompactMeshData_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCompactMeshData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCompactMeshData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCompactMeshData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCompactMeshData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCompactMeshData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCompactMeshData_Sf_SwigStatic = {
    "CCompactMeshData",
    swig_CCompactMeshData_Sf_SwigStatic_methods,
    swig_CCompactMeshData_Sf_SwigStatic_attributes,
    swig_CCompactMeshData_Sf_SwigStatic_constants,
    swig_CCompactMeshData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCompactMeshData_bases[] = {0};
static const char *swig_CCompactMeshData_base_names[] = {0};
static swig_lua_class _wrap_class_CCompactMeshData = { "CCompactMeshData", "CCompactMeshData", &SWIGTYPE_p_CCompactMeshData,_proxy__wrap_new_CCompactMeshData, swig_delete_CCompactMeshData, swig_CCompactMeshData_methods, swig_CCompactMeshData_attributes, &swig_CCompactMeshData_Sf_SwigStatic, swig_CCompactMeshData_meta, swig_CCompactMeshData_bases, swig_CCompactMeshData_base_names };

static int _wrap_new_SCNUt_MeshCompacter(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_MeshCompacter *result = 0 ;
    
    SWIG_check_num_args("SCNUt_MeshCompacter::SCNUt_MeshCompacter",0,0)
    result = (SCNUt_MeshCompacter *)new SCNUt_MeshCompacter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_MeshCompacter,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_MeshCompacter_poCompactMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_MeshCompacter *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("SCNUt_MeshCompacter::poCompactMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_MeshCompacter::poCompactMesh",1,"SCNUt_MeshCompacter *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_MeshCompacter::poCompactMesh",2,"SCNUt_TriScene const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_MeshCompacter,0))){
      SWIG_fail_ptr("SCNUt_MeshCompacter_poCompactMesh",1,SWIGTYPE_p_SCNUt_MeshCompacter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_MeshCompacter_poCompactMesh",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (CGMesh *)(arg1)->poCompactMesh((SCNUt_TriScene const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_MeshCompacter_CompactMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_MeshCompacter *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CCompactMeshData *arg3 = 0 ;
    
    SWIG_check_num_args("SCNUt_MeshCompacter::CompactMesh",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_MeshCompacter::CompactMesh",1,"SCNUt_MeshCompacter *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_MeshCompacter::CompactMesh",2,"SCNUt_TriScene const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SCNUt_MeshCompacter::CompactMesh",3,"CCompactMeshData *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_MeshCompacter,0))){
      SWIG_fail_ptr("SCNUt_MeshCompacter_CompactMesh",1,SWIGTYPE_p_SCNUt_MeshCompacter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_MeshCompacter_CompactMesh",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CCompactMeshData,0))){
      SWIG_fail_ptr("SCNUt_MeshCompacter_CompactMesh",3,SWIGTYPE_p_CCompactMeshData);
    }
    
    (arg1)->CompactMesh((SCNUt_TriScene const &)*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_MeshCompacter(void *obj) {
SCNUt_MeshCompacter *arg1 = (SCNUt_MeshCompacter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_MeshCompacter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_MeshCompacter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_MeshCompacter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_MeshCompacter_methods[]= {
    { "poCompactMesh", _wrap_SCNUt_MeshCompacter_poCompactMesh},
    { "CompactMesh", _wrap_SCNUt_MeshCompacter_CompactMesh},
    {0,0}
};
static swig_lua_method swig_SCNUt_MeshCompacter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_MeshCompacter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_MeshCompacter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_MeshCompacter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_MeshCompacter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_MeshCompacter_Sf_SwigStatic = {
    "SCNUt_MeshCompacter",
    swig_SCNUt_MeshCompacter_Sf_SwigStatic_methods,
    swig_SCNUt_MeshCompacter_Sf_SwigStatic_attributes,
    swig_SCNUt_MeshCompacter_Sf_SwigStatic_constants,
    swig_SCNUt_MeshCompacter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_MeshCompacter_bases[] = {0};
static const char *swig_SCNUt_MeshCompacter_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_MeshCompacter = { "SCNUt_MeshCompacter", "SCNUt_MeshCompacter", &SWIGTYPE_p_SCNUt_MeshCompacter,_proxy__wrap_new_SCNUt_MeshCompacter, swig_delete_SCNUt_MeshCompacter, swig_SCNUt_MeshCompacter_methods, swig_SCNUt_MeshCompacter_attributes, &swig_SCNUt_MeshCompacter_Sf_SwigStatic, swig_SCNUt_MeshCompacter_meta, swig_SCNUt_MeshCompacter_bases, swig_SCNUt_MeshCompacter_base_names };

static int _wrap_new_SCNUt_TriSceneSeparator(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::SCNUt_TriSceneSeparator",0,0)
    result = (SCNUt_TriSceneSeparator *)new SCNUt_TriSceneSeparator();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriSceneSeparator,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_SeparateScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::SeparateScene",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::SeparateScene",1,"SCNUt_TriSceneSeparator *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::SeparateScene",2,"SCNUt_TriScene &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_SeparateScene",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_SeparateScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (int)(arg1)->SeparateScene(*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_iProcessTriScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::iProcessTriScene",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::iProcessTriScene",1,"SCNUt_TriSceneSeparator *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::iProcessTriScene",2,"SCNUt_TriScene &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_iProcessTriScene",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_iProcessTriScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (int)(arg1)->iProcessTriScene(*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_iGetTrisWithMat(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int arg2 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::iGetTrisWithMat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::iGetTrisWithMat",1,"SCNUt_TriSceneSeparator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::iGetTrisWithMat",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_iGetTrisWithMat",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (int)(arg1)->iGetTrisWithMat(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_NumMeshes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::NumMeshes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::NumMeshes",1,"SCNUt_TriSceneSeparator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::NumMeshes",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_NumMeshes_set",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->NumMeshes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_NumMeshes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::NumMeshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::NumMeshes",1,"SCNUt_TriSceneSeparator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_NumMeshes_get",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    result = (int) ((arg1)->NumMeshes);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_Meshes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::Meshes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::Meshes",1,"SCNUt_TriSceneSeparator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::Meshes",2,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_Meshes_set",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_Meshes_set",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    if (arg1) (arg1)->Meshes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_Meshes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::Meshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::Meshes",1,"SCNUt_TriSceneSeparator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_Meshes_get",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    result = (SCNUt_TriScene *) ((arg1)->Meshes);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_piTriMat_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::piTriMat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::piTriMat",1,"SCNUt_TriSceneSeparator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::piTriMat",2,"int *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_piTriMat_set",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_piTriMat_set",2,SWIGTYPE_p_int);
    }
    
    if (arg1) (arg1)->piTriMat = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_piTriMat_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::piTriMat",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::piTriMat",1,"SCNUt_TriSceneSeparator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_piTriMat_get",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    result = (int *) ((arg1)->piTriMat);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_piMatIdx_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::piMatIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::piMatIdx",1,"SCNUt_TriSceneSeparator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::piMatIdx",2,"int *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_piMatIdx_set",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_piMatIdx_set",2,SWIGTYPE_p_int);
    }
    
    if (arg1) (arg1)->piMatIdx = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_piMatIdx_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::piMatIdx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::piMatIdx",1,"SCNUt_TriSceneSeparator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_piMatIdx_get",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    result = (int *) ((arg1)->piMatIdx);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_iMaxMats_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::iMaxMats",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::iMaxMats",1,"SCNUt_TriSceneSeparator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneSeparator::iMaxMats",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_iMaxMats_set",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iMaxMats = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSeparator_iMaxMats_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSeparator *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneSeparator::iMaxMats",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSeparator::iMaxMats",1,"SCNUt_TriSceneSeparator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSeparator,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSeparator_iMaxMats_get",1,SWIGTYPE_p_SCNUt_TriSceneSeparator);
    }
    
    result = (int) ((arg1)->iMaxMats);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_TriSceneSeparator(void *obj) {
SCNUt_TriSceneSeparator *arg1 = (SCNUt_TriSceneSeparator *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriSceneSeparator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriSceneSeparator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriSceneSeparator_attributes[] = {
    { "NumMeshes", _wrap_SCNUt_TriSceneSeparator_NumMeshes_get, _wrap_SCNUt_TriSceneSeparator_NumMeshes_set },
    { "Meshes", _wrap_SCNUt_TriSceneSeparator_Meshes_get, _wrap_SCNUt_TriSceneSeparator_Meshes_set },
    { "piTriMat", _wrap_SCNUt_TriSceneSeparator_piTriMat_get, _wrap_SCNUt_TriSceneSeparator_piTriMat_set },
    { "piMatIdx", _wrap_SCNUt_TriSceneSeparator_piMatIdx_get, _wrap_SCNUt_TriSceneSeparator_piMatIdx_set },
    { "iMaxMats", _wrap_SCNUt_TriSceneSeparator_iMaxMats_get, _wrap_SCNUt_TriSceneSeparator_iMaxMats_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSeparator_methods[]= {
    { "SeparateScene", _wrap_SCNUt_TriSceneSeparator_SeparateScene},
    { "iProcessTriScene", _wrap_SCNUt_TriSceneSeparator_iProcessTriScene},
    { "iGetTrisWithMat", _wrap_SCNUt_TriSceneSeparator_iGetTrisWithMat},
    {0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSeparator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriSceneSeparator_Sf_SwigStatic = {
    "SCNUt_TriSceneSeparator",
    swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_methods,
    swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_attributes,
    swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_constants,
    swig_SCNUt_TriSceneSeparator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriSceneSeparator_bases[] = {0};
static const char *swig_SCNUt_TriSceneSeparator_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TriSceneSeparator = { "SCNUt_TriSceneSeparator", "SCNUt_TriSceneSeparator", &SWIGTYPE_p_SCNUt_TriSceneSeparator,_proxy__wrap_new_SCNUt_TriSceneSeparator, swig_delete_SCNUt_TriSceneSeparator, swig_SCNUt_TriSceneSeparator_methods, swig_SCNUt_TriSceneSeparator_attributes, &swig_SCNUt_TriSceneSeparator_Sf_SwigStatic, swig_SCNUt_TriSceneSeparator_meta, swig_SCNUt_TriSceneSeparator_bases, swig_SCNUt_TriSceneSeparator_base_names };

static int _wrap_new_SCNUt_TriSceneClassifier(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneClassifier *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneClassifier::SCNUt_TriSceneClassifier",0,0)
    result = (SCNUt_TriSceneClassifier *)new SCNUt_TriSceneClassifier();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriSceneClassifier,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneClassifier_ClassifyScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneClassifier *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGPlane *arg3 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneClassifier::ClassifyScene",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneClassifier::ClassifyScene",1,"SCNUt_TriSceneClassifier *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_TriSceneClassifier::ClassifyScene",2,"SCNUt_TriScene &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_TriSceneClassifier::ClassifyScene",3,"CGPlane &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneClassifier,0))){
      SWIG_fail_ptr("SCNUt_TriSceneClassifier_ClassifyScene",1,SWIGTYPE_p_SCNUt_TriSceneClassifier);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriSceneClassifier_ClassifyScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("SCNUt_TriSceneClassifier_ClassifyScene",3,SWIGTYPE_p_CGPlane);
    }
    
    (arg1)->ClassifyScene(*arg2,*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneClassifier_iFrontTris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneClassifier *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_TriSceneClassifier::iFrontTris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneClassifier::iFrontTris",1,"SCNUt_TriSceneClassifier *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneClassifier::iFrontTris",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneClassifier,0))){
      SWIG_fail_ptr("SCNUt_TriSceneClassifier_iFrontTris_set",1,SWIGTYPE_p_SCNUt_TriSceneClassifier);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iFrontTris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneClassifier_iFrontTris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneClassifier *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneClassifier::iFrontTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneClassifier::iFrontTris",1,"SCNUt_TriSceneClassifier *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneClassifier,0))){
      SWIG_fail_ptr("SCNUt_TriSceneClassifier_iFrontTris_get",1,SWIGTYPE_p_SCNUt_TriSceneClassifier);
    }
    
    result = (int) ((arg1)->iFrontTris);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneClassifier_iBackTris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneClassifier *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_TriSceneClassifier::iBackTris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneClassifier::iBackTris",1,"SCNUt_TriSceneClassifier *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_TriSceneClassifier::iBackTris",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneClassifier,0))){
      SWIG_fail_ptr("SCNUt_TriSceneClassifier_iBackTris_set",1,SWIGTYPE_p_SCNUt_TriSceneClassifier);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iBackTris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneClassifier_iBackTris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneClassifier *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_TriSceneClassifier::iBackTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneClassifier::iBackTris",1,"SCNUt_TriSceneClassifier *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneClassifier,0))){
      SWIG_fail_ptr("SCNUt_TriSceneClassifier_iBackTris_get",1,SWIGTYPE_p_SCNUt_TriSceneClassifier);
    }
    
    result = (int) ((arg1)->iBackTris);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_TriSceneClassifier(void *obj) {
SCNUt_TriSceneClassifier *arg1 = (SCNUt_TriSceneClassifier *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriSceneClassifier(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriSceneClassifier);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriSceneClassifier_attributes[] = {
    { "iFrontTris", _wrap_SCNUt_TriSceneClassifier_iFrontTris_get, _wrap_SCNUt_TriSceneClassifier_iFrontTris_set },
    { "iBackTris", _wrap_SCNUt_TriSceneClassifier_iBackTris_get, _wrap_SCNUt_TriSceneClassifier_iBackTris_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneClassifier_methods[]= {
    { "ClassifyScene", _wrap_SCNUt_TriSceneClassifier_ClassifyScene},
    {0,0}
};
static swig_lua_method swig_SCNUt_TriSceneClassifier_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriSceneClassifier_Sf_SwigStatic = {
    "SCNUt_TriSceneClassifier",
    swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_methods,
    swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_attributes,
    swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_constants,
    swig_SCNUt_TriSceneClassifier_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriSceneClassifier_bases[] = {0};
static const char *swig_SCNUt_TriSceneClassifier_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TriSceneClassifier = { "SCNUt_TriSceneClassifier", "SCNUt_TriSceneClassifier", &SWIGTYPE_p_SCNUt_TriSceneClassifier,_proxy__wrap_new_SCNUt_TriSceneClassifier, swig_delete_SCNUt_TriSceneClassifier, swig_SCNUt_TriSceneClassifier_methods, swig_SCNUt_TriSceneClassifier_attributes, &swig_SCNUt_TriSceneClassifier_Sf_SwigStatic, swig_SCNUt_TriSceneClassifier_meta, swig_SCNUt_TriSceneClassifier_bases, swig_SCNUt_TriSceneClassifier_base_names };

static int _wrap_new_SCNUt_TriUtils(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriUtils *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriUtils::SCNUt_TriUtils",0,0)
    result = (SCNUt_TriUtils *)new SCNUt_TriUtils();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriUtils,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriUtils_MinimizeMappingOffset(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriUtils::MinimizeMappingOffset",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCNUt_TriUtils::MinimizeMappingOffset",1,"SCNUt_Triangle &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_TriUtils_MinimizeMappingOffset",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    SCNUt_TriUtils::MinimizeMappingOffset(*arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriUtils_ChangeWinding(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Triangle *arg1 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriUtils::ChangeWinding",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCNUt_TriUtils::ChangeWinding",1,"SCNUt_Triangle &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Triangle,0))){
      SWIG_fail_ptr("SCNUt_TriUtils_ChangeWinding",1,SWIGTYPE_p_SCNUt_Triangle);
    }
    
    SCNUt_TriUtils::ChangeWinding(*arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriUtils_GetQ2UVCoords(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    float arg7 ;
    float *arg8 = 0 ;
    float *arg9 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriUtils::GetQ2UVCoords",9,9)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",1,"CGVect3 &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",2,"CGVect3 &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",3,"CGVect3 &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",7,"float");
    if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",8,"float *");
    if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SCNUt_TriUtils::GetQ2UVCoords",9,"float *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("SCNUt_TriUtils_GetQ2UVCoords",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("SCNUt_TriUtils_GetQ2UVCoords",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("SCNUt_TriUtils_GetQ2UVCoords",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6);
    arg7 = (float)lua_tonumber(L, 7);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SCNUt_TriUtils_GetQ2UVCoords",8,SWIGTYPE_p_float);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SCNUt_TriUtils_GetQ2UVCoords",9,SWIGTYPE_p_float);
    }
    
    SCNUt_TriUtils::GetQ2UVCoords(*arg1,*arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_TriUtils(void *obj) {
SCNUt_TriUtils *arg1 = (SCNUt_TriUtils *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriUtils(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriUtils);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriUtils_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriUtils_methods[]= {
    {0,0}
};
static swig_lua_method swig_SCNUt_TriUtils_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriUtils_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriUtils_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriUtils_Sf_SwigStatic_methods[]= {
    { "MinimizeMappingOffset", _wrap_SCNUt_TriUtils_MinimizeMappingOffset},
    { "ChangeWinding", _wrap_SCNUt_TriUtils_ChangeWinding},
    { "GetQ2UVCoords", _wrap_SCNUt_TriUtils_GetQ2UVCoords},
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriUtils_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriUtils_Sf_SwigStatic = {
    "SCNUt_TriUtils",
    swig_SCNUt_TriUtils_Sf_SwigStatic_methods,
    swig_SCNUt_TriUtils_Sf_SwigStatic_attributes,
    swig_SCNUt_TriUtils_Sf_SwigStatic_constants,
    swig_SCNUt_TriUtils_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriUtils_bases[] = {0};
static const char *swig_SCNUt_TriUtils_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TriUtils = { "SCNUt_TriUtils", "SCNUt_TriUtils", &SWIGTYPE_p_SCNUt_TriUtils,_proxy__wrap_new_SCNUt_TriUtils, swig_delete_SCNUt_TriUtils, swig_SCNUt_TriUtils_methods, swig_SCNUt_TriUtils_attributes, &swig_SCNUt_TriUtils_Sf_SwigStatic, swig_SCNUt_TriUtils_meta, swig_SCNUt_TriUtils_bases, swig_SCNUt_TriUtils_base_names };

static int _wrap_new_SCNUt_TriSceneSplitter(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSplitter *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSplitter::SCNUt_TriSceneSplitter",0,0)
    result = (SCNUt_TriSceneSplitter *)new SCNUt_TriSceneSplitter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriSceneSplitter,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSplitter_SplitScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSplitter *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGPlane *arg3 = 0 ;
    int arg4 ;
    int arg5 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSplitter::SplitScene",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSplitter::SplitScene",1,"SCNUt_TriSceneSplitter *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_TriSceneSplitter::SplitScene",2,"SCNUt_TriScene &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_TriSceneSplitter::SplitScene",3,"CGPlane &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("SCNUt_TriSceneSplitter::SplitScene",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("SCNUt_TriSceneSplitter::SplitScene",5,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSplitter,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_SplitScene",1,SWIGTYPE_p_SCNUt_TriSceneSplitter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_SplitScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_SplitScene",3,SWIGTYPE_p_CGPlane);
    }
    
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    (arg1)->SplitScene(*arg2,*arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSplitter_ClassifyAndSplitScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSplitter *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGPlane *arg3 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSplitter::ClassifyAndSplitScene",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSplitter::ClassifyAndSplitScene",1,"SCNUt_TriSceneSplitter *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_TriSceneSplitter::ClassifyAndSplitScene",2,"SCNUt_TriScene &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_TriSceneSplitter::ClassifyAndSplitScene",3,"CGPlane &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSplitter,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_ClassifyAndSplitScene",1,SWIGTYPE_p_SCNUt_TriSceneSplitter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_ClassifyAndSplitScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_ClassifyAndSplitScene",3,SWIGTYPE_p_CGPlane);
    }
    
    (arg1)->ClassifyAndSplitScene(*arg2,*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSplitter_poFrontScene_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSplitter *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSplitter::poFrontScene",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSplitter::poFrontScene",1,"SCNUt_TriSceneSplitter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriSceneSplitter::poFrontScene",2,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSplitter,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_poFrontScene_set",1,SWIGTYPE_p_SCNUt_TriSceneSplitter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_poFrontScene_set",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    if (arg1) (arg1)->poFrontScene = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSplitter_poFrontScene_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSplitter *arg1 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSplitter::poFrontScene",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSplitter::poFrontScene",1,"SCNUt_TriSceneSplitter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSplitter,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_poFrontScene_get",1,SWIGTYPE_p_SCNUt_TriSceneSplitter);
    }
    
    result = (SCNUt_TriScene *) ((arg1)->poFrontScene);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSplitter_poBackScene_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSplitter *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSplitter::poBackScene",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSplitter::poBackScene",1,"SCNUt_TriSceneSplitter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TriSceneSplitter::poBackScene",2,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSplitter,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_poBackScene_set",1,SWIGTYPE_p_SCNUt_TriSceneSplitter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_poBackScene_set",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    if (arg1) (arg1)->poBackScene = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TriSceneSplitter_poBackScene_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TriSceneSplitter *arg1 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TriSceneSplitter::poBackScene",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TriSceneSplitter::poBackScene",1,"SCNUt_TriSceneSplitter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TriSceneSplitter,0))){
      SWIG_fail_ptr("SCNUt_TriSceneSplitter_poBackScene_get",1,SWIGTYPE_p_SCNUt_TriSceneSplitter);
    }
    
    result = (SCNUt_TriScene *) ((arg1)->poBackScene);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_TriSceneSplitter(void *obj) {
SCNUt_TriSceneSplitter *arg1 = (SCNUt_TriSceneSplitter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TriSceneSplitter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TriSceneSplitter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TriSceneSplitter_attributes[] = {
    { "poFrontScene", _wrap_SCNUt_TriSceneSplitter_poFrontScene_get, _wrap_SCNUt_TriSceneSplitter_poFrontScene_set },
    { "poBackScene", _wrap_SCNUt_TriSceneSplitter_poBackScene_get, _wrap_SCNUt_TriSceneSplitter_poBackScene_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSplitter_methods[]= {
    { "SplitScene", _wrap_SCNUt_TriSceneSplitter_SplitScene},
    { "ClassifyAndSplitScene", _wrap_SCNUt_TriSceneSplitter_ClassifyAndSplitScene},
    {0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSplitter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TriSceneSplitter_Sf_SwigStatic = {
    "SCNUt_TriSceneSplitter",
    swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_methods,
    swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_attributes,
    swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_constants,
    swig_SCNUt_TriSceneSplitter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TriSceneSplitter_bases[] = {0};
static const char *swig_SCNUt_TriSceneSplitter_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TriSceneSplitter = { "SCNUt_TriSceneSplitter", "SCNUt_TriSceneSplitter", &SWIGTYPE_p_SCNUt_TriSceneSplitter,_proxy__wrap_new_SCNUt_TriSceneSplitter, swig_delete_SCNUt_TriSceneSplitter, swig_SCNUt_TriSceneSplitter_methods, swig_SCNUt_TriSceneSplitter_attributes, &swig_SCNUt_TriSceneSplitter_Sf_SwigStatic, swig_SCNUt_TriSceneSplitter_meta, swig_SCNUt_TriSceneSplitter_bases, swig_SCNUt_TriSceneSplitter_base_names };

static int _wrap_new_SCNUt_MeshGenerator(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_MeshGenerator *result = 0 ;
    
    SWIG_check_num_args("SCNUt_MeshGenerator::SCNUt_MeshGenerator",0,0)
    result = (SCNUt_MeshGenerator *)new SCNUt_MeshGenerator();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_MeshGenerator,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_MeshGenerator_GenerateMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_MeshGenerator *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("SCNUt_MeshGenerator::GenerateMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_MeshGenerator::GenerateMesh",1,"SCNUt_MeshGenerator *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_MeshGenerator::GenerateMesh",2,"SCNUt_TriScene &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_MeshGenerator,0))){
      SWIG_fail_ptr("SCNUt_MeshGenerator_GenerateMesh",1,SWIGTYPE_p_SCNUt_MeshGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_MeshGenerator_GenerateMesh",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (CGMesh *)(arg1)->GenerateMesh(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_MeshGenerator(void *obj) {
SCNUt_MeshGenerator *arg1 = (SCNUt_MeshGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_MeshGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_MeshGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_MeshGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_MeshGenerator_methods[]= {
    { "GenerateMesh", _wrap_SCNUt_MeshGenerator_GenerateMesh},
    {0,0}
};
static swig_lua_method swig_SCNUt_MeshGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_MeshGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_MeshGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_MeshGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_MeshGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_MeshGenerator_Sf_SwigStatic = {
    "SCNUt_MeshGenerator",
    swig_SCNUt_MeshGenerator_Sf_SwigStatic_methods,
    swig_SCNUt_MeshGenerator_Sf_SwigStatic_attributes,
    swig_SCNUt_MeshGenerator_Sf_SwigStatic_constants,
    swig_SCNUt_MeshGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_MeshGenerator_bases[] = {0};
static const char *swig_SCNUt_MeshGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_MeshGenerator = { "SCNUt_MeshGenerator", "SCNUt_MeshGenerator", &SWIGTYPE_p_SCNUt_MeshGenerator,_proxy__wrap_new_SCNUt_MeshGenerator, swig_delete_SCNUt_MeshGenerator, swig_SCNUt_MeshGenerator_methods, swig_SCNUt_MeshGenerator_attributes, &swig_SCNUt_MeshGenerator_Sf_SwigStatic, swig_SCNUt_MeshGenerator_meta, swig_SCNUt_MeshGenerator_bases, swig_SCNUt_MeshGenerator_base_names };

static int _wrap_new_SCNUt_AnimMesh_NormalComputer(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimMesh_NormalComputer *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AnimMesh_NormalComputer::SCNUt_AnimMesh_NormalComputer",0,0)
    result = (SCNUt_AnimMesh_NormalComputer *)new SCNUt_AnimMesh_NormalComputer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AnimMesh_NormalComputer_Generate(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimMesh_NormalComputer *arg1 = 0 ;
    CGSceneAnimMesh *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_AnimMesh_NormalComputer::Generate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AnimMesh_NormalComputer::Generate",1,"SCNUt_AnimMesh_NormalComputer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_AnimMesh_NormalComputer::Generate",2,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer,0))){
      SWIG_fail_ptr("SCNUt_AnimMesh_NormalComputer_Generate",1,SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("SCNUt_AnimMesh_NormalComputer_Generate",2,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    (arg1)->Generate(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_AnimMesh_NormalComputer(void *obj) {
SCNUt_AnimMesh_NormalComputer *arg1 = (SCNUt_AnimMesh_NormalComputer *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_AnimMesh_NormalComputer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_AnimMesh_NormalComputer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_AnimMesh_NormalComputer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_AnimMesh_NormalComputer_methods[]= {
    { "Generate", _wrap_SCNUt_AnimMesh_NormalComputer_Generate},
    {0,0}
};
static swig_lua_method swig_SCNUt_AnimMesh_NormalComputer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic = {
    "SCNUt_AnimMesh_NormalComputer",
    swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_methods,
    swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_attributes,
    swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_constants,
    swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_AnimMesh_NormalComputer_bases[] = {0};
static const char *swig_SCNUt_AnimMesh_NormalComputer_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_AnimMesh_NormalComputer = { "SCNUt_AnimMesh_NormalComputer", "SCNUt_AnimMesh_NormalComputer", &SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer,_proxy__wrap_new_SCNUt_AnimMesh_NormalComputer, swig_delete_SCNUt_AnimMesh_NormalComputer, swig_SCNUt_AnimMesh_NormalComputer_methods, swig_SCNUt_AnimMesh_NormalComputer_attributes, &swig_SCNUt_AnimMesh_NormalComputer_Sf_SwigStatic, swig_SCNUt_AnimMesh_NormalComputer_meta, swig_SCNUt_AnimMesh_NormalComputer_bases, swig_SCNUt_AnimMesh_NormalComputer_base_names };

static int _wrap_glbAnimMesh_NormalGenerator_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimMesh_NormalComputer *arg1 = 0 ;
    
    SWIG_check_num_args("glbAnimMesh_NormalGenerator",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("glbAnimMesh_NormalGenerator",1,"SCNUt_AnimMesh_NormalComputer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer,0))){
      SWIG_fail_ptr("glbAnimMesh_NormalGenerator_set",1,SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer);
    }
    
    glbAnimMesh_NormalGenerator = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_glbAnimMesh_NormalGenerator_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimMesh_NormalComputer *result = 0 ;
    
    SWIG_check_num_args("glbAnimMesh_NormalGenerator",0,0)
    result = (SCNUt_AnimMesh_NormalComputer *)&glbAnimMesh_NormalGenerator;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AnimMesh_NormalComputer,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_SCNUt_ShaderAssigner(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_ShaderAssigner *result = 0 ;
    
    SWIG_check_num_args("SCNUt_ShaderAssigner::SCNUt_ShaderAssigner",0,0)
    result = (SCNUt_ShaderAssigner *)new SCNUt_ShaderAssigner();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_ShaderAssigner,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_ShaderAssigner_AssignShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_ShaderAssigner *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    CGSceneNode *arg3 = 0 ;
    
    SWIG_check_num_args("SCNUt_ShaderAssigner::AssignShader",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_ShaderAssigner::AssignShader",1,"SCNUt_ShaderAssigner *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_ShaderAssigner::AssignShader",2,"CGShader *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SCNUt_ShaderAssigner::AssignShader",3,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_ShaderAssigner,0))){
      SWIG_fail_ptr("SCNUt_ShaderAssigner_AssignShader",1,SWIGTYPE_p_SCNUt_ShaderAssigner);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("SCNUt_ShaderAssigner_AssignShader",2,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("SCNUt_ShaderAssigner_AssignShader",3,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->AssignShader(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_ShaderAssigner(void *obj) {
SCNUt_ShaderAssigner *arg1 = (SCNUt_ShaderAssigner *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_ShaderAssigner(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_ShaderAssigner);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_ShaderAssigner_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_ShaderAssigner_methods[]= {
    { "AssignShader", _wrap_SCNUt_ShaderAssigner_AssignShader},
    {0,0}
};
static swig_lua_method swig_SCNUt_ShaderAssigner_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_ShaderAssigner_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_ShaderAssigner_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_ShaderAssigner_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_ShaderAssigner_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_ShaderAssigner_Sf_SwigStatic = {
    "SCNUt_ShaderAssigner",
    swig_SCNUt_ShaderAssigner_Sf_SwigStatic_methods,
    swig_SCNUt_ShaderAssigner_Sf_SwigStatic_attributes,
    swig_SCNUt_ShaderAssigner_Sf_SwigStatic_constants,
    swig_SCNUt_ShaderAssigner_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_ShaderAssigner_bases[] = {0};
static const char *swig_SCNUt_ShaderAssigner_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_ShaderAssigner = { "SCNUt_ShaderAssigner", "SCNUt_ShaderAssigner", &SWIGTYPE_p_SCNUt_ShaderAssigner,_proxy__wrap_new_SCNUt_ShaderAssigner, swig_delete_SCNUt_ShaderAssigner, swig_SCNUt_ShaderAssigner_methods, swig_SCNUt_ShaderAssigner_attributes, &swig_SCNUt_ShaderAssigner_Sf_SwigStatic, swig_SCNUt_ShaderAssigner_meta, swig_SCNUt_ShaderAssigner_bases, swig_SCNUt_ShaderAssigner_base_names };

static int _wrap_new_SCNUt_TransformTriScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TransformTriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_TransformTriScene::SCNUt_TransformTriScene",0,0)
    result = (SCNUt_TransformTriScene *)new SCNUt_TransformTriScene();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TransformTriScene,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TransformTriScene_Transform__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TransformTriScene *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGMatrix4x4 *arg3 = 0 ;
    
    SWIG_check_num_args("SCNUt_TransformTriScene::Transform",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TransformTriScene::Transform",1,"SCNUt_TransformTriScene *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TransformTriScene::Transform",2,"SCNUt_TriScene *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_TransformTriScene::Transform",3,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TransformTriScene,0))){
      SWIG_fail_ptr("SCNUt_TransformTriScene_Transform",1,SWIGTYPE_p_SCNUt_TransformTriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TransformTriScene_Transform",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("SCNUt_TransformTriScene_Transform",3,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform(arg2,(CGMatrix4x4 const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TransformTriScene_Transform__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_TransformTriScene *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGMatrix4x4 *arg3 = 0 ;
    CGMatrix4x4 *arg4 = 0 ;
    
    SWIG_check_num_args("SCNUt_TransformTriScene::Transform",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_TransformTriScene::Transform",1,"SCNUt_TransformTriScene *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_TransformTriScene::Transform",2,"SCNUt_TriScene *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_TransformTriScene::Transform",3,"CGMatrix4x4 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("SCNUt_TransformTriScene::Transform",4,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_TransformTriScene,0))){
      SWIG_fail_ptr("SCNUt_TransformTriScene_Transform",1,SWIGTYPE_p_SCNUt_TransformTriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_TransformTriScene_Transform",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("SCNUt_TransformTriScene_Transform",3,SWIGTYPE_p_CGMatrix4x4);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("SCNUt_TransformTriScene_Transform",4,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Transform(arg2,(CGMatrix4x4 const &)*arg3,(CGMatrix4x4 const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_TransformTriScene_Transform(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SCNUt_TransformTriScene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SCNUt_TriScene, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SCNUt_TransformTriScene_Transform__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SCNUt_TransformTriScene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SCNUt_TriScene, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SCNUt_TransformTriScene_Transform__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SCNUt_TransformTriScene_Transform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SCNUt_TransformTriScene::Transform(SCNUt_TriScene *,CGMatrix4x4 const &)\n"
    "    SCNUt_TransformTriScene::Transform(SCNUt_TriScene *,CGMatrix4x4 const &,CGMatrix4x4 const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_SCNUt_TransformTriScene(void *obj) {
SCNUt_TransformTriScene *arg1 = (SCNUt_TransformTriScene *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_TransformTriScene(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_TransformTriScene);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_TransformTriScene_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_TransformTriScene_methods[]= {
    { "Transform", _wrap_SCNUt_TransformTriScene_Transform},
    {0,0}
};
static swig_lua_method swig_SCNUt_TransformTriScene_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_TransformTriScene_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_TransformTriScene_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_TransformTriScene_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_TransformTriScene_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_TransformTriScene_Sf_SwigStatic = {
    "SCNUt_TransformTriScene",
    swig_SCNUt_TransformTriScene_Sf_SwigStatic_methods,
    swig_SCNUt_TransformTriScene_Sf_SwigStatic_attributes,
    swig_SCNUt_TransformTriScene_Sf_SwigStatic_constants,
    swig_SCNUt_TransformTriScene_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_TransformTriScene_bases[] = {0};
static const char *swig_SCNUt_TransformTriScene_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_TransformTriScene = { "SCNUt_TransformTriScene", "SCNUt_TransformTriScene", &SWIGTYPE_p_SCNUt_TransformTriScene,_proxy__wrap_new_SCNUt_TransformTriScene, swig_delete_SCNUt_TransformTriScene, swig_SCNUt_TransformTriScene_methods, swig_SCNUt_TransformTriScene_attributes, &swig_SCNUt_TransformTriScene_Sf_SwigStatic, swig_SCNUt_TransformTriScene_meta, swig_SCNUt_TransformTriScene_bases, swig_SCNUt_TransformTriScene_base_names };

static int _wrap_new_SCNUt_ComputeBoundingBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_ComputeBoundingBox *result = 0 ;
    
    SWIG_check_num_args("SCNUt_ComputeBoundingBox::SCNUt_ComputeBoundingBox",0,0)
    result = (SCNUt_ComputeBoundingBox *)new SCNUt_ComputeBoundingBox();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_ComputeBoundingBox,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_ComputeBoundingBox_poComputeBoundingBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_ComputeBoundingBox *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGBVAABB *result = 0 ;
    
    SWIG_check_num_args("SCNUt_ComputeBoundingBox::poComputeBoundingBox",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_ComputeBoundingBox::poComputeBoundingBox",1,"SCNUt_ComputeBoundingBox *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_ComputeBoundingBox::poComputeBoundingBox",2,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_ComputeBoundingBox,0))){
      SWIG_fail_ptr("SCNUt_ComputeBoundingBox_poComputeBoundingBox",1,SWIGTYPE_p_SCNUt_ComputeBoundingBox);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_ComputeBoundingBox_poComputeBoundingBox",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (CGBVAABB *)(arg1)->poComputeBoundingBox(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBVAABB,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_ComputeBoundingBox(void *obj) {
SCNUt_ComputeBoundingBox *arg1 = (SCNUt_ComputeBoundingBox *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_ComputeBoundingBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_ComputeBoundingBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_ComputeBoundingBox_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_ComputeBoundingBox_methods[]= {
    { "poComputeBoundingBox", _wrap_SCNUt_ComputeBoundingBox_poComputeBoundingBox},
    {0,0}
};
static swig_lua_method swig_SCNUt_ComputeBoundingBox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic = {
    "SCNUt_ComputeBoundingBox",
    swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_methods,
    swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_attributes,
    swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_constants,
    swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_ComputeBoundingBox_bases[] = {0};
static const char *swig_SCNUt_ComputeBoundingBox_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_ComputeBoundingBox = { "SCNUt_ComputeBoundingBox", "SCNUt_ComputeBoundingBox", &SWIGTYPE_p_SCNUt_ComputeBoundingBox,_proxy__wrap_new_SCNUt_ComputeBoundingBox, swig_delete_SCNUt_ComputeBoundingBox, swig_SCNUt_ComputeBoundingBox_methods, swig_SCNUt_ComputeBoundingBox_attributes, &swig_SCNUt_ComputeBoundingBox_Sf_SwigStatic, swig_SCNUt_ComputeBoundingBox_meta, swig_SCNUt_ComputeBoundingBox_bases, swig_SCNUt_ComputeBoundingBox_base_names };

static int _wrap_new_SCNUt_PlanarMapper(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_PlanarMapper *result = 0 ;
    
    SWIG_check_num_args("SCNUt_PlanarMapper::SCNUt_PlanarMapper",0,0)
    result = (SCNUt_PlanarMapper *)new SCNUt_PlanarMapper();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_PlanarMapper,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_PlanarMapper_PlanarMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_PlanarMapper *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_PlanarMapper::PlanarMap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_PlanarMapper::PlanarMap",1,"SCNUt_PlanarMapper *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_PlanarMapper::PlanarMap",2,"SCNUt_TriScene &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_PlanarMapper,0))){
      SWIG_fail_ptr("SCNUt_PlanarMapper_PlanarMap",1,SWIGTYPE_p_SCNUt_PlanarMapper);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_PlanarMapper_PlanarMap",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    (arg1)->PlanarMap(*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_PlanarMapper(void *obj) {
SCNUt_PlanarMapper *arg1 = (SCNUt_PlanarMapper *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_PlanarMapper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_PlanarMapper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_PlanarMapper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_PlanarMapper_methods[]= {
    { "PlanarMap", _wrap_SCNUt_PlanarMapper_PlanarMap},
    {0,0}
};
static swig_lua_method swig_SCNUt_PlanarMapper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_PlanarMapper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_PlanarMapper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_PlanarMapper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_PlanarMapper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_PlanarMapper_Sf_SwigStatic = {
    "SCNUt_PlanarMapper",
    swig_SCNUt_PlanarMapper_Sf_SwigStatic_methods,
    swig_SCNUt_PlanarMapper_Sf_SwigStatic_attributes,
    swig_SCNUt_PlanarMapper_Sf_SwigStatic_constants,
    swig_SCNUt_PlanarMapper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_PlanarMapper_bases[] = {0};
static const char *swig_SCNUt_PlanarMapper_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_PlanarMapper = { "SCNUt_PlanarMapper", "SCNUt_PlanarMapper", &SWIGTYPE_p_SCNUt_PlanarMapper,_proxy__wrap_new_SCNUt_PlanarMapper, swig_delete_SCNUt_PlanarMapper, swig_SCNUt_PlanarMapper_methods, swig_SCNUt_PlanarMapper_attributes, &swig_SCNUt_PlanarMapper_Sf_SwigStatic, swig_SCNUt_PlanarMapper_meta, swig_SCNUt_PlanarMapper_bases, swig_SCNUt_PlanarMapper_base_names };

static int _wrap_new_SCNUt_BSPBuilder(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_BSPBuilder *result = 0 ;
    
    SWIG_check_num_args("SCNUt_BSPBuilder::SCNUt_BSPBuilder",0,0)
    result = (SCNUt_BSPBuilder *)new SCNUt_BSPBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_BSPBuilder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_BSPBuilder_poBuildBSP(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_BSPBuilder *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    SCNUt_MaterialTable *arg3 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("SCNUt_BSPBuilder::poBuildBSP",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_BSPBuilder::poBuildBSP",1,"SCNUt_BSPBuilder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_BSPBuilder::poBuildBSP",2,"SCNUt_TriScene &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_BSPBuilder::poBuildBSP",3,"SCNUt_MaterialTable &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_BSPBuilder,0))){
      SWIG_fail_ptr("SCNUt_BSPBuilder_poBuildBSP",1,SWIGTYPE_p_SCNUt_BSPBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_BSPBuilder_poBuildBSP",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_BSPBuilder_poBuildBSP",3,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    result = (CGSceneNode *)(arg1)->poBuildBSP(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_BSPBuilder_iMaxSubdivisions_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_BSPBuilder *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_BSPBuilder::iMaxSubdivisions",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_BSPBuilder::iMaxSubdivisions",1,"SCNUt_BSPBuilder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_BSPBuilder::iMaxSubdivisions",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_BSPBuilder,0))){
      SWIG_fail_ptr("SCNUt_BSPBuilder_iMaxSubdivisions_set",1,SWIGTYPE_p_SCNUt_BSPBuilder);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iMaxSubdivisions = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_BSPBuilder_iMaxSubdivisions_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_BSPBuilder *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_BSPBuilder::iMaxSubdivisions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_BSPBuilder::iMaxSubdivisions",1,"SCNUt_BSPBuilder *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_BSPBuilder,0))){
      SWIG_fail_ptr("SCNUt_BSPBuilder_iMaxSubdivisions_get",1,SWIGTYPE_p_SCNUt_BSPBuilder);
    }
    
    result = (int) ((arg1)->iMaxSubdivisions);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_BSPBuilder_iMinTrisPerNode_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_BSPBuilder *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_BSPBuilder::iMinTrisPerNode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_BSPBuilder::iMinTrisPerNode",1,"SCNUt_BSPBuilder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_BSPBuilder::iMinTrisPerNode",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_BSPBuilder,0))){
      SWIG_fail_ptr("SCNUt_BSPBuilder_iMinTrisPerNode_set",1,SWIGTYPE_p_SCNUt_BSPBuilder);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iMinTrisPerNode = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_BSPBuilder_iMinTrisPerNode_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_BSPBuilder *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_BSPBuilder::iMinTrisPerNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_BSPBuilder::iMinTrisPerNode",1,"SCNUt_BSPBuilder *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_BSPBuilder,0))){
      SWIG_fail_ptr("SCNUt_BSPBuilder_iMinTrisPerNode_get",1,SWIGTYPE_p_SCNUt_BSPBuilder);
    }
    
    result = (int) ((arg1)->iMinTrisPerNode);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_BSPBuilder(void *obj) {
SCNUt_BSPBuilder *arg1 = (SCNUt_BSPBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_BSPBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_BSPBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_BSPBuilder_attributes[] = {
    { "iMaxSubdivisions", _wrap_SCNUt_BSPBuilder_iMaxSubdivisions_get, _wrap_SCNUt_BSPBuilder_iMaxSubdivisions_set },
    { "iMinTrisPerNode", _wrap_SCNUt_BSPBuilder_iMinTrisPerNode_get, _wrap_SCNUt_BSPBuilder_iMinTrisPerNode_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_BSPBuilder_methods[]= {
    { "poBuildBSP", _wrap_SCNUt_BSPBuilder_poBuildBSP},
    {0,0}
};
static swig_lua_method swig_SCNUt_BSPBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_BSPBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_BSPBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_BSPBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_BSPBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_BSPBuilder_Sf_SwigStatic = {
    "SCNUt_BSPBuilder",
    swig_SCNUt_BSPBuilder_Sf_SwigStatic_methods,
    swig_SCNUt_BSPBuilder_Sf_SwigStatic_attributes,
    swig_SCNUt_BSPBuilder_Sf_SwigStatic_constants,
    swig_SCNUt_BSPBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_BSPBuilder_bases[] = {0};
static const char *swig_SCNUt_BSPBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_BSPBuilder = { "SCNUt_BSPBuilder", "SCNUt_BSPBuilder", &SWIGTYPE_p_SCNUt_BSPBuilder,_proxy__wrap_new_SCNUt_BSPBuilder, swig_delete_SCNUt_BSPBuilder, swig_SCNUt_BSPBuilder_methods, swig_SCNUt_BSPBuilder_attributes, &swig_SCNUt_BSPBuilder_Sf_SwigStatic, swig_SCNUt_BSPBuilder_meta, swig_SCNUt_BSPBuilder_bases, swig_SCNUt_BSPBuilder_base_names };

static int _wrap_new_SCNUt_SceneBuilder(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_SceneBuilder *result = 0 ;
    
    SWIG_check_num_args("SCNUt_SceneBuilder::SCNUt_SceneBuilder",0,0)
    result = (SCNUt_SceneBuilder *)new SCNUt_SceneBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_SceneBuilder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_SceneBuilder_poBuildScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_SceneBuilder *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    SCNUt_MaterialTable *arg3 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("SCNUt_SceneBuilder::poBuildScene",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_SceneBuilder::poBuildScene",1,"SCNUt_SceneBuilder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_SceneBuilder::poBuildScene",2,"SCNUt_TriScene &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_SceneBuilder::poBuildScene",3,"SCNUt_MaterialTable &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_SceneBuilder,0))){
      SWIG_fail_ptr("SCNUt_SceneBuilder_poBuildScene",1,SWIGTYPE_p_SCNUt_SceneBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_SceneBuilder_poBuildScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_SceneBuilder_poBuildScene",3,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    result = (CGSceneNode *)(arg1)->poBuildScene(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_SceneBuilder(void *obj) {
SCNUt_SceneBuilder *arg1 = (SCNUt_SceneBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_SceneBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_SceneBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_SceneBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_SceneBuilder_methods[]= {
    { "poBuildScene", _wrap_SCNUt_SceneBuilder_poBuildScene},
    {0,0}
};
static swig_lua_method swig_SCNUt_SceneBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_SceneBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_SceneBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_SceneBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_SceneBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_SceneBuilder_Sf_SwigStatic = {
    "SCNUt_SceneBuilder",
    swig_SCNUt_SceneBuilder_Sf_SwigStatic_methods,
    swig_SCNUt_SceneBuilder_Sf_SwigStatic_attributes,
    swig_SCNUt_SceneBuilder_Sf_SwigStatic_constants,
    swig_SCNUt_SceneBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_SceneBuilder_bases[] = {0};
static const char *swig_SCNUt_SceneBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_SceneBuilder = { "SCNUt_SceneBuilder", "SCNUt_SceneBuilder", &SWIGTYPE_p_SCNUt_SceneBuilder,_proxy__wrap_new_SCNUt_SceneBuilder, swig_delete_SCNUt_SceneBuilder, swig_SCNUt_SceneBuilder_methods, swig_SCNUt_SceneBuilder_attributes, &swig_SCNUt_SceneBuilder_Sf_SwigStatic, swig_SCNUt_SceneBuilder_meta, swig_SCNUt_SceneBuilder_bases, swig_SCNUt_SceneBuilder_base_names };

static int _wrap_new_SCNUt_OctreeBuilder(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_OctreeBuilder *result = 0 ;
    
    SWIG_check_num_args("SCNUt_OctreeBuilder::SCNUt_OctreeBuilder",0,0)
    result = (SCNUt_OctreeBuilder *)new SCNUt_OctreeBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_OctreeBuilder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_OctreeBuilder_poBuildOctree(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_OctreeBuilder *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    SCNUt_MaterialTable *arg3 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("SCNUt_OctreeBuilder::poBuildOctree",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_OctreeBuilder::poBuildOctree",1,"SCNUt_OctreeBuilder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_OctreeBuilder::poBuildOctree",2,"SCNUt_TriScene &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_OctreeBuilder::poBuildOctree",3,"SCNUt_MaterialTable &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_OctreeBuilder,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_poBuildOctree",1,SWIGTYPE_p_SCNUt_OctreeBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_poBuildOctree",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_poBuildOctree",3,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    result = (CGSceneNode *)(arg1)->poBuildOctree(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_OctreeBuilder_poBuildOctreeRec(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_OctreeBuilder *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    int arg3 ;
    SCNUt_MaterialTable *arg4 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("SCNUt_OctreeBuilder::poBuildOctreeRec",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_OctreeBuilder::poBuildOctreeRec",1,"SCNUt_OctreeBuilder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_OctreeBuilder::poBuildOctreeRec",2,"SCNUt_TriScene &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("SCNUt_OctreeBuilder::poBuildOctreeRec",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("SCNUt_OctreeBuilder::poBuildOctreeRec",4,"SCNUt_MaterialTable &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_OctreeBuilder,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_poBuildOctreeRec",1,SWIGTYPE_p_SCNUt_OctreeBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_poBuildOctreeRec",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_poBuildOctreeRec",4,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    result = (CGSceneNode *)(arg1)->poBuildOctreeRec(*arg2,arg3,*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_OctreeBuilder_iMaxSubdivisions_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_OctreeBuilder *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_OctreeBuilder::iMaxSubdivisions",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_OctreeBuilder::iMaxSubdivisions",1,"SCNUt_OctreeBuilder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_OctreeBuilder::iMaxSubdivisions",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_OctreeBuilder,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_iMaxSubdivisions_set",1,SWIGTYPE_p_SCNUt_OctreeBuilder);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iMaxSubdivisions = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_OctreeBuilder_iMaxSubdivisions_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_OctreeBuilder *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_OctreeBuilder::iMaxSubdivisions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_OctreeBuilder::iMaxSubdivisions",1,"SCNUt_OctreeBuilder *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_OctreeBuilder,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_iMaxSubdivisions_get",1,SWIGTYPE_p_SCNUt_OctreeBuilder);
    }
    
    result = (int) ((arg1)->iMaxSubdivisions);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_OctreeBuilder_iMinTrisPerNode_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_OctreeBuilder *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_OctreeBuilder::iMinTrisPerNode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_OctreeBuilder::iMinTrisPerNode",1,"SCNUt_OctreeBuilder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_OctreeBuilder::iMinTrisPerNode",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_OctreeBuilder,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_iMinTrisPerNode_set",1,SWIGTYPE_p_SCNUt_OctreeBuilder);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iMinTrisPerNode = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_OctreeBuilder_iMinTrisPerNode_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_OctreeBuilder *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_OctreeBuilder::iMinTrisPerNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_OctreeBuilder::iMinTrisPerNode",1,"SCNUt_OctreeBuilder *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_OctreeBuilder,0))){
      SWIG_fail_ptr("SCNUt_OctreeBuilder_iMinTrisPerNode_get",1,SWIGTYPE_p_SCNUt_OctreeBuilder);
    }
    
    result = (int) ((arg1)->iMinTrisPerNode);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_OctreeBuilder(void *obj) {
SCNUt_OctreeBuilder *arg1 = (SCNUt_OctreeBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_OctreeBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_OctreeBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_OctreeBuilder_attributes[] = {
    { "iMaxSubdivisions", _wrap_SCNUt_OctreeBuilder_iMaxSubdivisions_get, _wrap_SCNUt_OctreeBuilder_iMaxSubdivisions_set },
    { "iMinTrisPerNode", _wrap_SCNUt_OctreeBuilder_iMinTrisPerNode_get, _wrap_SCNUt_OctreeBuilder_iMinTrisPerNode_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_OctreeBuilder_methods[]= {
    { "poBuildOctree", _wrap_SCNUt_OctreeBuilder_poBuildOctree},
    { "poBuildOctreeRec", _wrap_SCNUt_OctreeBuilder_poBuildOctreeRec},
    {0,0}
};
static swig_lua_method swig_SCNUt_OctreeBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_OctreeBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_OctreeBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_OctreeBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_OctreeBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_OctreeBuilder_Sf_SwigStatic = {
    "SCNUt_OctreeBuilder",
    swig_SCNUt_OctreeBuilder_Sf_SwigStatic_methods,
    swig_SCNUt_OctreeBuilder_Sf_SwigStatic_attributes,
    swig_SCNUt_OctreeBuilder_Sf_SwigStatic_constants,
    swig_SCNUt_OctreeBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_OctreeBuilder_bases[] = {0};
static const char *swig_SCNUt_OctreeBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_OctreeBuilder = { "SCNUt_OctreeBuilder", "SCNUt_OctreeBuilder", &SWIGTYPE_p_SCNUt_OctreeBuilder,_proxy__wrap_new_SCNUt_OctreeBuilder, swig_delete_SCNUt_OctreeBuilder, swig_SCNUt_OctreeBuilder_methods, swig_SCNUt_OctreeBuilder_attributes, &swig_SCNUt_OctreeBuilder_Sf_SwigStatic, swig_SCNUt_OctreeBuilder_meta, swig_SCNUt_OctreeBuilder_bases, swig_SCNUt_OctreeBuilder_base_names };

static int _wrap_new_SCNUt_Mesh2TriScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Mesh2TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Mesh2TriScene::SCNUt_Mesh2TriScene",0,0)
    result = (SCNUt_Mesh2TriScene *)new SCNUt_Mesh2TriScene();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_Mesh2TriScene,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Mesh2TriScene_Generate(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Mesh2TriScene *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    int arg3 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Mesh2TriScene::Generate",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate",1,"SCNUt_Mesh2TriScene *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate",2,"CGMesh const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Mesh2TriScene,0))){
      SWIG_fail_ptr("SCNUt_Mesh2TriScene_Generate",1,SWIGTYPE_p_SCNUt_Mesh2TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_Mesh2TriScene_Generate",2,SWIGTYPE_p_CGMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    result = (SCNUt_TriScene *)(arg1)->Generate((CGMesh const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Mesh2TriScene_Generate_FromIndexedTriFanMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Mesh2TriScene *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    int arg3 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Mesh2TriScene::Generate_FromIndexedTriFanMesh",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate_FromIndexedTriFanMesh",1,"SCNUt_Mesh2TriScene *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate_FromIndexedTriFanMesh",2,"CGMesh const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate_FromIndexedTriFanMesh",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Mesh2TriScene,0))){
      SWIG_fail_ptr("SCNUt_Mesh2TriScene_Generate_FromIndexedTriFanMesh",1,SWIGTYPE_p_SCNUt_Mesh2TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_Mesh2TriScene_Generate_FromIndexedTriFanMesh",2,SWIGTYPE_p_CGMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    result = (SCNUt_TriScene *)(arg1)->Generate_FromIndexedTriFanMesh((CGMesh const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Mesh2TriScene_Generate_FromIndexedQuadStripMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Mesh2TriScene *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    int arg3 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Mesh2TriScene::Generate_FromIndexedQuadStripMesh",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate_FromIndexedQuadStripMesh",1,"SCNUt_Mesh2TriScene *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate_FromIndexedQuadStripMesh",2,"CGMesh const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("SCNUt_Mesh2TriScene::Generate_FromIndexedQuadStripMesh",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Mesh2TriScene,0))){
      SWIG_fail_ptr("SCNUt_Mesh2TriScene_Generate_FromIndexedQuadStripMesh",1,SWIGTYPE_p_SCNUt_Mesh2TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_Mesh2TriScene_Generate_FromIndexedQuadStripMesh",2,SWIGTYPE_p_CGMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    result = (SCNUt_TriScene *)(arg1)->Generate_FromIndexedQuadStripMesh((CGMesh const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_Mesh2TriScene(void *obj) {
SCNUt_Mesh2TriScene *arg1 = (SCNUt_Mesh2TriScene *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_Mesh2TriScene(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_Mesh2TriScene);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_Mesh2TriScene_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_Mesh2TriScene_methods[]= {
    { "Generate", _wrap_SCNUt_Mesh2TriScene_Generate},
    { "Generate_FromIndexedTriFanMesh", _wrap_SCNUt_Mesh2TriScene_Generate_FromIndexedTriFanMesh},
    { "Generate_FromIndexedQuadStripMesh", _wrap_SCNUt_Mesh2TriScene_Generate_FromIndexedQuadStripMesh},
    {0,0}
};
static swig_lua_method swig_SCNUt_Mesh2TriScene_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_Mesh2TriScene_Sf_SwigStatic = {
    "SCNUt_Mesh2TriScene",
    swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_methods,
    swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_attributes,
    swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_constants,
    swig_SCNUt_Mesh2TriScene_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_Mesh2TriScene_bases[] = {0};
static const char *swig_SCNUt_Mesh2TriScene_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_Mesh2TriScene = { "SCNUt_Mesh2TriScene", "SCNUt_Mesh2TriScene", &SWIGTYPE_p_SCNUt_Mesh2TriScene,_proxy__wrap_new_SCNUt_Mesh2TriScene, swig_delete_SCNUt_Mesh2TriScene, swig_SCNUt_Mesh2TriScene_methods, swig_SCNUt_Mesh2TriScene_attributes, &swig_SCNUt_Mesh2TriScene_Sf_SwigStatic, swig_SCNUt_Mesh2TriScene_meta, swig_SCNUt_Mesh2TriScene_bases, swig_SCNUt_Mesh2TriScene_base_names };

static int _wrap_new_SCNUt_Scn2TriScnBuilder(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Scn2TriScnBuilder *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Scn2TriScnBuilder::SCNUt_Scn2TriScnBuilder",0,0)
    result = (SCNUt_Scn2TriScnBuilder *)new SCNUt_Scn2TriScnBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_Scn2TriScnBuilder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Scn2TriScnBuilder_poBuild(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Scn2TriScnBuilder *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    SCNUt_MaterialTable *arg3 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Scn2TriScnBuilder::poBuild",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuild",1,"SCNUt_Scn2TriScnBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuild",2,"CGSceneNode *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuild",3,"SCNUt_MaterialTable &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Scn2TriScnBuilder,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuild",1,SWIGTYPE_p_SCNUt_Scn2TriScnBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuild",2,SWIGTYPE_p_CGSceneNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuild",3,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    result = (SCNUt_TriScene *)(arg1)->poBuild(arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Scn2TriScnBuilder_poBuildRec(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Scn2TriScnBuilder *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    CGMatrix4x4 *arg3 = 0 ;
    int arg4 ;
    SCNUt_MaterialTable *arg5 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Scn2TriScnBuilder::poBuildRec",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildRec",1,"SCNUt_Scn2TriScnBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildRec",2,"CGSceneNode *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildRec",3,"CGMatrix4x4 *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildRec",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildRec",5,"SCNUt_MaterialTable &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Scn2TriScnBuilder,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuildRec",1,SWIGTYPE_p_SCNUt_Scn2TriScnBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuildRec",2,SWIGTYPE_p_CGSceneNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuildRec",3,SWIGTYPE_p_CGMatrix4x4);
    }
    
    arg4 = (int)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SCNUt_MaterialTable,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuildRec",5,SWIGTYPE_p_SCNUt_MaterialTable);
    }
    
    result = (SCNUt_TriScene *)(arg1)->poBuildRec(arg2,arg3,arg4,*arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Scn2TriScnBuilder_poBuildMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Scn2TriScnBuilder *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    int arg3 ;
    CGMatrix4x4 *arg4 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Scn2TriScnBuilder::poBuildMesh",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildMesh",1,"SCNUt_Scn2TriScnBuilder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildMesh",2,"CGMesh const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildMesh",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("SCNUt_Scn2TriScnBuilder::poBuildMesh",4,"CGMatrix4x4 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Scn2TriScnBuilder,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuildMesh",1,SWIGTYPE_p_SCNUt_Scn2TriScnBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuildMesh",2,SWIGTYPE_p_CGMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("SCNUt_Scn2TriScnBuilder_poBuildMesh",4,SWIGTYPE_p_CGMatrix4x4);
    }
    
    result = (SCNUt_TriScene *)(arg1)->poBuildMesh((CGMesh const &)*arg2,arg3,(CGMatrix4x4 const &)*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_Scn2TriScnBuilder(void *obj) {
SCNUt_Scn2TriScnBuilder *arg1 = (SCNUt_Scn2TriScnBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_Scn2TriScnBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_Scn2TriScnBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_Scn2TriScnBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_Scn2TriScnBuilder_methods[]= {
    { "poBuild", _wrap_SCNUt_Scn2TriScnBuilder_poBuild},
    { "poBuildRec", _wrap_SCNUt_Scn2TriScnBuilder_poBuildRec},
    { "poBuildMesh", _wrap_SCNUt_Scn2TriScnBuilder_poBuildMesh},
    {0,0}
};
static swig_lua_method swig_SCNUt_Scn2TriScnBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic = {
    "SCNUt_Scn2TriScnBuilder",
    swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_methods,
    swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_attributes,
    swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_constants,
    swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_Scn2TriScnBuilder_bases[] = {0};
static const char *swig_SCNUt_Scn2TriScnBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_Scn2TriScnBuilder = { "SCNUt_Scn2TriScnBuilder", "SCNUt_Scn2TriScnBuilder", &SWIGTYPE_p_SCNUt_Scn2TriScnBuilder,_proxy__wrap_new_SCNUt_Scn2TriScnBuilder, swig_delete_SCNUt_Scn2TriScnBuilder, swig_SCNUt_Scn2TriScnBuilder_methods, swig_SCNUt_Scn2TriScnBuilder_attributes, &swig_SCNUt_Scn2TriScnBuilder_Sf_SwigStatic, swig_SCNUt_Scn2TriScnBuilder_meta, swig_SCNUt_Scn2TriScnBuilder_bases, swig_SCNUt_Scn2TriScnBuilder_base_names };

static int _wrap_new_SCNUt_AdjTri(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTri::SCNUt_AdjTri",0,0)
    result = (SCNUt_AdjTri *)new SCNUt_AdjTri();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AdjTri,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTri_AddNeigh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_AdjTri::AddNeigh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTri::AddNeigh",1,"SCNUt_AdjTri *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_AdjTri::AddNeigh",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTri,0))){
      SWIG_fail_ptr("SCNUt_AdjTri_AddNeigh",1,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->AddNeigh(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTri_iNumNeighs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_AdjTri::iNumNeighs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTri::iNumNeighs",1,"SCNUt_AdjTri *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_AdjTri::iNumNeighs",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTri,0))){
      SWIG_fail_ptr("SCNUt_AdjTri_iNumNeighs_set",1,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumNeighs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTri_iNumNeighs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_AdjTri::iNumNeighs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTri::iNumNeighs",1,"SCNUt_AdjTri *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTri,0))){
      SWIG_fail_ptr("SCNUt_AdjTri_iNumNeighs_get",1,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    result = (int) ((arg1)->iNumNeighs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTri_Neigh_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *arg1 = 0 ;
    int *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTri::Neigh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTri::Neigh",1,"SCNUt_AdjTri *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_AdjTri::Neigh",2,"int *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTri,0))){
      SWIG_fail_ptr("SCNUt_AdjTri_Neigh_set",1,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_AdjTri_Neigh_set",2,SWIGTYPE_p_int);
    }
    
    if (arg1) (arg1)->Neigh = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTri_Neigh_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *arg1 = 0 ;
    int *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTri::Neigh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTri::Neigh",1,"SCNUt_AdjTri *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTri,0))){
      SWIG_fail_ptr("SCNUt_AdjTri_Neigh_get",1,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    result = (int *) ((arg1)->Neigh);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTri_Visited_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("SCNUt_AdjTri::Visited",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTri::Visited",1,"SCNUt_AdjTri *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("SCNUt_AdjTri::Visited",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTri,0))){
      SWIG_fail_ptr("SCNUt_AdjTri_Visited_set",1,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Visited = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTri_Visited_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTri *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("SCNUt_AdjTri::Visited",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTri::Visited",1,"SCNUt_AdjTri *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTri,0))){
      SWIG_fail_ptr("SCNUt_AdjTri_Visited_get",1,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    result = (bool) ((arg1)->Visited);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_AdjTri(void *obj) {
SCNUt_AdjTri *arg1 = (SCNUt_AdjTri *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_AdjTri(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_AdjTri);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_AdjTri_attributes[] = {
    { "iNumNeighs", _wrap_SCNUt_AdjTri_iNumNeighs_get, _wrap_SCNUt_AdjTri_iNumNeighs_set },
    { "Neigh", _wrap_SCNUt_AdjTri_Neigh_get, _wrap_SCNUt_AdjTri_Neigh_set },
    { "Visited", _wrap_SCNUt_AdjTri_Visited_get, _wrap_SCNUt_AdjTri_Visited_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_AdjTri_methods[]= {
    { "AddNeigh", _wrap_SCNUt_AdjTri_AddNeigh},
    {0,0}
};
static swig_lua_method swig_SCNUt_AdjTri_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_AdjTri_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_AdjTri_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_AdjTri_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_AdjTri_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_AdjTri_Sf_SwigStatic = {
    "SCNUt_AdjTri",
    swig_SCNUt_AdjTri_Sf_SwigStatic_methods,
    swig_SCNUt_AdjTri_Sf_SwigStatic_attributes,
    swig_SCNUt_AdjTri_Sf_SwigStatic_constants,
    swig_SCNUt_AdjTri_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_AdjTri_bases[] = {0};
static const char *swig_SCNUt_AdjTri_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_AdjTri = { "SCNUt_AdjTri", "SCNUt_AdjTri", &SWIGTYPE_p_SCNUt_AdjTri,_proxy__wrap_new_SCNUt_AdjTri, swig_delete_SCNUt_AdjTri, swig_SCNUt_AdjTri_methods, swig_SCNUt_AdjTri_attributes, &swig_SCNUt_AdjTri_Sf_SwigStatic, swig_SCNUt_AdjTri_meta, swig_SCNUt_AdjTri_bases, swig_SCNUt_AdjTri_base_names };

static int _wrap_new_SCNUt_AdjTriList(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriList *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTriList::SCNUt_AdjTriList",0,0)
    result = (SCNUt_AdjTriList *)new SCNUt_AdjTriList();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AdjTriList,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTriList_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriList *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_AdjTriList::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTriList::Init",1,"SCNUt_AdjTriList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_AdjTriList::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTriList,0))){
      SWIG_fail_ptr("SCNUt_AdjTriList_Init",1,SWIGTYPE_p_SCNUt_AdjTriList);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTriList_iNumTris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriList *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_AdjTriList::iNumTris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTriList::iNumTris",1,"SCNUt_AdjTriList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_AdjTriList::iNumTris",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTriList,0))){
      SWIG_fail_ptr("SCNUt_AdjTriList_iNumTris_set",1,SWIGTYPE_p_SCNUt_AdjTriList);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumTris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTriList_iNumTris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriList *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_AdjTriList::iNumTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTriList::iNumTris",1,"SCNUt_AdjTriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTriList,0))){
      SWIG_fail_ptr("SCNUt_AdjTriList_iNumTris_get",1,SWIGTYPE_p_SCNUt_AdjTriList);
    }
    
    result = (int) ((arg1)->iNumTris);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTriList_Tri_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriList *arg1 = 0 ;
    SCNUt_AdjTri *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTriList::Tri",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTriList::Tri",1,"SCNUt_AdjTriList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_AdjTriList::Tri",2,"SCNUt_AdjTri *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTriList,0))){
      SWIG_fail_ptr("SCNUt_AdjTriList_Tri_set",1,SWIGTYPE_p_SCNUt_AdjTriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_AdjTri,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_AdjTriList_Tri_set",2,SWIGTYPE_p_SCNUt_AdjTri);
    }
    
    if (arg1) (arg1)->Tri = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTriList_Tri_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriList *arg1 = 0 ;
    SCNUt_AdjTri *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTriList::Tri",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTriList::Tri",1,"SCNUt_AdjTriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTriList,0))){
      SWIG_fail_ptr("SCNUt_AdjTriList_Tri_get",1,SWIGTYPE_p_SCNUt_AdjTriList);
    }
    
    result = (SCNUt_AdjTri *) ((arg1)->Tri);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AdjTri,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_AdjTriList(void *obj) {
SCNUt_AdjTriList *arg1 = (SCNUt_AdjTriList *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_AdjTriList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_AdjTriList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_AdjTriList_attributes[] = {
    { "iNumTris", _wrap_SCNUt_AdjTriList_iNumTris_get, _wrap_SCNUt_AdjTriList_iNumTris_set },
    { "Tri", _wrap_SCNUt_AdjTriList_Tri_get, _wrap_SCNUt_AdjTriList_Tri_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_AdjTriList_methods[]= {
    { "Init", _wrap_SCNUt_AdjTriList_Init},
    {0,0}
};
static swig_lua_method swig_SCNUt_AdjTriList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_AdjTriList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_AdjTriList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_AdjTriList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_AdjTriList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_AdjTriList_Sf_SwigStatic = {
    "SCNUt_AdjTriList",
    swig_SCNUt_AdjTriList_Sf_SwigStatic_methods,
    swig_SCNUt_AdjTriList_Sf_SwigStatic_attributes,
    swig_SCNUt_AdjTriList_Sf_SwigStatic_constants,
    swig_SCNUt_AdjTriList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_AdjTriList_bases[] = {0};
static const char *swig_SCNUt_AdjTriList_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_AdjTriList = { "SCNUt_AdjTriList", "SCNUt_AdjTriList", &SWIGTYPE_p_SCNUt_AdjTriList,_proxy__wrap_new_SCNUt_AdjTriList, swig_delete_SCNUt_AdjTriList, swig_SCNUt_AdjTriList_methods, swig_SCNUt_AdjTriList_attributes, &swig_SCNUt_AdjTriList_Sf_SwigStatic, swig_SCNUt_AdjTriList_meta, swig_SCNUt_AdjTriList_bases, swig_SCNUt_AdjTriList_base_names };

static int _wrap_new_SCNUt_AdjTriListBuilder(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriListBuilder *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTriListBuilder::SCNUt_AdjTriListBuilder",0,0)
    result = (SCNUt_AdjTriListBuilder *)new SCNUt_AdjTriListBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AdjTriListBuilder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AdjTriListBuilder_poBuild(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AdjTriListBuilder *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    CGMesh **arg3 = 0 ;
    SCNUt_AdjTriList *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AdjTriListBuilder::poBuild",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AdjTriListBuilder::poBuild",1,"SCNUt_AdjTriListBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_AdjTriListBuilder::poBuild",2,"CGMesh *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_AdjTriListBuilder::poBuild",3,"CGMesh *&");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AdjTriListBuilder,0))){
      SWIG_fail_ptr("SCNUt_AdjTriListBuilder_poBuild",1,SWIGTYPE_p_SCNUt_AdjTriListBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_AdjTriListBuilder_poBuild",2,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_AdjTriListBuilder_poBuild",3,SWIGTYPE_p_p_CGMesh);
    }
    
    result = (SCNUt_AdjTriList *)(arg1)->poBuild(arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AdjTriList,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_AdjTriListBuilder(void *obj) {
SCNUt_AdjTriListBuilder *arg1 = (SCNUt_AdjTriListBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_AdjTriListBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_AdjTriListBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_AdjTriListBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_AdjTriListBuilder_methods[]= {
    { "poBuild", _wrap_SCNUt_AdjTriListBuilder_poBuild},
    {0,0}
};
static swig_lua_method swig_SCNUt_AdjTriListBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic = {
    "SCNUt_AdjTriListBuilder",
    swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_methods,
    swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_attributes,
    swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_constants,
    swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_AdjTriListBuilder_bases[] = {0};
static const char *swig_SCNUt_AdjTriListBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_AdjTriListBuilder = { "SCNUt_AdjTriListBuilder", "SCNUt_AdjTriListBuilder", &SWIGTYPE_p_SCNUt_AdjTriListBuilder,_proxy__wrap_new_SCNUt_AdjTriListBuilder, swig_delete_SCNUt_AdjTriListBuilder, swig_SCNUt_AdjTriListBuilder_methods, swig_SCNUt_AdjTriListBuilder_attributes, &swig_SCNUt_AdjTriListBuilder_Sf_SwigStatic, swig_SCNUt_AdjTriListBuilder_meta, swig_SCNUt_AdjTriListBuilder_bases, swig_SCNUt_AdjTriListBuilder_base_names };

static int _wrap_new_SCNUt_Edge(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Edge *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Edge::SCNUt_Edge",0,0)
    result = (SCNUt_Edge *)new SCNUt_Edge();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_Edge,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Edge_A_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Edge *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_Edge::A",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Edge::A",1,"SCNUt_Edge *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_Edge::A",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Edge,0))){
      SWIG_fail_ptr("SCNUt_Edge_A_set",1,SWIGTYPE_p_SCNUt_Edge);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->A = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Edge_A_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Edge *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_Edge::A",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Edge::A",1,"SCNUt_Edge *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Edge,0))){
      SWIG_fail_ptr("SCNUt_Edge_A_get",1,SWIGTYPE_p_SCNUt_Edge);
    }
    
    result = (int) ((arg1)->A);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Edge_B_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Edge *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_Edge::B",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Edge::B",1,"SCNUt_Edge *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_Edge::B",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Edge,0))){
      SWIG_fail_ptr("SCNUt_Edge_B_set",1,SWIGTYPE_p_SCNUt_Edge);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->B = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Edge_B_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Edge *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_Edge::B",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Edge::B",1,"SCNUt_Edge *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Edge,0))){
      SWIG_fail_ptr("SCNUt_Edge_B_get",1,SWIGTYPE_p_SCNUt_Edge);
    }
    
    result = (int) ((arg1)->B);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_Edge(void *obj) {
SCNUt_Edge *arg1 = (SCNUt_Edge *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_Edge(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_Edge);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_Edge_attributes[] = {
    { "A", _wrap_SCNUt_Edge_A_get, _wrap_SCNUt_Edge_A_set },
    { "B", _wrap_SCNUt_Edge_B_get, _wrap_SCNUt_Edge_B_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_Edge_methods[]= {
    {0,0}
};
static swig_lua_method swig_SCNUt_Edge_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_Edge_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_Edge_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_Edge_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_Edge_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_Edge_Sf_SwigStatic = {
    "SCNUt_Edge",
    swig_SCNUt_Edge_Sf_SwigStatic_methods,
    swig_SCNUt_Edge_Sf_SwigStatic_attributes,
    swig_SCNUt_Edge_Sf_SwigStatic_constants,
    swig_SCNUt_Edge_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_Edge_bases[] = {0};
static const char *swig_SCNUt_Edge_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_Edge = { "SCNUt_Edge", "SCNUt_Edge", &SWIGTYPE_p_SCNUt_Edge,_proxy__wrap_new_SCNUt_Edge, swig_delete_SCNUt_Edge, swig_SCNUt_Edge_methods, swig_SCNUt_Edge_attributes, &swig_SCNUt_Edge_Sf_SwigStatic, swig_SCNUt_Edge_meta, swig_SCNUt_Edge_bases, swig_SCNUt_Edge_base_names };

static int _wrap_new_SCNUt_EdgeList(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeList *result = 0 ;
    
    SWIG_check_num_args("SCNUt_EdgeList::SCNUt_EdgeList",0,0)
    result = (SCNUt_EdgeList *)new SCNUt_EdgeList();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_EdgeList,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeList_iAdd(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeList *arg1 = 0 ;
    SCNUt_Edge *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_EdgeList::iAdd",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeList::iAdd",1,"SCNUt_EdgeList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCNUt_EdgeList::iAdd",2,"SCNUt_Edge &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeList,0))){
      SWIG_fail_ptr("SCNUt_EdgeList_iAdd",1,SWIGTYPE_p_SCNUt_EdgeList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_Edge,0))){
      SWIG_fail_ptr("SCNUt_EdgeList_iAdd",2,SWIGTYPE_p_SCNUt_Edge);
    }
    
    result = (int)(arg1)->iAdd(*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeList_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeList *arg1 = 0 ;
    
    SWIG_check_num_args("SCNUt_EdgeList::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeList::Clear",1,"SCNUt_EdgeList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeList,0))){
      SWIG_fail_ptr("SCNUt_EdgeList_Clear",1,SWIGTYPE_p_SCNUt_EdgeList);
    }
    
    (arg1)->Clear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeList_iNumEdges_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeList *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("SCNUt_EdgeList::iNumEdges",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeList::iNumEdges",1,"SCNUt_EdgeList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SCNUt_EdgeList::iNumEdges",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeList,0))){
      SWIG_fail_ptr("SCNUt_EdgeList_iNumEdges_set",1,SWIGTYPE_p_SCNUt_EdgeList);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumEdges = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeList_iNumEdges_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeList *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("SCNUt_EdgeList::iNumEdges",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeList::iNumEdges",1,"SCNUt_EdgeList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeList,0))){
      SWIG_fail_ptr("SCNUt_EdgeList_iNumEdges_get",1,SWIGTYPE_p_SCNUt_EdgeList);
    }
    
    result = (int) ((arg1)->iNumEdges);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeList_Edge_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeList *arg1 = 0 ;
    SCNUt_Edge *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_EdgeList::Edge",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeList::Edge",1,"SCNUt_EdgeList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_EdgeList::Edge",2,"SCNUt_Edge *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeList,0))){
      SWIG_fail_ptr("SCNUt_EdgeList_Edge_set",1,SWIGTYPE_p_SCNUt_EdgeList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_Edge,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("SCNUt_EdgeList_Edge_set",2,SWIGTYPE_p_SCNUt_Edge);
    }
    
    if (arg1) (arg1)->Edge = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeList_Edge_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeList *arg1 = 0 ;
    SCNUt_Edge *result = 0 ;
    
    SWIG_check_num_args("SCNUt_EdgeList::Edge",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeList::Edge",1,"SCNUt_EdgeList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeList,0))){
      SWIG_fail_ptr("SCNUt_EdgeList_Edge_get",1,SWIGTYPE_p_SCNUt_EdgeList);
    }
    
    result = (SCNUt_Edge *) ((arg1)->Edge);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_Edge,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_EdgeList(void *obj) {
SCNUt_EdgeList *arg1 = (SCNUt_EdgeList *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_EdgeList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_EdgeList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_EdgeList_attributes[] = {
    { "iNumEdges", _wrap_SCNUt_EdgeList_iNumEdges_get, _wrap_SCNUt_EdgeList_iNumEdges_set },
    { "Edge", _wrap_SCNUt_EdgeList_Edge_get, _wrap_SCNUt_EdgeList_Edge_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_EdgeList_methods[]= {
    { "iAdd", _wrap_SCNUt_EdgeList_iAdd},
    { "Clear", _wrap_SCNUt_EdgeList_Clear},
    {0,0}
};
static swig_lua_method swig_SCNUt_EdgeList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_EdgeList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_EdgeList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_EdgeList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_EdgeList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_EdgeList_Sf_SwigStatic = {
    "SCNUt_EdgeList",
    swig_SCNUt_EdgeList_Sf_SwigStatic_methods,
    swig_SCNUt_EdgeList_Sf_SwigStatic_attributes,
    swig_SCNUt_EdgeList_Sf_SwigStatic_constants,
    swig_SCNUt_EdgeList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_EdgeList_bases[] = {0};
static const char *swig_SCNUt_EdgeList_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_EdgeList = { "SCNUt_EdgeList", "SCNUt_EdgeList", &SWIGTYPE_p_SCNUt_EdgeList,_proxy__wrap_new_SCNUt_EdgeList, swig_delete_SCNUt_EdgeList, swig_SCNUt_EdgeList_methods, swig_SCNUt_EdgeList_attributes, &swig_SCNUt_EdgeList_Sf_SwigStatic, swig_SCNUt_EdgeList_meta, swig_SCNUt_EdgeList_bases, swig_SCNUt_EdgeList_base_names };

static int _wrap_new_SCNUt_EdgeBuilder(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeBuilder *result = 0 ;
    
    SWIG_check_num_args("SCNUt_EdgeBuilder::SCNUt_EdgeBuilder",0,0)
    result = (SCNUt_EdgeBuilder *)new SCNUt_EdgeBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_EdgeBuilder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeBuilder_poBuild(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeBuilder *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    CGMesh *arg3 = 0 ;
    SCNUt_EdgeList *result = 0 ;
    
    SWIG_check_num_args("SCNUt_EdgeBuilder::poBuild",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeBuilder::poBuild",1,"SCNUt_EdgeBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_EdgeBuilder::poBuild",2,"CGMesh *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SCNUt_EdgeBuilder::poBuild",3,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeBuilder,0))){
      SWIG_fail_ptr("SCNUt_EdgeBuilder_poBuild",1,SWIGTYPE_p_SCNUt_EdgeBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_EdgeBuilder_poBuild",2,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_EdgeBuilder_poBuild",3,SWIGTYPE_p_CGMesh);
    }
    
    result = (SCNUt_EdgeList *)(arg1)->poBuild(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_EdgeList,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_EdgeBuilder_poBuildFromIndexedTriMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_EdgeBuilder *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    SCNUt_EdgeList *result = 0 ;
    
    SWIG_check_num_args("SCNUt_EdgeBuilder::poBuildFromIndexedTriMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_EdgeBuilder::poBuildFromIndexedTriMesh",1,"SCNUt_EdgeBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_EdgeBuilder::poBuildFromIndexedTriMesh",2,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_EdgeBuilder,0))){
      SWIG_fail_ptr("SCNUt_EdgeBuilder_poBuildFromIndexedTriMesh",1,SWIGTYPE_p_SCNUt_EdgeBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_EdgeBuilder_poBuildFromIndexedTriMesh",2,SWIGTYPE_p_CGMesh);
    }
    
    result = (SCNUt_EdgeList *)(arg1)->poBuildFromIndexedTriMesh(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_EdgeList,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_EdgeBuilder(void *obj) {
SCNUt_EdgeBuilder *arg1 = (SCNUt_EdgeBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_EdgeBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_EdgeBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_EdgeBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_EdgeBuilder_methods[]= {
    { "poBuild", _wrap_SCNUt_EdgeBuilder_poBuild},
    { "poBuildFromIndexedTriMesh", _wrap_SCNUt_EdgeBuilder_poBuildFromIndexedTriMesh},
    {0,0}
};
static swig_lua_method swig_SCNUt_EdgeBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_EdgeBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_EdgeBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_EdgeBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_EdgeBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_EdgeBuilder_Sf_SwigStatic = {
    "SCNUt_EdgeBuilder",
    swig_SCNUt_EdgeBuilder_Sf_SwigStatic_methods,
    swig_SCNUt_EdgeBuilder_Sf_SwigStatic_attributes,
    swig_SCNUt_EdgeBuilder_Sf_SwigStatic_constants,
    swig_SCNUt_EdgeBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_EdgeBuilder_bases[] = {0};
static const char *swig_SCNUt_EdgeBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_EdgeBuilder = { "SCNUt_EdgeBuilder", "SCNUt_EdgeBuilder", &SWIGTYPE_p_SCNUt_EdgeBuilder,_proxy__wrap_new_SCNUt_EdgeBuilder, swig_delete_SCNUt_EdgeBuilder, swig_SCNUt_EdgeBuilder_methods, swig_SCNUt_EdgeBuilder_attributes, &swig_SCNUt_EdgeBuilder_Sf_SwigStatic, swig_SCNUt_EdgeBuilder_meta, swig_SCNUt_EdgeBuilder_bases, swig_SCNUt_EdgeBuilder_base_names };

static int _wrap_new_SCNUt_Stripifier(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Stripifier *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Stripifier::SCNUt_Stripifier",0,0)
    result = (SCNUt_Stripifier *)new SCNUt_Stripifier();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_Stripifier,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Stripifier_poStripifyMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Stripifier *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Stripifier::poStripifyMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Stripifier::poStripifyMesh",1,"SCNUt_Stripifier *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Stripifier::poStripifyMesh",2,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Stripifier,0))){
      SWIG_fail_ptr("SCNUt_Stripifier_poStripifyMesh",1,SWIGTYPE_p_SCNUt_Stripifier);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_Stripifier_poStripifyMesh",2,SWIGTYPE_p_CGMesh);
    }
    
    result = (CGMesh *)(arg1)->poStripifyMesh(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Stripifier_poStripifyTriScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Stripifier *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("SCNUt_Stripifier::poStripifyTriScene",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Stripifier::poStripifyTriScene",1,"SCNUt_Stripifier *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Stripifier::poStripifyTriScene",2,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Stripifier,0))){
      SWIG_fail_ptr("SCNUt_Stripifier_poStripifyTriScene",1,SWIGTYPE_p_SCNUt_Stripifier);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_Stripifier_poStripifyTriScene",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (CGMesh *)(arg1)->poStripifyTriScene(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_Stripifier_iGetNonCommonVertex(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_Stripifier *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    int result;
    
    SWIG_check_num_args("SCNUt_Stripifier::iGetNonCommonVertex",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_Stripifier::iGetNonCommonVertex",1,"SCNUt_Stripifier *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_Stripifier::iGetNonCommonVertex",2,"CGMesh *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("SCNUt_Stripifier::iGetNonCommonVertex",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("SCNUt_Stripifier::iGetNonCommonVertex",4,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_Stripifier,0))){
      SWIG_fail_ptr("SCNUt_Stripifier_iGetNonCommonVertex",1,SWIGTYPE_p_SCNUt_Stripifier);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("SCNUt_Stripifier_iGetNonCommonVertex",2,SWIGTYPE_p_CGMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    result = (int)(arg1)->iGetNonCommonVertex(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_Stripifier(void *obj) {
SCNUt_Stripifier *arg1 = (SCNUt_Stripifier *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_Stripifier(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_Stripifier);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_Stripifier_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_Stripifier_methods[]= {
    { "poStripifyMesh", _wrap_SCNUt_Stripifier_poStripifyMesh},
    { "poStripifyTriScene", _wrap_SCNUt_Stripifier_poStripifyTriScene},
    { "iGetNonCommonVertex", _wrap_SCNUt_Stripifier_iGetNonCommonVertex},
    {0,0}
};
static swig_lua_method swig_SCNUt_Stripifier_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_Stripifier_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_Stripifier_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_Stripifier_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_Stripifier_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_Stripifier_Sf_SwigStatic = {
    "SCNUt_Stripifier",
    swig_SCNUt_Stripifier_Sf_SwigStatic_methods,
    swig_SCNUt_Stripifier_Sf_SwigStatic_attributes,
    swig_SCNUt_Stripifier_Sf_SwigStatic_constants,
    swig_SCNUt_Stripifier_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_Stripifier_bases[] = {0};
static const char *swig_SCNUt_Stripifier_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_Stripifier = { "SCNUt_Stripifier", "SCNUt_Stripifier", &SWIGTYPE_p_SCNUt_Stripifier,_proxy__wrap_new_SCNUt_Stripifier, swig_delete_SCNUt_Stripifier, swig_SCNUt_Stripifier_methods, swig_SCNUt_Stripifier_attributes, &swig_SCNUt_Stripifier_Sf_SwigStatic, swig_SCNUt_Stripifier_meta, swig_SCNUt_Stripifier_bases, swig_SCNUt_Stripifier_base_names };

static int _wrap_new_SCNUt_SceneCompiler(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_SceneCompiler *result = 0 ;
    
    SWIG_check_num_args("SCNUt_SceneCompiler::SCNUt_SceneCompiler",0,0)
    result = (SCNUt_SceneCompiler *)new SCNUt_SceneCompiler();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_SceneCompiler,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_SceneCompiler_poCreateBoundVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_SceneCompiler *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("SCNUt_SceneCompiler::poCreateBoundVol",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_SceneCompiler::poCreateBoundVol",1,"SCNUt_SceneCompiler *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_SceneCompiler,0))){
      SWIG_fail_ptr("SCNUt_SceneCompiler_poCreateBoundVol",1,SWIGTYPE_p_SCNUt_SceneCompiler);
    }
    
    result = (CGGraphBV *)(arg1)->poCreateBoundVol();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_SceneCompiler_CompileScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_SceneCompiler *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_SceneCompiler::CompileScene",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_SceneCompiler::CompileScene",1,"SCNUt_SceneCompiler *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_SceneCompiler::CompileScene",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_SceneCompiler,0))){
      SWIG_fail_ptr("SCNUt_SceneCompiler_CompileScene",1,SWIGTYPE_p_SCNUt_SceneCompiler);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("SCNUt_SceneCompiler_CompileScene",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->CompileScene(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_SceneCompiler(void *obj) {
SCNUt_SceneCompiler *arg1 = (SCNUt_SceneCompiler *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_SceneCompiler(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_SceneCompiler);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_SceneCompiler_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_SceneCompiler_methods[]= {
    { "poCreateBoundVol", _wrap_SCNUt_SceneCompiler_poCreateBoundVol},
    { "CompileScene", _wrap_SCNUt_SceneCompiler_CompileScene},
    {0,0}
};
static swig_lua_method swig_SCNUt_SceneCompiler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_SceneCompiler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_SceneCompiler_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_SceneCompiler_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_SceneCompiler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_SceneCompiler_Sf_SwigStatic = {
    "SCNUt_SceneCompiler",
    swig_SCNUt_SceneCompiler_Sf_SwigStatic_methods,
    swig_SCNUt_SceneCompiler_Sf_SwigStatic_attributes,
    swig_SCNUt_SceneCompiler_Sf_SwigStatic_constants,
    swig_SCNUt_SceneCompiler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_SceneCompiler_bases[] = {0};
static const char *swig_SCNUt_SceneCompiler_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_SceneCompiler = { "SCNUt_SceneCompiler", "SCNUt_SceneCompiler", &SWIGTYPE_p_SCNUt_SceneCompiler,_proxy__wrap_new_SCNUt_SceneCompiler, swig_delete_SCNUt_SceneCompiler, swig_SCNUt_SceneCompiler_methods, swig_SCNUt_SceneCompiler_attributes, &swig_SCNUt_SceneCompiler_Sf_SwigStatic, swig_SCNUt_SceneCompiler_meta, swig_SCNUt_SceneCompiler_bases, swig_SCNUt_SceneCompiler_base_names };

static int _wrap_new_SCNUt_CoplanarRemover(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_CoplanarRemover *result = 0 ;
    
    SWIG_check_num_args("SCNUt_CoplanarRemover::SCNUt_CoplanarRemover",0,0)
    result = (SCNUt_CoplanarRemover *)new SCNUt_CoplanarRemover();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_CoplanarRemover,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_CoplanarRemover_RemoveCoplanars(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_CoplanarRemover *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    SCNUt_TriScene *result = 0 ;
    
    SWIG_check_num_args("SCNUt_CoplanarRemover::RemoveCoplanars",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_CoplanarRemover::RemoveCoplanars",1,"SCNUt_CoplanarRemover *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_CoplanarRemover::RemoveCoplanars",2,"SCNUt_TriScene *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_CoplanarRemover,0))){
      SWIG_fail_ptr("SCNUt_CoplanarRemover_RemoveCoplanars",1,SWIGTYPE_p_SCNUt_CoplanarRemover);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_CoplanarRemover_RemoveCoplanars",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    result = (SCNUt_TriScene *)(arg1)->RemoveCoplanars(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_TriScene,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_CoplanarRemover(void *obj) {
SCNUt_CoplanarRemover *arg1 = (SCNUt_CoplanarRemover *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_CoplanarRemover(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_CoplanarRemover);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_CoplanarRemover_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_CoplanarRemover_methods[]= {
    { "RemoveCoplanars", _wrap_SCNUt_CoplanarRemover_RemoveCoplanars},
    {0,0}
};
static swig_lua_method swig_SCNUt_CoplanarRemover_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_CoplanarRemover_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_CoplanarRemover_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_CoplanarRemover_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_CoplanarRemover_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_CoplanarRemover_Sf_SwigStatic = {
    "SCNUt_CoplanarRemover",
    swig_SCNUt_CoplanarRemover_Sf_SwigStatic_methods,
    swig_SCNUt_CoplanarRemover_Sf_SwigStatic_attributes,
    swig_SCNUt_CoplanarRemover_Sf_SwigStatic_constants,
    swig_SCNUt_CoplanarRemover_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_CoplanarRemover_bases[] = {0};
static const char *swig_SCNUt_CoplanarRemover_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_CoplanarRemover = { "SCNUt_CoplanarRemover", "SCNUt_CoplanarRemover", &SWIGTYPE_p_SCNUt_CoplanarRemover,_proxy__wrap_new_SCNUt_CoplanarRemover, swig_delete_SCNUt_CoplanarRemover, swig_SCNUt_CoplanarRemover_methods, swig_SCNUt_CoplanarRemover_attributes, &swig_SCNUt_CoplanarRemover_Sf_SwigStatic, swig_SCNUt_CoplanarRemover_meta, swig_SCNUt_CoplanarRemover_bases, swig_SCNUt_CoplanarRemover_base_names };

static int _wrap_new_SCNUt_VisibilityTester(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_VisibilityTester *result = 0 ;
    
    SWIG_check_num_args("SCNUt_VisibilityTester::SCNUt_VisibilityTester",0,0)
    result = (SCNUt_VisibilityTester *)new SCNUt_VisibilityTester();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_VisibilityTester,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_VisibilityTester_bIsVisible(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_VisibilityTester *arg1 = 0 ;
    SCNUt_TriScene *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    bool result;
    
    SWIG_check_num_args("SCNUt_VisibilityTester::bIsVisible",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_VisibilityTester::bIsVisible",1,"SCNUt_VisibilityTester *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_VisibilityTester::bIsVisible",2,"SCNUt_TriScene *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCNUt_VisibilityTester::bIsVisible",3,"CGVect3 &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("SCNUt_VisibilityTester::bIsVisible",4,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_VisibilityTester,0))){
      SWIG_fail_ptr("SCNUt_VisibilityTester_bIsVisible",1,SWIGTYPE_p_SCNUt_VisibilityTester);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SCNUt_TriScene,0))){
      SWIG_fail_ptr("SCNUt_VisibilityTester_bIsVisible",2,SWIGTYPE_p_SCNUt_TriScene);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("SCNUt_VisibilityTester_bIsVisible",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("SCNUt_VisibilityTester_bIsVisible",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (bool)(arg1)->bIsVisible(arg2,*arg3,*arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_VisibilityTester(void *obj) {
SCNUt_VisibilityTester *arg1 = (SCNUt_VisibilityTester *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_VisibilityTester(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_VisibilityTester);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_VisibilityTester_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SCNUt_VisibilityTester_methods[]= {
    { "bIsVisible", _wrap_SCNUt_VisibilityTester_bIsVisible},
    {0,0}
};
static swig_lua_method swig_SCNUt_VisibilityTester_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_VisibilityTester_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_VisibilityTester_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_VisibilityTester_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_VisibilityTester_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_VisibilityTester_Sf_SwigStatic = {
    "SCNUt_VisibilityTester",
    swig_SCNUt_VisibilityTester_Sf_SwigStatic_methods,
    swig_SCNUt_VisibilityTester_Sf_SwigStatic_attributes,
    swig_SCNUt_VisibilityTester_Sf_SwigStatic_constants,
    swig_SCNUt_VisibilityTester_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_VisibilityTester_bases[] = {0};
static const char *swig_SCNUt_VisibilityTester_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_VisibilityTester = { "SCNUt_VisibilityTester", "SCNUt_VisibilityTester", &SWIGTYPE_p_SCNUt_VisibilityTester,_proxy__wrap_new_SCNUt_VisibilityTester, swig_delete_SCNUt_VisibilityTester, swig_SCNUt_VisibilityTester_methods, swig_SCNUt_VisibilityTester_attributes, &swig_SCNUt_VisibilityTester_Sf_SwigStatic, swig_SCNUt_VisibilityTester_meta, swig_SCNUt_VisibilityTester_bases, swig_SCNUt_VisibilityTester_base_names };

static int _wrap_new_SCNUt_AnimSceneLoader(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimSceneLoader *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AnimSceneLoader::SCNUt_AnimSceneLoader",0,0)
    result = (SCNUt_AnimSceneLoader *)new SCNUt_AnimSceneLoader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_SCNUt_AnimSceneLoader,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AnimSceneLoader_poLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimSceneLoader *arg1 = 0 ;
    char *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AnimSceneLoader::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AnimSceneLoader::poLoad",1,"SCNUt_AnimSceneLoader *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SCNUt_AnimSceneLoader::poLoad",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AnimSceneLoader,0))){
      SWIG_fail_ptr("SCNUt_AnimSceneLoader_poLoad",1,SWIGTYPE_p_SCNUt_AnimSceneLoader);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGSceneNode *)(arg1)->poLoad(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AnimSceneLoader_m_oMaterials_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimSceneLoader *arg1 = 0 ;
    CGDynArray< CGString > *arg2 = 0 ;
    
    SWIG_check_num_args("SCNUt_AnimSceneLoader::m_oMaterials",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AnimSceneLoader::m_oMaterials",1,"SCNUt_AnimSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCNUt_AnimSceneLoader::m_oMaterials",2,"CGDynArray< CGString > *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AnimSceneLoader,0))){
      SWIG_fail_ptr("SCNUt_AnimSceneLoader_m_oMaterials_set",1,SWIGTYPE_p_SCNUt_AnimSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGDynArrayT_CGString_t,0))){
      SWIG_fail_ptr("SCNUt_AnimSceneLoader_m_oMaterials_set",2,SWIGTYPE_p_CGDynArrayT_CGString_t);
    }
    
    if (arg1) (arg1)->m_oMaterials = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SCNUt_AnimSceneLoader_m_oMaterials_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    SCNUt_AnimSceneLoader *arg1 = 0 ;
    CGDynArray< CGString > *result = 0 ;
    
    SWIG_check_num_args("SCNUt_AnimSceneLoader::m_oMaterials",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCNUt_AnimSceneLoader::m_oMaterials",1,"SCNUt_AnimSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SCNUt_AnimSceneLoader,0))){
      SWIG_fail_ptr("SCNUt_AnimSceneLoader_m_oMaterials_get",1,SWIGTYPE_p_SCNUt_AnimSceneLoader);
    }
    
    result = (CGDynArray< CGString > *)& ((arg1)->m_oMaterials);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGDynArrayT_CGString_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_SCNUt_AnimSceneLoader(void *obj) {
SCNUt_AnimSceneLoader *arg1 = (SCNUt_AnimSceneLoader *) obj;
delete arg1;
}
static int _proxy__wrap_new_SCNUt_AnimSceneLoader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SCNUt_AnimSceneLoader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SCNUt_AnimSceneLoader_attributes[] = {
    { "m_oMaterials", _wrap_SCNUt_AnimSceneLoader_m_oMaterials_get, _wrap_SCNUt_AnimSceneLoader_m_oMaterials_set },
    {0,0,0}
};
static swig_lua_method swig_SCNUt_AnimSceneLoader_methods[]= {
    { "poLoad", _wrap_SCNUt_AnimSceneLoader_poLoad},
    {0,0}
};
static swig_lua_method swig_SCNUt_AnimSceneLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SCNUt_AnimSceneLoader_Sf_SwigStatic = {
    "SCNUt_AnimSceneLoader",
    swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_methods,
    swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_attributes,
    swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_constants,
    swig_SCNUt_AnimSceneLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SCNUt_AnimSceneLoader_bases[] = {0};
static const char *swig_SCNUt_AnimSceneLoader_base_names[] = {0};
static swig_lua_class _wrap_class_SCNUt_AnimSceneLoader = { "SCNUt_AnimSceneLoader", "SCNUt_AnimSceneLoader", &SWIGTYPE_p_SCNUt_AnimSceneLoader,_proxy__wrap_new_SCNUt_AnimSceneLoader, swig_delete_SCNUt_AnimSceneLoader, swig_SCNUt_AnimSceneLoader_methods, swig_SCNUt_AnimSceneLoader_attributes, &swig_SCNUt_AnimSceneLoader_Sf_SwigStatic, swig_SCNUt_AnimSceneLoader_meta, swig_SCNUt_AnimSceneLoader_bases, swig_SCNUt_AnimSceneLoader_base_names };

static int _wrap_model_t_magic_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::magic",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::magic",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::magic",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_magic_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->magic = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_magic_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::magic",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::magic",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_magic_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->magic);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_version_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::version",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::version",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::version",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_version_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->version = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_version_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::version",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::version",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_version_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->version);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_skinWidth_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::skinWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::skinWidth",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::skinWidth",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_skinWidth_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->skinWidth = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_skinWidth_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::skinWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::skinWidth",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_skinWidth_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->skinWidth);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_skinHeight_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::skinHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::skinHeight",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::skinHeight",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_skinHeight_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->skinHeight = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_skinHeight_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::skinHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::skinHeight",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_skinHeight_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->skinHeight);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_frameSize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::frameSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::frameSize",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::frameSize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_frameSize_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->frameSize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_frameSize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::frameSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::frameSize",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_frameSize_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->frameSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numSkins_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::numSkins",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numSkins",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::numSkins",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numSkins_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numSkins = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numSkins_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::numSkins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numSkins",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numSkins_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->numSkins);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numVertices_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::numVertices",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numVertices",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::numVertices",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numVertices_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numVertices = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numVertices_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::numVertices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numVertices",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numVertices_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->numVertices);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numTexCoords_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::numTexCoords",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numTexCoords",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::numTexCoords",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numTexCoords_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numTexCoords = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numTexCoords_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::numTexCoords",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numTexCoords",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numTexCoords_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->numTexCoords);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numTriangles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::numTriangles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numTriangles",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::numTriangles",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numTriangles_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numTriangles = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numTriangles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::numTriangles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numTriangles",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numTriangles_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->numTriangles);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numGlCommands_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::numGlCommands",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numGlCommands",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::numGlCommands",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numGlCommands_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numGlCommands = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numGlCommands_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::numGlCommands",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numGlCommands",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numGlCommands_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->numGlCommands);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numFrames_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::numFrames",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numFrames",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::numFrames",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numFrames_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numFrames = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_numFrames_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::numFrames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::numFrames",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_numFrames_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->numFrames);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetSkins_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::offsetSkins",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetSkins",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::offsetSkins",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetSkins_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->offsetSkins = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetSkins_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::offsetSkins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetSkins",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetSkins_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->offsetSkins);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetTexCoords_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::offsetTexCoords",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetTexCoords",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::offsetTexCoords",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetTexCoords_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->offsetTexCoords = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetTexCoords_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::offsetTexCoords",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetTexCoords",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetTexCoords_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->offsetTexCoords);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetTriangles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::offsetTriangles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetTriangles",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::offsetTriangles",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetTriangles_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->offsetTriangles = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetTriangles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::offsetTriangles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetTriangles",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetTriangles_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->offsetTriangles);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetFrames_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::offsetFrames",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetFrames",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::offsetFrames",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetFrames_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->offsetFrames = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetFrames_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::offsetFrames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetFrames",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetFrames_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->offsetFrames);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetGlCommands_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::offsetGlCommands",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetGlCommands",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::offsetGlCommands",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetGlCommands_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->offsetGlCommands = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetGlCommands_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::offsetGlCommands",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetGlCommands",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetGlCommands_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->offsetGlCommands);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetEnd_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("model_t::offsetEnd",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetEnd",1,"model_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("model_t::offsetEnd",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetEnd_set",1,SWIGTYPE_p_model_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->offsetEnd = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_model_t_offsetEnd_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("model_t::offsetEnd",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("model_t::offsetEnd",1,"model_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_model_t,0))){
      SWIG_fail_ptr("model_t_offsetEnd_get",1,SWIGTYPE_p_model_t);
    }
    
    result = (int) ((arg1)->offsetEnd);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_model_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    model_t *result = 0 ;
    
    SWIG_check_num_args("model_t::model_t",0,0)
    result = (model_t *)new model_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_model_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_model_t(void *obj) {
model_t *arg1 = (model_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_model_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_model_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_model_t_attributes[] = {
    { "magic", _wrap_model_t_magic_get, _wrap_model_t_magic_set },
    { "version", _wrap_model_t_version_get, _wrap_model_t_version_set },
    { "skinWidth", _wrap_model_t_skinWidth_get, _wrap_model_t_skinWidth_set },
    { "skinHeight", _wrap_model_t_skinHeight_get, _wrap_model_t_skinHeight_set },
    { "frameSize", _wrap_model_t_frameSize_get, _wrap_model_t_frameSize_set },
    { "numSkins", _wrap_model_t_numSkins_get, _wrap_model_t_numSkins_set },
    { "numVertices", _wrap_model_t_numVertices_get, _wrap_model_t_numVertices_set },
    { "numTexCoords", _wrap_model_t_numTexCoords_get, _wrap_model_t_numTexCoords_set },
    { "numTriangles", _wrap_model_t_numTriangles_get, _wrap_model_t_numTriangles_set },
    { "numGlCommands", _wrap_model_t_numGlCommands_get, _wrap_model_t_numGlCommands_set },
    { "numFrames", _wrap_model_t_numFrames_get, _wrap_model_t_numFrames_set },
    { "offsetSkins", _wrap_model_t_offsetSkins_get, _wrap_model_t_offsetSkins_set },
    { "offsetTexCoords", _wrap_model_t_offsetTexCoords_get, _wrap_model_t_offsetTexCoords_set },
    { "offsetTriangles", _wrap_model_t_offsetTriangles_get, _wrap_model_t_offsetTriangles_set },
    { "offsetFrames", _wrap_model_t_offsetFrames_get, _wrap_model_t_offsetFrames_set },
    { "offsetGlCommands", _wrap_model_t_offsetGlCommands_get, _wrap_model_t_offsetGlCommands_set },
    { "offsetEnd", _wrap_model_t_offsetEnd_get, _wrap_model_t_offsetEnd_set },
    {0,0,0}
};
static swig_lua_method swig_model_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_model_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_model_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_model_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_model_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_model_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_model_t_Sf_SwigStatic = {
    "model_t",
    swig_model_t_Sf_SwigStatic_methods,
    swig_model_t_Sf_SwigStatic_attributes,
    swig_model_t_Sf_SwigStatic_constants,
    swig_model_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_model_t_bases[] = {0};
static const char *swig_model_t_base_names[] = {0};
static swig_lua_class _wrap_class_model_t = { "model_t", "model_t", &SWIGTYPE_p_model_t,_proxy__wrap_new_model_t, swig_delete_model_t, swig_model_t_methods, swig_model_t_attributes, &swig_model_t_Sf_SwigStatic, swig_model_t_meta, swig_model_t_bases, swig_model_t_base_names };

static int _wrap_triangleVertex_t_vertex_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangleVertex_t *arg1 = 0 ;
    unsigned char *arg2 = (unsigned char *)0 ;
    
    SWIG_check_num_args("triangleVertex_t::vertex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangleVertex_t::vertex",1,"triangleVertex_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("triangleVertex_t::vertex",2,"unsigned char [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangleVertex_t,0))){
      SWIG_fail_ptr("triangleVertex_t_vertex_set",1,SWIGTYPE_p_triangleVertex_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("triangleVertex_t_vertex_set",2,SWIGTYPE_p_unsigned_char);
    }
    
    {
      size_t ii;
      unsigned char *b = (unsigned char *) arg1->vertex;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned char *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_triangleVertex_t_vertex_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangleVertex_t *arg1 = 0 ;
    unsigned char *result = 0 ;
    
    SWIG_check_num_args("triangleVertex_t::vertex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangleVertex_t::vertex",1,"triangleVertex_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangleVertex_t,0))){
      SWIG_fail_ptr("triangleVertex_t_vertex_get",1,SWIGTYPE_p_triangleVertex_t);
    }
    
    result = (unsigned char *)(unsigned char *) ((arg1)->vertex);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_triangleVertex_t_lightNormalIndex_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangleVertex_t *arg1 = 0 ;
    unsigned char arg2 ;
    
    SWIG_check_num_args("triangleVertex_t::lightNormalIndex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangleVertex_t::lightNormalIndex",1,"triangleVertex_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("triangleVertex_t::lightNormalIndex",2,"unsigned char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangleVertex_t,0))){
      SWIG_fail_ptr("triangleVertex_t_lightNormalIndex_set",1,SWIGTYPE_p_triangleVertex_t);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned char)lua_tonumber(L, 2);
    if (arg1) (arg1)->lightNormalIndex = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_triangleVertex_t_lightNormalIndex_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangleVertex_t *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("triangleVertex_t::lightNormalIndex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangleVertex_t::lightNormalIndex",1,"triangleVertex_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangleVertex_t,0))){
      SWIG_fail_ptr("triangleVertex_t_lightNormalIndex_get",1,SWIGTYPE_p_triangleVertex_t);
    }
    
    result = (unsigned char) ((arg1)->lightNormalIndex);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_triangleVertex_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangleVertex_t *result = 0 ;
    
    SWIG_check_num_args("triangleVertex_t::triangleVertex_t",0,0)
    result = (triangleVertex_t *)new triangleVertex_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_triangleVertex_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_triangleVertex_t(void *obj) {
triangleVertex_t *arg1 = (triangleVertex_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_triangleVertex_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_triangleVertex_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_triangleVertex_t_attributes[] = {
    { "vertex", _wrap_triangleVertex_t_vertex_get, _wrap_triangleVertex_t_vertex_set },
    { "lightNormalIndex", _wrap_triangleVertex_t_lightNormalIndex_get, _wrap_triangleVertex_t_lightNormalIndex_set },
    {0,0,0}
};
static swig_lua_method swig_triangleVertex_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_triangleVertex_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_triangleVertex_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_triangleVertex_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_triangleVertex_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_triangleVertex_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_triangleVertex_t_Sf_SwigStatic = {
    "triangleVertex_t",
    swig_triangleVertex_t_Sf_SwigStatic_methods,
    swig_triangleVertex_t_Sf_SwigStatic_attributes,
    swig_triangleVertex_t_Sf_SwigStatic_constants,
    swig_triangleVertex_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_triangleVertex_t_bases[] = {0};
static const char *swig_triangleVertex_t_base_names[] = {0};
static swig_lua_class _wrap_class_triangleVertex_t = { "triangleVertex_t", "triangleVertex_t", &SWIGTYPE_p_triangleVertex_t,_proxy__wrap_new_triangleVertex_t, swig_delete_triangleVertex_t, swig_triangleVertex_t_methods, swig_triangleVertex_t_attributes, &swig_triangleVertex_t_Sf_SwigStatic, swig_triangleVertex_t_meta, swig_triangleVertex_t_bases, swig_triangleVertex_t_base_names };

static int _wrap_frame_t_scale_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("frame_t::scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::scale",1,"frame_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("frame_t::scale",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_scale_set",1,SWIGTYPE_p_frame_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("frame_t_scale_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->scale;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_frame_t_scale_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("frame_t::scale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::scale",1,"frame_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_scale_get",1,SWIGTYPE_p_frame_t);
    }
    
    result = (float *)(float *) ((arg1)->scale);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_frame_t_translate_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("frame_t::translate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::translate",1,"frame_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("frame_t::translate",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_translate_set",1,SWIGTYPE_p_frame_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("frame_t_translate_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->translate;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_frame_t_translate_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("frame_t::translate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::translate",1,"frame_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_translate_get",1,SWIGTYPE_p_frame_t);
    }
    
    result = (float *)(float *) ((arg1)->translate);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_frame_t_name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("frame_t::name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::name",1,"frame_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("frame_t::name",2,"char [16]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_name_set",1,SWIGTYPE_p_frame_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->name, (const char *)arg2, 16-1);
        arg1->name[16-1] = 0;
      } else {
        arg1->name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_frame_t_name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("frame_t::name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::name",1,"frame_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_name_get",1,SWIGTYPE_p_frame_t);
    }
    
    result = (char *)(char *) ((arg1)->name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_frame_t_vertices_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    triangleVertex_t *arg2 = 0 ;
    
    SWIG_check_num_args("frame_t::vertices",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::vertices",1,"frame_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("frame_t::vertices",2,"triangleVertex_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_vertices_set",1,SWIGTYPE_p_frame_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_triangleVertex_t,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("frame_t_vertices_set",2,SWIGTYPE_p_triangleVertex_t);
    }
    
    if (arg1) (arg1)->vertices = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_frame_t_vertices_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *arg1 = 0 ;
    triangleVertex_t *result = 0 ;
    
    SWIG_check_num_args("frame_t::vertices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frame_t::vertices",1,"frame_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_frame_t,0))){
      SWIG_fail_ptr("frame_t_vertices_get",1,SWIGTYPE_p_frame_t);
    }
    
    result = (triangleVertex_t *) ((arg1)->vertices);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_triangleVertex_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_frame_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    frame_t *result = 0 ;
    
    SWIG_check_num_args("frame_t::frame_t",0,0)
    result = (frame_t *)new frame_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_frame_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_frame_t(void *obj) {
frame_t *arg1 = (frame_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_frame_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_frame_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_frame_t_attributes[] = {
    { "scale", _wrap_frame_t_scale_get, _wrap_frame_t_scale_set },
    { "translate", _wrap_frame_t_translate_get, _wrap_frame_t_translate_set },
    { "name", _wrap_frame_t_name_get, _wrap_frame_t_name_set },
    { "vertices", _wrap_frame_t_vertices_get, _wrap_frame_t_vertices_set },
    {0,0,0}
};
static swig_lua_method swig_frame_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_frame_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_frame_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_frame_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_frame_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_frame_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_frame_t_Sf_SwigStatic = {
    "frame_t",
    swig_frame_t_Sf_SwigStatic_methods,
    swig_frame_t_Sf_SwigStatic_attributes,
    swig_frame_t_Sf_SwigStatic_constants,
    swig_frame_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_frame_t_bases[] = {0};
static const char *swig_frame_t_base_names[] = {0};
static swig_lua_class _wrap_class_frame_t = { "frame_t", "frame_t", &SWIGTYPE_p_frame_t,_proxy__wrap_new_frame_t, swig_delete_frame_t, swig_frame_t_methods, swig_frame_t_attributes, &swig_frame_t_Sf_SwigStatic, swig_frame_t_meta, swig_frame_t_bases, swig_frame_t_base_names };

static int _wrap_triangle_t_vertexIndices_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangle_t *arg1 = 0 ;
    short *arg2 = (short *)0 ;
    
    SWIG_check_num_args("triangle_t::vertexIndices",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangle_t::vertexIndices",1,"triangle_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("triangle_t::vertexIndices",2,"short [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangle_t,0))){
      SWIG_fail_ptr("triangle_t_vertexIndices_set",1,SWIGTYPE_p_triangle_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
      SWIG_fail_ptr("triangle_t_vertexIndices_set",2,SWIGTYPE_p_short);
    }
    
    {
      size_t ii;
      short *b = (short *) arg1->vertexIndices;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_triangle_t_vertexIndices_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangle_t *arg1 = 0 ;
    short *result = 0 ;
    
    SWIG_check_num_args("triangle_t::vertexIndices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangle_t::vertexIndices",1,"triangle_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangle_t,0))){
      SWIG_fail_ptr("triangle_t_vertexIndices_get",1,SWIGTYPE_p_triangle_t);
    }
    
    result = (short *)(short *) ((arg1)->vertexIndices);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_triangle_t_textureIndices_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangle_t *arg1 = 0 ;
    short *arg2 = (short *)0 ;
    
    SWIG_check_num_args("triangle_t::textureIndices",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangle_t::textureIndices",1,"triangle_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("triangle_t::textureIndices",2,"short [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangle_t,0))){
      SWIG_fail_ptr("triangle_t_textureIndices_set",1,SWIGTYPE_p_triangle_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
      SWIG_fail_ptr("triangle_t_textureIndices_set",2,SWIGTYPE_p_short);
    }
    
    {
      size_t ii;
      short *b = (short *) arg1->textureIndices;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_triangle_t_textureIndices_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangle_t *arg1 = 0 ;
    short *result = 0 ;
    
    SWIG_check_num_args("triangle_t::textureIndices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangle_t::textureIndices",1,"triangle_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_triangle_t,0))){
      SWIG_fail_ptr("triangle_t_textureIndices_get",1,SWIGTYPE_p_triangle_t);
    }
    
    result = (short *)(short *) ((arg1)->textureIndices);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_triangle_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    triangle_t *result = 0 ;
    
    SWIG_check_num_args("triangle_t::triangle_t",0,0)
    result = (triangle_t *)new triangle_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_triangle_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_triangle_t(void *obj) {
triangle_t *arg1 = (triangle_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_triangle_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_triangle_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_triangle_t_attributes[] = {
    { "vertexIndices", _wrap_triangle_t_vertexIndices_get, _wrap_triangle_t_vertexIndices_set },
    { "textureIndices", _wrap_triangle_t_textureIndices_get, _wrap_triangle_t_textureIndices_set },
    {0,0,0}
};
static swig_lua_method swig_triangle_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_triangle_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_triangle_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_triangle_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_triangle_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_triangle_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_triangle_t_Sf_SwigStatic = {
    "triangle_t",
    swig_triangle_t_Sf_SwigStatic_methods,
    swig_triangle_t_Sf_SwigStatic_attributes,
    swig_triangle_t_Sf_SwigStatic_constants,
    swig_triangle_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_triangle_t_bases[] = {0};
static const char *swig_triangle_t_base_names[] = {0};
static swig_lua_class _wrap_class_triangle_t = { "triangle_t", "triangle_t", &SWIGTYPE_p_triangle_t,_proxy__wrap_new_triangle_t, swig_delete_triangle_t, swig_triangle_t_methods, swig_triangle_t_attributes, &swig_triangle_t_Sf_SwigStatic, swig_triangle_t_meta, swig_triangle_t_bases, swig_triangle_t_base_names };

static int _wrap_textureCoordinate_t_s_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    textureCoordinate_t *arg1 = 0 ;
    short arg2 ;
    
    SWIG_check_num_args("textureCoordinate_t::s",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textureCoordinate_t::s",1,"textureCoordinate_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("textureCoordinate_t::s",2,"short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textureCoordinate_t,0))){
      SWIG_fail_ptr("textureCoordinate_t_s_set",1,SWIGTYPE_p_textureCoordinate_t);
    }
    
    arg2 = (short)lua_tonumber(L, 2);
    if (arg1) (arg1)->s = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_textureCoordinate_t_s_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    textureCoordinate_t *arg1 = 0 ;
    short result;
    
    SWIG_check_num_args("textureCoordinate_t::s",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textureCoordinate_t::s",1,"textureCoordinate_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textureCoordinate_t,0))){
      SWIG_fail_ptr("textureCoordinate_t_s_get",1,SWIGTYPE_p_textureCoordinate_t);
    }
    
    result = (short) ((arg1)->s);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_textureCoordinate_t_t_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    textureCoordinate_t *arg1 = 0 ;
    short arg2 ;
    
    SWIG_check_num_args("textureCoordinate_t::t",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textureCoordinate_t::t",1,"textureCoordinate_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("textureCoordinate_t::t",2,"short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textureCoordinate_t,0))){
      SWIG_fail_ptr("textureCoordinate_t_t_set",1,SWIGTYPE_p_textureCoordinate_t);
    }
    
    arg2 = (short)lua_tonumber(L, 2);
    if (arg1) (arg1)->t = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_textureCoordinate_t_t_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    textureCoordinate_t *arg1 = 0 ;
    short result;
    
    SWIG_check_num_args("textureCoordinate_t::t",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textureCoordinate_t::t",1,"textureCoordinate_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textureCoordinate_t,0))){
      SWIG_fail_ptr("textureCoordinate_t_t_get",1,SWIGTYPE_p_textureCoordinate_t);
    }
    
    result = (short) ((arg1)->t);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_textureCoordinate_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    textureCoordinate_t *result = 0 ;
    
    SWIG_check_num_args("textureCoordinate_t::textureCoordinate_t",0,0)
    result = (textureCoordinate_t *)new textureCoordinate_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_textureCoordinate_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_textureCoordinate_t(void *obj) {
textureCoordinate_t *arg1 = (textureCoordinate_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_textureCoordinate_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_textureCoordinate_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_textureCoordinate_t_attributes[] = {
    { "s", _wrap_textureCoordinate_t_s_get, _wrap_textureCoordinate_t_s_set },
    { "t", _wrap_textureCoordinate_t_t_get, _wrap_textureCoordinate_t_t_set },
    {0,0,0}
};
static swig_lua_method swig_textureCoordinate_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_textureCoordinate_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_textureCoordinate_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_textureCoordinate_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_textureCoordinate_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_textureCoordinate_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_textureCoordinate_t_Sf_SwigStatic = {
    "textureCoordinate_t",
    swig_textureCoordinate_t_Sf_SwigStatic_methods,
    swig_textureCoordinate_t_Sf_SwigStatic_attributes,
    swig_textureCoordinate_t_Sf_SwigStatic_constants,
    swig_textureCoordinate_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_textureCoordinate_t_bases[] = {0};
static const char *swig_textureCoordinate_t_base_names[] = {0};
static swig_lua_class _wrap_class_textureCoordinate_t = { "textureCoordinate_t", "textureCoordinate_t", &SWIGTYPE_p_textureCoordinate_t,_proxy__wrap_new_textureCoordinate_t, swig_delete_textureCoordinate_t, swig_textureCoordinate_t_methods, swig_textureCoordinate_t_attributes, &swig_textureCoordinate_t_Sf_SwigStatic, swig_textureCoordinate_t_meta, swig_textureCoordinate_t_bases, swig_textureCoordinate_t_base_names };

static int _wrap_new_CLoaderMD2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD2 *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD2::CLoaderMD2",0,0)
    result = (CLoaderMD2 *)new CLoaderMD2();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLoaderMD2,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD2_poLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD2 *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD2::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD2::poLoad",1,"CLoaderMD2 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLoaderMD2::poLoad",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD2,0))){
      SWIG_fail_ptr("CLoaderMD2_poLoad",1,SWIGTYPE_p_CLoaderMD2);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CLoaderMD2_poLoad",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGSceneNode *)(arg1)->poLoad((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD2_GetNumSkins(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD2 *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CLoaderMD2::GetNumSkins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD2::GetNumSkins",1,"CLoaderMD2 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD2,0))){
      SWIG_fail_ptr("CLoaderMD2_GetNumSkins",1,SWIGTYPE_p_CLoaderMD2);
    }
    
    result = (int)(arg1)->GetNumSkins();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD2_GetSkin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD2 *arg1 = 0 ;
    int arg2 ;
    char *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD2::GetSkin",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD2::GetSkin",1,"CLoaderMD2 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLoaderMD2::GetSkin",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD2,0))){
      SWIG_fail_ptr("CLoaderMD2_GetSkin",1,SWIGTYPE_p_CLoaderMD2);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (char *)(arg1)->GetSkin(arg2);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD2_GetNumFrames(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD2 *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CLoaderMD2::GetNumFrames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD2::GetNumFrames",1,"CLoaderMD2 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD2,0))){
      SWIG_fail_ptr("CLoaderMD2_GetNumFrames",1,SWIGTYPE_p_CLoaderMD2);
    }
    
    result = (int)(arg1)->GetNumFrames();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD2_pLoadQ2Player(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD2 *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGSceneAnimActionSet *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD2::pLoadQ2Player",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD2::pLoadQ2Player",1,"CLoaderMD2 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLoaderMD2::pLoadQ2Player",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD2,0))){
      SWIG_fail_ptr("CLoaderMD2_pLoadQ2Player",1,SWIGTYPE_p_CLoaderMD2);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CLoaderMD2_pLoadQ2Player",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGSceneAnimActionSet *)(arg1)->pLoadQ2Player((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimActionSet,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLoaderMD2(void *obj) {
CLoaderMD2 *arg1 = (CLoaderMD2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLoaderMD2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLoaderMD2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLoaderMD2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLoaderMD2_methods[]= {
    { "poLoad", _wrap_CLoaderMD2_poLoad},
    { "GetNumSkins", _wrap_CLoaderMD2_GetNumSkins},
    { "GetSkin", _wrap_CLoaderMD2_GetSkin},
    { "GetNumFrames", _wrap_CLoaderMD2_GetNumFrames},
    { "pLoadQ2Player", _wrap_CLoaderMD2_pLoadQ2Player},
    {0,0}
};
static swig_lua_method swig_CLoaderMD2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLoaderMD2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLoaderMD2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLoaderMD2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLoaderMD2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLoaderMD2_Sf_SwigStatic = {
    "CLoaderMD2",
    swig_CLoaderMD2_Sf_SwigStatic_methods,
    swig_CLoaderMD2_Sf_SwigStatic_attributes,
    swig_CLoaderMD2_Sf_SwigStatic_constants,
    swig_CLoaderMD2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLoaderMD2_bases[] = {0,0};
static const char *swig_CLoaderMD2_base_names[] = {"C3DLoader *",0};
static swig_lua_class _wrap_class_CLoaderMD2 = { "CLoaderMD2", "CLoaderMD2", &SWIGTYPE_p_CLoaderMD2,_proxy__wrap_new_CLoaderMD2, swig_delete_CLoaderMD2, swig_CLoaderMD2_methods, swig_CLoaderMD2_attributes, &swig_CLoaderMD2_Sf_SwigStatic, swig_CLoaderMD2_meta, swig_CLoaderMD2_bases, swig_CLoaderMD2_base_names };

static int _wrap_md3_header_t_id_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("md3_header_t::id",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::id",1,"md3_header_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("md3_header_t::id",2,"char [4]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_id_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->id, (const char *)arg2, 4-1);
        arg1->id[4-1] = 0;
      } else {
        arg1->id[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_id_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("md3_header_t::id",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::id",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_id_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (char *)(char *) ((arg1)->id);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_version_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::version",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::version",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::version",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_version_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->version = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_version_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::version",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::version",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_version_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->version);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_filename_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("md3_header_t::filename",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::filename",1,"md3_header_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("md3_header_t::filename",2,"char [68]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_filename_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->filename, (const char *)arg2, 68-1);
        arg1->filename[68-1] = 0;
      } else {
        arg1->filename[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_filename_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("md3_header_t::filename",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::filename",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_filename_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (char *)(char *) ((arg1)->filename);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numBoneFrames_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::numBoneFrames",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numBoneFrames",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::numBoneFrames",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numBoneFrames_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numBoneFrames = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numBoneFrames_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::numBoneFrames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numBoneFrames",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numBoneFrames_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->numBoneFrames);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numTags_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::numTags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numTags",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::numTags",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numTags_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numTags = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numTags_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::numTags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numTags",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numTags_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->numTags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numMeshes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::numMeshes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numMeshes",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::numMeshes",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numMeshes_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numMeshes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numMeshes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::numMeshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numMeshes",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numMeshes_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->numMeshes);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numMaxSkins_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::numMaxSkins",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numMaxSkins",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::numMaxSkins",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numMaxSkins_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numMaxSkins = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_numMaxSkins_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::numMaxSkins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::numMaxSkins",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_numMaxSkins_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->numMaxSkins);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_headerlength_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::headerlength",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::headerlength",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::headerlength",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_headerlength_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->headerlength = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_headerlength_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::headerlength",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::headerlength",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_headerlength_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->headerlength);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_tag_start_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::tag_start",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::tag_start",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::tag_start",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_tag_start_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->tag_start = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_tag_start_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::tag_start",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::tag_start",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_tag_start_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->tag_start);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_tag_end_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::tag_end",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::tag_end",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::tag_end",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_tag_end_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->tag_end = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_tag_end_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::tag_end",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::tag_end",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_tag_end_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->tag_end);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_filesize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("md3_header_t::filesize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::filesize",1,"md3_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("md3_header_t::filesize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_filesize_set",1,SWIGTYPE_p_md3_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->filesize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_md3_header_t_filesize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("md3_header_t::filesize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("md3_header_t::filesize",1,"md3_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_md3_header_t,0))){
      SWIG_fail_ptr("md3_header_t_filesize_get",1,SWIGTYPE_p_md3_header_t);
    }
    
    result = (int) ((arg1)->filesize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_md3_header_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    md3_header_t *result = 0 ;
    
    SWIG_check_num_args("md3_header_t::md3_header_t",0,0)
    result = (md3_header_t *)new md3_header_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_md3_header_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_md3_header_t(void *obj) {
md3_header_t *arg1 = (md3_header_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_md3_header_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_md3_header_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_md3_header_t_attributes[] = {
    { "id", _wrap_md3_header_t_id_get, _wrap_md3_header_t_id_set },
    { "version", _wrap_md3_header_t_version_get, _wrap_md3_header_t_version_set },
    { "filename", _wrap_md3_header_t_filename_get, _wrap_md3_header_t_filename_set },
    { "numBoneFrames", _wrap_md3_header_t_numBoneFrames_get, _wrap_md3_header_t_numBoneFrames_set },
    { "numTags", _wrap_md3_header_t_numTags_get, _wrap_md3_header_t_numTags_set },
    { "numMeshes", _wrap_md3_header_t_numMeshes_get, _wrap_md3_header_t_numMeshes_set },
    { "numMaxSkins", _wrap_md3_header_t_numMaxSkins_get, _wrap_md3_header_t_numMaxSkins_set },
    { "headerlength", _wrap_md3_header_t_headerlength_get, _wrap_md3_header_t_headerlength_set },
    { "tag_start", _wrap_md3_header_t_tag_start_get, _wrap_md3_header_t_tag_start_set },
    { "tag_end", _wrap_md3_header_t_tag_end_get, _wrap_md3_header_t_tag_end_set },
    { "filesize", _wrap_md3_header_t_filesize_get, _wrap_md3_header_t_filesize_set },
    {0,0,0}
};
static swig_lua_method swig_md3_header_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_md3_header_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_md3_header_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_md3_header_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_md3_header_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_md3_header_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_md3_header_t_Sf_SwigStatic = {
    "md3_header_t",
    swig_md3_header_t_Sf_SwigStatic_methods,
    swig_md3_header_t_Sf_SwigStatic_attributes,
    swig_md3_header_t_Sf_SwigStatic_constants,
    swig_md3_header_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_md3_header_t_bases[] = {0};
static const char *swig_md3_header_t_base_names[] = {0};
static swig_lua_class _wrap_class_md3_header_t = { "md3_header_t", "md3_header_t", &SWIGTYPE_p_md3_header_t,_proxy__wrap_new_md3_header_t, swig_delete_md3_header_t, swig_md3_header_t_methods, swig_md3_header_t_attributes, &swig_md3_header_t_Sf_SwigStatic, swig_md3_header_t_meta, swig_md3_header_t_bases, swig_md3_header_t_base_names };

static int _wrap_boneframe_t_mins_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("boneframe_t::mins",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::mins",1,"boneframe_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("boneframe_t::mins",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_mins_set",1,SWIGTYPE_p_boneframe_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("boneframe_t_mins_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->mins;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_mins_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("boneframe_t::mins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::mins",1,"boneframe_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_mins_get",1,SWIGTYPE_p_boneframe_t);
    }
    
    result = (float *)(float *) ((arg1)->mins);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_maxs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("boneframe_t::maxs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::maxs",1,"boneframe_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("boneframe_t::maxs",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_maxs_set",1,SWIGTYPE_p_boneframe_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("boneframe_t_maxs_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->maxs;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_maxs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("boneframe_t::maxs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::maxs",1,"boneframe_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_maxs_get",1,SWIGTYPE_p_boneframe_t);
    }
    
    result = (float *)(float *) ((arg1)->maxs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_position_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("boneframe_t::position",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::position",1,"boneframe_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("boneframe_t::position",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_position_set",1,SWIGTYPE_p_boneframe_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("boneframe_t_position_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->position;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_position_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("boneframe_t::position",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::position",1,"boneframe_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_position_get",1,SWIGTYPE_p_boneframe_t);
    }
    
    result = (float *)(float *) ((arg1)->position);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_scale_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("boneframe_t::scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::scale",1,"boneframe_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("boneframe_t::scale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_scale_set",1,SWIGTYPE_p_boneframe_t);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->scale = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_scale_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("boneframe_t::scale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::scale",1,"boneframe_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_scale_get",1,SWIGTYPE_p_boneframe_t);
    }
    
    result = (float) ((arg1)->scale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_creator_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("boneframe_t::creator",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::creator",1,"boneframe_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("boneframe_t::creator",2,"char [16]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_creator_set",1,SWIGTYPE_p_boneframe_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->creator, (const char *)arg2, 16-1);
        arg1->creator[16-1] = 0;
      } else {
        arg1->creator[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_boneframe_t_creator_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("boneframe_t::creator",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneframe_t::creator",1,"boneframe_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boneframe_t,0))){
      SWIG_fail_ptr("boneframe_t_creator_get",1,SWIGTYPE_p_boneframe_t);
    }
    
    result = (char *)(char *) ((arg1)->creator);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_boneframe_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    boneframe_t *result = 0 ;
    
    SWIG_check_num_args("boneframe_t::boneframe_t",0,0)
    result = (boneframe_t *)new boneframe_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_boneframe_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_boneframe_t(void *obj) {
boneframe_t *arg1 = (boneframe_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_boneframe_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_boneframe_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_boneframe_t_attributes[] = {
    { "mins", _wrap_boneframe_t_mins_get, _wrap_boneframe_t_mins_set },
    { "maxs", _wrap_boneframe_t_maxs_get, _wrap_boneframe_t_maxs_set },
    { "position", _wrap_boneframe_t_position_get, _wrap_boneframe_t_position_set },
    { "scale", _wrap_boneframe_t_scale_get, _wrap_boneframe_t_scale_set },
    { "creator", _wrap_boneframe_t_creator_get, _wrap_boneframe_t_creator_set },
    {0,0,0}
};
static swig_lua_method swig_boneframe_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_boneframe_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_boneframe_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_boneframe_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_boneframe_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_boneframe_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_boneframe_t_Sf_SwigStatic = {
    "boneframe_t",
    swig_boneframe_t_Sf_SwigStatic_methods,
    swig_boneframe_t_Sf_SwigStatic_attributes,
    swig_boneframe_t_Sf_SwigStatic_constants,
    swig_boneframe_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_boneframe_t_bases[] = {0};
static const char *swig_boneframe_t_base_names[] = {0};
static swig_lua_class _wrap_class_boneframe_t = { "boneframe_t", "boneframe_t", &SWIGTYPE_p_boneframe_t,_proxy__wrap_new_boneframe_t, swig_delete_boneframe_t, swig_boneframe_t_methods, swig_boneframe_t_attributes, &swig_boneframe_t_Sf_SwigStatic, swig_boneframe_t_meta, swig_boneframe_t_bases, swig_boneframe_t_base_names };

static int _wrap_tag_t_name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    tag_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("tag_t::name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tag_t::name",1,"tag_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("tag_t::name",2,"char [64]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tag_t,0))){
      SWIG_fail_ptr("tag_t_name_set",1,SWIGTYPE_p_tag_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->name, (const char *)arg2, 64-1);
        arg1->name[64-1] = 0;
      } else {
        arg1->name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_tag_t_name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    tag_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("tag_t::name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tag_t::name",1,"tag_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tag_t,0))){
      SWIG_fail_ptr("tag_t_name_get",1,SWIGTYPE_p_tag_t);
    }
    
    result = (char *)(char *) ((arg1)->name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_tag_t_position_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    tag_t *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("tag_t::position",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tag_t::position",1,"tag_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("tag_t::position",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tag_t,0))){
      SWIG_fail_ptr("tag_t_position_set",1,SWIGTYPE_p_tag_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("tag_t_position_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->position;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_tag_t_position_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    tag_t *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("tag_t::position",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tag_t::position",1,"tag_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tag_t,0))){
      SWIG_fail_ptr("tag_t_position_get",1,SWIGTYPE_p_tag_t);
    }
    
    result = (float *)(float *) ((arg1)->position);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_tag_t_rotation_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    tag_t *arg1 = 0 ;
    float (*arg2)[3] = (float (*)[3])0 ;
    
    SWIG_check_num_args("tag_t::rotation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tag_t::rotation",1,"tag_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("tag_t::rotation",2,"float [3][3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tag_t,0))){
      SWIG_fail_ptr("tag_t_rotation_set",1,SWIGTYPE_p_tag_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_a_3__float,0))){
      SWIG_fail_ptr("tag_t_rotation_set",2,SWIGTYPE_p_a_3__float);
    }
    
    {
      float (*inp)[3] = (float (*)[3])(arg2);
      float (*dest)[3] = (float (*)[3])(arg1->rotation);
      size_t ii = 0;
      for (; ii < 3; ++ii) {
        float *ip = inp[ii];
        float *dp = dest[ii];
        size_t jj = 0;
        for (; jj < 3; ++jj) dp[jj] = ip[jj];
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_tag_t_rotation_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    tag_t *arg1 = 0 ;
    float (*result)[3] = 0 ;
    
    SWIG_check_num_args("tag_t::rotation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tag_t::rotation",1,"tag_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tag_t,0))){
      SWIG_fail_ptr("tag_t_rotation_get",1,SWIGTYPE_p_tag_t);
    }
    
    result = (float (*)[3])(float (*)[3]) ((arg1)->rotation);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_a_3__float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_tag_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    tag_t *result = 0 ;
    
    SWIG_check_num_args("tag_t::tag_t",0,0)
    result = (tag_t *)new tag_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_tag_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_tag_t(void *obj) {
tag_t *arg1 = (tag_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_tag_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_tag_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_tag_t_attributes[] = {
    { "name", _wrap_tag_t_name_get, _wrap_tag_t_name_set },
    { "position", _wrap_tag_t_position_get, _wrap_tag_t_position_set },
    { "rotation", _wrap_tag_t_rotation_get, _wrap_tag_t_rotation_set },
    {0,0,0}
};
static swig_lua_method swig_tag_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_tag_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_tag_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_tag_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_tag_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_tag_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_tag_t_Sf_SwigStatic = {
    "tag_t",
    swig_tag_t_Sf_SwigStatic_methods,
    swig_tag_t_Sf_SwigStatic_attributes,
    swig_tag_t_Sf_SwigStatic_constants,
    swig_tag_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_tag_t_bases[] = {0};
static const char *swig_tag_t_base_names[] = {0};
static swig_lua_class _wrap_class_tag_t = { "tag_t", "tag_t", &SWIGTYPE_p_tag_t,_proxy__wrap_new_tag_t, swig_delete_tag_t, swig_tag_t_methods, swig_tag_t_attributes, &swig_tag_t_Sf_SwigStatic, swig_tag_t_meta, swig_tag_t_bases, swig_tag_t_base_names };

static int _wrap_mesh_header_t_id_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("mesh_header_t::id",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::id",1,"mesh_header_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("mesh_header_t::id",2,"char [4]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_id_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->id, (const char *)arg2, 4-1);
        arg1->id[4-1] = 0;
      } else {
        arg1->id[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_id_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("mesh_header_t::id",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::id",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_id_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (char *)(char *) ((arg1)->id);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("mesh_header_t::name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::name",1,"mesh_header_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("mesh_header_t::name",2,"char [68]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_name_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->name, (const char *)arg2, 68-1);
        arg1->name[68-1] = 0;
      } else {
        arg1->name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("mesh_header_t::name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::name",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_name_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (char *)(char *) ((arg1)->name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numMeshFrames_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::numMeshFrames",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numMeshFrames",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::numMeshFrames",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numMeshFrames_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numMeshFrames = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numMeshFrames_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::numMeshFrames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numMeshFrames",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numMeshFrames_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->numMeshFrames);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numSkins_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::numSkins",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numSkins",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::numSkins",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numSkins_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numSkins = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numSkins_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::numSkins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numSkins",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numSkins_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->numSkins);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numVertexs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::numVertexs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numVertexs",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::numVertexs",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numVertexs_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numVertexs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numVertexs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::numVertexs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numVertexs",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numVertexs_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->numVertexs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numTriangles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::numTriangles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numTriangles",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::numTriangles",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numTriangles_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->numTriangles = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_numTriangles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::numTriangles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::numTriangles",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_numTriangles_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->numTriangles);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_tri_start_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::tri_start",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::tri_start",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::tri_start",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_tri_start_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->tri_start = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_tri_start_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::tri_start",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::tri_start",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_tri_start_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->tri_start);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_headersize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::headersize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::headersize",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::headersize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_headersize_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->headersize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_headersize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::headersize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::headersize",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_headersize_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->headersize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_texvec_start_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::texvec_start",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::texvec_start",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::texvec_start",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_texvec_start_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->texvec_start = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_texvec_start_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::texvec_start",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::texvec_start",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_texvec_start_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->texvec_start);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_vertex_start_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::vertex_start",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::vertex_start",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::vertex_start",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_vertex_start_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->vertex_start = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_vertex_start_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::vertex_start",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::vertex_start",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_vertex_start_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->vertex_start);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_meshsize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("mesh_header_t::meshsize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::meshsize",1,"mesh_header_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_header_t::meshsize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_meshsize_set",1,SWIGTYPE_p_mesh_header_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->meshsize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_header_t_meshsize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("mesh_header_t::meshsize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_header_t::meshsize",1,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_header_t_meshsize_get",1,SWIGTYPE_p_mesh_header_t);
    }
    
    result = (int) ((arg1)->meshsize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_mesh_header_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_header_t *result = 0 ;
    
    SWIG_check_num_args("mesh_header_t::mesh_header_t",0,0)
    result = (mesh_header_t *)new mesh_header_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_mesh_header_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_mesh_header_t(void *obj) {
mesh_header_t *arg1 = (mesh_header_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_mesh_header_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mesh_header_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mesh_header_t_attributes[] = {
    { "id", _wrap_mesh_header_t_id_get, _wrap_mesh_header_t_id_set },
    { "name", _wrap_mesh_header_t_name_get, _wrap_mesh_header_t_name_set },
    { "numMeshFrames", _wrap_mesh_header_t_numMeshFrames_get, _wrap_mesh_header_t_numMeshFrames_set },
    { "numSkins", _wrap_mesh_header_t_numSkins_get, _wrap_mesh_header_t_numSkins_set },
    { "numVertexs", _wrap_mesh_header_t_numVertexs_get, _wrap_mesh_header_t_numVertexs_set },
    { "numTriangles", _wrap_mesh_header_t_numTriangles_get, _wrap_mesh_header_t_numTriangles_set },
    { "tri_start", _wrap_mesh_header_t_tri_start_get, _wrap_mesh_header_t_tri_start_set },
    { "headersize", _wrap_mesh_header_t_headersize_get, _wrap_mesh_header_t_headersize_set },
    { "texvec_start", _wrap_mesh_header_t_texvec_start_get, _wrap_mesh_header_t_texvec_start_set },
    { "vertex_start", _wrap_mesh_header_t_vertex_start_get, _wrap_mesh_header_t_vertex_start_set },
    { "meshsize", _wrap_mesh_header_t_meshsize_get, _wrap_mesh_header_t_meshsize_set },
    {0,0,0}
};
static swig_lua_method swig_mesh_header_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_mesh_header_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mesh_header_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mesh_header_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mesh_header_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mesh_header_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mesh_header_t_Sf_SwigStatic = {
    "mesh_header_t",
    swig_mesh_header_t_Sf_SwigStatic_methods,
    swig_mesh_header_t_Sf_SwigStatic_attributes,
    swig_mesh_header_t_Sf_SwigStatic_constants,
    swig_mesh_header_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mesh_header_t_bases[] = {0};
static const char *swig_mesh_header_t_base_names[] = {0};
static swig_lua_class _wrap_class_mesh_header_t = { "mesh_header_t", "mesh_header_t", &SWIGTYPE_p_mesh_header_t,_proxy__wrap_new_mesh_header_t, swig_delete_mesh_header_t, swig_mesh_header_t_methods, swig_mesh_header_t_attributes, &swig_mesh_header_t_Sf_SwigStatic, swig_mesh_header_t_meta, swig_mesh_header_t_bases, swig_mesh_header_t_base_names };

static int _wrap_skin_t_name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("skin_t::name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_t::name",1,"skin_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("skin_t::name",2,"char [68]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_t,0))){
      SWIG_fail_ptr("skin_t_name_set",1,SWIGTYPE_p_skin_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->name, (const char *)arg2, 68-1);
        arg1->name[68-1] = 0;
      } else {
        arg1->name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_t_name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("skin_t::name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_t::name",1,"skin_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_t,0))){
      SWIG_fail_ptr("skin_t_name_get",1,SWIGTYPE_p_skin_t);
    }
    
    result = (char *)(char *) ((arg1)->name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_skin_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_t *result = 0 ;
    
    SWIG_check_num_args("skin_t::skin_t",0,0)
    result = (skin_t *)new skin_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_skin_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_skin_t(void *obj) {
skin_t *arg1 = (skin_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_skin_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_skin_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_skin_t_attributes[] = {
    { "name", _wrap_skin_t_name_get, _wrap_skin_t_name_set },
    {0,0,0}
};
static swig_lua_method swig_skin_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_skin_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_skin_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_skin_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_skin_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_skin_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_skin_t_Sf_SwigStatic = {
    "skin_t",
    swig_skin_t_Sf_SwigStatic_methods,
    swig_skin_t_Sf_SwigStatic_attributes,
    swig_skin_t_Sf_SwigStatic_constants,
    swig_skin_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_skin_t_bases[] = {0};
static const char *swig_skin_t_base_names[] = {0};
static swig_lua_class _wrap_class_skin_t = { "skin_t", "skin_t", &SWIGTYPE_p_skin_t,_proxy__wrap_new_skin_t, swig_delete_skin_t, swig_skin_t_methods, swig_skin_t_attributes, &swig_skin_t_Sf_SwigStatic, swig_skin_t_meta, swig_skin_t_bases, swig_skin_t_base_names };

static int _wrap_skin_tag_entry_t_name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_tag_entry_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("skin_tag_entry_t::name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_tag_entry_t::name",1,"skin_tag_entry_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("skin_tag_entry_t::name",2,"char [68]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_tag_entry_t,0))){
      SWIG_fail_ptr("skin_tag_entry_t_name_set",1,SWIGTYPE_p_skin_tag_entry_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->name, (const char *)arg2, 68-1);
        arg1->name[68-1] = 0;
      } else {
        arg1->name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_tag_entry_t_name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_tag_entry_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("skin_tag_entry_t::name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_tag_entry_t::name",1,"skin_tag_entry_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_tag_entry_t,0))){
      SWIG_fail_ptr("skin_tag_entry_t_name_get",1,SWIGTYPE_p_skin_tag_entry_t);
    }
    
    result = (char *)(char *) ((arg1)->name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_skin_tag_entry_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_tag_entry_t *result = 0 ;
    
    SWIG_check_num_args("skin_tag_entry_t::skin_tag_entry_t",0,0)
    result = (skin_tag_entry_t *)new skin_tag_entry_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_skin_tag_entry_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_skin_tag_entry_t(void *obj) {
skin_tag_entry_t *arg1 = (skin_tag_entry_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_skin_tag_entry_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_skin_tag_entry_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_skin_tag_entry_t_attributes[] = {
    { "name", _wrap_skin_tag_entry_t_name_get, _wrap_skin_tag_entry_t_name_set },
    {0,0,0}
};
static swig_lua_method swig_skin_tag_entry_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_skin_tag_entry_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_skin_tag_entry_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_skin_tag_entry_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_skin_tag_entry_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_skin_tag_entry_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_skin_tag_entry_t_Sf_SwigStatic = {
    "skin_tag_entry_t",
    swig_skin_tag_entry_t_Sf_SwigStatic_methods,
    swig_skin_tag_entry_t_Sf_SwigStatic_attributes,
    swig_skin_tag_entry_t_Sf_SwigStatic_constants,
    swig_skin_tag_entry_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_skin_tag_entry_t_bases[] = {0};
static const char *swig_skin_tag_entry_t_base_names[] = {0};
static swig_lua_class _wrap_class_skin_tag_entry_t = { "skin_tag_entry_t", "skin_tag_entry_t", &SWIGTYPE_p_skin_tag_entry_t,_proxy__wrap_new_skin_tag_entry_t, swig_delete_skin_tag_entry_t, swig_skin_tag_entry_t_methods, swig_skin_tag_entry_t_attributes, &swig_skin_tag_entry_t_Sf_SwigStatic, swig_skin_tag_entry_t_meta, swig_skin_tag_entry_t_bases, swig_skin_tag_entry_t_base_names };

static int _wrap_skin_mesh_entry_t_name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_mesh_entry_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("skin_mesh_entry_t::name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_mesh_entry_t::name",1,"skin_mesh_entry_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("skin_mesh_entry_t::name",2,"char [68]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_mesh_entry_t,0))){
      SWIG_fail_ptr("skin_mesh_entry_t_name_set",1,SWIGTYPE_p_skin_mesh_entry_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->name, (const char *)arg2, 68-1);
        arg1->name[68-1] = 0;
      } else {
        arg1->name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_mesh_entry_t_name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_mesh_entry_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("skin_mesh_entry_t::name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_mesh_entry_t::name",1,"skin_mesh_entry_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_mesh_entry_t,0))){
      SWIG_fail_ptr("skin_mesh_entry_t_name_get",1,SWIGTYPE_p_skin_mesh_entry_t);
    }
    
    result = (char *)(char *) ((arg1)->name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_mesh_entry_t_texture_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_mesh_entry_t *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("skin_mesh_entry_t::texture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_mesh_entry_t::texture",1,"skin_mesh_entry_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("skin_mesh_entry_t::texture",2,"char [68]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_mesh_entry_t,0))){
      SWIG_fail_ptr("skin_mesh_entry_t_texture_set",1,SWIGTYPE_p_skin_mesh_entry_t);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->texture, (const char *)arg2, 68-1);
        arg1->texture[68-1] = 0;
      } else {
        arg1->texture[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_mesh_entry_t_texture_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_mesh_entry_t *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("skin_mesh_entry_t::texture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_mesh_entry_t::texture",1,"skin_mesh_entry_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_mesh_entry_t,0))){
      SWIG_fail_ptr("skin_mesh_entry_t_texture_get",1,SWIGTYPE_p_skin_mesh_entry_t);
    }
    
    result = (char *)(char *) ((arg1)->texture);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_skin_mesh_entry_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_mesh_entry_t *result = 0 ;
    
    SWIG_check_num_args("skin_mesh_entry_t::skin_mesh_entry_t",0,0)
    result = (skin_mesh_entry_t *)new skin_mesh_entry_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_skin_mesh_entry_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_skin_mesh_entry_t(void *obj) {
skin_mesh_entry_t *arg1 = (skin_mesh_entry_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_skin_mesh_entry_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_skin_mesh_entry_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_skin_mesh_entry_t_attributes[] = {
    { "name", _wrap_skin_mesh_entry_t_name_get, _wrap_skin_mesh_entry_t_name_set },
    { "texture", _wrap_skin_mesh_entry_t_texture_get, _wrap_skin_mesh_entry_t_texture_set },
    {0,0,0}
};
static swig_lua_method swig_skin_mesh_entry_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_skin_mesh_entry_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_skin_mesh_entry_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_skin_mesh_entry_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_skin_mesh_entry_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_skin_mesh_entry_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_skin_mesh_entry_t_Sf_SwigStatic = {
    "skin_mesh_entry_t",
    swig_skin_mesh_entry_t_Sf_SwigStatic_methods,
    swig_skin_mesh_entry_t_Sf_SwigStatic_attributes,
    swig_skin_mesh_entry_t_Sf_SwigStatic_constants,
    swig_skin_mesh_entry_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_skin_mesh_entry_t_bases[] = {0};
static const char *swig_skin_mesh_entry_t_base_names[] = {0};
static swig_lua_class _wrap_class_skin_mesh_entry_t = { "skin_mesh_entry_t", "skin_mesh_entry_t", &SWIGTYPE_p_skin_mesh_entry_t,_proxy__wrap_new_skin_mesh_entry_t, swig_delete_skin_mesh_entry_t, swig_skin_mesh_entry_t_methods, swig_skin_mesh_entry_t_attributes, &swig_skin_mesh_entry_t_Sf_SwigStatic, swig_skin_mesh_entry_t_meta, swig_skin_mesh_entry_t_bases, swig_skin_mesh_entry_t_base_names };

static int _wrap_skin_file_t_skinmeshes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    skin_mesh_entry_t *arg2 = 0 ;
    
    SWIG_check_num_args("skin_file_t::skinmeshes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::skinmeshes",1,"skin_file_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("skin_file_t::skinmeshes",2,"skin_mesh_entry_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_skinmeshes_set",1,SWIGTYPE_p_skin_file_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_skin_mesh_entry_t,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("skin_file_t_skinmeshes_set",2,SWIGTYPE_p_skin_mesh_entry_t);
    }
    
    if (arg1) (arg1)->skinmeshes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_file_t_skinmeshes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    skin_mesh_entry_t *result = 0 ;
    
    SWIG_check_num_args("skin_file_t::skinmeshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::skinmeshes",1,"skin_file_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_skinmeshes_get",1,SWIGTYPE_p_skin_file_t);
    }
    
    result = (skin_mesh_entry_t *) ((arg1)->skinmeshes);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_skin_mesh_entry_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_file_t_iNumSkinMeshes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("skin_file_t::iNumSkinMeshes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::iNumSkinMeshes",1,"skin_file_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("skin_file_t::iNumSkinMeshes",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_iNumSkinMeshes_set",1,SWIGTYPE_p_skin_file_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumSkinMeshes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_file_t_iNumSkinMeshes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("skin_file_t::iNumSkinMeshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::iNumSkinMeshes",1,"skin_file_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_iNumSkinMeshes_get",1,SWIGTYPE_p_skin_file_t);
    }
    
    result = (int) ((arg1)->iNumSkinMeshes);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_file_t_skintags_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    skin_tag_entry_t *arg2 = 0 ;
    
    SWIG_check_num_args("skin_file_t::skintags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::skintags",1,"skin_file_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("skin_file_t::skintags",2,"skin_tag_entry_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_skintags_set",1,SWIGTYPE_p_skin_file_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_skin_tag_entry_t,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("skin_file_t_skintags_set",2,SWIGTYPE_p_skin_tag_entry_t);
    }
    
    if (arg1) (arg1)->skintags = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_file_t_skintags_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    skin_tag_entry_t *result = 0 ;
    
    SWIG_check_num_args("skin_file_t::skintags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::skintags",1,"skin_file_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_skintags_get",1,SWIGTYPE_p_skin_file_t);
    }
    
    result = (skin_tag_entry_t *) ((arg1)->skintags);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_skin_tag_entry_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_file_t_iNumSkinTags_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("skin_file_t::iNumSkinTags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::iNumSkinTags",1,"skin_file_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("skin_file_t::iNumSkinTags",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_iNumSkinTags_set",1,SWIGTYPE_p_skin_file_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumSkinTags = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_skin_file_t_iNumSkinTags_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("skin_file_t::iNumSkinTags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skin_file_t::iNumSkinTags",1,"skin_file_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_skin_file_t,0))){
      SWIG_fail_ptr("skin_file_t_iNumSkinTags_get",1,SWIGTYPE_p_skin_file_t);
    }
    
    result = (int) ((arg1)->iNumSkinTags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_skin_file_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    skin_file_t *result = 0 ;
    
    SWIG_check_num_args("skin_file_t::skin_file_t",0,0)
    result = (skin_file_t *)new skin_file_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_skin_file_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_skin_file_t(void *obj) {
skin_file_t *arg1 = (skin_file_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_skin_file_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_skin_file_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_skin_file_t_attributes[] = {
    { "skinmeshes", _wrap_skin_file_t_skinmeshes_get, _wrap_skin_file_t_skinmeshes_set },
    { "iNumSkinMeshes", _wrap_skin_file_t_iNumSkinMeshes_get, _wrap_skin_file_t_iNumSkinMeshes_set },
    { "skintags", _wrap_skin_file_t_skintags_get, _wrap_skin_file_t_skintags_set },
    { "iNumSkinTags", _wrap_skin_file_t_iNumSkinTags_get, _wrap_skin_file_t_iNumSkinTags_set },
    {0,0,0}
};
static swig_lua_method swig_skin_file_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_skin_file_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_skin_file_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_skin_file_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_skin_file_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_skin_file_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_skin_file_t_Sf_SwigStatic = {
    "skin_file_t",
    swig_skin_file_t_Sf_SwigStatic_methods,
    swig_skin_file_t_Sf_SwigStatic_attributes,
    swig_skin_file_t_Sf_SwigStatic_constants,
    swig_skin_file_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_skin_file_t_bases[] = {0};
static const char *swig_skin_file_t_base_names[] = {0};
static swig_lua_class _wrap_class_skin_file_t = { "skin_file_t", "skin_file_t", &SWIGTYPE_p_skin_file_t,_proxy__wrap_new_skin_file_t, swig_delete_skin_file_t, swig_skin_file_t_methods, swig_skin_file_t_attributes, &swig_skin_file_t_Sf_SwigStatic, swig_skin_file_t_meta, swig_skin_file_t_bases, swig_skin_file_t_base_names };

static int _wrap_Q3triangle_t_vertex_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    Q3triangle_t *arg1 = 0 ;
    int *arg2 = (int *)0 ;
    
    SWIG_check_num_args("Q3triangle_t::vertex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Q3triangle_t::vertex",1,"Q3triangle_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Q3triangle_t::vertex",2,"int [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Q3triangle_t,0))){
      SWIG_fail_ptr("Q3triangle_t_vertex_set",1,SWIGTYPE_p_Q3triangle_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("Q3triangle_t_vertex_set",2,SWIGTYPE_p_int);
    }
    
    {
      size_t ii;
      int *b = (int *) arg1->vertex;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_Q3triangle_t_vertex_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    Q3triangle_t *arg1 = 0 ;
    int *result = 0 ;
    
    SWIG_check_num_args("Q3triangle_t::vertex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Q3triangle_t::vertex",1,"Q3triangle_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Q3triangle_t,0))){
      SWIG_fail_ptr("Q3triangle_t_vertex_get",1,SWIGTYPE_p_Q3triangle_t);
    }
    
    result = (int *)(int *) ((arg1)->vertex);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_Q3triangle_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    Q3triangle_t *result = 0 ;
    
    SWIG_check_num_args("Q3triangle_t::Q3triangle_t",0,0)
    result = (Q3triangle_t *)new Q3triangle_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_Q3triangle_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_Q3triangle_t(void *obj) {
Q3triangle_t *arg1 = (Q3triangle_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_Q3triangle_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Q3triangle_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Q3triangle_t_attributes[] = {
    { "vertex", _wrap_Q3triangle_t_vertex_get, _wrap_Q3triangle_t_vertex_set },
    {0,0,0}
};
static swig_lua_method swig_Q3triangle_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_Q3triangle_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Q3triangle_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Q3triangle_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Q3triangle_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Q3triangle_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Q3triangle_t_Sf_SwigStatic = {
    "Q3triangle_t",
    swig_Q3triangle_t_Sf_SwigStatic_methods,
    swig_Q3triangle_t_Sf_SwigStatic_attributes,
    swig_Q3triangle_t_Sf_SwigStatic_constants,
    swig_Q3triangle_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Q3triangle_t_bases[] = {0};
static const char *swig_Q3triangle_t_base_names[] = {0};
static swig_lua_class _wrap_class_Q3triangle_t = { "Q3triangle_t", "Q3triangle_t", &SWIGTYPE_p_Q3triangle_t,_proxy__wrap_new_Q3triangle_t, swig_delete_Q3triangle_t, swig_Q3triangle_t_methods, swig_Q3triangle_t_attributes, &swig_Q3triangle_t_Sf_SwigStatic, swig_Q3triangle_t_meta, swig_Q3triangle_t_bases, swig_Q3triangle_t_base_names };

static int _wrap_tex_coord_t_texvec_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    tex_coord_t *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("tex_coord_t::texvec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tex_coord_t::texvec",1,"tex_coord_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("tex_coord_t::texvec",2,"float [2]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tex_coord_t,0))){
      SWIG_fail_ptr("tex_coord_t_texvec_set",1,SWIGTYPE_p_tex_coord_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("tex_coord_t_texvec_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->texvec;
      for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_tex_coord_t_texvec_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    tex_coord_t *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("tex_coord_t::texvec",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tex_coord_t::texvec",1,"tex_coord_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_tex_coord_t,0))){
      SWIG_fail_ptr("tex_coord_t_texvec_get",1,SWIGTYPE_p_tex_coord_t);
    }
    
    result = (float *)(float *) ((arg1)->texvec);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_tex_coord_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    tex_coord_t *result = 0 ;
    
    SWIG_check_num_args("tex_coord_t::tex_coord_t",0,0)
    result = (tex_coord_t *)new tex_coord_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_tex_coord_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_tex_coord_t(void *obj) {
tex_coord_t *arg1 = (tex_coord_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_tex_coord_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_tex_coord_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_tex_coord_t_attributes[] = {
    { "texvec", _wrap_tex_coord_t_texvec_get, _wrap_tex_coord_t_texvec_set },
    {0,0,0}
};
static swig_lua_method swig_tex_coord_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_tex_coord_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_tex_coord_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_tex_coord_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_tex_coord_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_tex_coord_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_tex_coord_t_Sf_SwigStatic = {
    "tex_coord_t",
    swig_tex_coord_t_Sf_SwigStatic_methods,
    swig_tex_coord_t_Sf_SwigStatic_attributes,
    swig_tex_coord_t_Sf_SwigStatic_constants,
    swig_tex_coord_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_tex_coord_t_bases[] = {0};
static const char *swig_tex_coord_t_base_names[] = {0};
static swig_lua_class _wrap_class_tex_coord_t = { "tex_coord_t", "tex_coord_t", &SWIGTYPE_p_tex_coord_t,_proxy__wrap_new_tex_coord_t, swig_delete_tex_coord_t, swig_tex_coord_t_methods, swig_tex_coord_t_attributes, &swig_tex_coord_t_Sf_SwigStatic, swig_tex_coord_t_meta, swig_tex_coord_t_bases, swig_tex_coord_t_base_names };

static int _wrap_vertice_t_Vec_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    vertice_t *arg1 = 0 ;
    short *arg2 = (short *)0 ;
    
    SWIG_check_num_args("vertice_t::Vec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vertice_t::Vec",1,"vertice_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("vertice_t::Vec",2,"short [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vertice_t,0))){
      SWIG_fail_ptr("vertice_t_Vec_set",1,SWIGTYPE_p_vertice_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
      SWIG_fail_ptr("vertice_t_Vec_set",2,SWIGTYPE_p_short);
    }
    
    {
      size_t ii;
      short *b = (short *) arg1->Vec;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_vertice_t_Vec_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    vertice_t *arg1 = 0 ;
    short *result = 0 ;
    
    SWIG_check_num_args("vertice_t::Vec",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vertice_t::Vec",1,"vertice_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vertice_t,0))){
      SWIG_fail_ptr("vertice_t_Vec_get",1,SWIGTYPE_p_vertice_t);
    }
    
    result = (short *)(short *) ((arg1)->Vec);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_vertice_t_Normal_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    vertice_t *arg1 = 0 ;
    unsigned char *arg2 = (unsigned char *)0 ;
    
    SWIG_check_num_args("vertice_t::Normal",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vertice_t::Normal",1,"vertice_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("vertice_t::Normal",2,"unsigned char [2]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vertice_t,0))){
      SWIG_fail_ptr("vertice_t_Normal_set",1,SWIGTYPE_p_vertice_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("vertice_t_Normal_set",2,SWIGTYPE_p_unsigned_char);
    }
    
    {
      size_t ii;
      unsigned char *b = (unsigned char *) arg1->Normal;
      for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned char *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_vertice_t_Normal_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    vertice_t *arg1 = 0 ;
    unsigned char *result = 0 ;
    
    SWIG_check_num_args("vertice_t::Normal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vertice_t::Normal",1,"vertice_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vertice_t,0))){
      SWIG_fail_ptr("vertice_t_Normal_get",1,SWIGTYPE_p_vertice_t);
    }
    
    result = (unsigned char *)(unsigned char *) ((arg1)->Normal);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_vertice_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    vertice_t *result = 0 ;
    
    SWIG_check_num_args("vertice_t::vertice_t",0,0)
    result = (vertice_t *)new vertice_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vertice_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_vertice_t(void *obj) {
vertice_t *arg1 = (vertice_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_vertice_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vertice_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vertice_t_attributes[] = {
    { "Vec", _wrap_vertice_t_Vec_get, _wrap_vertice_t_Vec_set },
    { "Normal", _wrap_vertice_t_Normal_get, _wrap_vertice_t_Normal_set },
    {0,0,0}
};
static swig_lua_method swig_vertice_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_vertice_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_vertice_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vertice_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vertice_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vertice_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vertice_t_Sf_SwigStatic = {
    "vertice_t",
    swig_vertice_t_Sf_SwigStatic_methods,
    swig_vertice_t_Sf_SwigStatic_attributes,
    swig_vertice_t_Sf_SwigStatic_constants,
    swig_vertice_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vertice_t_bases[] = {0};
static const char *swig_vertice_t_base_names[] = {0};
static swig_lua_class _wrap_class_vertice_t = { "vertice_t", "vertice_t", &SWIGTYPE_p_vertice_t,_proxy__wrap_new_vertice_t, swig_delete_vertice_t, swig_vertice_t_methods, swig_vertice_t_attributes, &swig_vertice_t_Sf_SwigStatic, swig_vertice_t_meta, swig_vertice_t_bases, swig_vertice_t_base_names };

static int _wrap_mesh_t_mesh_h_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    mesh_header_t *arg2 = 0 ;
    
    SWIG_check_num_args("mesh_t::mesh_h",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::mesh_h",1,"mesh_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mesh_t::mesh_h",2,"mesh_header_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_mesh_h_set",1,SWIGTYPE_p_mesh_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("mesh_t_mesh_h_set",2,SWIGTYPE_p_mesh_header_t);
    }
    
    if (arg1) (arg1)->mesh_h = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_mesh_h_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    mesh_header_t *result = 0 ;
    
    SWIG_check_num_args("mesh_t::mesh_h",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::mesh_h",1,"mesh_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_mesh_h_get",1,SWIGTYPE_p_mesh_t);
    }
    
    result = (mesh_header_t *)& ((arg1)->mesh_h);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_mesh_header_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_skins_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    skin_t *arg2 = 0 ;
    
    SWIG_check_num_args("mesh_t::skins",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::skins",1,"mesh_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mesh_t::skins",2,"skin_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_skins_set",1,SWIGTYPE_p_mesh_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_skin_t,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("mesh_t_skins_set",2,SWIGTYPE_p_skin_t);
    }
    
    if (arg1) (arg1)->skins = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_skins_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    skin_t *result = 0 ;
    
    SWIG_check_num_args("mesh_t::skins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::skins",1,"mesh_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_skins_get",1,SWIGTYPE_p_mesh_t);
    }
    
    result = (skin_t *) ((arg1)->skins);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_skin_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_triangles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    Q3triangle_t *arg2 = 0 ;
    
    SWIG_check_num_args("mesh_t::triangles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::triangles",1,"mesh_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mesh_t::triangles",2,"Q3triangle_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_triangles_set",1,SWIGTYPE_p_mesh_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Q3triangle_t,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("mesh_t_triangles_set",2,SWIGTYPE_p_Q3triangle_t);
    }
    
    if (arg1) (arg1)->triangles = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_triangles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    Q3triangle_t *result = 0 ;
    
    SWIG_check_num_args("mesh_t::triangles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::triangles",1,"mesh_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_triangles_get",1,SWIGTYPE_p_mesh_t);
    }
    
    result = (Q3triangle_t *) ((arg1)->triangles);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_Q3triangle_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_tex_coords_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    tex_coord_t *arg2 = 0 ;
    
    SWIG_check_num_args("mesh_t::tex_coords",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::tex_coords",1,"mesh_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mesh_t::tex_coords",2,"tex_coord_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_tex_coords_set",1,SWIGTYPE_p_mesh_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_tex_coord_t,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("mesh_t_tex_coords_set",2,SWIGTYPE_p_tex_coord_t);
    }
    
    if (arg1) (arg1)->tex_coords = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_tex_coords_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    tex_coord_t *result = 0 ;
    
    SWIG_check_num_args("mesh_t::tex_coords",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::tex_coords",1,"mesh_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_tex_coords_get",1,SWIGTYPE_p_mesh_t);
    }
    
    result = (tex_coord_t *) ((arg1)->tex_coords);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_tex_coord_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_vertices_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    vertice_t *arg2 = 0 ;
    
    SWIG_check_num_args("mesh_t::vertices",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::vertices",1,"mesh_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mesh_t::vertices",2,"vertice_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_vertices_set",1,SWIGTYPE_p_mesh_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vertice_t,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("mesh_t_vertices_set",2,SWIGTYPE_p_vertice_t);
    }
    
    if (arg1) (arg1)->vertices = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_vertices_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    vertice_t *result = 0 ;
    
    SWIG_check_num_args("mesh_t::vertices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::vertices",1,"mesh_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_vertices_get",1,SWIGTYPE_p_mesh_t);
    }
    
    result = (vertice_t *) ((arg1)->vertices);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vertice_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_settexture_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    unsigned char arg2 ;
    
    SWIG_check_num_args("mesh_t::settexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::settexture",1,"mesh_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("mesh_t::settexture",2,"unsigned char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_settexture_set",1,SWIGTYPE_p_mesh_t);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned char)lua_tonumber(L, 2);
    if (arg1) (arg1)->settexture = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_mesh_t_settexture_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("mesh_t::settexture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mesh_t::settexture",1,"mesh_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mesh_t,0))){
      SWIG_fail_ptr("mesh_t_settexture_get",1,SWIGTYPE_p_mesh_t);
    }
    
    result = (unsigned char) ((arg1)->settexture);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_mesh_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    mesh_t *result = 0 ;
    
    SWIG_check_num_args("mesh_t::mesh_t",0,0)
    result = (mesh_t *)new mesh_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_mesh_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_mesh_t(void *obj) {
mesh_t *arg1 = (mesh_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_mesh_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mesh_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mesh_t_attributes[] = {
    { "mesh_h", _wrap_mesh_t_mesh_h_get, _wrap_mesh_t_mesh_h_set },
    { "skins", _wrap_mesh_t_skins_get, _wrap_mesh_t_skins_set },
    { "triangles", _wrap_mesh_t_triangles_get, _wrap_mesh_t_triangles_set },
    { "tex_coords", _wrap_mesh_t_tex_coords_get, _wrap_mesh_t_tex_coords_set },
    { "vertices", _wrap_mesh_t_vertices_get, _wrap_mesh_t_vertices_set },
    { "settexture", _wrap_mesh_t_settexture_get, _wrap_mesh_t_settexture_set },
    {0,0,0}
};
static swig_lua_method swig_mesh_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_mesh_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mesh_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mesh_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mesh_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mesh_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mesh_t_Sf_SwigStatic = {
    "mesh_t",
    swig_mesh_t_Sf_SwigStatic_methods,
    swig_mesh_t_Sf_SwigStatic_attributes,
    swig_mesh_t_Sf_SwigStatic_constants,
    swig_mesh_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mesh_t_bases[] = {0};
static const char *swig_mesh_t_base_names[] = {0};
static swig_lua_class _wrap_class_mesh_t = { "mesh_t", "mesh_t", &SWIGTYPE_p_mesh_t,_proxy__wrap_new_mesh_t, swig_delete_mesh_t, swig_mesh_t_methods, swig_mesh_t_attributes, &swig_mesh_t_Sf_SwigStatic, swig_mesh_t_meta, swig_mesh_t_bases, swig_mesh_t_base_names };

static int _wrap_anim_t_first_frame_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("anim_t::first_frame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::first_frame",1,"anim_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("anim_t::first_frame",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_first_frame_set",1,SWIGTYPE_p_anim_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->first_frame = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_anim_t_first_frame_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("anim_t::first_frame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::first_frame",1,"anim_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_first_frame_get",1,SWIGTYPE_p_anim_t);
    }
    
    result = (int) ((arg1)->first_frame);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_anim_t_num_frames_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("anim_t::num_frames",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::num_frames",1,"anim_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("anim_t::num_frames",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_num_frames_set",1,SWIGTYPE_p_anim_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->num_frames = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_anim_t_num_frames_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("anim_t::num_frames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::num_frames",1,"anim_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_num_frames_get",1,SWIGTYPE_p_anim_t);
    }
    
    result = (int) ((arg1)->num_frames);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_anim_t_looping_frames_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("anim_t::looping_frames",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::looping_frames",1,"anim_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("anim_t::looping_frames",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_looping_frames_set",1,SWIGTYPE_p_anim_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->looping_frames = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_anim_t_looping_frames_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("anim_t::looping_frames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::looping_frames",1,"anim_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_looping_frames_get",1,SWIGTYPE_p_anim_t);
    }
    
    result = (int) ((arg1)->looping_frames);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_anim_t_frames_per_second_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("anim_t::frames_per_second",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::frames_per_second",1,"anim_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("anim_t::frames_per_second",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_frames_per_second_set",1,SWIGTYPE_p_anim_t);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->frames_per_second = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_anim_t_frames_per_second_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("anim_t::frames_per_second",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("anim_t::frames_per_second",1,"anim_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("anim_t_frames_per_second_get",1,SWIGTYPE_p_anim_t);
    }
    
    result = (int) ((arg1)->frames_per_second);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_anim_t(lua_State* L) {
  {
    int SWIG_arg = 0;
    anim_t *result = 0 ;
    
    SWIG_check_num_args("anim_t::anim_t",0,0)
    result = (anim_t *)new anim_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_anim_t,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_anim_t(void *obj) {
anim_t *arg1 = (anim_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_anim_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_anim_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_anim_t_attributes[] = {
    { "first_frame", _wrap_anim_t_first_frame_get, _wrap_anim_t_first_frame_set },
    { "num_frames", _wrap_anim_t_num_frames_get, _wrap_anim_t_num_frames_set },
    { "looping_frames", _wrap_anim_t_looping_frames_get, _wrap_anim_t_looping_frames_set },
    { "frames_per_second", _wrap_anim_t_frames_per_second_get, _wrap_anim_t_frames_per_second_set },
    {0,0,0}
};
static swig_lua_method swig_anim_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_anim_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_anim_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_anim_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_anim_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_anim_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_anim_t_Sf_SwigStatic = {
    "anim_t",
    swig_anim_t_Sf_SwigStatic_methods,
    swig_anim_t_Sf_SwigStatic_attributes,
    swig_anim_t_Sf_SwigStatic_constants,
    swig_anim_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_anim_t_bases[] = {0};
static const char *swig_anim_t_base_names[] = {0};
static swig_lua_class _wrap_class_anim_t = { "anim_t", "anim_t", &SWIGTYPE_p_anim_t,_proxy__wrap_new_anim_t, swig_delete_anim_t, swig_anim_t_methods, swig_anim_t_attributes, &swig_anim_t_Sf_SwigStatic, swig_anim_t_meta, swig_anim_t_bases, swig_anim_t_base_names };

static int _wrap_CLoaderMD3_iParseSkinSentence(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    char *arg4 = 0 ;
    int result;
    
    SWIG_check_num_args("CLoaderMD3::iParseSkinSentence",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::iParseSkinSentence",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::iParseSkinSentence",2,"char *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CLoaderMD3::iParseSkinSentence",3,"char *");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("CLoaderMD3::iParseSkinSentence",4,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_iParseSkinSentence",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    arg3 = (char *)lua_tostring(L, 3);
    arg4 = (char *)lua_tostring(L, 4);
    result = (int)(arg1)->iParseSkinSentence(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_LoadSkinInfo(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::LoadSkinInfo",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::LoadSkinInfo",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::LoadSkinInfo",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_LoadSkinInfo",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->LoadSkinInfo(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::poGetShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::poGetShader",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::poGetShader",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_poGetShader",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGShader *)(arg1)->poGetShader(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_CreateAnimTransfNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    tag_t *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    CGSceneAnimTransf *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::CreateAnimTransfNode",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::CreateAnimTransfNode",1,"CLoaderMD3 *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLoaderMD3::CreateAnimTransfNode",2,"tag_t *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLoaderMD3::CreateAnimTransfNode",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CLoaderMD3::CreateAnimTransfNode",4,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_CreateAnimTransfNode",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_tag_t,0))){
      SWIG_fail_ptr("CLoaderMD3_CreateAnimTransfNode",2,SWIGTYPE_p_tag_t);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    result = (CGSceneAnimTransf *)(arg1)->CreateAnimTransfNode(arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimTransf,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_pCreateAnimMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    mesh_header_t *arg2 = 0 ;
    skin_t *arg3 = 0 ;
    Q3triangle_t *arg4 = 0 ;
    vertice_t *arg5 = 0 ;
    tex_coord_t *arg6 = 0 ;
    CGSceneAnimMesh *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::pCreateAnimMesh",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::pCreateAnimMesh",1,"CLoaderMD3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLoaderMD3::pCreateAnimMesh",2,"mesh_header_t &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CLoaderMD3::pCreateAnimMesh",3,"skin_t &");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CLoaderMD3::pCreateAnimMesh",4,"Q3triangle_t *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("CLoaderMD3::pCreateAnimMesh",5,"vertice_t *");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("CLoaderMD3::pCreateAnimMesh",6,"tex_coord_t *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_pCreateAnimMesh",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mesh_header_t,0))){
      SWIG_fail_ptr("CLoaderMD3_pCreateAnimMesh",2,SWIGTYPE_p_mesh_header_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_skin_t,0))){
      SWIG_fail_ptr("CLoaderMD3_pCreateAnimMesh",3,SWIGTYPE_p_skin_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Q3triangle_t,0))){
      SWIG_fail_ptr("CLoaderMD3_pCreateAnimMesh",4,SWIGTYPE_p_Q3triangle_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_vertice_t,0))){
      SWIG_fail_ptr("CLoaderMD3_pCreateAnimMesh",5,SWIGTYPE_p_vertice_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_tex_coord_t,0))){
      SWIG_fail_ptr("CLoaderMD3_pCreateAnimMesh",6,SWIGTYPE_p_tex_coord_t);
    }
    
    result = (CGSceneAnimMesh *)(arg1)->pCreateAnimMesh(*arg2,*arg3,arg4,arg5,arg6);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_pLoadModel(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::pLoadModel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::pLoadModel",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::pLoadModel",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_pLoadModel",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGSceneNode *)(arg1)->pLoadModel(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_pLoad__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::pLoad",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::pLoad",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::pLoad",2,"char *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CLoaderMD3::pLoad",3,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_pLoad",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    arg3 = (char *)lua_tostring(L, 3);
    result = (CGSceneNode *)(arg1)->pLoad(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_pLoad__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::pLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::pLoad",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::pLoad",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_pLoad",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGSceneNode *)(arg1)->pLoad(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_pLoad(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CLoaderMD3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CLoaderMD3_pLoad__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CLoaderMD3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_CLoaderMD3_pLoad__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CLoaderMD3_pLoad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CLoaderMD3::pLoad(char *,char *)\n"
    "    CLoaderMD3::pLoad(char *)\n");
  lua_error(L);return 0;
}


static int _wrap_CLoaderMD3_pLoadQ3Player(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    CGSceneAnimActionSet *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::pLoadQ3Player",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::pLoadQ3Player",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::pLoadQ3Player",2,"char *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CLoaderMD3::pLoadQ3Player",3,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_pLoadQ3Player",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    arg3 = (char *)lua_tostring(L, 3);
    result = (CGSceneAnimActionSet *)(arg1)->pLoadQ3Player(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimActionSet,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_pLoadAnimation(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    char *arg2 = 0 ;
    CGSceneAnimGroup *arg3 = 0 ;
    CGSceneAnimGroup *arg4 = 0 ;
    CGSceneAnimActionSet *result = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::pLoadAnimation",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::pLoadAnimation",1,"CLoaderMD3 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderMD3::pLoadAnimation",2,"char *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CLoaderMD3::pLoadAnimation",3,"CGSceneAnimGroup *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CLoaderMD3::pLoadAnimation",4,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_pLoadAnimation",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CLoaderMD3_pLoadAnimation",3,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CLoaderMD3_pLoadAnimation",4,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    result = (CGSceneAnimActionSet *)(arg1)->pLoadAnimation(arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneAnimActionSet,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderMD3_SetupAnim(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderMD3 *arg1 = 0 ;
    int arg2 ;
    anim_t *arg3 = 0 ;
    CGSceneAnimActionSet *arg4 = 0 ;
    
    SWIG_check_num_args("CLoaderMD3::SetupAnim",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderMD3::SetupAnim",1,"CLoaderMD3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLoaderMD3::SetupAnim",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CLoaderMD3::SetupAnim",3,"anim_t *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CLoaderMD3::SetupAnim",4,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderMD3,0))){
      SWIG_fail_ptr("CLoaderMD3_SetupAnim",1,SWIGTYPE_p_CLoaderMD3);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_anim_t,0))){
      SWIG_fail_ptr("CLoaderMD3_SetupAnim",3,SWIGTYPE_p_anim_t);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CLoaderMD3_SetupAnim",4,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    (arg1)->SetupAnim(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLoaderMD3(void *obj) {
CLoaderMD3 *arg1 = (CLoaderMD3 *) obj;
delete arg1;
}
static swig_lua_attribute swig_CLoaderMD3_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLoaderMD3_methods[]= {
    { "iParseSkinSentence", _wrap_CLoaderMD3_iParseSkinSentence},
    { "LoadSkinInfo", _wrap_CLoaderMD3_LoadSkinInfo},
    { "poGetShader", _wrap_CLoaderMD3_poGetShader},
    { "CreateAnimTransfNode", _wrap_CLoaderMD3_CreateAnimTransfNode},
    { "pCreateAnimMesh", _wrap_CLoaderMD3_pCreateAnimMesh},
    { "pLoadModel", _wrap_CLoaderMD3_pLoadModel},
    { "pLoad", _wrap_CLoaderMD3_pLoad},
    { "pLoadQ3Player", _wrap_CLoaderMD3_pLoadQ3Player},
    { "pLoadAnimation", _wrap_CLoaderMD3_pLoadAnimation},
    { "SetupAnim", _wrap_CLoaderMD3_SetupAnim},
    {0,0}
};
static swig_lua_method swig_CLoaderMD3_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLoaderMD3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLoaderMD3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLoaderMD3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLoaderMD3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLoaderMD3_Sf_SwigStatic = {
    "CLoaderMD3",
    swig_CLoaderMD3_Sf_SwigStatic_methods,
    swig_CLoaderMD3_Sf_SwigStatic_attributes,
    swig_CLoaderMD3_Sf_SwigStatic_constants,
    swig_CLoaderMD3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLoaderMD3_bases[] = {0,0};
static const char *swig_CLoaderMD3_base_names[] = {"C3DLoader *",0};
static swig_lua_class _wrap_class_CLoaderMD3 = { "CLoaderMD3", "CLoaderMD3", &SWIGTYPE_p_CLoaderMD3,0, swig_delete_CLoaderMD3, swig_CLoaderMD3_methods, swig_CLoaderMD3_attributes, &swig_CLoaderMD3_Sf_SwigStatic, swig_CLoaderMD3_meta, swig_CLoaderMD3_bases, swig_CLoaderMD3_base_names };

static int _wrap_bsp_point3f_x_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3f *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("bsp_point3f::x",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3f::x",1,"bsp_point3f *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_point3f::x",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_point3f_x_set",1,SWIGTYPE_p_bsp_point3f);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->x = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3f_x_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3f *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("bsp_point3f::x",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3f::x",1,"bsp_point3f *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_point3f_x_get",1,SWIGTYPE_p_bsp_point3f);
    }
    
    result = (float) ((arg1)->x);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3f_y_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3f *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("bsp_point3f::y",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3f::y",1,"bsp_point3f *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_point3f::y",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_point3f_y_set",1,SWIGTYPE_p_bsp_point3f);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->y = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3f_y_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3f *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("bsp_point3f::y",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3f::y",1,"bsp_point3f *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_point3f_y_get",1,SWIGTYPE_p_bsp_point3f);
    }
    
    result = (float) ((arg1)->y);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3f_z_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3f *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("bsp_point3f::z",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3f::z",1,"bsp_point3f *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_point3f::z",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_point3f_z_set",1,SWIGTYPE_p_bsp_point3f);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->z = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3f_z_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3f *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("bsp_point3f::z",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3f::z",1,"bsp_point3f *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_point3f_z_get",1,SWIGTYPE_p_bsp_point3f);
    }
    
    result = (float) ((arg1)->z);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_point3f(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3f *result = 0 ;
    
    SWIG_check_num_args("bsp_point3f::bsp_point3f",0,0)
    result = (bsp_point3f *)new bsp_point3f();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3f,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_point3f(void *obj) {
bsp_point3f *arg1 = (bsp_point3f *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_point3f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_point3f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_point3f_attributes[] = {
    { "x", _wrap_bsp_point3f_x_get, _wrap_bsp_point3f_x_set },
    { "y", _wrap_bsp_point3f_y_get, _wrap_bsp_point3f_y_set },
    { "z", _wrap_bsp_point3f_z_get, _wrap_bsp_point3f_z_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_point3f_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_point3f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_point3f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_point3f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_point3f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_point3f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_point3f_Sf_SwigStatic = {
    "bsp_point3f",
    swig_bsp_point3f_Sf_SwigStatic_methods,
    swig_bsp_point3f_Sf_SwigStatic_attributes,
    swig_bsp_point3f_Sf_SwigStatic_constants,
    swig_bsp_point3f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_point3f_bases[] = {0};
static const char *swig_bsp_point3f_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_point3f = { "bsp_point3f", "bsp_point3f", &SWIGTYPE_p_bsp_point3f,_proxy__wrap_new_bsp_point3f, swig_delete_bsp_point3f, swig_bsp_point3f_methods, swig_bsp_point3f_attributes, &swig_bsp_point3f_Sf_SwigStatic, swig_bsp_point3f_meta, swig_bsp_point3f_bases, swig_bsp_point3f_base_names };

static int _wrap_bsp_point3s_x_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3s *arg1 = 0 ;
    short arg2 ;
    
    SWIG_check_num_args("bsp_point3s::x",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3s::x",1,"bsp_point3s *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_point3s::x",2,"short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_point3s_x_set",1,SWIGTYPE_p_bsp_point3s);
    }
    
    arg2 = (short)lua_tonumber(L, 2);
    if (arg1) (arg1)->x = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3s_x_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3s *arg1 = 0 ;
    short result;
    
    SWIG_check_num_args("bsp_point3s::x",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3s::x",1,"bsp_point3s *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_point3s_x_get",1,SWIGTYPE_p_bsp_point3s);
    }
    
    result = (short) ((arg1)->x);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3s_y_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3s *arg1 = 0 ;
    short arg2 ;
    
    SWIG_check_num_args("bsp_point3s::y",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3s::y",1,"bsp_point3s *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_point3s::y",2,"short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_point3s_y_set",1,SWIGTYPE_p_bsp_point3s);
    }
    
    arg2 = (short)lua_tonumber(L, 2);
    if (arg1) (arg1)->y = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3s_y_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3s *arg1 = 0 ;
    short result;
    
    SWIG_check_num_args("bsp_point3s::y",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3s::y",1,"bsp_point3s *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_point3s_y_get",1,SWIGTYPE_p_bsp_point3s);
    }
    
    result = (short) ((arg1)->y);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3s_z_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3s *arg1 = 0 ;
    short arg2 ;
    
    SWIG_check_num_args("bsp_point3s::z",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3s::z",1,"bsp_point3s *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_point3s::z",2,"short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_point3s_z_set",1,SWIGTYPE_p_bsp_point3s);
    }
    
    arg2 = (short)lua_tonumber(L, 2);
    if (arg1) (arg1)->z = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_point3s_z_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3s *arg1 = 0 ;
    short result;
    
    SWIG_check_num_args("bsp_point3s::z",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_point3s::z",1,"bsp_point3s *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_point3s_z_get",1,SWIGTYPE_p_bsp_point3s);
    }
    
    result = (short) ((arg1)->z);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_point3s(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_point3s *result = 0 ;
    
    SWIG_check_num_args("bsp_point3s::bsp_point3s",0,0)
    result = (bsp_point3s *)new bsp_point3s();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3s,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_point3s(void *obj) {
bsp_point3s *arg1 = (bsp_point3s *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_point3s(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_point3s);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_point3s_attributes[] = {
    { "x", _wrap_bsp_point3s_x_get, _wrap_bsp_point3s_x_set },
    { "y", _wrap_bsp_point3s_y_get, _wrap_bsp_point3s_y_set },
    { "z", _wrap_bsp_point3s_z_get, _wrap_bsp_point3s_z_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_point3s_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_point3s_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_point3s_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_point3s_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_point3s_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_point3s_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_point3s_Sf_SwigStatic = {
    "bsp_point3s",
    swig_bsp_point3s_Sf_SwigStatic_methods,
    swig_bsp_point3s_Sf_SwigStatic_attributes,
    swig_bsp_point3s_Sf_SwigStatic_constants,
    swig_bsp_point3s_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_point3s_bases[] = {0};
static const char *swig_bsp_point3s_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_point3s = { "bsp_point3s", "bsp_point3s", &SWIGTYPE_p_bsp_point3s,_proxy__wrap_new_bsp_point3s, swig_delete_bsp_point3s, swig_bsp_point3s_methods, swig_bsp_point3s_attributes, &swig_bsp_point3s_Sf_SwigStatic, swig_bsp_point3s_meta, swig_bsp_point3s_bases, swig_bsp_point3s_base_names };

static int _wrap_bsp_lump_offset_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_lump *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_lump::offset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_lump::offset",1,"bsp_lump *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_lump::offset",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_lump,0))){
      SWIG_fail_ptr("bsp_lump_offset_set",1,SWIGTYPE_p_bsp_lump);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->offset = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_lump_offset_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_lump *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_lump::offset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_lump::offset",1,"bsp_lump *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_lump,0))){
      SWIG_fail_ptr("bsp_lump_offset_get",1,SWIGTYPE_p_bsp_lump);
    }
    
    result = (unsigned int) ((arg1)->offset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_lump_lenght_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_lump *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_lump::lenght",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_lump::lenght",1,"bsp_lump *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_lump::lenght",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_lump,0))){
      SWIG_fail_ptr("bsp_lump_lenght_set",1,SWIGTYPE_p_bsp_lump);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->lenght = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_lump_lenght_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_lump *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_lump::lenght",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_lump::lenght",1,"bsp_lump *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_lump,0))){
      SWIG_fail_ptr("bsp_lump_lenght_get",1,SWIGTYPE_p_bsp_lump);
    }
    
    result = (unsigned int) ((arg1)->lenght);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_lump(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_lump *result = 0 ;
    
    SWIG_check_num_args("bsp_lump::bsp_lump",0,0)
    result = (bsp_lump *)new bsp_lump();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_lump,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_lump(void *obj) {
bsp_lump *arg1 = (bsp_lump *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_lump(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_lump);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_lump_attributes[] = {
    { "offset", _wrap_bsp_lump_offset_get, _wrap_bsp_lump_offset_set },
    { "lenght", _wrap_bsp_lump_lenght_get, _wrap_bsp_lump_lenght_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_lump_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_lump_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_lump_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_lump_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_lump_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_lump_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_lump_SwigStatic = {
    "bsp_lump",
    swig_bsp_lump_SwigStatic_methods,
    swig_bsp_lump_SwigStatic_attributes,
    swig_bsp_lump_SwigStatic_constants,
    swig_bsp_lump_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_lump_bases[] = {0};
static const char *swig_bsp_lump_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_lump = { "bsp_lump", "bsp_lump", &SWIGTYPE_p_bsp_lump,_proxy__wrap_new_bsp_lump, swig_delete_bsp_lump, swig_bsp_lump_methods, swig_bsp_lump_attributes, &swig_bsp_lump_SwigStatic, swig_bsp_lump_meta, swig_bsp_lump_bases, swig_bsp_lump_base_names };

static int _wrap_bsp_header_magic_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_header *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_header::magic",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_header::magic",1,"bsp_header *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_header::magic",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_header,0))){
      SWIG_fail_ptr("bsp_header_magic_set",1,SWIGTYPE_p_bsp_header);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->magic = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_header_magic_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_header *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_header::magic",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_header::magic",1,"bsp_header *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_header,0))){
      SWIG_fail_ptr("bsp_header_magic_get",1,SWIGTYPE_p_bsp_header);
    }
    
    result = (unsigned int) ((arg1)->magic);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_header_version_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_header *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_header::version",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_header::version",1,"bsp_header *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_header::version",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_header,0))){
      SWIG_fail_ptr("bsp_header_version_set",1,SWIGTYPE_p_bsp_header);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->version = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_header_version_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_header *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_header::version",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_header::version",1,"bsp_header *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_header,0))){
      SWIG_fail_ptr("bsp_header_version_get",1,SWIGTYPE_p_bsp_header);
    }
    
    result = (unsigned int) ((arg1)->version);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_header_lump_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_header *arg1 = 0 ;
    bsp_lump *arg2 = (bsp_lump *)0 ;
    
    SWIG_check_num_args("bsp_header::lump",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_header::lump",1,"bsp_header *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_header::lump",2,"bsp_lump [19]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_header,0))){
      SWIG_fail_ptr("bsp_header_lump_set",1,SWIGTYPE_p_bsp_header);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_lump,0))){
      SWIG_fail_ptr("bsp_header_lump_set",2,SWIGTYPE_p_bsp_lump);
    }
    
    {
      size_t ii;
      bsp_lump *b = (bsp_lump *) arg1->lump;
      for (ii = 0; ii < (size_t)19; ii++) b[ii] = *((bsp_lump *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_header_lump_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_header *arg1 = 0 ;
    bsp_lump *result = 0 ;
    
    SWIG_check_num_args("bsp_header::lump",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_header::lump",1,"bsp_header *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_header,0))){
      SWIG_fail_ptr("bsp_header_lump_get",1,SWIGTYPE_p_bsp_header);
    }
    
    result = (bsp_lump *)(bsp_lump *) ((arg1)->lump);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_lump,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_header(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_header *result = 0 ;
    
    SWIG_check_num_args("bsp_header::bsp_header",0,0)
    result = (bsp_header *)new bsp_header();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_header,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_header(void *obj) {
bsp_header *arg1 = (bsp_header *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_header(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_header);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_header_attributes[] = {
    { "magic", _wrap_bsp_header_magic_get, _wrap_bsp_header_magic_set },
    { "version", _wrap_bsp_header_version_get, _wrap_bsp_header_version_set },
    { "lump", _wrap_bsp_header_lump_get, _wrap_bsp_header_lump_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_header_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_header_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_header_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_header_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_header_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_header_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_header_Sf_SwigStatic = {
    "bsp_header",
    swig_bsp_header_Sf_SwigStatic_methods,
    swig_bsp_header_Sf_SwigStatic_attributes,
    swig_bsp_header_Sf_SwigStatic_constants,
    swig_bsp_header_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_header_bases[] = {0};
static const char *swig_bsp_header_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_header = { "bsp_header", "bsp_header", &SWIGTYPE_p_bsp_header,_proxy__wrap_new_bsp_header, swig_delete_bsp_header, swig_bsp_header_methods, swig_bsp_header_attributes, &swig_bsp_header_Sf_SwigStatic, swig_bsp_header_meta, swig_bsp_header_bases, swig_bsp_header_base_names };

static int _wrap_bsp_edge_start_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_edge *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_edge::start",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_edge::start",1,"bsp_edge *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_edge::start",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_edge,0))){
      SWIG_fail_ptr("bsp_edge_start_set",1,SWIGTYPE_p_bsp_edge);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->start = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_edge_start_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_edge *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_edge::start",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_edge::start",1,"bsp_edge *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_edge,0))){
      SWIG_fail_ptr("bsp_edge_start_get",1,SWIGTYPE_p_bsp_edge);
    }
    
    result = (unsigned short) ((arg1)->start);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_edge_c_end_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_edge *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_edge::end",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_edge::end",1,"bsp_edge *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_edge::end",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_edge,0))){
      SWIG_fail_ptr("bsp_edge_c_end_set",1,SWIGTYPE_p_bsp_edge);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->end = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_edge_c_end_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_edge *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_edge::end",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_edge::end",1,"bsp_edge *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_edge,0))){
      SWIG_fail_ptr("bsp_edge_c_end_get",1,SWIGTYPE_p_bsp_edge);
    }
    
    result = (unsigned short) ((arg1)->end);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_edge(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_edge *result = 0 ;
    
    SWIG_check_num_args("bsp_edge::bsp_edge",0,0)
    result = (bsp_edge *)new bsp_edge();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_edge,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_edge(void *obj) {
bsp_edge *arg1 = (bsp_edge *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_edge(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_edge);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_edge_attributes[] = {
    { "start", _wrap_bsp_edge_start_get, _wrap_bsp_edge_start_set },
    { "c_end", _wrap_bsp_edge_c_end_get, _wrap_bsp_edge_c_end_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_edge_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_edge_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_edge_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_edge_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_edge_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_edge_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_edge_Sf_SwigStatic = {
    "bsp_edge",
    swig_bsp_edge_Sf_SwigStatic_methods,
    swig_bsp_edge_Sf_SwigStatic_attributes,
    swig_bsp_edge_Sf_SwigStatic_constants,
    swig_bsp_edge_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_edge_bases[] = {0};
static const char *swig_bsp_edge_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_edge = { "bsp_edge", "bsp_edge", &SWIGTYPE_p_bsp_edge,_proxy__wrap_new_bsp_edge, swig_delete_bsp_edge, swig_bsp_edge_methods, swig_bsp_edge_attributes, &swig_bsp_edge_Sf_SwigStatic, swig_bsp_edge_meta, swig_bsp_edge_bases, swig_bsp_edge_base_names };

static int _wrap_bsp_face_plane_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_face::plane",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::plane",1,"bsp_face *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_face::plane",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_plane_set",1,SWIGTYPE_p_bsp_face);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->plane = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_plane_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_face::plane",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::plane",1,"bsp_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_plane_get",1,SWIGTYPE_p_bsp_face);
    }
    
    result = (unsigned short) ((arg1)->plane);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_plane_side_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_face::plane_side",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::plane_side",1,"bsp_face *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_face::plane_side",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_plane_side_set",1,SWIGTYPE_p_bsp_face);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->plane_side = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_plane_side_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_face::plane_side",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::plane_side",1,"bsp_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_plane_side_get",1,SWIGTYPE_p_bsp_face);
    }
    
    result = (unsigned short) ((arg1)->plane_side);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_first_edge_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_face::first_edge",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::first_edge",1,"bsp_face *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_face::first_edge",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_first_edge_set",1,SWIGTYPE_p_bsp_face);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->first_edge = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_first_edge_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_face::first_edge",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::first_edge",1,"bsp_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_first_edge_get",1,SWIGTYPE_p_bsp_face);
    }
    
    result = (unsigned int) ((arg1)->first_edge);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_num_edges_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_face::num_edges",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::num_edges",1,"bsp_face *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_face::num_edges",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_num_edges_set",1,SWIGTYPE_p_bsp_face);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->num_edges = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_num_edges_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_face::num_edges",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::num_edges",1,"bsp_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_num_edges_get",1,SWIGTYPE_p_bsp_face);
    }
    
    result = (unsigned short) ((arg1)->num_edges);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_texture_info_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_face::texture_info",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::texture_info",1,"bsp_face *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_face::texture_info",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_texture_info_set",1,SWIGTYPE_p_bsp_face);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->texture_info = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_texture_info_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_face::texture_info",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::texture_info",1,"bsp_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_texture_info_get",1,SWIGTYPE_p_bsp_face);
    }
    
    result = (unsigned short) ((arg1)->texture_info);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_lightmap_styles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned char *arg2 = (unsigned char *)0 ;
    
    SWIG_check_num_args("bsp_face::lightmap_styles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::lightmap_styles",1,"bsp_face *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_face::lightmap_styles",2,"unsigned char [4]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_lightmap_styles_set",1,SWIGTYPE_p_bsp_face);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("bsp_face_lightmap_styles_set",2,SWIGTYPE_p_unsigned_char);
    }
    
    {
      size_t ii;
      unsigned char *b = (unsigned char *) arg1->lightmap_styles;
      for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((unsigned char *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_lightmap_styles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned char *result = 0 ;
    
    SWIG_check_num_args("bsp_face::lightmap_styles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::lightmap_styles",1,"bsp_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_lightmap_styles_get",1,SWIGTYPE_p_bsp_face);
    }
    
    result = (unsigned char *)(unsigned char *) ((arg1)->lightmap_styles);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_lightmap_offset_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_face::lightmap_offset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::lightmap_offset",1,"bsp_face *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_face::lightmap_offset",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_lightmap_offset_set",1,SWIGTYPE_p_bsp_face);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->lightmap_offset = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_lightmap_offset_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_face::lightmap_offset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face::lightmap_offset",1,"bsp_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("bsp_face_lightmap_offset_get",1,SWIGTYPE_p_bsp_face);
    }
    
    result = (unsigned int) ((arg1)->lightmap_offset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_face(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face *result = 0 ;
    
    SWIG_check_num_args("bsp_face::bsp_face",0,0)
    result = (bsp_face *)new bsp_face();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_face,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_face(void *obj) {
bsp_face *arg1 = (bsp_face *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_face(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_face);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_face_attributes[] = {
    { "plane", _wrap_bsp_face_plane_get, _wrap_bsp_face_plane_set },
    { "plane_side", _wrap_bsp_face_plane_side_get, _wrap_bsp_face_plane_side_set },
    { "first_edge", _wrap_bsp_face_first_edge_get, _wrap_bsp_face_first_edge_set },
    { "num_edges", _wrap_bsp_face_num_edges_get, _wrap_bsp_face_num_edges_set },
    { "texture_info", _wrap_bsp_face_texture_info_get, _wrap_bsp_face_texture_info_set },
    { "lightmap_styles", _wrap_bsp_face_lightmap_styles_get, _wrap_bsp_face_lightmap_styles_set },
    { "lightmap_offset", _wrap_bsp_face_lightmap_offset_get, _wrap_bsp_face_lightmap_offset_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_face_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_face_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_face_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_face_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_face_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_face_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_face_Sf_SwigStatic = {
    "bsp_face",
    swig_bsp_face_Sf_SwigStatic_methods,
    swig_bsp_face_Sf_SwigStatic_attributes,
    swig_bsp_face_Sf_SwigStatic_constants,
    swig_bsp_face_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_face_bases[] = {0};
static const char *swig_bsp_face_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_face = { "bsp_face", "bsp_face", &SWIGTYPE_p_bsp_face,_proxy__wrap_new_bsp_face, swig_delete_bsp_face, swig_bsp_face_methods, swig_bsp_face_attributes, &swig_bsp_face_Sf_SwigStatic, swig_bsp_face_meta, swig_bsp_face_bases, swig_bsp_face_base_names };

static int _wrap_bsp_face_edge_index_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face_edge *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_face_edge::index",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face_edge::index",1,"bsp_face_edge *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_face_edge::index",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face_edge,0))){
      SWIG_fail_ptr("bsp_face_edge_index_set",1,SWIGTYPE_p_bsp_face_edge);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->index = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_face_edge_index_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face_edge *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_face_edge::index",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_face_edge::index",1,"bsp_face_edge *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_face_edge,0))){
      SWIG_fail_ptr("bsp_face_edge_index_get",1,SWIGTYPE_p_bsp_face_edge);
    }
    
    result = (unsigned int) ((arg1)->index);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_face_edge(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_face_edge *result = 0 ;
    
    SWIG_check_num_args("bsp_face_edge::bsp_face_edge",0,0)
    result = (bsp_face_edge *)new bsp_face_edge();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_face_edge,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_face_edge(void *obj) {
bsp_face_edge *arg1 = (bsp_face_edge *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_face_edge(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_face_edge);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_face_edge_attributes[] = {
    { "index", _wrap_bsp_face_edge_index_get, _wrap_bsp_face_edge_index_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_face_edge_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_face_edge_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_face_edge_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_face_edge_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_face_edge_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_face_edge_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_face_edge_Sf_SwigStatic = {
    "bsp_face_edge",
    swig_bsp_face_edge_Sf_SwigStatic_methods,
    swig_bsp_face_edge_Sf_SwigStatic_attributes,
    swig_bsp_face_edge_Sf_SwigStatic_constants,
    swig_bsp_face_edge_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_face_edge_bases[] = {0};
static const char *swig_bsp_face_edge_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_face_edge = { "bsp_face_edge", "bsp_face_edge", &SWIGTYPE_p_bsp_face_edge,_proxy__wrap_new_bsp_face_edge, swig_delete_bsp_face_edge, swig_bsp_face_edge_methods, swig_bsp_face_edge_attributes, &swig_bsp_face_edge_Sf_SwigStatic, swig_bsp_face_edge_meta, swig_bsp_face_edge_bases, swig_bsp_face_edge_base_names };

static int _wrap_bsp_plane_normal_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_plane *arg1 = 0 ;
    bsp_point3f *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_plane::normal",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_plane::normal",1,"bsp_plane *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_plane::normal",2,"bsp_point3f *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_plane,0))){
      SWIG_fail_ptr("bsp_plane_normal_set",1,SWIGTYPE_p_bsp_plane);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_plane_normal_set",2,SWIGTYPE_p_bsp_point3f);
    }
    
    if (arg1) (arg1)->normal = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_plane_normal_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_plane *arg1 = 0 ;
    bsp_point3f *result = 0 ;
    
    SWIG_check_num_args("bsp_plane::normal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_plane::normal",1,"bsp_plane *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_plane,0))){
      SWIG_fail_ptr("bsp_plane_normal_get",1,SWIGTYPE_p_bsp_plane);
    }
    
    result = (bsp_point3f *)& ((arg1)->normal);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3f,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_plane_distance_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_plane *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("bsp_plane::distance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_plane::distance",1,"bsp_plane *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_plane::distance",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_plane,0))){
      SWIG_fail_ptr("bsp_plane_distance_set",1,SWIGTYPE_p_bsp_plane);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->distance = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_plane_distance_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_plane *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("bsp_plane::distance",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_plane::distance",1,"bsp_plane *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_plane,0))){
      SWIG_fail_ptr("bsp_plane_distance_get",1,SWIGTYPE_p_bsp_plane);
    }
    
    result = (float) ((arg1)->distance);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_plane_type_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_plane *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_plane::type",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_plane::type",1,"bsp_plane *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_plane::type",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_plane,0))){
      SWIG_fail_ptr("bsp_plane_type_set",1,SWIGTYPE_p_bsp_plane);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->type = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_plane_type_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_plane *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_plane::type",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_plane::type",1,"bsp_plane *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_plane,0))){
      SWIG_fail_ptr("bsp_plane_type_get",1,SWIGTYPE_p_bsp_plane);
    }
    
    result = (unsigned int) ((arg1)->type);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_plane(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_plane *result = 0 ;
    
    SWIG_check_num_args("bsp_plane::bsp_plane",0,0)
    result = (bsp_plane *)new bsp_plane();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_plane,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_plane(void *obj) {
bsp_plane *arg1 = (bsp_plane *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_plane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_plane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_plane_attributes[] = {
    { "normal", _wrap_bsp_plane_normal_get, _wrap_bsp_plane_normal_set },
    { "distance", _wrap_bsp_plane_distance_get, _wrap_bsp_plane_distance_set },
    { "type", _wrap_bsp_plane_type_get, _wrap_bsp_plane_type_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_plane_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_plane_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_plane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_plane_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_plane_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_plane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_plane_Sf_SwigStatic = {
    "bsp_plane",
    swig_bsp_plane_Sf_SwigStatic_methods,
    swig_bsp_plane_Sf_SwigStatic_attributes,
    swig_bsp_plane_Sf_SwigStatic_constants,
    swig_bsp_plane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_plane_bases[] = {0};
static const char *swig_bsp_plane_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_plane = { "bsp_plane", "bsp_plane", &SWIGTYPE_p_bsp_plane,_proxy__wrap_new_bsp_plane, swig_delete_bsp_plane, swig_bsp_plane_methods, swig_bsp_plane_attributes, &swig_bsp_plane_Sf_SwigStatic, swig_bsp_plane_meta, swig_bsp_plane_bases, swig_bsp_plane_base_names };

static int _wrap_bsp_node_plane_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_node::plane",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::plane",1,"bsp_node *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_node::plane",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_plane_set",1,SWIGTYPE_p_bsp_node);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->plane = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_plane_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_node::plane",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::plane",1,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_plane_get",1,SWIGTYPE_p_bsp_node);
    }
    
    result = (unsigned int) ((arg1)->plane);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_front_child_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("bsp_node::front_child",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::front_child",1,"bsp_node *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_node::front_child",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_front_child_set",1,SWIGTYPE_p_bsp_node);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->front_child = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_front_child_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("bsp_node::front_child",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::front_child",1,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_front_child_get",1,SWIGTYPE_p_bsp_node);
    }
    
    result = (int) ((arg1)->front_child);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_back_child_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("bsp_node::back_child",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::back_child",1,"bsp_node *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_node::back_child",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_back_child_set",1,SWIGTYPE_p_bsp_node);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->back_child = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_back_child_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("bsp_node::back_child",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::back_child",1,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_back_child_get",1,SWIGTYPE_p_bsp_node);
    }
    
    result = (int) ((arg1)->back_child);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_bbox_min_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    bsp_point3s *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_node::bbox_min",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::bbox_min",1,"bsp_node *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_node::bbox_min",2,"bsp_point3s *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_bbox_min_set",1,SWIGTYPE_p_bsp_node);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_node_bbox_min_set",2,SWIGTYPE_p_bsp_point3s);
    }
    
    if (arg1) (arg1)->bbox_min = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_bbox_min_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    bsp_point3s *result = 0 ;
    
    SWIG_check_num_args("bsp_node::bbox_min",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::bbox_min",1,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_bbox_min_get",1,SWIGTYPE_p_bsp_node);
    }
    
    result = (bsp_point3s *)& ((arg1)->bbox_min);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3s,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_bbox_max_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    bsp_point3s *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_node::bbox_max",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::bbox_max",1,"bsp_node *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_node::bbox_max",2,"bsp_point3s *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_bbox_max_set",1,SWIGTYPE_p_bsp_node);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_node_bbox_max_set",2,SWIGTYPE_p_bsp_point3s);
    }
    
    if (arg1) (arg1)->bbox_max = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_bbox_max_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    bsp_point3s *result = 0 ;
    
    SWIG_check_num_args("bsp_node::bbox_max",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::bbox_max",1,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_bbox_max_get",1,SWIGTYPE_p_bsp_node);
    }
    
    result = (bsp_point3s *)& ((arg1)->bbox_max);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3s,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_first_face_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_node::first_face",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::first_face",1,"bsp_node *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_node::first_face",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_first_face_set",1,SWIGTYPE_p_bsp_node);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->first_face = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_first_face_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_node::first_face",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::first_face",1,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_first_face_get",1,SWIGTYPE_p_bsp_node);
    }
    
    result = (unsigned short) ((arg1)->first_face);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_num_faces_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_node::num_faces",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::num_faces",1,"bsp_node *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_node::num_faces",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_num_faces_set",1,SWIGTYPE_p_bsp_node);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->num_faces = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_node_num_faces_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_node::num_faces",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_node::num_faces",1,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("bsp_node_num_faces_get",1,SWIGTYPE_p_bsp_node);
    }
    
    result = (unsigned short) ((arg1)->num_faces);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_node(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_node *result = 0 ;
    
    SWIG_check_num_args("bsp_node::bsp_node",0,0)
    result = (bsp_node *)new bsp_node();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_node,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_node(void *obj) {
bsp_node *arg1 = (bsp_node *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_node(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_node);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_node_attributes[] = {
    { "plane", _wrap_bsp_node_plane_get, _wrap_bsp_node_plane_set },
    { "front_child", _wrap_bsp_node_front_child_get, _wrap_bsp_node_front_child_set },
    { "back_child", _wrap_bsp_node_back_child_get, _wrap_bsp_node_back_child_set },
    { "bbox_min", _wrap_bsp_node_bbox_min_get, _wrap_bsp_node_bbox_min_set },
    { "bbox_max", _wrap_bsp_node_bbox_max_get, _wrap_bsp_node_bbox_max_set },
    { "first_face", _wrap_bsp_node_first_face_get, _wrap_bsp_node_first_face_set },
    { "num_faces", _wrap_bsp_node_num_faces_get, _wrap_bsp_node_num_faces_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_node_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_node_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_node_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_node_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_node_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_node_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_node_Sf_SwigStatic = {
    "bsp_node",
    swig_bsp_node_Sf_SwigStatic_methods,
    swig_bsp_node_Sf_SwigStatic_attributes,
    swig_bsp_node_Sf_SwigStatic_constants,
    swig_bsp_node_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_node_bases[] = {0};
static const char *swig_bsp_node_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_node = { "bsp_node", "bsp_node", &SWIGTYPE_p_bsp_node,_proxy__wrap_new_bsp_node, swig_delete_bsp_node, swig_bsp_node_methods, swig_bsp_node_attributes, &swig_bsp_node_Sf_SwigStatic, swig_bsp_node_meta, swig_bsp_node_bases, swig_bsp_node_base_names };

static int _wrap_bsp_leaf_brush_or_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_leaf::brush_or",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::brush_or",1,"bsp_leaf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf::brush_or",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_brush_or_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->brush_or = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_brush_or_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_leaf::brush_or",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::brush_or",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_brush_or_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (unsigned int) ((arg1)->brush_or);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_cluster_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_leaf::cluster",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::cluster",1,"bsp_leaf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf::cluster",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_cluster_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->cluster = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_cluster_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_leaf::cluster",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::cluster",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_cluster_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (unsigned short) ((arg1)->cluster);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_area_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_leaf::area",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::area",1,"bsp_leaf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf::area",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_area_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->area = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_area_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_leaf::area",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::area",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_area_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (unsigned short) ((arg1)->area);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_bbox_min_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    bsp_point3s *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_leaf::bbox_min",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::bbox_min",1,"bsp_leaf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_leaf::bbox_min",2,"bsp_point3s *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_bbox_min_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_leaf_bbox_min_set",2,SWIGTYPE_p_bsp_point3s);
    }
    
    if (arg1) (arg1)->bbox_min = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_bbox_min_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    bsp_point3s *result = 0 ;
    
    SWIG_check_num_args("bsp_leaf::bbox_min",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::bbox_min",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_bbox_min_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (bsp_point3s *)& ((arg1)->bbox_min);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3s,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_bbox_max_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    bsp_point3s *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_leaf::bbox_max",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::bbox_max",1,"bsp_leaf *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_leaf::bbox_max",2,"bsp_point3s *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_bbox_max_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_point3s,0))){
      SWIG_fail_ptr("bsp_leaf_bbox_max_set",2,SWIGTYPE_p_bsp_point3s);
    }
    
    if (arg1) (arg1)->bbox_max = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_bbox_max_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    bsp_point3s *result = 0 ;
    
    SWIG_check_num_args("bsp_leaf::bbox_max",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::bbox_max",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_bbox_max_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (bsp_point3s *)& ((arg1)->bbox_max);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3s,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_first_leaf_face_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_leaf::first_leaf_face",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::first_leaf_face",1,"bsp_leaf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf::first_leaf_face",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_first_leaf_face_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->first_leaf_face = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_first_leaf_face_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_leaf::first_leaf_face",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::first_leaf_face",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_first_leaf_face_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (unsigned short) ((arg1)->first_leaf_face);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_num_leaf_faces_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_leaf::num_leaf_faces",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::num_leaf_faces",1,"bsp_leaf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf::num_leaf_faces",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_num_leaf_faces_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->num_leaf_faces = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_num_leaf_faces_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_leaf::num_leaf_faces",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::num_leaf_faces",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_num_leaf_faces_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (unsigned short) ((arg1)->num_leaf_faces);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_first_leaf_brush_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_leaf::first_leaf_brush",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::first_leaf_brush",1,"bsp_leaf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf::first_leaf_brush",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_first_leaf_brush_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->first_leaf_brush = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_first_leaf_brush_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_leaf::first_leaf_brush",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::first_leaf_brush",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_first_leaf_brush_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (unsigned short) ((arg1)->first_leaf_brush);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_num_leaf_brushes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_leaf::num_leaf_brushes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::num_leaf_brushes",1,"bsp_leaf *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf::num_leaf_brushes",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_num_leaf_brushes_set",1,SWIGTYPE_p_bsp_leaf);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->num_leaf_brushes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_num_leaf_brushes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_leaf::num_leaf_brushes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf::num_leaf_brushes",1,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("bsp_leaf_num_leaf_brushes_get",1,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (unsigned short) ((arg1)->num_leaf_brushes);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_leaf(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf *result = 0 ;
    
    SWIG_check_num_args("bsp_leaf::bsp_leaf",0,0)
    result = (bsp_leaf *)new bsp_leaf();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_leaf,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_leaf(void *obj) {
bsp_leaf *arg1 = (bsp_leaf *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_leaf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_leaf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_leaf_attributes[] = {
    { "brush_or", _wrap_bsp_leaf_brush_or_get, _wrap_bsp_leaf_brush_or_set },
    { "cluster", _wrap_bsp_leaf_cluster_get, _wrap_bsp_leaf_cluster_set },
    { "area", _wrap_bsp_leaf_area_get, _wrap_bsp_leaf_area_set },
    { "bbox_min", _wrap_bsp_leaf_bbox_min_get, _wrap_bsp_leaf_bbox_min_set },
    { "bbox_max", _wrap_bsp_leaf_bbox_max_get, _wrap_bsp_leaf_bbox_max_set },
    { "first_leaf_face", _wrap_bsp_leaf_first_leaf_face_get, _wrap_bsp_leaf_first_leaf_face_set },
    { "num_leaf_faces", _wrap_bsp_leaf_num_leaf_faces_get, _wrap_bsp_leaf_num_leaf_faces_set },
    { "first_leaf_brush", _wrap_bsp_leaf_first_leaf_brush_get, _wrap_bsp_leaf_first_leaf_brush_set },
    { "num_leaf_brushes", _wrap_bsp_leaf_num_leaf_brushes_get, _wrap_bsp_leaf_num_leaf_brushes_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_leaf_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_leaf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_leaf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_leaf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_leaf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_leaf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_leaf_Sf_SwigStatic = {
    "bsp_leaf",
    swig_bsp_leaf_Sf_SwigStatic_methods,
    swig_bsp_leaf_Sf_SwigStatic_attributes,
    swig_bsp_leaf_Sf_SwigStatic_constants,
    swig_bsp_leaf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_leaf_bases[] = {0};
static const char *swig_bsp_leaf_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_leaf = { "bsp_leaf", "bsp_leaf", &SWIGTYPE_p_bsp_leaf,_proxy__wrap_new_bsp_leaf, swig_delete_bsp_leaf, swig_bsp_leaf_methods, swig_bsp_leaf_attributes, &swig_bsp_leaf_Sf_SwigStatic, swig_bsp_leaf_meta, swig_bsp_leaf_bases, swig_bsp_leaf_base_names };

static int _wrap_bsp_leaf_face_index_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf_face *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("bsp_leaf_face::index",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf_face::index",1,"bsp_leaf_face *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_leaf_face::index",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf_face,0))){
      SWIG_fail_ptr("bsp_leaf_face_index_set",1,SWIGTYPE_p_bsp_leaf_face);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->index = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_leaf_face_index_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf_face *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("bsp_leaf_face::index",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_leaf_face::index",1,"bsp_leaf_face *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_leaf_face,0))){
      SWIG_fail_ptr("bsp_leaf_face_index_get",1,SWIGTYPE_p_bsp_leaf_face);
    }
    
    result = (unsigned short) ((arg1)->index);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_leaf_face(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_leaf_face *result = 0 ;
    
    SWIG_check_num_args("bsp_leaf_face::bsp_leaf_face",0,0)
    result = (bsp_leaf_face *)new bsp_leaf_face();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_leaf_face,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_leaf_face(void *obj) {
bsp_leaf_face *arg1 = (bsp_leaf_face *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_leaf_face(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_leaf_face);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_leaf_face_attributes[] = {
    { "index", _wrap_bsp_leaf_face_index_get, _wrap_bsp_leaf_face_index_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_leaf_face_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_leaf_face_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_leaf_face_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_leaf_face_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_leaf_face_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_leaf_face_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_leaf_face_Sf_SwigStatic = {
    "bsp_leaf_face",
    swig_bsp_leaf_face_Sf_SwigStatic_methods,
    swig_bsp_leaf_face_Sf_SwigStatic_attributes,
    swig_bsp_leaf_face_Sf_SwigStatic_constants,
    swig_bsp_leaf_face_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_leaf_face_bases[] = {0};
static const char *swig_bsp_leaf_face_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_leaf_face = { "bsp_leaf_face", "bsp_leaf_face", &SWIGTYPE_p_bsp_leaf_face,_proxy__wrap_new_bsp_leaf_face, swig_delete_bsp_leaf_face, swig_bsp_leaf_face_methods, swig_bsp_leaf_face_attributes, &swig_bsp_leaf_face_Sf_SwigStatic, swig_bsp_leaf_face_meta, swig_bsp_leaf_face_bases, swig_bsp_leaf_face_base_names };

static int _wrap_bsp_texinfo_u_axis_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    bsp_point3f *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_texinfo::u_axis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::u_axis",1,"bsp_texinfo *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_texinfo::u_axis",2,"bsp_point3f *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_u_axis_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_texinfo_u_axis_set",2,SWIGTYPE_p_bsp_point3f);
    }
    
    if (arg1) (arg1)->u_axis = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_u_axis_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    bsp_point3f *result = 0 ;
    
    SWIG_check_num_args("bsp_texinfo::u_axis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::u_axis",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_u_axis_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (bsp_point3f *)& ((arg1)->u_axis);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3f,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_u_offset_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("bsp_texinfo::u_offset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::u_offset",1,"bsp_texinfo *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_texinfo::u_offset",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_u_offset_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->u_offset = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_u_offset_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("bsp_texinfo::u_offset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::u_offset",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_u_offset_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (float) ((arg1)->u_offset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_v_axis_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    bsp_point3f *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_texinfo::v_axis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::v_axis",1,"bsp_texinfo *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_texinfo::v_axis",2,"bsp_point3f *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_v_axis_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_point3f,0))){
      SWIG_fail_ptr("bsp_texinfo_v_axis_set",2,SWIGTYPE_p_bsp_point3f);
    }
    
    if (arg1) (arg1)->v_axis = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_v_axis_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    bsp_point3f *result = 0 ;
    
    SWIG_check_num_args("bsp_texinfo::v_axis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::v_axis",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_v_axis_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (bsp_point3f *)& ((arg1)->v_axis);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_point3f,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_v_offset_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("bsp_texinfo::v_offset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::v_offset",1,"bsp_texinfo *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_texinfo::v_offset",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_v_offset_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->v_offset = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_v_offset_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("bsp_texinfo::v_offset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::v_offset",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_v_offset_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (float) ((arg1)->v_offset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_flags_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_texinfo::flags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::flags",1,"bsp_texinfo *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_texinfo::flags",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_flags_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->flags = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_flags_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_texinfo::flags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::flags",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_flags_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (unsigned int) ((arg1)->flags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_value_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_texinfo::value",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::value",1,"bsp_texinfo *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_texinfo::value",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_value_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->value = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_value_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_texinfo::value",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::value",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_value_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (unsigned int) ((arg1)->value);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_texture_name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("bsp_texinfo::texture_name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::texture_name",1,"bsp_texinfo *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("bsp_texinfo::texture_name",2,"char [32]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_texture_name_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->texture_name, (const char *)arg2, 32-1);
        arg1->texture_name[32-1] = 0;
      } else {
        arg1->texture_name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_texture_name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("bsp_texinfo::texture_name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::texture_name",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_texture_name_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (char *)(char *) ((arg1)->texture_name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_next_texinfo_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_texinfo::next_texinfo",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::next_texinfo",1,"bsp_texinfo *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_texinfo::next_texinfo",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_next_texinfo_set",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->next_texinfo = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_texinfo_next_texinfo_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_texinfo::next_texinfo",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_texinfo::next_texinfo",1,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_texinfo,0))){
      SWIG_fail_ptr("bsp_texinfo_next_texinfo_get",1,SWIGTYPE_p_bsp_texinfo);
    }
    
    result = (unsigned int) ((arg1)->next_texinfo);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_texinfo(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_texinfo *result = 0 ;
    
    SWIG_check_num_args("bsp_texinfo::bsp_texinfo",0,0)
    result = (bsp_texinfo *)new bsp_texinfo();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_texinfo,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_texinfo(void *obj) {
bsp_texinfo *arg1 = (bsp_texinfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_texinfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_texinfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_texinfo_attributes[] = {
    { "u_axis", _wrap_bsp_texinfo_u_axis_get, _wrap_bsp_texinfo_u_axis_set },
    { "u_offset", _wrap_bsp_texinfo_u_offset_get, _wrap_bsp_texinfo_u_offset_set },
    { "v_axis", _wrap_bsp_texinfo_v_axis_get, _wrap_bsp_texinfo_v_axis_set },
    { "v_offset", _wrap_bsp_texinfo_v_offset_get, _wrap_bsp_texinfo_v_offset_set },
    { "flags", _wrap_bsp_texinfo_flags_get, _wrap_bsp_texinfo_flags_set },
    { "value", _wrap_bsp_texinfo_value_get, _wrap_bsp_texinfo_value_set },
    { "texture_name", _wrap_bsp_texinfo_texture_name_get, _wrap_bsp_texinfo_texture_name_set },
    { "next_texinfo", _wrap_bsp_texinfo_next_texinfo_get, _wrap_bsp_texinfo_next_texinfo_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_texinfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_texinfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_texinfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_texinfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_texinfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_texinfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_texinfo_Sf_SwigStatic = {
    "bsp_texinfo",
    swig_bsp_texinfo_Sf_SwigStatic_methods,
    swig_bsp_texinfo_Sf_SwigStatic_attributes,
    swig_bsp_texinfo_Sf_SwigStatic_constants,
    swig_bsp_texinfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_texinfo_bases[] = {0};
static const char *swig_bsp_texinfo_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_texinfo = { "bsp_texinfo", "bsp_texinfo", &SWIGTYPE_p_bsp_texinfo,_proxy__wrap_new_bsp_texinfo, swig_delete_bsp_texinfo, swig_bsp_texinfo_methods, swig_bsp_texinfo_attributes, &swig_bsp_texinfo_Sf_SwigStatic, swig_bsp_texinfo_meta, swig_bsp_texinfo_bases, swig_bsp_texinfo_base_names };

static int _wrap_bsp_vis_offset_pvs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis_offset *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_vis_offset::pvs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis_offset::pvs",1,"bsp_vis_offset *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_vis_offset::pvs",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis_offset,0))){
      SWIG_fail_ptr("bsp_vis_offset_pvs_set",1,SWIGTYPE_p_bsp_vis_offset);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->pvs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_vis_offset_pvs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis_offset *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_vis_offset::pvs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis_offset::pvs",1,"bsp_vis_offset *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis_offset,0))){
      SWIG_fail_ptr("bsp_vis_offset_pvs_get",1,SWIGTYPE_p_bsp_vis_offset);
    }
    
    result = (unsigned int) ((arg1)->pvs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_vis_offset_phs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis_offset *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_vis_offset::phs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis_offset::phs",1,"bsp_vis_offset *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_vis_offset::phs",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis_offset,0))){
      SWIG_fail_ptr("bsp_vis_offset_phs_set",1,SWIGTYPE_p_bsp_vis_offset);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->phs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_vis_offset_phs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis_offset *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_vis_offset::phs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis_offset::phs",1,"bsp_vis_offset *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis_offset,0))){
      SWIG_fail_ptr("bsp_vis_offset_phs_get",1,SWIGTYPE_p_bsp_vis_offset);
    }
    
    result = (unsigned int) ((arg1)->phs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_vis_offset(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis_offset *result = 0 ;
    
    SWIG_check_num_args("bsp_vis_offset::bsp_vis_offset",0,0)
    result = (bsp_vis_offset *)new bsp_vis_offset();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_vis_offset,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_vis_offset(void *obj) {
bsp_vis_offset *arg1 = (bsp_vis_offset *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_vis_offset(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_vis_offset);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_vis_offset_attributes[] = {
    { "pvs", _wrap_bsp_vis_offset_pvs_get, _wrap_bsp_vis_offset_pvs_set },
    { "phs", _wrap_bsp_vis_offset_phs_get, _wrap_bsp_vis_offset_phs_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_vis_offset_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_vis_offset_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_vis_offset_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_vis_offset_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_vis_offset_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_vis_offset_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_vis_offset_Sf_SwigStatic = {
    "bsp_vis_offset",
    swig_bsp_vis_offset_Sf_SwigStatic_methods,
    swig_bsp_vis_offset_Sf_SwigStatic_attributes,
    swig_bsp_vis_offset_Sf_SwigStatic_constants,
    swig_bsp_vis_offset_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_vis_offset_bases[] = {0};
static const char *swig_bsp_vis_offset_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_vis_offset = { "bsp_vis_offset", "bsp_vis_offset", &SWIGTYPE_p_bsp_vis_offset,_proxy__wrap_new_bsp_vis_offset, swig_delete_bsp_vis_offset, swig_bsp_vis_offset_methods, swig_bsp_vis_offset_attributes, &swig_bsp_vis_offset_Sf_SwigStatic, swig_bsp_vis_offset_meta, swig_bsp_vis_offset_bases, swig_bsp_vis_offset_base_names };

static int _wrap_bsp_vis_iNumVisOfs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis *arg1 = 0 ;
    unsigned int arg2 ;
    
    SWIG_check_num_args("bsp_vis::iNumVisOfs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis::iNumVisOfs",1,"bsp_vis *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("bsp_vis::iNumVisOfs",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis,0))){
      SWIG_fail_ptr("bsp_vis_iNumVisOfs_set",1,SWIGTYPE_p_bsp_vis);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumVisOfs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_vis_iNumVisOfs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("bsp_vis::iNumVisOfs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis::iNumVisOfs",1,"bsp_vis *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis,0))){
      SWIG_fail_ptr("bsp_vis_iNumVisOfs_get",1,SWIGTYPE_p_bsp_vis);
    }
    
    result = (unsigned int) ((arg1)->iNumVisOfs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_vis_pVisOfs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis *arg1 = 0 ;
    bsp_vis_offset *arg2 = 0 ;
    
    SWIG_check_num_args("bsp_vis::pVisOfs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis::pVisOfs",1,"bsp_vis *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bsp_vis::pVisOfs",2,"bsp_vis_offset *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis,0))){
      SWIG_fail_ptr("bsp_vis_pVisOfs_set",1,SWIGTYPE_p_bsp_vis);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_vis_offset,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("bsp_vis_pVisOfs_set",2,SWIGTYPE_p_bsp_vis_offset);
    }
    
    if (arg1) (arg1)->pVisOfs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_bsp_vis_pVisOfs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis *arg1 = 0 ;
    bsp_vis_offset *result = 0 ;
    
    SWIG_check_num_args("bsp_vis::pVisOfs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bsp_vis::pVisOfs",1,"bsp_vis *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bsp_vis,0))){
      SWIG_fail_ptr("bsp_vis_pVisOfs_get",1,SWIGTYPE_p_bsp_vis);
    }
    
    result = (bsp_vis_offset *) ((arg1)->pVisOfs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_vis_offset,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_bsp_vis(lua_State* L) {
  {
    int SWIG_arg = 0;
    bsp_vis *result = 0 ;
    
    SWIG_check_num_args("bsp_vis::bsp_vis",0,0)
    result = (bsp_vis *)new bsp_vis();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_vis,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_bsp_vis(void *obj) {
bsp_vis *arg1 = (bsp_vis *) obj;
delete arg1;
}
static int _proxy__wrap_new_bsp_vis(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bsp_vis);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bsp_vis_attributes[] = {
    { "iNumVisOfs", _wrap_bsp_vis_iNumVisOfs_get, _wrap_bsp_vis_iNumVisOfs_set },
    { "pVisOfs", _wrap_bsp_vis_pVisOfs_get, _wrap_bsp_vis_pVisOfs_set },
    {0,0,0}
};
static swig_lua_method swig_bsp_vis_methods[]= {
    {0,0}
};
static swig_lua_method swig_bsp_vis_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bsp_vis_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bsp_vis_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bsp_vis_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bsp_vis_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bsp_vis_Sf_SwigStatic = {
    "bsp_vis",
    swig_bsp_vis_Sf_SwigStatic_methods,
    swig_bsp_vis_Sf_SwigStatic_attributes,
    swig_bsp_vis_Sf_SwigStatic_constants,
    swig_bsp_vis_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bsp_vis_bases[] = {0};
static const char *swig_bsp_vis_base_names[] = {0};
static swig_lua_class _wrap_class_bsp_vis = { "bsp_vis", "bsp_vis", &SWIGTYPE_p_bsp_vis,_proxy__wrap_new_bsp_vis, swig_delete_bsp_vis, swig_bsp_vis_methods, swig_bsp_vis_attributes, &swig_bsp_vis_Sf_SwigStatic, swig_bsp_vis_meta, swig_bsp_vis_bases, swig_bsp_vis_base_names };

static int _wrap_ext_texinfo_iWidth_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    ext_texinfo *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("ext_texinfo::iWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ext_texinfo::iWidth",1,"ext_texinfo *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ext_texinfo::iWidth",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ext_texinfo,0))){
      SWIG_fail_ptr("ext_texinfo_iWidth_set",1,SWIGTYPE_p_ext_texinfo);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iWidth = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ext_texinfo_iWidth_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    ext_texinfo *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("ext_texinfo::iWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ext_texinfo::iWidth",1,"ext_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ext_texinfo,0))){
      SWIG_fail_ptr("ext_texinfo_iWidth_get",1,SWIGTYPE_p_ext_texinfo);
    }
    
    result = (int) ((arg1)->iWidth);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ext_texinfo_iHeight_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    ext_texinfo *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("ext_texinfo::iHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ext_texinfo::iHeight",1,"ext_texinfo *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ext_texinfo::iHeight",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ext_texinfo,0))){
      SWIG_fail_ptr("ext_texinfo_iHeight_set",1,SWIGTYPE_p_ext_texinfo);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iHeight = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ext_texinfo_iHeight_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    ext_texinfo *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("ext_texinfo::iHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ext_texinfo::iHeight",1,"ext_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ext_texinfo,0))){
      SWIG_fail_ptr("ext_texinfo_iHeight_get",1,SWIGTYPE_p_ext_texinfo);
    }
    
    result = (int) ((arg1)->iHeight);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ext_texinfo_pBTI_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    ext_texinfo *arg1 = 0 ;
    bsp_texinfo *arg2 = 0 ;
    
    SWIG_check_num_args("ext_texinfo::pBTI",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ext_texinfo::pBTI",1,"ext_texinfo *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ext_texinfo::pBTI",2,"bsp_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ext_texinfo,0))){
      SWIG_fail_ptr("ext_texinfo_pBTI_set",1,SWIGTYPE_p_ext_texinfo);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_texinfo,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ext_texinfo_pBTI_set",2,SWIGTYPE_p_bsp_texinfo);
    }
    
    if (arg1) (arg1)->pBTI = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_ext_texinfo_pBTI_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    ext_texinfo *arg1 = 0 ;
    bsp_texinfo *result = 0 ;
    
    SWIG_check_num_args("ext_texinfo::pBTI",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ext_texinfo::pBTI",1,"ext_texinfo *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ext_texinfo,0))){
      SWIG_fail_ptr("ext_texinfo_pBTI_get",1,SWIGTYPE_p_ext_texinfo);
    }
    
    result = (bsp_texinfo *) ((arg1)->pBTI);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bsp_texinfo,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_ext_texinfo(lua_State* L) {
  {
    int SWIG_arg = 0;
    ext_texinfo *result = 0 ;
    
    SWIG_check_num_args("ext_texinfo::ext_texinfo",0,0)
    result = (ext_texinfo *)new ext_texinfo();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ext_texinfo,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_ext_texinfo(void *obj) {
ext_texinfo *arg1 = (ext_texinfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ext_texinfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ext_texinfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ext_texinfo_attributes[] = {
    { "iWidth", _wrap_ext_texinfo_iWidth_get, _wrap_ext_texinfo_iWidth_set },
    { "iHeight", _wrap_ext_texinfo_iHeight_get, _wrap_ext_texinfo_iHeight_set },
    { "pBTI", _wrap_ext_texinfo_pBTI_get, _wrap_ext_texinfo_pBTI_set },
    {0,0,0}
};
static swig_lua_method swig_ext_texinfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_ext_texinfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ext_texinfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ext_texinfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ext_texinfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ext_texinfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ext_texinfo_Sf_SwigStatic = {
    "ext_texinfo",
    swig_ext_texinfo_Sf_SwigStatic_methods,
    swig_ext_texinfo_Sf_SwigStatic_attributes,
    swig_ext_texinfo_Sf_SwigStatic_constants,
    swig_ext_texinfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ext_texinfo_bases[] = {0};
static const char *swig_ext_texinfo_base_names[] = {0};
static swig_lua_class _wrap_class_ext_texinfo = { "ext_texinfo", "ext_texinfo", &SWIGTYPE_p_ext_texinfo,_proxy__wrap_new_ext_texinfo, swig_delete_ext_texinfo, swig_ext_texinfo_methods, swig_ext_texinfo_attributes, &swig_ext_texinfo_Sf_SwigStatic, swig_ext_texinfo_meta, swig_ext_texinfo_bases, swig_ext_texinfo_base_names };

static int _wrap_CLoaderBSP2_pLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    char *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::pLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::pLoad",1,"CLoaderBSP2 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderBSP2::pLoad",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_pLoad",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGSceneNode *)(arg1)->pLoad(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderBSP2_SetExtendedTexInfo(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::SetExtendedTexInfo",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::SetExtendedTexInfo",1,"CLoaderBSP2 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_SetExtendedTexInfo",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    (arg1)->SetExtendedTexInfo();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderBSP2_poProcessBSP(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::poProcessBSP",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::poProcessBSP",1,"CLoaderBSP2 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_poProcessBSP",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    result = (CGSceneNode *)(arg1)->poProcessBSP();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderBSP2_poGenerateLeaf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    bsp_leaf *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::poGenerateLeaf",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::poGenerateLeaf",1,"CLoaderBSP2 *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLoaderBSP2::poGenerateLeaf",2,"bsp_leaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_poGenerateLeaf",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_leaf,0))){
      SWIG_fail_ptr("CLoaderBSP2_poGenerateLeaf",2,SWIGTYPE_p_bsp_leaf);
    }
    
    result = (CGSceneNode *)(arg1)->poGenerateLeaf(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderBSP2_poGenerateNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    bsp_node *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::poGenerateNode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::poGenerateNode",1,"CLoaderBSP2 *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLoaderBSP2::poGenerateNode",2,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_poGenerateNode",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("CLoaderBSP2_poGenerateNode",2,SWIGTYPE_p_bsp_node);
    }
    
    result = (CGSceneNode *)(arg1)->poGenerateNode(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderBSP2_poGenerateNodeMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    bsp_node *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::poGenerateNodeMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::poGenerateNodeMesh",1,"CLoaderBSP2 *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLoaderBSP2::poGenerateNodeMesh",2,"bsp_node *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_poGenerateNodeMesh",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_node,0))){
      SWIG_fail_ptr("CLoaderBSP2_poGenerateNodeMesh",2,SWIGTYPE_p_bsp_node);
    }
    
    result = (CGSceneNode *)(arg1)->poGenerateNodeMesh(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderBSP2_AddFace(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    bsp_face *arg2 = 0 ;
    SCNUt_TriSceneAccumulator *arg3 = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::AddFace",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::AddFace",1,"CLoaderBSP2 *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLoaderBSP2::AddFace",2,"bsp_face *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CLoaderBSP2::AddFace",3,"SCNUt_TriSceneAccumulator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_AddFace",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bsp_face,0))){
      SWIG_fail_ptr("CLoaderBSP2_AddFace",2,SWIGTYPE_p_bsp_face);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SCNUt_TriSceneAccumulator,0))){
      SWIG_fail_ptr("CLoaderBSP2_AddFace",3,SWIGTYPE_p_SCNUt_TriSceneAccumulator);
    }
    
    (arg1)->AddFace(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderBSP2_SetQ2BaseDir(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderBSP2 *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CLoaderBSP2::SetQ2BaseDir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderBSP2::SetQ2BaseDir",1,"CLoaderBSP2 *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLoaderBSP2::SetQ2BaseDir",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderBSP2,0))){
      SWIG_fail_ptr("CLoaderBSP2_SetQ2BaseDir",1,SWIGTYPE_p_CLoaderBSP2);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->SetQ2BaseDir(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLoaderBSP2(void *obj) {
CLoaderBSP2 *arg1 = (CLoaderBSP2 *) obj;
delete arg1;
}
static swig_lua_attribute swig_CLoaderBSP2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLoaderBSP2_methods[]= {
    { "pLoad", _wrap_CLoaderBSP2_pLoad},
    { "SetExtendedTexInfo", _wrap_CLoaderBSP2_SetExtendedTexInfo},
    { "poProcessBSP", _wrap_CLoaderBSP2_poProcessBSP},
    { "poGenerateLeaf", _wrap_CLoaderBSP2_poGenerateLeaf},
    { "poGenerateNode", _wrap_CLoaderBSP2_poGenerateNode},
    { "poGenerateNodeMesh", _wrap_CLoaderBSP2_poGenerateNodeMesh},
    { "AddFace", _wrap_CLoaderBSP2_AddFace},
    { "SetQ2BaseDir", _wrap_CLoaderBSP2_SetQ2BaseDir},
    {0,0}
};
static swig_lua_method swig_CLoaderBSP2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLoaderBSP2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLoaderBSP2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLoaderBSP2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLoaderBSP2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLoaderBSP2_Sf_SwigStatic = {
    "CLoaderBSP2",
    swig_CLoaderBSP2_Sf_SwigStatic_methods,
    swig_CLoaderBSP2_Sf_SwigStatic_attributes,
    swig_CLoaderBSP2_Sf_SwigStatic_constants,
    swig_CLoaderBSP2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLoaderBSP2_bases[] = {0,0};
static const char *swig_CLoaderBSP2_base_names[] = {"C3DLoader *",0};
static swig_lua_class _wrap_class_CLoaderBSP2 = { "CLoaderBSP2", "CLoaderBSP2", &SWIGTYPE_p_CLoaderBSP2,0, swig_delete_CLoaderBSP2, swig_CLoaderBSP2_methods, swig_CLoaderBSP2_attributes, &swig_CLoaderBSP2_Sf_SwigStatic, swig_CLoaderBSP2_meta, swig_CLoaderBSP2_bases, swig_CLoaderBSP2_base_names };

static int _wrap_CGFileSysManager_hOpenFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysManager *arg1 = 0 ;
    CGString *arg2 = 0 ;
    EFileOpenMode arg3 ;
    handler result;
    
    SWIG_check_num_args("CGFileSysManager::hOpenFile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysManager::hOpenFile",1,"CGFileSysManager const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGFileSysManager::hOpenFile",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysManager::hOpenFile",3,"EFileOpenMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysManager,0))){
      SWIG_fail_ptr("CGFileSysManager_hOpenFile",1,SWIGTYPE_p_CGFileSysManager);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGFileSysManager_hOpenFile",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (EFileOpenMode)(int)lua_tonumber(L, 3);
    result = (handler)((CGFileSysManager const *)arg1)->hOpenFile((CGString const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysManager_CloseFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysManager *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysManager::CloseFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysManager::CloseFile",1,"CGFileSysManager const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysManager::CloseFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysManager,0))){
      SWIG_fail_ptr("CGFileSysManager_CloseFile",1,SWIGTYPE_p_CGFileSysManager);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysManager_CloseFile");
    ((CGFileSysManager const *)arg1)->CloseFile(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysManager_uiReadFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysManager *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysManager::uiReadFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysManager::uiReadFile",1,"CGFileSysManager const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysManager::uiReadFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysManager::uiReadFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysManager::uiReadFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysManager,0))){
      SWIG_fail_ptr("CGFileSysManager_uiReadFile",1,SWIGTYPE_p_CGFileSysManager);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysManager_uiReadFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysManager_uiReadFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)((CGFileSysManager const *)arg1)->uiReadFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysManager_uiWriteFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysManager *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysManager::uiWriteFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysManager::uiWriteFile",1,"CGFileSysManager const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysManager::uiWriteFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysManager::uiWriteFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysManager::uiWriteFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysManager,0))){
      SWIG_fail_ptr("CGFileSysManager_uiWriteFile",1,SWIGTYPE_p_CGFileSysManager);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysManager_uiWriteFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysManager_uiWriteFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)((CGFileSysManager const *)arg1)->uiWriteFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysManager_iSeekFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysManager *arg1 = 0 ;
    handler arg2 = 0 ;
    int arg3 ;
    EFileSeekMode arg4 ;
    int result;
    
    SWIG_check_num_args("CGFileSysManager::iSeekFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysManager::iSeekFile",1,"CGFileSysManager const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysManager::iSeekFile",2,"handler");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysManager::iSeekFile",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysManager::iSeekFile",4,"EFileSeekMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysManager,0))){
      SWIG_fail_ptr("CGFileSysManager_iSeekFile",1,SWIGTYPE_p_CGFileSysManager);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysManager_iSeekFile");
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (EFileSeekMode)(int)lua_tonumber(L, 4);
    result = (int)((CGFileSysManager const *)arg1)->iSeekFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysManager_uiPosFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysManager *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysManager::uiPosFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysManager::uiPosFile",1,"CGFileSysManager const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysManager::uiPosFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysManager,0))){
      SWIG_fail_ptr("CGFileSysManager_uiPosFile",1,SWIGTYPE_p_CGFileSysManager);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysManager_uiPosFile");
    result = (uint)((CGFileSysManager const *)arg1)->uiPosFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysManager_uiLengthFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysManager *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysManager::uiLengthFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysManager::uiLengthFile",1,"CGFileSysManager const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysManager::uiLengthFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysManager,0))){
      SWIG_fail_ptr("CGFileSysManager_uiLengthFile",1,SWIGTYPE_p_CGFileSysManager);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysManager_uiLengthFile");
    result = (uint)((CGFileSysManager const *)arg1)->uiLengthFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGFileSysManager(void *obj) {
CGFileSysManager *arg1 = (CGFileSysManager *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGFileSysManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGFileSysManager_methods[]= {
    { "hOpenFile", _wrap_CGFileSysManager_hOpenFile},
    { "CloseFile", _wrap_CGFileSysManager_CloseFile},
    { "uiReadFile", _wrap_CGFileSysManager_uiReadFile},
    { "uiWriteFile", _wrap_CGFileSysManager_uiWriteFile},
    { "iSeekFile", _wrap_CGFileSysManager_iSeekFile},
    { "uiPosFile", _wrap_CGFileSysManager_uiPosFile},
    { "uiLengthFile", _wrap_CGFileSysManager_uiLengthFile},
    {0,0}
};
static swig_lua_method swig_CGFileSysManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGFileSysManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGFileSysManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGFileSysManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGFileSysManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGFileSysManager_Sf_SwigStatic = {
    "CGFileSysManager",
    swig_CGFileSysManager_Sf_SwigStatic_methods,
    swig_CGFileSysManager_Sf_SwigStatic_attributes,
    swig_CGFileSysManager_Sf_SwigStatic_constants,
    swig_CGFileSysManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGFileSysManager_bases[] = {0};
static const char *swig_CGFileSysManager_base_names[] = {0};
static swig_lua_class _wrap_class_CGFileSysManager = { "CGFileSysManager", "CGFileSysManager", &SWIGTYPE_p_CGFileSysManager,0, swig_delete_CGFileSysManager, swig_CGFileSysManager_methods, swig_CGFileSysManager_attributes, &swig_CGFileSysManager_Sf_SwigStatic, swig_CGFileSysManager_meta, swig_CGFileSysManager_bases, swig_CGFileSysManager_base_names };

static int _wrap_new_CGFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *result = 0 ;
    
    SWIG_check_num_args("CGFile::CGFile",0,0)
    result = (CGFile *)new CGFile();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGFile,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_bOpen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    CGString *arg2 = 0 ;
    EFileOpenMode arg3 ;
    bool result;
    
    SWIG_check_num_args("CGFile::bOpen",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::bOpen",1,"CGFile *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGFile::bOpen",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::bOpen",3,"EFileOpenMode const");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_bOpen",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGFile_bOpen",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (EFileOpenMode const)(int)lua_tonumber(L, 3);
    result = (bool)(arg1)->bOpen((CGString const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Close(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    
    SWIG_check_num_args("CGFile::Close",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Close",1,"CGFile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Close",1,SWIGTYPE_p_CGFile);
    }
    
    (arg1)->Close();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_uiReadData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    pointer arg2 = 0 ;
    uint arg3 ;
    uint result;
    
    SWIG_check_num_args("CGFile::uiReadData",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::uiReadData",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::uiReadData",2,"pointer");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::uiReadData",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_uiReadData",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFile_uiReadData",2,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = (uint)((CGFile const *)arg1)->uiReadData(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_uiWriteData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    pointer arg2 = 0 ;
    uint arg3 ;
    uint result;
    
    SWIG_check_num_args("CGFile::uiWriteData",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::uiWriteData",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::uiWriteData",2,"pointer");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::uiWriteData",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_uiWriteData",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFile_uiWriteData",2,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = (uint)((CGFile const *)arg1)->uiWriteData(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_fRead(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGFile::fRead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::fRead",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_fRead",1,SWIGTYPE_p_CGFile);
    }
    
    result = (float)((CGFile const *)arg1)->fRead();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGFile::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Write",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::Write",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Write",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    ((CGFile const *)arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_iRead(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CGFile::iRead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::iRead",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_iRead",1,SWIGTYPE_p_CGFile);
    }
    
    result = (int)((CGFile const *)arg1)->iRead();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CGFile::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Write",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::Write",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Write",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    ((CGFile const *)arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_uiRead(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFile::uiRead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::uiRead",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_uiRead",1,SWIGTYPE_p_CGFile);
    }
    
    result = (uint)((CGFile const *)arg1)->uiRead();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGFile::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Write",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::Write",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Write",1,SWIGTYPE_p_CGFile);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    ((CGFile const *)arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_sRead(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    short result;
    
    SWIG_check_num_args("CGFile::sRead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::sRead",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_sRead",1,SWIGTYPE_p_CGFile);
    }
    
    result = (short)((CGFile const *)arg1)->sRead();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    short arg2 ;
    
    SWIG_check_num_args("CGFile::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Write",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::Write",2,"short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Write",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (short)lua_tonumber(L, 2);
    ((CGFile const *)arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_usRead(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    unsigned short result;
    
    SWIG_check_num_args("CGFile::usRead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::usRead",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_usRead",1,SWIGTYPE_p_CGFile);
    }
    
    result = (unsigned short)((CGFile const *)arg1)->usRead();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write__SWIG_4(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    unsigned short arg2 ;
    
    SWIG_check_num_args("CGFile::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Write",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::Write",2,"unsigned short");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Write",1,SWIGTYPE_p_CGFile);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned short)lua_tonumber(L, 2);
    ((CGFile const *)arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_cRead(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    char result;
    
    SWIG_check_num_args("CGFile::cRead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::cRead",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_cRead",1,SWIGTYPE_p_CGFile);
    }
    
    result = (char)((CGFile const *)arg1)->cRead();
    lua_pushlstring(L, &result, 1); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write__SWIG_5(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    char arg2 ;
    
    SWIG_check_num_args("CGFile::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Write",1,"CGFile const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGFile::Write",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Write",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    ((CGFile const *)arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_ucRead(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("CGFile::ucRead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::ucRead",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_ucRead",1,SWIGTYPE_p_CGFile);
    }
    
    result = (unsigned char)((CGFile const *)arg1)->ucRead();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write__SWIG_6(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    unsigned char arg2 ;
    
    SWIG_check_num_args("CGFile::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Write",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::Write",2,"unsigned char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Write",1,SWIGTYPE_p_CGFile);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned char)lua_tonumber(L, 2);
    ((CGFile const *)arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGFile_Write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGFile_Write__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGFile_Write__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGFile_Write__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGFile_Write__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGFile_Write__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_CGFile_Write__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGFile_Write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGFile::Write(float) const\n"
    "    CGFile::Write(int) const\n"
    "    CGFile::Write(uint) const\n"
    "    CGFile::Write(short) const\n"
    "    CGFile::Write(unsigned short) const\n"
    "    CGFile::Write(char) const\n"
    "    CGFile::Write(unsigned char) const\n");
  lua_error(L);return 0;
}


static int _wrap_CGFile_ReadArray__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    int *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::ReadArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::ReadArray",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::ReadArray",2,"int const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::ReadArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_ReadArray",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("CGFile_ReadArray",2,SWIGTYPE_p_int);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->ReadArray((int const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_WriteArray__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    int *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::WriteArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::WriteArray",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::WriteArray",2,"int const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::WriteArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_WriteArray",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("CGFile_WriteArray",2,SWIGTYPE_p_int);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->WriteArray((int const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_ReadArray__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    short *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::ReadArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::ReadArray",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::ReadArray",2,"short const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::ReadArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_ReadArray",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
      SWIG_fail_ptr("CGFile_ReadArray",2,SWIGTYPE_p_short);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->ReadArray((short const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_WriteArray__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    short *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::WriteArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::WriteArray",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::WriteArray",2,"short const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::WriteArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_WriteArray",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
      SWIG_fail_ptr("CGFile_WriteArray",2,SWIGTYPE_p_short);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->WriteArray((short const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_ReadArray__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    char *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::ReadArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::ReadArray",1,"CGFile const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGFile::ReadArray",2,"char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::ReadArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_ReadArray",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->ReadArray((char const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_WriteArray__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    char *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::WriteArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::WriteArray",1,"CGFile const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGFile::WriteArray",2,"char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::WriteArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_WriteArray",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->WriteArray((char const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_ReadArray__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    float *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::ReadArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::ReadArray",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::ReadArray",2,"float const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::ReadArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_ReadArray",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("CGFile_ReadArray",2,SWIGTYPE_p_float);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->ReadArray((float const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_ReadArray(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_ReadArray__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_short, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_ReadArray__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_ReadArray__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_ReadArray__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGFile_ReadArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGFile::ReadArray(int const *,uint) const\n"
    "    CGFile::ReadArray(short const *,uint) const\n"
    "    CGFile::ReadArray(char const *,uint) const\n"
    "    CGFile::ReadArray(float const *,uint) const\n");
  lua_error(L);return 0;
}


static int _wrap_CGFile_WriteArray__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    float *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGFile::WriteArray",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::WriteArray",1,"CGFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFile::WriteArray",2,"float const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::WriteArray",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_WriteArray",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("CGFile_WriteArray",2,SWIGTYPE_p_float);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    ((CGFile const *)arg1)->WriteArray((float const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_WriteArray(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_WriteArray__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_short, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_WriteArray__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_WriteArray__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGFile_WriteArray__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGFile_WriteArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGFile::WriteArray(int const *,uint) const\n"
    "    CGFile::WriteArray(short const *,uint) const\n"
    "    CGFile::WriteArray(char const *,uint) const\n"
    "    CGFile::WriteArray(float const *,uint) const\n");
  lua_error(L);return 0;
}


static int _wrap_CGFile_iSeek(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    int arg2 ;
    EFileSeekMode arg3 ;
    int result;
    
    SWIG_check_num_args("CGFile::iSeek",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::iSeek",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::iSeek",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFile::iSeek",3,"EFileSeekMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_iSeek",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (EFileSeekMode)(int)lua_tonumber(L, 3);
    result = (int)((CGFile const *)arg1)->iSeek(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_Skip(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGFile::Skip",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::Skip",1,"CGFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGFile::Skip",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_Skip",1,SWIGTYPE_p_CGFile);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    ((CGFile const *)arg1)->Skip(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_uiPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFile::uiPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::uiPos",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_uiPos",1,SWIGTYPE_p_CGFile);
    }
    
    result = (uint)((CGFile const *)arg1)->uiPos();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_uiLength(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFile::uiLength",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::uiLength",1,"CGFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_uiLength",1,SWIGTYPE_p_CGFile);
    }
    
    result = (uint)((CGFile const *)arg1)->uiLength();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFile_WriteText(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGFile::WriteText",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFile::WriteText",1,"CGFile const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGFile::WriteText",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFile_WriteText",1,SWIGTYPE_p_CGFile);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    ((CGFile const *)arg1)->WriteText(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGFile(void *obj) {
CGFile *arg1 = (CGFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGFile_methods[]= {
    { "bOpen", _wrap_CGFile_bOpen},
    { "Close", _wrap_CGFile_Close},
    { "uiReadData", _wrap_CGFile_uiReadData},
    { "uiWriteData", _wrap_CGFile_uiWriteData},
    { "fRead", _wrap_CGFile_fRead},
    { "iRead", _wrap_CGFile_iRead},
    { "uiRead", _wrap_CGFile_uiRead},
    { "sRead", _wrap_CGFile_sRead},
    { "usRead", _wrap_CGFile_usRead},
    { "cRead", _wrap_CGFile_cRead},
    { "ucRead", _wrap_CGFile_ucRead},
    { "Write", _wrap_CGFile_Write},
    { "ReadArray", _wrap_CGFile_ReadArray},
    { "WriteArray", _wrap_CGFile_WriteArray},
    { "iSeek", _wrap_CGFile_iSeek},
    { "Skip", _wrap_CGFile_Skip},
    { "uiPos", _wrap_CGFile_uiPos},
    { "uiLength", _wrap_CGFile_uiLength},
    { "WriteText", _wrap_CGFile_WriteText},
    {0,0}
};
static swig_lua_method swig_CGFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGFile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGFile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGFile_Sf_SwigStatic = {
    "CGFile",
    swig_CGFile_Sf_SwigStatic_methods,
    swig_CGFile_Sf_SwigStatic_attributes,
    swig_CGFile_Sf_SwigStatic_constants,
    swig_CGFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGFile_bases[] = {0};
static const char *swig_CGFile_base_names[] = {0};
static swig_lua_class _wrap_class_CGFile = { "CGFile", "CGFile", &SWIGTYPE_p_CGFile,_proxy__wrap_new_CGFile, swig_delete_CGFile, swig_CGFile_methods, swig_CGFile_attributes, &swig_CGFile_Sf_SwigStatic, swig_CGFile_meta, swig_CGFile_bases, swig_CGFile_base_names };

static int _wrap_CGOSFile_bOpen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGOSFile *arg1 = 0 ;
    CGString *arg2 = 0 ;
    EFileOpenMode arg3 ;
    bool result;
    
    SWIG_check_num_args("CGOSFile::bOpen",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGOSFile::bOpen",1,"CGOSFile *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGOSFile::bOpen",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGOSFile::bOpen",3,"EFileOpenMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGOSFile,0))){
      SWIG_fail_ptr("CGOSFile_bOpen",1,SWIGTYPE_p_CGOSFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGOSFile_bOpen",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (EFileOpenMode)(int)lua_tonumber(L, 3);
    result = (bool)(arg1)->bOpen((CGString const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGOSFile_Close(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGOSFile *arg1 = 0 ;
    
    SWIG_check_num_args("CGOSFile::Close",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGOSFile::Close",1,"CGOSFile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGOSFile,0))){
      SWIG_fail_ptr("CGOSFile_Close",1,SWIGTYPE_p_CGOSFile);
    }
    
    (arg1)->Close();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGOSFile_uiReadData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGOSFile *arg1 = 0 ;
    pointer arg2 = 0 ;
    uint arg3 ;
    uint result;
    
    SWIG_check_num_args("CGOSFile::uiReadData",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGOSFile::uiReadData",1,"CGOSFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGOSFile::uiReadData",2,"pointer");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGOSFile::uiReadData",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGOSFile,0))){
      SWIG_fail_ptr("CGOSFile_uiReadData",1,SWIGTYPE_p_CGOSFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGOSFile_uiReadData",2,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = (uint)((CGOSFile const *)arg1)->uiReadData(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGOSFile_uiWriteData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGOSFile *arg1 = 0 ;
    pointer arg2 = 0 ;
    uint arg3 ;
    uint result;
    
    SWIG_check_num_args("CGOSFile::uiWriteData",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGOSFile::uiWriteData",1,"CGOSFile const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGOSFile::uiWriteData",2,"pointer");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGOSFile::uiWriteData",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGOSFile,0))){
      SWIG_fail_ptr("CGOSFile_uiWriteData",1,SWIGTYPE_p_CGOSFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGOSFile_uiWriteData",2,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = (uint)((CGOSFile const *)arg1)->uiWriteData(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGOSFile_iSeek(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGOSFile *arg1 = 0 ;
    int arg2 ;
    EFileSeekMode arg3 ;
    int result;
    
    SWIG_check_num_args("CGOSFile::iSeek",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGOSFile::iSeek",1,"CGOSFile const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGOSFile::iSeek",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGOSFile::iSeek",3,"EFileSeekMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGOSFile,0))){
      SWIG_fail_ptr("CGOSFile_iSeek",1,SWIGTYPE_p_CGOSFile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (EFileSeekMode)(int)lua_tonumber(L, 3);
    result = (int)((CGOSFile const *)arg1)->iSeek(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGOSFile_uiPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGOSFile *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGOSFile::uiPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGOSFile::uiPos",1,"CGOSFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGOSFile,0))){
      SWIG_fail_ptr("CGOSFile_uiPos",1,SWIGTYPE_p_CGOSFile);
    }
    
    result = (uint)((CGOSFile const *)arg1)->uiPos();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGOSFile_uiLength(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGOSFile *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGOSFile::uiLength",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGOSFile::uiLength",1,"CGOSFile const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGOSFile,0))){
      SWIG_fail_ptr("CGOSFile_uiLength",1,SWIGTYPE_p_CGOSFile);
    }
    
    result = (uint)((CGOSFile const *)arg1)->uiLength();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGOSFile(void *obj) {
CGOSFile *arg1 = (CGOSFile *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGOSFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGOSFile_methods[]= {
    { "bOpen", _wrap_CGOSFile_bOpen},
    { "Close", _wrap_CGOSFile_Close},
    { "uiReadData", _wrap_CGOSFile_uiReadData},
    { "uiWriteData", _wrap_CGOSFile_uiWriteData},
    { "iSeek", _wrap_CGOSFile_iSeek},
    { "uiPos", _wrap_CGOSFile_uiPos},
    { "uiLength", _wrap_CGOSFile_uiLength},
    {0,0}
};
static swig_lua_method swig_CGOSFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGOSFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGOSFile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGOSFile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGOSFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGOSFile_Sf_SwigStatic = {
    "CGOSFile",
    swig_CGOSFile_Sf_SwigStatic_methods,
    swig_CGOSFile_Sf_SwigStatic_attributes,
    swig_CGOSFile_Sf_SwigStatic_constants,
    swig_CGOSFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGOSFile_bases[] = {0};
static const char *swig_CGOSFile_base_names[] = {0};
static swig_lua_class _wrap_class_CGOSFile = { "CGOSFile", "CGOSFile", &SWIGTYPE_p_CGOSFile,0, swig_delete_CGOSFile, swig_CGOSFile_methods, swig_CGOSFile_attributes, &swig_CGOSFile_Sf_SwigStatic, swig_CGOSFile_meta, swig_CGOSFile_bases, swig_CGOSFile_base_names };

static int _wrap_CGFileSysMgrPAK_hOpenFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrPAK *arg1 = 0 ;
    CGString *arg2 = 0 ;
    EFileOpenMode arg3 ;
    handler result;
    
    SWIG_check_num_args("CGFileSysMgrPAK::hOpenFile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrPAK::hOpenFile",1,"CGFileSysMgrPAK *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGFileSysMgrPAK::hOpenFile",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrPAK::hOpenFile",3,"EFileOpenMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_hOpenFile",1,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_hOpenFile",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (EFileOpenMode)(int)lua_tonumber(L, 3);
    result = (handler)(arg1)->hOpenFile((CGString const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrPAK_CloseFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrPAK::CloseFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrPAK::CloseFile",1,"CGFileSysMgrPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrPAK::CloseFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_CloseFile",1,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrPAK_CloseFile");
    (arg1)->CloseFile(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrPAK_uiReadFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrPAK::uiReadFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrPAK::uiReadFile",1,"CGFileSysMgrPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrPAK::uiReadFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrPAK::uiReadFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrPAK::uiReadFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_uiReadFile",1,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrPAK_uiReadFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_uiReadFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiReadFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrPAK_uiWriteFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrPAK::uiWriteFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrPAK::uiWriteFile",1,"CGFileSysMgrPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrPAK::uiWriteFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrPAK::uiWriteFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrPAK::uiWriteFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_uiWriteFile",1,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrPAK_uiWriteFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_uiWriteFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiWriteFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrPAK_iSeekFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    int arg3 ;
    EFileSeekMode arg4 ;
    int result;
    
    SWIG_check_num_args("CGFileSysMgrPAK::iSeekFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrPAK::iSeekFile",1,"CGFileSysMgrPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrPAK::iSeekFile",2,"handler");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrPAK::iSeekFile",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrPAK::iSeekFile",4,"EFileSeekMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_iSeekFile",1,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrPAK_iSeekFile");
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (EFileSeekMode)(int)lua_tonumber(L, 4);
    result = (int)(arg1)->iSeekFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrPAK_uiLengthFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrPAK::uiLengthFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrPAK::uiLengthFile",1,"CGFileSysMgrPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrPAK::uiLengthFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_uiLengthFile",1,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrPAK_uiLengthFile");
    result = (uint)(arg1)->uiLengthFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrPAK_uiPosFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrPAK::uiPosFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrPAK::uiPosFile",1,"CGFileSysMgrPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrPAK::uiPosFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrPAK_uiPosFile",1,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrPAK_uiPosFile");
    result = (uint)(arg1)->uiPosFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGFileSysMgrPAK(void *obj) {
CGFileSysMgrPAK *arg1 = (CGFileSysMgrPAK *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGFileSysMgrPAK_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGFileSysMgrPAK_methods[]= {
    { "hOpenFile", _wrap_CGFileSysMgrPAK_hOpenFile},
    { "CloseFile", _wrap_CGFileSysMgrPAK_CloseFile},
    { "uiReadFile", _wrap_CGFileSysMgrPAK_uiReadFile},
    { "uiWriteFile", _wrap_CGFileSysMgrPAK_uiWriteFile},
    { "iSeekFile", _wrap_CGFileSysMgrPAK_iSeekFile},
    { "uiLengthFile", _wrap_CGFileSysMgrPAK_uiLengthFile},
    { "uiPosFile", _wrap_CGFileSysMgrPAK_uiPosFile},
    {0,0}
};
static swig_lua_method swig_CGFileSysMgrPAK_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGFileSysMgrPAK_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGFileSysMgrPAK_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGFileSysMgrPAK_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGFileSysMgrPAK_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGFileSysMgrPAK_Sf_SwigStatic = {
    "CGFileSysMgrPAK",
    swig_CGFileSysMgrPAK_Sf_SwigStatic_methods,
    swig_CGFileSysMgrPAK_Sf_SwigStatic_attributes,
    swig_CGFileSysMgrPAK_Sf_SwigStatic_constants,
    swig_CGFileSysMgrPAK_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGFileSysMgrPAK_bases[] = {0,0};
static const char *swig_CGFileSysMgrPAK_base_names[] = {"CGFileSysManager *",0};
static swig_lua_class _wrap_class_CGFileSysMgrPAK = { "CGFileSysMgrPAK", "CGFileSysMgrPAK", &SWIGTYPE_p_CGFileSysMgrPAK,0, swig_delete_CGFileSysMgrPAK, swig_CGFileSysMgrPAK_methods, swig_CGFileSysMgrPAK_attributes, &swig_CGFileSysMgrPAK_Sf_SwigStatic, swig_CGFileSysMgrPAK_meta, swig_CGFileSysMgrPAK_bases, swig_CGFileSysMgrPAK_base_names };

static int _wrap_CGFileSysMgrMultiPAK_hOpenFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    CGString *arg2 = 0 ;
    EFileOpenMode arg3 ;
    handler result;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::hOpenFile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::hOpenFile",1,"CGFileSysMgrMultiPAK *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::hOpenFile",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrMultiPAK::hOpenFile",3,"EFileOpenMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_hOpenFile",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_hOpenFile",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (EFileOpenMode)(int)lua_tonumber(L, 3);
    result = (handler)(arg1)->hOpenFile((CGString const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_CloseFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::CloseFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::CloseFile",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::CloseFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_CloseFile",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiPAK_CloseFile");
    (arg1)->CloseFile(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_uiReadFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::uiReadFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiReadFile",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiReadFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiReadFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiReadFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_uiReadFile",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiPAK_uiReadFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_uiReadFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiReadFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_uiWriteFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::uiWriteFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiWriteFile",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiWriteFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiWriteFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiWriteFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_uiWriteFile",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiPAK_uiWriteFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_uiWriteFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiWriteFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_iSeekFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    int arg3 ;
    EFileSeekMode arg4 ;
    int result;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::iSeekFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::iSeekFile",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::iSeekFile",2,"handler");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrMultiPAK::iSeekFile",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrMultiPAK::iSeekFile",4,"EFileSeekMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_iSeekFile",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiPAK_iSeekFile");
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (EFileSeekMode)(int)lua_tonumber(L, 4);
    result = (int)(arg1)->iSeekFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_uiLengthFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::uiLengthFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiLengthFile",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiLengthFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_uiLengthFile",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiPAK_uiLengthFile");
    result = (uint)(arg1)->uiLengthFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_uiPosFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::uiPosFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiPosFile",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::uiPosFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_uiPosFile",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiPAK_uiPosFile");
    result = (uint)(arg1)->uiPosFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_poGetPAK(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    CGFileSysMgrPAK *result = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::poGetPAK",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::poGetPAK",1,"CGFileSysMgrMultiPAK *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_poGetPAK",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    result = (CGFileSysMgrPAK *)(arg1)->poGetPAK();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGFileSysMgrPAK,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_SetpoPAK(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    CGFileSysMgrPAK *arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::SetpoPAK",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::SetpoPAK",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::SetpoPAK",2,"CGFileSysMgrPAK *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_SetpoPAK",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGFileSysMgrPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_SetpoPAK",2,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    (arg1)->SetpoPAK(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_m_poPAK_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    CGFileSysMgrPAK *arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::m_poPAK",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::m_poPAK",1,"CGFileSysMgrMultiPAK *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiPAK::m_poPAK",2,"CGFileSysMgrPAK *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_m_poPAK_set",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGFileSysMgrPAK,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_m_poPAK_set",2,SWIGTYPE_p_CGFileSysMgrPAK);
    }
    
    if (arg1) (arg1)->m_poPAK = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiPAK_m_poPAK_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiPAK *arg1 = 0 ;
    CGFileSysMgrPAK *result = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiPAK::m_poPAK",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiPAK::m_poPAK",1,"CGFileSysMgrMultiPAK *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiPAK,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiPAK_m_poPAK_get",1,SWIGTYPE_p_CGFileSysMgrMultiPAK);
    }
    
    result = (CGFileSysMgrPAK *) ((arg1)->m_poPAK);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGFileSysMgrPAK,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGFileSysMgrMultiPAK(void *obj) {
CGFileSysMgrMultiPAK *arg1 = (CGFileSysMgrMultiPAK *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGFileSysMgrMultiPAK_attributes[] = {
    { "m_poPAK", _wrap_CGFileSysMgrMultiPAK_m_poPAK_get, _wrap_CGFileSysMgrMultiPAK_m_poPAK_set },
    {0,0,0}
};
static swig_lua_method swig_CGFileSysMgrMultiPAK_methods[]= {
    { "hOpenFile", _wrap_CGFileSysMgrMultiPAK_hOpenFile},
    { "CloseFile", _wrap_CGFileSysMgrMultiPAK_CloseFile},
    { "uiReadFile", _wrap_CGFileSysMgrMultiPAK_uiReadFile},
    { "uiWriteFile", _wrap_CGFileSysMgrMultiPAK_uiWriteFile},
    { "iSeekFile", _wrap_CGFileSysMgrMultiPAK_iSeekFile},
    { "uiLengthFile", _wrap_CGFileSysMgrMultiPAK_uiLengthFile},
    { "uiPosFile", _wrap_CGFileSysMgrMultiPAK_uiPosFile},
    { "poGetPAK", _wrap_CGFileSysMgrMultiPAK_poGetPAK},
    { "SetpoPAK", _wrap_CGFileSysMgrMultiPAK_SetpoPAK},
    {0,0}
};
static swig_lua_method swig_CGFileSysMgrMultiPAK_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGFileSysMgrMultiPAK_Sf_SwigStatic = {
    "CGFileSysMgrMultiPAK",
    swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_methods,
    swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_attributes,
    swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_constants,
    swig_CGFileSysMgrMultiPAK_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGFileSysMgrMultiPAK_bases[] = {0,0};
static const char *swig_CGFileSysMgrMultiPAK_base_names[] = {"CGFileSysManager *",0};
static swig_lua_class _wrap_class_CGFileSysMgrMultiPAK = { "CGFileSysMgrMultiPAK", "CGFileSysMgrMultiPAK", &SWIGTYPE_p_CGFileSysMgrMultiPAK,0, swig_delete_CGFileSysMgrMultiPAK, swig_CGFileSysMgrMultiPAK_methods, swig_CGFileSysMgrMultiPAK_attributes, &swig_CGFileSysMgrMultiPAK_Sf_SwigStatic, swig_CGFileSysMgrMultiPAK_meta, swig_CGFileSysMgrMultiPAK_bases, swig_CGFileSysMgrMultiPAK_base_names };

static int _wrap_CGFileSysMgrZIP_hOpenFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrZIP *arg1 = 0 ;
    CGString *arg2 = 0 ;
    EFileOpenMode arg3 ;
    handler result;
    
    SWIG_check_num_args("CGFileSysMgrZIP::hOpenFile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrZIP::hOpenFile",1,"CGFileSysMgrZIP *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGFileSysMgrZIP::hOpenFile",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrZIP::hOpenFile",3,"EFileOpenMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_hOpenFile",1,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_hOpenFile",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (EFileOpenMode)(int)lua_tonumber(L, 3);
    result = (handler)(arg1)->hOpenFile((CGString const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrZIP_CloseFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrZIP::CloseFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrZIP::CloseFile",1,"CGFileSysMgrZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrZIP::CloseFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_CloseFile",1,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrZIP_CloseFile");
    (arg1)->CloseFile(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrZIP_uiReadFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrZIP::uiReadFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrZIP::uiReadFile",1,"CGFileSysMgrZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrZIP::uiReadFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrZIP::uiReadFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrZIP::uiReadFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_uiReadFile",1,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrZIP_uiReadFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_uiReadFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiReadFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrZIP_uiWriteFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrZIP::uiWriteFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrZIP::uiWriteFile",1,"CGFileSysMgrZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrZIP::uiWriteFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrZIP::uiWriteFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrZIP::uiWriteFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_uiWriteFile",1,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrZIP_uiWriteFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_uiWriteFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiWriteFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrZIP_iSeekFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    int arg3 ;
    EFileSeekMode arg4 ;
    int result;
    
    SWIG_check_num_args("CGFileSysMgrZIP::iSeekFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrZIP::iSeekFile",1,"CGFileSysMgrZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrZIP::iSeekFile",2,"handler");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrZIP::iSeekFile",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrZIP::iSeekFile",4,"EFileSeekMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_iSeekFile",1,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrZIP_iSeekFile");
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (EFileSeekMode)(int)lua_tonumber(L, 4);
    result = (int)(arg1)->iSeekFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrZIP_uiLengthFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrZIP::uiLengthFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrZIP::uiLengthFile",1,"CGFileSysMgrZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrZIP::uiLengthFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_uiLengthFile",1,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrZIP_uiLengthFile");
    result = (uint)(arg1)->uiLengthFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrZIP_uiPosFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrZIP::uiPosFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrZIP::uiPosFile",1,"CGFileSysMgrZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrZIP::uiPosFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrZIP_uiPosFile",1,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrZIP_uiPosFile");
    result = (uint)(arg1)->uiPosFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGFileSysMgrZIP(void *obj) {
CGFileSysMgrZIP *arg1 = (CGFileSysMgrZIP *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGFileSysMgrZIP_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGFileSysMgrZIP_methods[]= {
    { "hOpenFile", _wrap_CGFileSysMgrZIP_hOpenFile},
    { "CloseFile", _wrap_CGFileSysMgrZIP_CloseFile},
    { "uiReadFile", _wrap_CGFileSysMgrZIP_uiReadFile},
    { "uiWriteFile", _wrap_CGFileSysMgrZIP_uiWriteFile},
    { "iSeekFile", _wrap_CGFileSysMgrZIP_iSeekFile},
    { "uiLengthFile", _wrap_CGFileSysMgrZIP_uiLengthFile},
    { "uiPosFile", _wrap_CGFileSysMgrZIP_uiPosFile},
    {0,0}
};
static swig_lua_method swig_CGFileSysMgrZIP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGFileSysMgrZIP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGFileSysMgrZIP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGFileSysMgrZIP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGFileSysMgrZIP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGFileSysMgrZIP_Sf_SwigStatic = {
    "CGFileSysMgrZIP",
    swig_CGFileSysMgrZIP_Sf_SwigStatic_methods,
    swig_CGFileSysMgrZIP_Sf_SwigStatic_attributes,
    swig_CGFileSysMgrZIP_Sf_SwigStatic_constants,
    swig_CGFileSysMgrZIP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGFileSysMgrZIP_bases[] = {0,0};
static const char *swig_CGFileSysMgrZIP_base_names[] = {"CGFileSysManager *",0};
static swig_lua_class _wrap_class_CGFileSysMgrZIP = { "CGFileSysMgrZIP", "CGFileSysMgrZIP", &SWIGTYPE_p_CGFileSysMgrZIP,0, swig_delete_CGFileSysMgrZIP, swig_CGFileSysMgrZIP_methods, swig_CGFileSysMgrZIP_attributes, &swig_CGFileSysMgrZIP_Sf_SwigStatic, swig_CGFileSysMgrZIP_meta, swig_CGFileSysMgrZIP_bases, swig_CGFileSysMgrZIP_base_names };

static int _wrap_CGFileSysMgrMultiZIP_hOpenFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    CGString *arg2 = 0 ;
    EFileOpenMode arg3 ;
    handler result;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::hOpenFile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::hOpenFile",1,"CGFileSysMgrMultiZIP *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::hOpenFile",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrMultiZIP::hOpenFile",3,"EFileOpenMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_hOpenFile",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_hOpenFile",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (EFileOpenMode)(int)lua_tonumber(L, 3);
    result = (handler)(arg1)->hOpenFile((CGString const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_CloseFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::CloseFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::CloseFile",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::CloseFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_CloseFile",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiZIP_CloseFile");
    (arg1)->CloseFile(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_uiReadFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::uiReadFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiReadFile",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiReadFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiReadFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiReadFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_uiReadFile",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiZIP_uiReadFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_uiReadFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiReadFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_uiWriteFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    pointer arg3 = 0 ;
    uint arg4 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::uiWriteFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiWriteFile",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiWriteFile",2,"handler");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiWriteFile",3,"pointer");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiWriteFile",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_uiWriteFile",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiZIP_uiWriteFile");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_uiWriteFile",3,SWIGTYPE_p_unsigned_char);
    }
    
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    result = (uint)(arg1)->uiWriteFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_iSeekFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    int arg3 ;
    EFileSeekMode arg4 ;
    int result;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::iSeekFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::iSeekFile",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::iSeekFile",2,"handler");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGFileSysMgrMultiZIP::iSeekFile",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGFileSysMgrMultiZIP::iSeekFile",4,"EFileSeekMode");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_iSeekFile",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiZIP_iSeekFile");
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (EFileSeekMode)(int)lua_tonumber(L, 4);
    result = (int)(arg1)->iSeekFile(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_uiLengthFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::uiLengthFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiLengthFile",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiLengthFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_uiLengthFile",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiZIP_uiLengthFile");
    result = (uint)(arg1)->uiLengthFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_uiPosFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    handler arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::uiPosFile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiPosFile",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::uiPosFile",2,"handler");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_uiPosFile",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    arg2=(handler)SWIG_MustGetPtr(L,2,0,0,2,"CGFileSysMgrMultiZIP_uiPosFile");
    result = (uint)(arg1)->uiPosFile(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_poGetZIP(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    CGFileSysMgrZIP *result = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::poGetZIP",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::poGetZIP",1,"CGFileSysMgrMultiZIP *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_poGetZIP",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    result = (CGFileSysMgrZIP *)(arg1)->poGetZIP();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGFileSysMgrZIP,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_SetZIP(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    CGFileSysMgrZIP *arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::SetZIP",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::SetZIP",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::SetZIP",2,"CGFileSysMgrZIP *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_SetZIP",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGFileSysMgrZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_SetZIP",2,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    (arg1)->SetZIP(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_m_poZIP_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    CGFileSysMgrZIP *arg2 = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::m_poZIP",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::m_poZIP",1,"CGFileSysMgrMultiZIP *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGFileSysMgrMultiZIP::m_poZIP",2,"CGFileSysMgrZIP *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_m_poZIP_set",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGFileSysMgrZIP,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_m_poZIP_set",2,SWIGTYPE_p_CGFileSysMgrZIP);
    }
    
    if (arg1) (arg1)->m_poZIP = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileSysMgrMultiZIP_m_poZIP_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileSysMgrMultiZIP *arg1 = 0 ;
    CGFileSysMgrZIP *result = 0 ;
    
    SWIG_check_num_args("CGFileSysMgrMultiZIP::m_poZIP",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGFileSysMgrMultiZIP::m_poZIP",1,"CGFileSysMgrMultiZIP *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFileSysMgrMultiZIP,0))){
      SWIG_fail_ptr("CGFileSysMgrMultiZIP_m_poZIP_get",1,SWIGTYPE_p_CGFileSysMgrMultiZIP);
    }
    
    result = (CGFileSysMgrZIP *) ((arg1)->m_poZIP);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGFileSysMgrZIP,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGFileSysMgrMultiZIP(void *obj) {
CGFileSysMgrMultiZIP *arg1 = (CGFileSysMgrMultiZIP *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGFileSysMgrMultiZIP_attributes[] = {
    { "m_poZIP", _wrap_CGFileSysMgrMultiZIP_m_poZIP_get, _wrap_CGFileSysMgrMultiZIP_m_poZIP_set },
    {0,0,0}
};
static swig_lua_method swig_CGFileSysMgrMultiZIP_methods[]= {
    { "hOpenFile", _wrap_CGFileSysMgrMultiZIP_hOpenFile},
    { "CloseFile", _wrap_CGFileSysMgrMultiZIP_CloseFile},
    { "uiReadFile", _wrap_CGFileSysMgrMultiZIP_uiReadFile},
    { "uiWriteFile", _wrap_CGFileSysMgrMultiZIP_uiWriteFile},
    { "iSeekFile", _wrap_CGFileSysMgrMultiZIP_iSeekFile},
    { "uiLengthFile", _wrap_CGFileSysMgrMultiZIP_uiLengthFile},
    { "uiPosFile", _wrap_CGFileSysMgrMultiZIP_uiPosFile},
    { "poGetZIP", _wrap_CGFileSysMgrMultiZIP_poGetZIP},
    { "SetZIP", _wrap_CGFileSysMgrMultiZIP_SetZIP},
    {0,0}
};
static swig_lua_method swig_CGFileSysMgrMultiZIP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGFileSysMgrMultiZIP_Sf_SwigStatic = {
    "CGFileSysMgrMultiZIP",
    swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_methods,
    swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_attributes,
    swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_constants,
    swig_CGFileSysMgrMultiZIP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGFileSysMgrMultiZIP_bases[] = {0,0};
static const char *swig_CGFileSysMgrMultiZIP_base_names[] = {"CGFileSysManager *",0};
static swig_lua_class _wrap_class_CGFileSysMgrMultiZIP = { "CGFileSysMgrMultiZIP", "CGFileSysMgrMultiZIP", &SWIGTYPE_p_CGFileSysMgrMultiZIP,0, swig_delete_CGFileSysMgrMultiZIP, swig_CGFileSysMgrMultiZIP_methods, swig_CGFileSysMgrMultiZIP_attributes, &swig_CGFileSysMgrMultiZIP_Sf_SwigStatic, swig_CGFileSysMgrMultiZIP_meta, swig_CGFileSysMgrMultiZIP_bases, swig_CGFileSysMgrMultiZIP_base_names };

static int _wrap_CGFileUtils_BeginRIFFBlock(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CGFile *arg2 = 0 ;
    
    SWIG_check_num_args("CGFileUtils::BeginRIFFBlock",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGFileUtils::BeginRIFFBlock",1,"uint");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGFileUtils::BeginRIFFBlock",2,"CGFile const &");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFileUtils_BeginRIFFBlock",2,SWIGTYPE_p_CGFile);
    }
    
    CGFileUtils::BeginRIFFBlock(arg1,(CGFile const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGFileUtils_EndRIFFBlock(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    
    SWIG_check_num_args("CGFileUtils::EndRIFFBlock",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGFileUtils::EndRIFFBlock",1,"CGFile const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGFileUtils_EndRIFFBlock",1,SWIGTYPE_p_CGFile);
    }
    
    CGFileUtils::EndRIFFBlock((CGFile const &)*arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGFileUtils(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFileUtils *result = 0 ;
    
    SWIG_check_num_args("CGFileUtils::CGFileUtils",0,0)
    result = (CGFileUtils *)new CGFileUtils();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGFileUtils,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGFileUtils(void *obj) {
CGFileUtils *arg1 = (CGFileUtils *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGFileUtils(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGFileUtils);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGFileUtils_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGFileUtils_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGFileUtils_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGFileUtils_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGFileUtils_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGFileUtils_Sf_SwigStatic_methods[]= {
    { "BeginRIFFBlock", _wrap_CGFileUtils_BeginRIFFBlock},
    { "EndRIFFBlock", _wrap_CGFileUtils_EndRIFFBlock},
    {0,0}
};
static swig_lua_class* swig_CGFileUtils_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGFileUtils_Sf_SwigStatic = {
    "CGFileUtils",
    swig_CGFileUtils_Sf_SwigStatic_methods,
    swig_CGFileUtils_Sf_SwigStatic_attributes,
    swig_CGFileUtils_Sf_SwigStatic_constants,
    swig_CGFileUtils_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGFileUtils_bases[] = {0};
static const char *swig_CGFileUtils_base_names[] = {0};
static swig_lua_class _wrap_class_CGFileUtils = { "CGFileUtils", "CGFileUtils", &SWIGTYPE_p_CGFileUtils,_proxy__wrap_new_CGFileUtils, swig_delete_CGFileUtils, swig_CGFileUtils_methods, swig_CGFileUtils_attributes, &swig_CGFileUtils_Sf_SwigStatic, swig_CGFileUtils_meta, swig_CGFileUtils_bases, swig_CGFileUtils_base_names };

static int _wrap_GEM_FILE_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_FILE_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_FILE_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_NULL_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_NULL_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_NULL_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_LEAF_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_LEAF_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_LEAF_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_NODE_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_NODE_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_NODE_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_GROUP_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_GROUP_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_GROUP_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_TRANSF_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_TRANSF_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_TRANSF_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_ANIMNODE_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_ANIMNODE_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_ANIMNODE_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_ANIMGROUP_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_ANIMGROUP_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_ANIMGROUP_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_ANIMMESH_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_ANIMMESH_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_ANIMMESH_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_ANIMTRANSF_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_ANIMTRANSF_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_ANIMTRANSF_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_ANIMACTIONSET_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_ANIMACTIONSET_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_ANIMACTIONSET_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_CAMERA_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_CAMERA_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_CAMERA_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_BSPNODE_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_BSPNODE_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_BSPNODE_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_MUX_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_MUX_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_MUX_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEM_MESH_IDENTIFIER_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint result;
    
    SWIG_check_num_args("GEM_MESH_IDENTIFIER",0,0)
    result = (uint)(uint)GEM_MESH_IDENTIFIER;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEMFile_Translate_TypeID2FileID(lua_State* L) {
  {
    int SWIG_arg = 0;
    ESceneNodeType arg1 ;
    uint result;
    
    SWIG_check_num_args("GEMFile_Translate_TypeID2FileID",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("GEMFile_Translate_TypeID2FileID",1,"ESceneNodeType");
    arg1 = (ESceneNodeType)(int)lua_tonumber(L, 1);
    result = (uint)GEMFile_Translate_TypeID2FileID(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_GEMFile_Translate_FileID2TypeID2(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    ESceneNodeType result;
    
    SWIG_check_num_args("GEMFile_Translate_FileID2TypeID2",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("GEMFile_Translate_FileID2TypeID2",1,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    result = (ESceneNodeType)GEMFile_Translate_FileID2TypeID2(arg1);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CLoaderGEM(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderGEM *result = 0 ;
    
    SWIG_check_num_args("CLoaderGEM::CLoaderGEM",0,0)
    result = (CLoaderGEM *)new CLoaderGEM();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLoaderGEM,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderGEM_poLoad__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderGEM *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderGEM::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderGEM::poLoad",1,"CLoaderGEM *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLoaderGEM::poLoad",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderGEM,0))){
      SWIG_fail_ptr("CLoaderGEM_poLoad",1,SWIGTYPE_p_CLoaderGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CLoaderGEM_poLoad",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGSceneNode *)(arg1)->poLoad((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderGEM_poLoad__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLoaderGEM *arg1 = 0 ;
    CGFile *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CLoaderGEM::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLoaderGEM::poLoad",1,"CLoaderGEM *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLoaderGEM::poLoad",2,"CGFile const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLoaderGEM,0))){
      SWIG_fail_ptr("CLoaderGEM_poLoad",1,SWIGTYPE_p_CLoaderGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CLoaderGEM_poLoad",2,SWIGTYPE_p_CGFile);
    }
    
    result = (CGSceneNode *)(arg1)->poLoad((CGFile const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLoaderGEM_poLoad(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CLoaderGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CLoaderGEM_poLoad__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CLoaderGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGFile, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CLoaderGEM_poLoad__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CLoaderGEM_poLoad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CLoaderGEM::poLoad(CGString const &)\n"
    "    CLoaderGEM::poLoad(CGFile const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_CLoaderGEM(void *obj) {
CLoaderGEM *arg1 = (CLoaderGEM *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLoaderGEM(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLoaderGEM);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLoaderGEM_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLoaderGEM_methods[]= {
    { "poLoad", _wrap_CLoaderGEM_poLoad},
    {0,0}
};
static swig_lua_method swig_CLoaderGEM_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLoaderGEM_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLoaderGEM_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLoaderGEM_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLoaderGEM_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLoaderGEM_Sf_SwigStatic = {
    "CLoaderGEM",
    swig_CLoaderGEM_Sf_SwigStatic_methods,
    swig_CLoaderGEM_Sf_SwigStatic_attributes,
    swig_CLoaderGEM_Sf_SwigStatic_constants,
    swig_CLoaderGEM_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLoaderGEM_bases[] = {0,0};
static const char *swig_CLoaderGEM_base_names[] = {"C3DLoader *",0};
static swig_lua_class _wrap_class_CLoaderGEM = { "CLoaderGEM", "CLoaderGEM", &SWIGTYPE_p_CLoaderGEM,_proxy__wrap_new_CLoaderGEM, swig_delete_CLoaderGEM, swig_CLoaderGEM_methods, swig_CLoaderGEM_attributes, &swig_CLoaderGEM_Sf_SwigStatic, swig_CLoaderGEM_meta, swig_CLoaderGEM_bases, swig_CLoaderGEM_base_names };

static int _wrap_C3DSaver_bSave(lua_State* L) {
  {
    int SWIG_arg = 0;
    C3DSaver *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGSceneNode *arg3 = 0 ;
    bool result;
    
    SWIG_check_num_args("C3DSaver::bSave",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("C3DSaver::bSave",1,"C3DSaver *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("C3DSaver::bSave",2,"CGString const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("C3DSaver::bSave",3,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_C3DSaver,0))){
      SWIG_fail_ptr("C3DSaver_bSave",1,SWIGTYPE_p_C3DSaver);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("C3DSaver_bSave",2,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("C3DSaver_bSave",3,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (bool)(arg1)->bSave((CGString const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_C3DSaver(void *obj) {
C3DSaver *arg1 = (C3DSaver *) obj;
delete arg1;
}
static swig_lua_attribute swig_C3DSaver_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_C3DSaver_methods[]= {
    { "bSave", _wrap_C3DSaver_bSave},
    {0,0}
};
static swig_lua_method swig_C3DSaver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_C3DSaver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_C3DSaver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_C3DSaver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_C3DSaver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_C3DSaver_Sf_SwigStatic = {
    "C3DSaver",
    swig_C3DSaver_Sf_SwigStatic_methods,
    swig_C3DSaver_Sf_SwigStatic_attributes,
    swig_C3DSaver_Sf_SwigStatic_constants,
    swig_C3DSaver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_C3DSaver_bases[] = {0,0};
static const char *swig_C3DSaver_base_names[] = {"CGSceneVisitor *",0};
static swig_lua_class _wrap_class_C3DSaver = { "C3DSaver", "C3DSaver", &SWIGTYPE_p_C3DSaver,0, swig_delete_C3DSaver, swig_C3DSaver_methods, swig_C3DSaver_attributes, &swig_C3DSaver_Sf_SwigStatic, swig_C3DSaver_meta, swig_C3DSaver_bases, swig_C3DSaver_base_names };

static int _wrap_new_CSaverGEM(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *result = 0 ;
    
    SWIG_check_num_args("CSaverGEM::CSaverGEM",0,0)
    result = (CSaverGEM *)new CSaverGEM();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSaverGEM,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneBSPNode *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneLeaf *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneLeaf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneMux *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneMux *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneMux);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_4(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_5(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_6(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneAnimActionSet *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_7(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneAnimMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_8(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneAnimGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_9(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneAnimTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_10(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneAnimNode *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneAnimNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_11(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneSwitch *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneSwitch);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_12(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneScreenRect *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_13(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneInstance,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneInstance);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit__SWIG_14(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGSceneCamera *arg2 = 0 ;
    
    SWIG_check_num_args("CSaverGEM::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::Visit",1,"CSaverGEM *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSaverGEM::Visit",2,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CSaverGEM_Visit",2,SWIGTYPE_p_CGSceneCamera);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_Visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneBSPNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneLeaf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneMux, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_14(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneInstance, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimActionSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneSwitch, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneScreenRect, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSaverGEM_Visit__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSaverGEM_Visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CSaverGEM::Visit(CGSceneNode *)\n"
    "    CSaverGEM::Visit(CGSceneBSPNode *)\n"
    "    CSaverGEM::Visit(CGSceneLeaf *)\n"
    "    CSaverGEM::Visit(CGSceneMux *)\n"
    "    CSaverGEM::Visit(CGSceneGroup *)\n"
    "    CSaverGEM::Visit(CGSceneTransf *)\n"
    "    CSaverGEM::Visit(CGSceneAnimActionSet *)\n"
    "    CSaverGEM::Visit(CGSceneAnimMesh *)\n"
    "    CSaverGEM::Visit(CGSceneAnimGroup *)\n"
    "    CSaverGEM::Visit(CGSceneAnimTransf *)\n"
    "    CSaverGEM::Visit(CGSceneAnimNode *)\n"
    "    CSaverGEM::Visit(CGSceneSwitch *)\n"
    "    CSaverGEM::Visit(CGSceneScreenRect *)\n"
    "    CSaverGEM::Visit(CGSceneInstance *)\n"
    "    CSaverGEM::Visit(CGSceneCamera *)\n");
  lua_error(L);return 0;
}


static int _wrap_CSaverGEM_bSave__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGSceneNode *arg3 = 0 ;
    bool result;
    
    SWIG_check_num_args("CSaverGEM::bSave",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::bSave",1,"CSaverGEM *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSaverGEM::bSave",2,"CGString const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CSaverGEM::bSave",3,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_bSave",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CSaverGEM_bSave",2,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CSaverGEM_bSave",3,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (bool)(arg1)->bSave((CGString const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_bSave__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSaverGEM *arg1 = 0 ;
    CGFile *arg2 = 0 ;
    CGSceneNode *arg3 = 0 ;
    bool result;
    
    SWIG_check_num_args("CSaverGEM::bSave",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSaverGEM::bSave",1,"CSaverGEM *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSaverGEM::bSave",2,"CGFile const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CSaverGEM::bSave",3,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSaverGEM,0))){
      SWIG_fail_ptr("CSaverGEM_bSave",1,SWIGTYPE_p_CSaverGEM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CSaverGEM_bSave",2,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CSaverGEM_bSave",3,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (bool)(arg1)->bSave((CGFile const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSaverGEM_bSave(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CSaverGEM_bSave__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSaverGEM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGFile, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CSaverGEM_bSave__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSaverGEM_bSave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CSaverGEM::bSave(CGString const &,CGSceneNode *)\n"
    "    CSaverGEM::bSave(CGFile const &,CGSceneNode *)\n");
  lua_error(L);return 0;
}


static void swig_delete_CSaverGEM(void *obj) {
CSaverGEM *arg1 = (CSaverGEM *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSaverGEM(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSaverGEM);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSaverGEM_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSaverGEM_methods[]= {
    { "Visit", _wrap_CSaverGEM_Visit},
    { "bSave", _wrap_CSaverGEM_bSave},
    {0,0}
};
static swig_lua_method swig_CSaverGEM_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSaverGEM_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSaverGEM_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSaverGEM_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSaverGEM_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSaverGEM_Sf_SwigStatic = {
    "CSaverGEM",
    swig_CSaverGEM_Sf_SwigStatic_methods,
    swig_CSaverGEM_Sf_SwigStatic_attributes,
    swig_CSaverGEM_Sf_SwigStatic_constants,
    swig_CSaverGEM_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSaverGEM_bases[] = {0,0};
static const char *swig_CSaverGEM_base_names[] = {"C3DSaver *",0};
static swig_lua_class _wrap_class_CSaverGEM = { "CSaverGEM", "CSaverGEM", &SWIGTYPE_p_CSaverGEM,_proxy__wrap_new_CSaverGEM, swig_delete_CSaverGEM, swig_CSaverGEM_methods, swig_CSaverGEM_attributes, &swig_CSaverGEM_Sf_SwigStatic, swig_CSaverGEM_meta, swig_CSaverGEM_bases, swig_CSaverGEM_base_names };

static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneBSPNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneCamera *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneCamera);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneInstance,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneInstance);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_4(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneLeaf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneLeaf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_5(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneMux *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneMux *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneMux);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_6(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_7(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneScreenRect *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_8(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneSwitch *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneSwitch);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_9(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_10(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneAnimActionSet *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_11(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneAnimNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneAnimNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_12(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneAnimMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_13(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneAnimGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_14(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *arg1 = 0 ;
    CGSceneAnimTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",1,"CGSCNVBoundVolBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVBoundVolBuilder::Visit",2,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVBoundVolBuilder,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",1,SWIGTYPE_p_CGSCNVBoundVolBuilder);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSCNVBoundVolBuilder_Visit",2,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVBoundVolBuilder_Visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneBSPNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneInstance, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneLeaf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneMux, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneScreenRect, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneSwitch, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimActionSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_14(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVBoundVolBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVBoundVolBuilder_Visit__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGSCNVBoundVolBuilder_Visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneNode *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneBSPNode *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneCamera *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneInstance *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneLeaf *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneMux *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneGroup *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneScreenRect *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneSwitch *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneTransf *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneAnimActionSet *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneAnimNode *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneAnimMesh *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneAnimGroup *)\n"
    "    CGSCNVBoundVolBuilder::Visit(CGSceneAnimTransf *)\n");
  lua_error(L);return 0;
}


static int _wrap_new_CGSCNVBoundVolBuilder(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVBoundVolBuilder *result = 0 ;
    
    SWIG_check_num_args("CGSCNVBoundVolBuilder::CGSCNVBoundVolBuilder",0,0)
    result = (CGSCNVBoundVolBuilder *)new CGSCNVBoundVolBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSCNVBoundVolBuilder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSCNVBoundVolBuilder(void *obj) {
CGSCNVBoundVolBuilder *arg1 = (CGSCNVBoundVolBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSCNVBoundVolBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSCNVBoundVolBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSCNVBoundVolBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSCNVBoundVolBuilder_methods[]= {
    { "Visit", _wrap_CGSCNVBoundVolBuilder_Visit},
    {0,0}
};
static swig_lua_method swig_CGSCNVBoundVolBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSCNVBoundVolBuilder_Sf_SwigStatic = {
    "CGSCNVBoundVolBuilder",
    swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_methods,
    swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_attributes,
    swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_constants,
    swig_CGSCNVBoundVolBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSCNVBoundVolBuilder_bases[] = {0,0};
static const char *swig_CGSCNVBoundVolBuilder_base_names[] = {"CGSceneVisitor *",0};
static swig_lua_class _wrap_class_CGSCNVBoundVolBuilder = { "CGSCNVBoundVolBuilder", "CGSCNVBoundVolBuilder", &SWIGTYPE_p_CGSCNVBoundVolBuilder,_proxy__wrap_new_CGSCNVBoundVolBuilder, swig_delete_CGSCNVBoundVolBuilder, swig_CGSCNVBoundVolBuilder_methods, swig_CGSCNVBoundVolBuilder_attributes, &swig_CGSCNVBoundVolBuilder_Sf_SwigStatic, swig_CGSCNVBoundVolBuilder_meta, swig_CGSCNVBoundVolBuilder_bases, swig_CGSCNVBoundVolBuilder_base_names };

static int _wrap_CGSCNVRenderer_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Render",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Render",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Render",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Render",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Render",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->Render(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneBSPNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneCamera *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneCamera);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneInstance,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneInstance);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_4(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneLeaf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneLeaf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_5(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneMux *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneMux *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneMux);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_6(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_7(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneScreenRect *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_8(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneSwitch *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneSwitch);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_9(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_10(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneAnimActionSet *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_11(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneAnimNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneAnimNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_12(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneAnimMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_13(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneAnimGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit__SWIG_14(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *arg1 = 0 ;
    CGSceneAnimTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVRenderer::Visit",1,"CGSCNVRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVRenderer::Visit",2,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVRenderer,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",1,SWIGTYPE_p_CGSCNVRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSCNVRenderer_Visit",2,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVRenderer_Visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneBSPNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneInstance, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneLeaf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneMux, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneScreenRect, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneSwitch, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimActionSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_14(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVRenderer_Visit__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGSCNVRenderer_Visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSCNVRenderer::Visit(CGSceneNode *)\n"
    "    CGSCNVRenderer::Visit(CGSceneBSPNode *)\n"
    "    CGSCNVRenderer::Visit(CGSceneCamera *)\n"
    "    CGSCNVRenderer::Visit(CGSceneInstance *)\n"
    "    CGSCNVRenderer::Visit(CGSceneLeaf *)\n"
    "    CGSCNVRenderer::Visit(CGSceneMux *)\n"
    "    CGSCNVRenderer::Visit(CGSceneGroup *)\n"
    "    CGSCNVRenderer::Visit(CGSceneScreenRect *)\n"
    "    CGSCNVRenderer::Visit(CGSceneSwitch *)\n"
    "    CGSCNVRenderer::Visit(CGSceneTransf *)\n"
    "    CGSCNVRenderer::Visit(CGSceneAnimActionSet *)\n"
    "    CGSCNVRenderer::Visit(CGSceneAnimNode *)\n"
    "    CGSCNVRenderer::Visit(CGSceneAnimMesh *)\n"
    "    CGSCNVRenderer::Visit(CGSceneAnimGroup *)\n"
    "    CGSCNVRenderer::Visit(CGSceneAnimTransf *)\n");
  lua_error(L);return 0;
}


static int _wrap_new_CGSCNVRenderer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVRenderer *result = 0 ;
    
    SWIG_check_num_args("CGSCNVRenderer::CGSCNVRenderer",0,0)
    result = (CGSCNVRenderer *)new CGSCNVRenderer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSCNVRenderer,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSCNVRenderer(void *obj) {
CGSCNVRenderer *arg1 = (CGSCNVRenderer *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSCNVRenderer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSCNVRenderer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSCNVRenderer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSCNVRenderer_methods[]= {
    { "Render", _wrap_CGSCNVRenderer_Render},
    { "Visit", _wrap_CGSCNVRenderer_Visit},
    {0,0}
};
static swig_lua_method swig_CGSCNVRenderer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSCNVRenderer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSCNVRenderer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSCNVRenderer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSCNVRenderer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSCNVRenderer_Sf_SwigStatic = {
    "CGSCNVRenderer",
    swig_CGSCNVRenderer_Sf_SwigStatic_methods,
    swig_CGSCNVRenderer_Sf_SwigStatic_attributes,
    swig_CGSCNVRenderer_Sf_SwigStatic_constants,
    swig_CGSCNVRenderer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSCNVRenderer_bases[] = {0,0};
static const char *swig_CGSCNVRenderer_base_names[] = {"CGSceneVisitor *",0};
static swig_lua_class _wrap_class_CGSCNVRenderer = { "CGSCNVRenderer", "CGSCNVRenderer", &SWIGTYPE_p_CGSCNVRenderer,_proxy__wrap_new_CGSCNVRenderer, swig_delete_CGSCNVRenderer, swig_CGSCNVRenderer_methods, swig_CGSCNVRenderer_attributes, &swig_CGSCNVRenderer_Sf_SwigStatic, swig_CGSCNVRenderer_meta, swig_CGSCNVRenderer_bases, swig_CGSCNVRenderer_base_names };

static int _wrap_CGSCNVVisibilityChecker_bIsVisible(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::bIsVisible",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::bIsVisible",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::bIsVisible",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_bIsVisible",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_bIsVisible",2,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (bool)(arg1)->bIsVisible(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneBSPNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneCamera *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneCamera *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneCamera,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneCamera);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneInstance,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneInstance);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_4(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneLeaf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneLeaf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_5(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneMux *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneMux *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneMux,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneMux);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_6(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_7(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneScreenRect *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneScreenRect *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneScreenRect,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneScreenRect);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_8(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneSwitch *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneSwitch *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneSwitch,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneSwitch);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_9(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_10(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneAnimActionSet *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneAnimActionSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimActionSet,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneAnimActionSet);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_11(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneAnimNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneAnimNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimNode,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneAnimNode);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_12(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneAnimMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneAnimMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimMesh,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneAnimMesh);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_13(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneAnimGroup *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneAnimGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimGroup,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneAnimGroup);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit__SWIG_14(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *arg1 = 0 ;
    CGSceneAnimTransf *arg2 = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::Visit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",1,"CGSCNVVisibilityChecker *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVVisibilityChecker::Visit",2,"CGSceneAnimTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVVisibilityChecker,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",1,SWIGTYPE_p_CGSCNVVisibilityChecker);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneAnimTransf,0))){
      SWIG_fail_ptr("CGSCNVVisibilityChecker_Visit",2,SWIGTYPE_p_CGSceneAnimTransf);
    }
    
    (arg1)->Visit(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSCNVVisibilityChecker_Visit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneBSPNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneInstance, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneLeaf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneMux, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneScreenRect, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneSwitch, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimActionSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimGroup, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimTransf, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_14(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneAnimNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSCNVVisibilityChecker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGSCNVVisibilityChecker_Visit__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGSCNVVisibilityChecker_Visit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneNode *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneBSPNode *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneCamera *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneInstance *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneLeaf *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneMux *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneGroup *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneScreenRect *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneSwitch *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneTransf *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneAnimActionSet *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneAnimNode *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneAnimMesh *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneAnimGroup *)\n"
    "    CGSCNVVisibilityChecker::Visit(CGSceneAnimTransf *)\n");
  lua_error(L);return 0;
}


static int _wrap_new_CGSCNVVisibilityChecker(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVVisibilityChecker *result = 0 ;
    
    SWIG_check_num_args("CGSCNVVisibilityChecker::CGSCNVVisibilityChecker",0,0)
    result = (CGSCNVVisibilityChecker *)new CGSCNVVisibilityChecker();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSCNVVisibilityChecker,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSCNVVisibilityChecker(void *obj) {
CGSCNVVisibilityChecker *arg1 = (CGSCNVVisibilityChecker *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSCNVVisibilityChecker(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSCNVVisibilityChecker);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSCNVVisibilityChecker_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSCNVVisibilityChecker_methods[]= {
    { "bIsVisible", _wrap_CGSCNVVisibilityChecker_bIsVisible},
    { "Visit", _wrap_CGSCNVVisibilityChecker_Visit},
    {0,0}
};
static swig_lua_method swig_CGSCNVVisibilityChecker_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSCNVVisibilityChecker_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSCNVVisibilityChecker_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSCNVVisibilityChecker_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSCNVVisibilityChecker_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSCNVVisibilityChecker_Sf_SwigStatic = {
    "CGSCNVVisibilityChecker",
    swig_CGSCNVVisibilityChecker_Sf_SwigStatic_methods,
    swig_CGSCNVVisibilityChecker_Sf_SwigStatic_attributes,
    swig_CGSCNVVisibilityChecker_Sf_SwigStatic_constants,
    swig_CGSCNVVisibilityChecker_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSCNVVisibilityChecker_bases[] = {0,0};
static const char *swig_CGSCNVVisibilityChecker_base_names[] = {"CGSceneVisitor *",0};
static swig_lua_class _wrap_class_CGSCNVVisibilityChecker = { "CGSCNVVisibilityChecker", "CGSCNVVisibilityChecker", &SWIGTYPE_p_CGSCNVVisibilityChecker,_proxy__wrap_new_CGSCNVVisibilityChecker, swig_delete_CGSCNVVisibilityChecker, swig_CGSCNVVisibilityChecker_methods, swig_CGSCNVVisibilityChecker_attributes, &swig_CGSCNVVisibilityChecker_Sf_SwigStatic, swig_CGSCNVVisibilityChecker_meta, swig_CGSCNVVisibilityChecker_bases, swig_CGSCNVVisibilityChecker_base_names };

static int _wrap_CGSCNVAnimUpdater_Update(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVAnimUpdater *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGSCNVAnimUpdater::Update",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSCNVAnimUpdater::Update",1,"CGSCNVAnimUpdater *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSCNVAnimUpdater::Update",2,"CGSceneNode *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGSCNVAnimUpdater::Update",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSCNVAnimUpdater,0))){
      SWIG_fail_ptr("CGSCNVAnimUpdater_Update",1,SWIGTYPE_p_CGSCNVAnimUpdater);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGSCNVAnimUpdater_Update",2,SWIGTYPE_p_CGSceneNode);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->Update(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSCNVAnimUpdater(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSCNVAnimUpdater *result = 0 ;
    
    SWIG_check_num_args("CGSCNVAnimUpdater::CGSCNVAnimUpdater",0,0)
    result = (CGSCNVAnimUpdater *)new CGSCNVAnimUpdater();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSCNVAnimUpdater,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSCNVAnimUpdater(void *obj) {
CGSCNVAnimUpdater *arg1 = (CGSCNVAnimUpdater *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSCNVAnimUpdater(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSCNVAnimUpdater);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSCNVAnimUpdater_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSCNVAnimUpdater_methods[]= {
    { "Update", _wrap_CGSCNVAnimUpdater_Update},
    {0,0}
};
static swig_lua_method swig_CGSCNVAnimUpdater_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSCNVAnimUpdater_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSCNVAnimUpdater_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSCNVAnimUpdater_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSCNVAnimUpdater_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSCNVAnimUpdater_Sf_SwigStatic = {
    "CGSCNVAnimUpdater",
    swig_CGSCNVAnimUpdater_Sf_SwigStatic_methods,
    swig_CGSCNVAnimUpdater_Sf_SwigStatic_attributes,
    swig_CGSCNVAnimUpdater_Sf_SwigStatic_constants,
    swig_CGSCNVAnimUpdater_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSCNVAnimUpdater_bases[] = {0,0};
static const char *swig_CGSCNVAnimUpdater_base_names[] = {"CGSceneVisitor *",0};
static swig_lua_class _wrap_class_CGSCNVAnimUpdater = { "CGSCNVAnimUpdater", "CGSCNVAnimUpdater", &SWIGTYPE_p_CGSCNVAnimUpdater,_proxy__wrap_new_CGSCNVAnimUpdater, swig_delete_CGSCNVAnimUpdater, swig_CGSCNVAnimUpdater_methods, swig_CGSCNVAnimUpdater_attributes, &swig_CGSCNVAnimUpdater_Sf_SwigStatic, swig_CGSCNVAnimUpdater_meta, swig_CGSCNVAnimUpdater_bases, swig_CGSCNVAnimUpdater_base_names };

static int _wrap_CGGraphBVFileIO_pLoadGraphBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVFileIO::pLoadGraphBV",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGGraphBVFileIO::pLoadGraphBV",1,"CGFile &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGGraphBVFileIO_pLoadGraphBV",1,SWIGTYPE_p_CGFile);
    }
    
    result = (CGGraphBV *)CGGraphBVFileIO::pLoadGraphBV(*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphBVFileIO_iSaveGraphBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGFile *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGGraphBVFileIO::iSaveGraphBV",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGGraphBVFileIO::iSaveGraphBV",1,"CGFile &");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphBVFileIO::iSaveGraphBV",2,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGFile,0))){
      SWIG_fail_ptr("CGGraphBVFileIO_iSaveGraphBV",1,SWIGTYPE_p_CGFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CGGraphBVFileIO_iSaveGraphBV",2,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (int)CGGraphBVFileIO::iSaveGraphBV(*arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphBVFileIO(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVFileIO *result = 0 ;
    
    SWIG_check_num_args("CGGraphBVFileIO::CGGraphBVFileIO",0,0)
    result = (CGGraphBVFileIO *)new CGGraphBVFileIO();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBVFileIO,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphBVFileIO(void *obj) {
CGGraphBVFileIO *arg1 = (CGGraphBVFileIO *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphBVFileIO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphBVFileIO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphBVFileIO_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphBVFileIO_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGGraphBVFileIO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphBVFileIO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphBVFileIO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphBVFileIO_Sf_SwigStatic_methods[]= {
    { "pLoadGraphBV", _wrap_CGGraphBVFileIO_pLoadGraphBV},
    { "iSaveGraphBV", _wrap_CGGraphBVFileIO_iSaveGraphBV},
    {0,0}
};
static swig_lua_class* swig_CGGraphBVFileIO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphBVFileIO_Sf_SwigStatic = {
    "CGGraphBVFileIO",
    swig_CGGraphBVFileIO_Sf_SwigStatic_methods,
    swig_CGGraphBVFileIO_Sf_SwigStatic_attributes,
    swig_CGGraphBVFileIO_Sf_SwigStatic_constants,
    swig_CGGraphBVFileIO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphBVFileIO_bases[] = {0};
static const char *swig_CGGraphBVFileIO_base_names[] = {0};
static swig_lua_class _wrap_class_CGGraphBVFileIO = { "CGGraphBVFileIO", "CGGraphBVFileIO", &SWIGTYPE_p_CGGraphBVFileIO,_proxy__wrap_new_CGGraphBVFileIO, swig_delete_CGGraphBVFileIO, swig_CGGraphBVFileIO_methods, swig_CGGraphBVFileIO_attributes, &swig_CGGraphBVFileIO_Sf_SwigStatic, swig_CGGraphBVFileIO_meta, swig_CGGraphBVFileIO_bases, swig_CGGraphBVFileIO_base_names };

static int _wrap_new_CHUDElem__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *result = 0 ;
    
    SWIG_check_num_args("CHUDElem::CHUDElem",0,0)
    result = (CHUDElem *)new CHUDElem();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDElem,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CHUDElem__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    CHUDElem *result = 0 ;
    
    SWIG_check_num_args("CHUDElem::CHUDElem",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::CHUDElem",1,"CGSceneNode *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDElem::CHUDElem",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHUDElem::CHUDElem",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHUDElem::CHUDElem",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CHUDElem::CHUDElem",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("new_CHUDElem",1,SWIGTYPE_p_CGSceneNode);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    result = (CHUDElem *)new CHUDElem(arg1,arg2,arg3,arg4,arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDElem,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CHUDElem(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CHUDElem__SWIG_0(L);
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_CHUDElem__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CHUDElem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHUDElem::CHUDElem()\n"
    "    CHUDElem::CHUDElem(CGSceneNode *,float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CHUDElem_x_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CHUDElem::x",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::x",1,"CHUDElem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDElem::x",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_x_set",1,SWIGTYPE_p_CHUDElem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->x = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_x_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDElem::x",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::x",1,"CHUDElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_x_get",1,SWIGTYPE_p_CHUDElem);
    }
    
    result = (float) ((arg1)->x);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_y_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CHUDElem::y",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::y",1,"CHUDElem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDElem::y",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_y_set",1,SWIGTYPE_p_CHUDElem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->y = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_y_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDElem::y",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::y",1,"CHUDElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_y_get",1,SWIGTYPE_p_CHUDElem);
    }
    
    result = (float) ((arg1)->y);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_tx_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CHUDElem::tx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::tx",1,"CHUDElem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDElem::tx",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_tx_set",1,SWIGTYPE_p_CHUDElem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->tx = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_tx_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDElem::tx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::tx",1,"CHUDElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_tx_get",1,SWIGTYPE_p_CHUDElem);
    }
    
    result = (float) ((arg1)->tx);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_ty_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CHUDElem::ty",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::ty",1,"CHUDElem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDElem::ty",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_ty_set",1,SWIGTYPE_p_CHUDElem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ty = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_ty_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDElem::ty",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::ty",1,"CHUDElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_ty_get",1,SWIGTYPE_p_CHUDElem);
    }
    
    result = (float) ((arg1)->ty);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_poObj_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDElem::poObj",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::poObj",1,"CHUDElem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDElem::poObj",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_poObj_set",1,SWIGTYPE_p_CHUDElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CHUDElem_poObj_set",2,SWIGTYPE_p_CGSceneNode);
    }
    
    if (arg1) (arg1)->poObj = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_poObj_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CHUDElem::poObj",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::poObj",1,"CHUDElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_poObj_get",1,SWIGTYPE_p_CHUDElem);
    }
    
    result = (CGSceneNode *) ((arg1)->poObj);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDElem_Setup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDElem *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    
    SWIG_check_num_args("CHUDElem::Setup",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDElem::Setup",1,"CHUDElem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDElem::Setup",2,"CGSceneNode *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHUDElem::Setup",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHUDElem::Setup",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CHUDElem::Setup",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CHUDElem::Setup",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDElem,0))){
      SWIG_fail_ptr("CHUDElem_Setup",1,SWIGTYPE_p_CHUDElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CHUDElem_Setup",2,SWIGTYPE_p_CGSceneNode);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6);
    (arg1)->Setup(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDElem(void *obj) {
CHUDElem *arg1 = (CHUDElem *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDElem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDElem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDElem_attributes[] = {
    { "x", _wrap_CHUDElem_x_get, _wrap_CHUDElem_x_set },
    { "y", _wrap_CHUDElem_y_get, _wrap_CHUDElem_y_set },
    { "tx", _wrap_CHUDElem_tx_get, _wrap_CHUDElem_tx_set },
    { "ty", _wrap_CHUDElem_ty_get, _wrap_CHUDElem_ty_set },
    { "poObj", _wrap_CHUDElem_poObj_get, _wrap_CHUDElem_poObj_set },
    {0,0,0}
};
static swig_lua_method swig_CHUDElem_methods[]= {
    { "Setup", _wrap_CHUDElem_Setup},
    {0,0}
};
static swig_lua_method swig_CHUDElem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDElem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDElem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDElem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDElem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDElem_Sf_SwigStatic = {
    "CHUDElem",
    swig_CHUDElem_Sf_SwigStatic_methods,
    swig_CHUDElem_Sf_SwigStatic_attributes,
    swig_CHUDElem_Sf_SwigStatic_constants,
    swig_CHUDElem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDElem_bases[] = {0};
static const char *swig_CHUDElem_base_names[] = {0};
static swig_lua_class _wrap_class_CHUDElem = { "CHUDElem", "CHUDElem", &SWIGTYPE_p_CHUDElem,_proxy__wrap_new_CHUDElem, swig_delete_CHUDElem, swig_CHUDElem_methods, swig_CHUDElem_attributes, &swig_CHUDElem_Sf_SwigStatic, swig_CHUDElem_meta, swig_CHUDElem_bases, swig_CHUDElem_base_names };

static int _wrap_new_CHUD__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *result = 0 ;
    
    SWIG_check_num_args("CHUD::CHUD",0,0)
    result = (CHUD *)new CHUD();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUD,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CHUD__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CHUD *result = 0 ;
    
    SWIG_check_num_args("CHUD::CHUD",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CHUD::CHUD",1,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    result = (CHUD *)new CHUD(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUD,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CHUD(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CHUD__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CHUD__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CHUD'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHUD::CHUD()\n"
    "    CHUD::CHUD(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CHUD_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CHUD::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::Init",1,"CHUD *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUD::Init",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_Init",1,SWIGTYPE_p_CHUD);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_uiAddObject__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    CGString *arg7 = 0 ;
    uint result;
    
    SWIG_check_num_args("CHUD::uiAddObject",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::uiAddObject",1,"CHUD *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUD::uiAddObject",2,"CGSceneNode *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHUD::uiAddObject",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHUD::uiAddObject",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CHUD::uiAddObject",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CHUD::uiAddObject",6,"float");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("CHUD::uiAddObject",7,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_uiAddObject",1,SWIGTYPE_p_CHUD);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CHUD_uiAddObject",2,SWIGTYPE_p_CGSceneNode);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CHUD_uiAddObject",7,SWIGTYPE_p_CGString);
    }
    
    result = (uint)(arg1)->uiAddObject(arg2,arg3,arg4,arg5,arg6,(CGString const &)*arg7);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_uiAddObject__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    uint result;
    
    SWIG_check_num_args("CHUD::uiAddObject",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::uiAddObject",1,"CHUD *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUD::uiAddObject",2,"CGSceneNode *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHUD::uiAddObject",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHUD::uiAddObject",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CHUD::uiAddObject",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CHUD::uiAddObject",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_uiAddObject",1,SWIGTYPE_p_CHUD);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CHUD_uiAddObject",2,SWIGTYPE_p_CGSceneNode);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6);
    result = (uint)(arg1)->uiAddObject(arg2,arg3,arg4,arg5,arg6);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_uiAddObject(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUD, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_CHUD_uiAddObject__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUD, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_CHUD_uiAddObject__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CHUD_uiAddObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHUD::uiAddObject(CGSceneNode *,float,float,float,float,CGString const &)\n"
    "    CHUD::uiAddObject(CGSceneNode *,float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CHUD_poGetElem__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CHUDElem *result = 0 ;
    
    SWIG_check_num_args("CHUD::poGetElem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::poGetElem",1,"CHUD *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUD::poGetElem",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_poGetElem",1,SWIGTYPE_p_CHUD);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CHUD_poGetElem",2,SWIGTYPE_p_CGString);
    }
    
    result = (CHUDElem *)(arg1)->poGetElem((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_poGetElem__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    uint arg2 ;
    CHUDElem *result = 0 ;
    
    SWIG_check_num_args("CHUD::poGetElem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::poGetElem",1,"CHUD *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUD::poGetElem",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_poGetElem",1,SWIGTYPE_p_CHUD);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CHUDElem *)(arg1)->poGetElem(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_poGetElem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUD, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CHUD_poGetElem__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUD, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CHUD_poGetElem__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CHUD_poGetElem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHUD::poGetElem(CGString const &)\n"
    "    CHUD::poGetElem(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CHUD_poCreateBoundVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    CGBoundingVolume *result = 0 ;
    
    SWIG_check_num_args("CHUD::poCreateBoundVol",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::poCreateBoundVol",1,"CHUD *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_poCreateBoundVol",1,SWIGTYPE_p_CHUD);
    }
    
    result = (CGBoundingVolume *)(arg1)->poCreateBoundVol();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBoundingVolume,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    
    SWIG_check_num_args("CHUD::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::Invalidate",1,"CHUD *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_Invalidate",1,SWIGTYPE_p_CHUD);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    
    SWIG_check_num_args("CHUD::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::Render",1,"CHUD *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_Render",1,SWIGTYPE_p_CHUD);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_iCulled(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CHUD::iCulled",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::iCulled",1,"CHUD *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_iCulled",1,SWIGTYPE_p_CHUD);
    }
    
    result = (int)(arg1)->iCulled();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CHUD::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::poGetBV",1,"CHUD *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_poGetBV",1,SWIGTYPE_p_CHUD);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_ComputeBoundVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    
    SWIG_check_num_args("CHUD::ComputeBoundVol",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::ComputeBoundVol",1,"CHUD *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_ComputeBoundVol",1,SWIGTYPE_p_CHUD);
    }
    
    (arg1)->ComputeBoundVol();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUD_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUD *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CHUD::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUD::Accept",1,"CHUD *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUD::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUD,0))){
      SWIG_fail_ptr("CHUD_Accept",1,SWIGTYPE_p_CHUD);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CHUD_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUD(void *obj) {
CHUD *arg1 = (CHUD *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUD(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUD);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUD_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUD_methods[]= {
    { "Init", _wrap_CHUD_Init},
    { "uiAddObject", _wrap_CHUD_uiAddObject},
    { "poGetElem", _wrap_CHUD_poGetElem},
    { "poCreateBoundVol", _wrap_CHUD_poCreateBoundVol},
    { "Invalidate", _wrap_CHUD_Invalidate},
    { "Render", _wrap_CHUD_Render},
    { "iCulled", _wrap_CHUD_iCulled},
    { "poGetBV", _wrap_CHUD_poGetBV},
    { "ComputeBoundVol", _wrap_CHUD_ComputeBoundVol},
    { "Accept", _wrap_CHUD_Accept},
    {0,0}
};
static swig_lua_method swig_CHUD_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUD_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUD_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUD_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUD_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUD_Sf_SwigStatic = {
    "CHUD",
    swig_CHUD_Sf_SwigStatic_methods,
    swig_CHUD_Sf_SwigStatic_attributes,
    swig_CHUD_Sf_SwigStatic_constants,
    swig_CHUD_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUD_bases[] = {0,0};
static const char *swig_CHUD_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CHUD = { "CHUD", "CHUD", &SWIGTYPE_p_CHUD,_proxy__wrap_new_CHUD, swig_delete_CHUD, swig_CHUD_methods, swig_CHUD_attributes, &swig_CHUD_Sf_SwigStatic, swig_CHUD_meta, swig_CHUD_bases, swig_CHUD_base_names };

static int _wrap_new_CConsole(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *result = 0 ;
    
    SWIG_check_num_args("CConsole::CConsole",0,0)
    result = (CConsole *)new CConsole();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CConsole,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    int arg4 ;
    int arg5 ;
    CGShader *arg6 = 0 ;
    CGShader *arg7 = 0 ;
    
    SWIG_check_num_args("CConsole::Init",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::Init",1,"CConsole *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CConsole::Init",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CConsole::Init",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CConsole::Init",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CConsole::Init",5,"int");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("CConsole::Init",6,"CGShader *");
    if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("CConsole::Init",7,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_Init",1,SWIGTYPE_p_CConsole);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CConsole_Init",6,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CConsole_Init",7,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_Write(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CConsole::Write",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::Write",1,"CConsole *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CConsole::Write",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_Write",1,SWIGTYPE_p_CConsole);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Write(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_WriteXY(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    char *arg4 = 0 ;
    
    SWIG_check_num_args("CConsole::WriteXY",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::WriteXY",1,"CConsole *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CConsole::WriteXY",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CConsole::WriteXY",3,"int");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("CConsole::WriteXY",4,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_WriteXY",1,SWIGTYPE_p_CConsole);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (char *)lua_tostring(L, 4);
    (arg1)->WriteXY(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_Resize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CConsole::Resize",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::Resize",1,"CConsole *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CConsole::Resize",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CConsole::Resize",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_Resize",1,SWIGTYPE_p_CConsole);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->Resize(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_SetChar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    char arg4 ;
    
    SWIG_check_num_args("CConsole::SetChar",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::SetChar",1,"CConsole *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CConsole::SetChar",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CConsole::SetChar",3,"int");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("CConsole::SetChar",4,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_SetChar",1,SWIGTYPE_p_CConsole);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (lua_tostring(L, 4))[0];
    (arg1)->SetChar(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_CreateCharMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    
    SWIG_check_num_args("CConsole::CreateCharMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::CreateCharMatrix",1,"CConsole *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_CreateCharMatrix",1,SWIGTYPE_p_CConsole);
    }
    
    (arg1)->CreateCharMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_SetCharMatrixMat(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CConsole::SetCharMatrixMat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::SetCharMatrixMat",1,"CConsole *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CConsole::SetCharMatrixMat",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_SetCharMatrixMat",1,SWIGTYPE_p_CConsole);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CConsole_SetCharMatrixMat",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetCharMatrixMat(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CConsole_SetBackgroundMat(lua_State* L) {
  {
    int SWIG_arg = 0;
    CConsole *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CConsole::SetBackgroundMat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CConsole::SetBackgroundMat",1,"CConsole *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CConsole::SetBackgroundMat",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CConsole,0))){
      SWIG_fail_ptr("CConsole_SetBackgroundMat",1,SWIGTYPE_p_CConsole);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CConsole_SetBackgroundMat",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetBackgroundMat(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CConsole(void *obj) {
CConsole *arg1 = (CConsole *) obj;
delete arg1;
}
static int _proxy__wrap_new_CConsole(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CConsole);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CConsole_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CConsole_methods[]= {
    { "Init", _wrap_CConsole_Init},
    { "Write", _wrap_CConsole_Write},
    { "WriteXY", _wrap_CConsole_WriteXY},
    { "Resize", _wrap_CConsole_Resize},
    { "SetChar", _wrap_CConsole_SetChar},
    { "CreateCharMatrix", _wrap_CConsole_CreateCharMatrix},
    { "SetCharMatrixMat", _wrap_CConsole_SetCharMatrixMat},
    { "SetBackgroundMat", _wrap_CConsole_SetBackgroundMat},
    {0,0}
};
static swig_lua_method swig_CConsole_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CConsole_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CConsole_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CConsole_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CConsole_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CConsole_Sf_SwigStatic = {
    "CConsole",
    swig_CConsole_Sf_SwigStatic_methods,
    swig_CConsole_Sf_SwigStatic_attributes,
    swig_CConsole_Sf_SwigStatic_constants,
    swig_CConsole_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CConsole_bases[] = {0,0};
static const char *swig_CConsole_base_names[] = {"CHUD *",0};
static swig_lua_class _wrap_class_CConsole = { "CConsole", "CConsole", &SWIGTYPE_p_CConsole,_proxy__wrap_new_CConsole, swig_delete_CConsole, swig_CConsole_methods, swig_CConsole_attributes, &swig_CConsole_Sf_SwigStatic, swig_CConsole_meta, swig_CConsole_bases, swig_CConsole_base_names };

static int _wrap_new_CSkyDome(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyDome *result = 0 ;
    
    SWIG_check_num_args("CSkyDome::CSkyDome",0,0)
    result = (CSkyDome *)new CSkyDome();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSkyDome,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSkyDome_SetRotation(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyDome *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CSkyDome::SetRotation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSkyDome::SetRotation",1,"CSkyDome *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSkyDome::SetRotation",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSkyDome,0))){
      SWIG_fail_ptr("CSkyDome_SetRotation",1,SWIGTYPE_p_CSkyDome);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetRotation(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSkyDome_SetRadius(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyDome *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CSkyDome::SetRadius",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSkyDome::SetRadius",1,"CSkyDome *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSkyDome::SetRadius",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSkyDome,0))){
      SWIG_fail_ptr("CSkyDome_SetRadius",1,SWIGTYPE_p_CSkyDome);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetRadius(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSkyDome_SetAxis(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyDome *arg1 = 0 ;
    CGVect3 arg2 ;
    CGVect3 *argp2 ;
    
    SWIG_check_num_args("CSkyDome::SetAxis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSkyDome::SetAxis",1,"CSkyDome *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSkyDome::SetAxis",2,"CGVect3");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSkyDome,0))){
      SWIG_fail_ptr("CSkyDome_SetAxis",1,SWIGTYPE_p_CSkyDome);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CSkyDome_SetAxis",2,SWIGTYPE_p_CGVect3);
    }
    arg2 = *argp2;
    
    (arg1)->SetAxis(SWIG_STD_MOVE(arg2));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSkyDome_SetPosition(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyDome *arg1 = 0 ;
    CGVect3 arg2 ;
    CGVect3 *argp2 ;
    
    SWIG_check_num_args("CSkyDome::SetPosition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSkyDome::SetPosition",1,"CSkyDome *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSkyDome::SetPosition",2,"CGVect3");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSkyDome,0))){
      SWIG_fail_ptr("CSkyDome_SetPosition",1,SWIGTYPE_p_CSkyDome);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CSkyDome_SetPosition",2,SWIGTYPE_p_CGVect3);
    }
    arg2 = *argp2;
    
    (arg1)->SetPosition(SWIG_STD_MOVE(arg2));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSkyDome_CreateDome(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyDome *arg1 = 0 ;
    bool arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    float arg7 ;
    float arg8 ;
    
    SWIG_check_num_args("CSkyDome::CreateDome",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSkyDome::CreateDome",1,"CSkyDome *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CSkyDome::CreateDome",2,"bool");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSkyDome::CreateDome",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CSkyDome::CreateDome",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CSkyDome::CreateDome",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CSkyDome::CreateDome",6,"int");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("CSkyDome::CreateDome",7,"float");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("CSkyDome::CreateDome",8,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSkyDome,0))){
      SWIG_fail_ptr("CSkyDome_CreateDome",1,SWIGTYPE_p_CSkyDome);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    arg6 = (int)lua_tonumber(L, 6);
    arg7 = (float)lua_tonumber(L, 7);
    arg8 = (float)lua_tonumber(L, 8);
    (arg1)->CreateDome(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSkyDome_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyDome *arg1 = 0 ;
    
    SWIG_check_num_args("CSkyDome::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSkyDome::Render",1,"CSkyDome *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSkyDome,0))){
      SWIG_fail_ptr("CSkyDome_Render",1,SWIGTYPE_p_CSkyDome);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSkyDome(void *obj) {
CSkyDome *arg1 = (CSkyDome *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSkyDome(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSkyDome);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSkyDome_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSkyDome_methods[]= {
    { "SetRotation", _wrap_CSkyDome_SetRotation},
    { "SetRadius", _wrap_CSkyDome_SetRadius},
    { "SetAxis", _wrap_CSkyDome_SetAxis},
    { "SetPosition", _wrap_CSkyDome_SetPosition},
    { "CreateDome", _wrap_CSkyDome_CreateDome},
    { "Render", _wrap_CSkyDome_Render},
    {0,0}
};
static swig_lua_method swig_CSkyDome_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSkyDome_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSkyDome_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSkyDome_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSkyDome_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSkyDome_Sf_SwigStatic = {
    "CSkyDome",
    swig_CSkyDome_Sf_SwigStatic_methods,
    swig_CSkyDome_Sf_SwigStatic_attributes,
    swig_CSkyDome_Sf_SwigStatic_constants,
    swig_CSkyDome_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSkyDome_bases[] = {0,0};
static const char *swig_CSkyDome_base_names[] = {"CGSceneLeaf *",0};
static swig_lua_class _wrap_class_CSkyDome = { "CSkyDome", "CSkyDome", &SWIGTYPE_p_CSkyDome,_proxy__wrap_new_CSkyDome, swig_delete_CSkyDome, swig_CSkyDome_methods, swig_CSkyDome_attributes, &swig_CSkyDome_Sf_SwigStatic, swig_CSkyDome_meta, swig_CSkyDome_bases, swig_CSkyDome_base_names };

static int _wrap_new_CSkyBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyBox *result = 0 ;
    
    SWIG_check_num_args("CSkyBox::CSkyBox",0,0)
    result = (CSkyBox *)new CSkyBox();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSkyBox,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSkyBox_InitSkyBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSkyBox *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    CGShader **arg5 = 0 ;
    
    SWIG_check_num_args("CSkyBox::InitSkyBox",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSkyBox::InitSkyBox",1,"CSkyBox *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSkyBox::InitSkyBox",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CSkyBox::InitSkyBox",3,"CGVect3 &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CSkyBox::InitSkyBox",4,"float");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("CSkyBox::InitSkyBox",5,"CGShader **");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSkyBox,0))){
      SWIG_fail_ptr("CSkyBox_InitSkyBox",1,SWIGTYPE_p_CSkyBox);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CSkyBox_InitSkyBox",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_CGShader,0))){
      SWIG_fail_ptr("CSkyBox_InitSkyBox",5,SWIGTYPE_p_p_CGShader);
    }
    
    (arg1)->InitSkyBox(arg2,*arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSkyBox(void *obj) {
CSkyBox *arg1 = (CSkyBox *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSkyBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSkyBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSkyBox_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSkyBox_methods[]= {
    { "InitSkyBox", _wrap_CSkyBox_InitSkyBox},
    {0,0}
};
static swig_lua_method swig_CSkyBox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSkyBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSkyBox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSkyBox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSkyBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSkyBox_Sf_SwigStatic = {
    "CSkyBox",
    swig_CSkyBox_Sf_SwigStatic_methods,
    swig_CSkyBox_Sf_SwigStatic_attributes,
    swig_CSkyBox_Sf_SwigStatic_constants,
    swig_CSkyBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSkyBox_bases[] = {0,0};
static const char *swig_CSkyBox_base_names[] = {"CGSceneTransf *",0};
static swig_lua_class _wrap_class_CSkyBox = { "CSkyBox", "CSkyBox", &SWIGTYPE_p_CSkyBox,_proxy__wrap_new_CSkyBox, swig_delete_CSkyBox, swig_CSkyBox_methods, swig_CSkyBox_attributes, &swig_CSkyBox_Sf_SwigStatic, swig_CSkyBox_meta, swig_CSkyBox_bases, swig_CSkyBox_base_names };

static int _wrap_new_CLensFlare_Elem(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *result = 0 ;
    
    SWIG_check_num_args("CLensFlare_Elem::CLensFlare_Elem",0,0)
    result = (CLensFlare_Elem *)new CLensFlare_Elem();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLensFlare_Elem,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_fSize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CLensFlare_Elem::fSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::fSize",1,"CLensFlare_Elem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLensFlare_Elem::fSize",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_fSize_set",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fSize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_fSize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CLensFlare_Elem::fSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::fSize",1,"CLensFlare_Elem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_fSize_get",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    result = (float) ((arg1)->fSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_fDist_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CLensFlare_Elem::fDist",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::fDist",1,"CLensFlare_Elem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLensFlare_Elem::fDist",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_fDist_set",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fDist = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_fDist_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CLensFlare_Elem::fDist",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::fDist",1,"CLensFlare_Elem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_fDist_get",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    result = (float) ((arg1)->fDist);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_Color_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CLensFlare_Elem::Color",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::Color",1,"CLensFlare_Elem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLensFlare_Elem::Color",2,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_Color_set",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CLensFlare_Elem_Color_set",2,SWIGTYPE_p_CGColor);
    }
    
    if (arg1) (arg1)->Color = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_Color_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CLensFlare_Elem::Color",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::Color",1,"CLensFlare_Elem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_Color_get",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    result = (CGColor *)& ((arg1)->Color);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_pMaterial_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CLensFlare_Elem::pMaterial",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::pMaterial",1,"CLensFlare_Elem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLensFlare_Elem::pMaterial",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_pMaterial_set",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CLensFlare_Elem_pMaterial_set",2,SWIGTYPE_p_CGShader);
    }
    
    if (arg1) (arg1)->pMaterial = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Elem_pMaterial_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare_Elem *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CLensFlare_Elem::pMaterial",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare_Elem::pMaterial",1,"CLensFlare_Elem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare_Elem,0))){
      SWIG_fail_ptr("CLensFlare_Elem_pMaterial_get",1,SWIGTYPE_p_CLensFlare_Elem);
    }
    
    result = (CGShader *) ((arg1)->pMaterial);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLensFlare_Elem(void *obj) {
CLensFlare_Elem *arg1 = (CLensFlare_Elem *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLensFlare_Elem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLensFlare_Elem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLensFlare_Elem_attributes[] = {
    { "fSize", _wrap_CLensFlare_Elem_fSize_get, _wrap_CLensFlare_Elem_fSize_set },
    { "fDist", _wrap_CLensFlare_Elem_fDist_get, _wrap_CLensFlare_Elem_fDist_set },
    { "Color", _wrap_CLensFlare_Elem_Color_get, _wrap_CLensFlare_Elem_Color_set },
    { "pMaterial", _wrap_CLensFlare_Elem_pMaterial_get, _wrap_CLensFlare_Elem_pMaterial_set },
    {0,0,0}
};
static swig_lua_method swig_CLensFlare_Elem_methods[]= {
    {0,0}
};
static swig_lua_method swig_CLensFlare_Elem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLensFlare_Elem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLensFlare_Elem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLensFlare_Elem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLensFlare_Elem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLensFlare_Elem_Sf_SwigStatic = {
    "CLensFlare_Elem",
    swig_CLensFlare_Elem_Sf_SwigStatic_methods,
    swig_CLensFlare_Elem_Sf_SwigStatic_attributes,
    swig_CLensFlare_Elem_Sf_SwigStatic_constants,
    swig_CLensFlare_Elem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLensFlare_Elem_bases[] = {0};
static const char *swig_CLensFlare_Elem_base_names[] = {0};
static swig_lua_class _wrap_class_CLensFlare_Elem = { "CLensFlare_Elem", "CLensFlare_Elem", &SWIGTYPE_p_CLensFlare_Elem,_proxy__wrap_new_CLensFlare_Elem, swig_delete_CLensFlare_Elem, swig_CLensFlare_Elem_methods, swig_CLensFlare_Elem_attributes, &swig_CLensFlare_Elem_Sf_SwigStatic, swig_CLensFlare_Elem_meta, swig_CLensFlare_Elem_bases, swig_CLensFlare_Elem_base_names };

static int _wrap_new_CLensFlare(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *result = 0 ;
    
    SWIG_check_num_args("CLensFlare::CLensFlare",0,0)
    result = (CLensFlare *)new CLensFlare();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLensFlare,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_InitLensFlare(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    int arg2 ;
    CGVect3 arg3 ;
    CGVect3 *argp3 ;
    
    SWIG_check_num_args("CLensFlare::InitLensFlare",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::InitLensFlare",1,"CLensFlare *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLensFlare::InitLensFlare",2,"int");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CLensFlare::InitLensFlare",3,"CGVect3");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_InitLensFlare",1,SWIGTYPE_p_CLensFlare);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CLensFlare_InitLensFlare",3,SWIGTYPE_p_CGVect3);
    }
    arg3 = *argp3;
    
    (arg1)->InitLensFlare(arg2,SWIG_STD_MOVE(arg3));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_SetupFlareElem(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    int arg2 ;
    float arg3 ;
    float arg4 ;
    CGColor arg5 ;
    CGShader *arg6 = 0 ;
    CGColor *argp5 ;
    
    SWIG_check_num_args("CLensFlare::SetupFlareElem",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::SetupFlareElem",1,"CLensFlare *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLensFlare::SetupFlareElem",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLensFlare::SetupFlareElem",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CLensFlare::SetupFlareElem",4,"float");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CLensFlare::SetupFlareElem",5,"CGColor");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("CLensFlare::SetupFlareElem",6,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_SetupFlareElem",1,SWIGTYPE_p_CLensFlare);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CLensFlare_SetupFlareElem",5,SWIGTYPE_p_CGColor);
    }
    arg5 = *argp5;
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CLensFlare_SetupFlareElem",6,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetupFlareElem(arg2,arg3,arg4,SWIG_STD_MOVE(arg5),arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_UpdateMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    
    SWIG_check_num_args("CLensFlare::UpdateMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::UpdateMesh",1,"CLensFlare *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_UpdateMesh",1,SWIGTYPE_p_CLensFlare);
    }
    
    (arg1)->UpdateMesh();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    
    SWIG_check_num_args("CLensFlare::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::Render",1,"CLensFlare *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_Render",1,SWIGTYPE_p_CLensFlare);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CLensFlare::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::poGetBV",1,"CLensFlare *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_poGetBV",1,SWIGTYPE_p_CLensFlare);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_bVisible(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CLensFlare::bVisible",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::bVisible",1,"CLensFlare *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_bVisible",1,SWIGTYPE_p_CLensFlare);
    }
    
    result = (bool)(arg1)->bVisible();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_UpdateState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    
    SWIG_check_num_args("CLensFlare::UpdateState",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::UpdateState",1,"CLensFlare *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_UpdateState",1,SWIGTYPE_p_CLensFlare);
    }
    
    (arg1)->UpdateState();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLensFlare_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLensFlare *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CLensFlare::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLensFlare::Accept",1,"CLensFlare *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLensFlare::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLensFlare,0))){
      SWIG_fail_ptr("CLensFlare_Accept",1,SWIGTYPE_p_CLensFlare);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CLensFlare_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLensFlare(void *obj) {
CLensFlare *arg1 = (CLensFlare *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLensFlare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLensFlare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLensFlare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLensFlare_methods[]= {
    { "InitLensFlare", _wrap_CLensFlare_InitLensFlare},
    { "SetupFlareElem", _wrap_CLensFlare_SetupFlareElem},
    { "UpdateMesh", _wrap_CLensFlare_UpdateMesh},
    { "Render", _wrap_CLensFlare_Render},
    { "poGetBV", _wrap_CLensFlare_poGetBV},
    { "bVisible", _wrap_CLensFlare_bVisible},
    { "UpdateState", _wrap_CLensFlare_UpdateState},
    { "Accept", _wrap_CLensFlare_Accept},
    {0,0}
};
static swig_lua_method swig_CLensFlare_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLensFlare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLensFlare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLensFlare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLensFlare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLensFlare_Sf_SwigStatic = {
    "CLensFlare",
    swig_CLensFlare_Sf_SwigStatic_methods,
    swig_CLensFlare_Sf_SwigStatic_attributes,
    swig_CLensFlare_Sf_SwigStatic_constants,
    swig_CLensFlare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLensFlare_bases[] = {0,0};
static const char *swig_CLensFlare_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CLensFlare = { "CLensFlare", "CLensFlare", &SWIGTYPE_p_CLensFlare,_proxy__wrap_new_CLensFlare, swig_delete_CLensFlare, swig_CLensFlare_methods, swig_CLensFlare_attributes, &swig_CLensFlare_Sf_SwigStatic, swig_CLensFlare_meta, swig_CLensFlare_bases, swig_CLensFlare_base_names };

static int _wrap_new_CGSceneReflector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneReflector *result = 0 ;
    
    SWIG_check_num_args("CGSceneReflector::CGSceneReflector",0,0)
    result = (CGSceneReflector *)new CGSceneReflector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneReflector,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneReflector_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneReflector *arg1 = 0 ;
    
    SWIG_check_num_args("CGSceneReflector::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneReflector::Render",1,"CGSceneReflector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneReflector,0))){
      SWIG_fail_ptr("CGSceneReflector_Render",1,SWIGTYPE_p_CGSceneReflector);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneReflector_SetupReflectionMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneReflector *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneReflector::SetupReflectionMatrix",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneReflector::SetupReflectionMatrix",1,"CGSceneReflector *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSceneReflector::SetupReflectionMatrix",2,"CGMatrix4x4 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneReflector,0))){
      SWIG_fail_ptr("CGSceneReflector_SetupReflectionMatrix",1,SWIGTYPE_p_CGSceneReflector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CGSceneReflector_SetupReflectionMatrix",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->SetupReflectionMatrix(*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneReflector_Mirror_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneReflector *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneReflector::Mirror",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneReflector::Mirror",1,"CGSceneReflector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneReflector::Mirror",2,"CGMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneReflector,0))){
      SWIG_fail_ptr("CGSceneReflector_Mirror_set",1,SWIGTYPE_p_CGSceneReflector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGSceneReflector_Mirror_set",2,SWIGTYPE_p_CGMesh);
    }
    
    if (arg1) (arg1)->Mirror = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneReflector_Mirror_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneReflector *arg1 = 0 ;
    CGMesh *result = 0 ;
    
    SWIG_check_num_args("CGSceneReflector::Mirror",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneReflector::Mirror",1,"CGSceneReflector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneReflector,0))){
      SWIG_fail_ptr("CGSceneReflector_Mirror_get",1,SWIGTYPE_p_CGSceneReflector);
    }
    
    result = (CGMesh *) ((arg1)->Mirror);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneReflector_Plane_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneReflector *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    
    SWIG_check_num_args("CGSceneReflector::Plane",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneReflector::Plane",1,"CGSceneReflector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGSceneReflector::Plane",2,"CGPlane *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneReflector,0))){
      SWIG_fail_ptr("CGSceneReflector_Plane_set",1,SWIGTYPE_p_CGSceneReflector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CGSceneReflector_Plane_set",2,SWIGTYPE_p_CGPlane);
    }
    
    if (arg1) (arg1)->Plane = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSceneReflector_Plane_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneReflector *arg1 = 0 ;
    CGPlane *result = 0 ;
    
    SWIG_check_num_args("CGSceneReflector::Plane",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSceneReflector::Plane",1,"CGSceneReflector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneReflector,0))){
      SWIG_fail_ptr("CGSceneReflector_Plane_get",1,SWIGTYPE_p_CGSceneReflector);
    }
    
    result = (CGPlane *)& ((arg1)->Plane);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPlane,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSceneReflector(void *obj) {
CGSceneReflector *arg1 = (CGSceneReflector *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSceneReflector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSceneReflector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSceneReflector_attributes[] = {
    { "Mirror", _wrap_CGSceneReflector_Mirror_get, _wrap_CGSceneReflector_Mirror_set },
    { "Plane", _wrap_CGSceneReflector_Plane_get, _wrap_CGSceneReflector_Plane_set },
    {0,0,0}
};
static swig_lua_method swig_CGSceneReflector_methods[]= {
    { "Render", _wrap_CGSceneReflector_Render},
    { "SetupReflectionMatrix", _wrap_CGSceneReflector_SetupReflectionMatrix},
    {0,0}
};
static swig_lua_method swig_CGSceneReflector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSceneReflector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSceneReflector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSceneReflector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSceneReflector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSceneReflector_Sf_SwigStatic = {
    "CGSceneReflector",
    swig_CGSceneReflector_Sf_SwigStatic_methods,
    swig_CGSceneReflector_Sf_SwigStatic_attributes,
    swig_CGSceneReflector_Sf_SwigStatic_constants,
    swig_CGSceneReflector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSceneReflector_bases[] = {0,0};
static const char *swig_CGSceneReflector_base_names[] = {"CGSceneGroup *",0};
static swig_lua_class _wrap_class_CGSceneReflector = { "CGSceneReflector", "CGSceneReflector", &SWIGTYPE_p_CGSceneReflector,_proxy__wrap_new_CGSceneReflector, swig_delete_CGSceneReflector, swig_CGSceneReflector_methods, swig_CGSceneReflector_attributes, &swig_CGSceneReflector_Sf_SwigStatic, swig_CGSceneReflector_meta, swig_CGSceneReflector_bases, swig_CGSceneReflector_base_names };

static int _wrap_new_CDetailer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CDetailer *result = 0 ;
    
    SWIG_check_num_args("CDetailer::CDetailer",0,0)
    result = (CDetailer *)new CDetailer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CDetailer,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CDetailer_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CDetailer *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CDetailer::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CDetailer::Init",1,"CDetailer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CDetailer::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CDetailer,0))){
      SWIG_fail_ptr("CDetailer_Init",1,SWIGTYPE_p_CDetailer);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CDetailer_SetCamPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CDetailer *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CDetailer::SetCamPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CDetailer::SetCamPos",1,"CDetailer *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CDetailer::SetCamPos",2,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CDetailer,0))){
      SWIG_fail_ptr("CDetailer_SetCamPos",1,SWIGTYPE_p_CDetailer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CDetailer_SetCamPos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetCamPos(*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CDetailer_SetVertexTris(lua_State* L) {
  {
    int SWIG_arg = 0;
    CDetailer *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int arg3 ;
    
    SWIG_check_num_args("CDetailer::SetVertexTris",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CDetailer::SetVertexTris",1,"CDetailer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CDetailer::SetVertexTris",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CDetailer::SetVertexTris",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CDetailer,0))){
      SWIG_fail_ptr("CDetailer_SetVertexTris",1,SWIGTYPE_p_CDetailer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CDetailer_SetVertexTris",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->SetVertexTris(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CDetailer_CreateTextureContents(lua_State* L) {
  {
    int SWIG_arg = 0;
    CDetailer *arg1 = 0 ;
    CGMipMap *arg2 = 0 ;
    
    SWIG_check_num_args("CDetailer::CreateTextureContents",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CDetailer::CreateTextureContents",1,"CDetailer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CDetailer::CreateTextureContents",2,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CDetailer,0))){
      SWIG_fail_ptr("CDetailer_CreateTextureContents",1,SWIGTYPE_p_CDetailer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("CDetailer_CreateTextureContents",2,SWIGTYPE_p_CGMipMap);
    }
    
    (arg1)->CreateTextureContents(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CDetailer_poCreateMaterial(lua_State* L) {
  {
    int SWIG_arg = 0;
    CDetailer *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CDetailer::poCreateMaterial",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CDetailer::poCreateMaterial",1,"CDetailer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CDetailer,0))){
      SWIG_fail_ptr("CDetailer_poCreateMaterial",1,SWIGTYPE_p_CDetailer);
    }
    
    result = (CGShader *)(arg1)->poCreateMaterial();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CDetailer(void *obj) {
CDetailer *arg1 = (CDetailer *) obj;
delete arg1;
}
static int _proxy__wrap_new_CDetailer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CDetailer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CDetailer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CDetailer_methods[]= {
    { "Init", _wrap_CDetailer_Init},
    { "SetCamPos", _wrap_CDetailer_SetCamPos},
    { "SetVertexTris", _wrap_CDetailer_SetVertexTris},
    { "CreateTextureContents", _wrap_CDetailer_CreateTextureContents},
    { "poCreateMaterial", _wrap_CDetailer_poCreateMaterial},
    {0,0}
};
static swig_lua_method swig_CDetailer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CDetailer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CDetailer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CDetailer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CDetailer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CDetailer_Sf_SwigStatic = {
    "CDetailer",
    swig_CDetailer_Sf_SwigStatic_methods,
    swig_CDetailer_Sf_SwigStatic_attributes,
    swig_CDetailer_Sf_SwigStatic_constants,
    swig_CDetailer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CDetailer_bases[] = {0,0};
static const char *swig_CDetailer_base_names[] = {"CGSceneLeaf *",0};
static swig_lua_class _wrap_class_CDetailer = { "CDetailer", "CDetailer", &SWIGTYPE_p_CDetailer,_proxy__wrap_new_CDetailer, swig_delete_CDetailer, swig_CDetailer_methods, swig_CDetailer_attributes, &swig_CDetailer_Sf_SwigStatic, swig_CDetailer_meta, swig_CDetailer_bases, swig_CDetailer_base_names };

static int _wrap_new_CTexProjector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTexProjector *result = 0 ;
    
    SWIG_check_num_args("CTexProjector::CTexProjector",0,0)
    result = (CTexProjector *)new CTexProjector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTexProjector,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTexProjector_Setup__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTexProjector *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    CGShader *arg3 = 0 ;
    CGMatrix4x4 *arg4 = 0 ;
    
    SWIG_check_num_args("CTexProjector::Setup",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTexProjector::Setup",1,"CTexProjector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTexProjector::Setup",2,"CGMesh *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CTexProjector::Setup",3,"CGShader *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CTexProjector::Setup",4,"CGMatrix4x4 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTexProjector,0))){
      SWIG_fail_ptr("CTexProjector_Setup",1,SWIGTYPE_p_CTexProjector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CTexProjector_Setup",2,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CTexProjector_Setup",3,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CTexProjector_Setup",4,SWIGTYPE_p_CGMatrix4x4);
    }
    
    (arg1)->Setup(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTexProjector_Setup__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTexProjector *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    CGShader *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    CGVect3 *arg5 = 0 ;
    float arg6 ;
    float arg7 ;
    
    SWIG_check_num_args("CTexProjector::Setup",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTexProjector::Setup",1,"CTexProjector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTexProjector::Setup",2,"CGMesh *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CTexProjector::Setup",3,"CGShader *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CTexProjector::Setup",4,"CGVect3 &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CTexProjector::Setup",5,"CGVect3 &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CTexProjector::Setup",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("CTexProjector::Setup",7,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTexProjector,0))){
      SWIG_fail_ptr("CTexProjector_Setup",1,SWIGTYPE_p_CTexProjector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CTexProjector_Setup",2,SWIGTYPE_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CTexProjector_Setup",3,SWIGTYPE_p_CGShader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CTexProjector_Setup",4,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CTexProjector_Setup",5,SWIGTYPE_p_CGVect3);
    }
    
    arg6 = (float)lua_tonumber(L, 6);
    arg7 = (float)lua_tonumber(L, 7);
    (arg1)->Setup(arg2,arg3,*arg4,*arg5,arg6,arg7);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTexProjector_Setup(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CTexProjector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGShader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGMatrix4x4, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CTexProjector_Setup__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CTexProjector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGShader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_CTexProjector_Setup__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CTexProjector_Setup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CTexProjector::Setup(CGMesh *,CGShader *,CGMatrix4x4 &)\n"
    "    CTexProjector::Setup(CGMesh *,CGShader *,CGVect3 &,CGVect3 &,float,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_CTexProjector(void *obj) {
CTexProjector *arg1 = (CTexProjector *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTexProjector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTexProjector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTexProjector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CTexProjector_methods[]= {
    { "Setup", _wrap_CTexProjector_Setup},
    {0,0}
};
static swig_lua_method swig_CTexProjector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTexProjector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTexProjector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTexProjector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTexProjector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTexProjector_Sf_SwigStatic = {
    "CTexProjector",
    swig_CTexProjector_Sf_SwigStatic_methods,
    swig_CTexProjector_Sf_SwigStatic_attributes,
    swig_CTexProjector_Sf_SwigStatic_constants,
    swig_CTexProjector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTexProjector_bases[] = {0,0};
static const char *swig_CTexProjector_base_names[] = {"CGSceneLeaf *",0};
static swig_lua_class _wrap_class_CTexProjector = { "CTexProjector", "CTexProjector", &SWIGTYPE_p_CTexProjector,_proxy__wrap_new_CTexProjector, swig_delete_CTexProjector, swig_CTexProjector_methods, swig_CTexProjector_attributes, &swig_CTexProjector_Sf_SwigStatic, swig_CTexProjector_meta, swig_CTexProjector_bases, swig_CTexProjector_base_names };

static int _wrap_CShadowCaster_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CShadowCaster::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::Init",1,"CShadowCaster *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CShadowCaster::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_Init",1,SWIGTYPE_p_CShadowCaster);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_Setup(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGSceneNode *arg3 = 0 ;
    CGMesh **arg4 = 0 ;
    int arg5 ;
    
    SWIG_check_num_args("CShadowCaster::Setup",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::Setup",1,"CShadowCaster *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CShadowCaster::Setup",2,"CGVect3 &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CShadowCaster::Setup",3,"CGSceneNode *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CShadowCaster::Setup",4,"CGMesh **");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CShadowCaster::Setup",5,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_Setup",1,SWIGTYPE_p_CShadowCaster);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CShadowCaster_Setup",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CShadowCaster_Setup",3,SWIGTYPE_p_CGSceneNode);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_CGMesh,0))){
      SWIG_fail_ptr("CShadowCaster_Setup",4,SWIGTYPE_p_p_CGMesh);
    }
    
    arg5 = (int)lua_tonumber(L, 5);
    (arg1)->Setup(*arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CShadowCaster::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::poGetBV",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_poGetBV",1,SWIGTYPE_p_CShadowCaster);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_ComputeLightCamera(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::ComputeLightCamera",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::ComputeLightCamera",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_ComputeLightCamera",1,SWIGTYPE_p_CShadowCaster);
    }
    
    (arg1)->ComputeLightCamera();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_ComputeLightViewport(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CGViewport *arg2 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::ComputeLightViewport",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::ComputeLightViewport",1,"CShadowCaster *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CShadowCaster::ComputeLightViewport",2,"CGViewport &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_ComputeLightViewport",1,SWIGTYPE_p_CShadowCaster);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGViewport,0))){
      SWIG_fail_ptr("CShadowCaster_ComputeLightViewport",2,SWIGTYPE_p_CGViewport);
    }
    
    (arg1)->ComputeLightViewport(*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_ComputeLightProjection(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::ComputeLightProjection",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::ComputeLightProjection",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_ComputeLightProjection",1,SWIGTYPE_p_CShadowCaster);
    }
    
    (arg1)->ComputeLightProjection();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_ComputeTextureProjection(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::ComputeTextureProjection",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::ComputeTextureProjection",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_ComputeTextureProjection",1,SWIGTYPE_p_CShadowCaster);
    }
    
    (arg1)->ComputeTextureProjection();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_UploadShadowMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::UploadShadowMap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::UploadShadowMap",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_UploadShadowMap",1,SWIGTYPE_p_CShadowCaster);
    }
    
    (arg1)->UploadShadowMap();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_RenderShadowMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::RenderShadowMap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::RenderShadowMap",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_RenderShadowMap",1,SWIGTYPE_p_CShadowCaster);
    }
    
    (arg1)->RenderShadowMap();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::Render",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_Render",1,SWIGTYPE_p_CShadowCaster);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_oCamMat_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CGMatrix4x4 *arg2 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::oCamMat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::oCamMat",1,"CShadowCaster *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CShadowCaster::oCamMat",2,"CGMatrix4x4 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_oCamMat_set",1,SWIGTYPE_p_CShadowCaster);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMatrix4x4,0))){
      SWIG_fail_ptr("CShadowCaster_oCamMat_set",2,SWIGTYPE_p_CGMatrix4x4);
    }
    
    if (arg1) (arg1)->oCamMat = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_oCamMat_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CShadowCaster::oCamMat",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::oCamMat",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_oCamMat_get",1,SWIGTYPE_p_CShadowCaster);
    }
    
    result = (CGMatrix4x4 *)& ((arg1)->oCamMat);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_oTexProj_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CTexProjector *arg2 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::oTexProj",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::oTexProj",1,"CShadowCaster *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CShadowCaster::oTexProj",2,"CTexProjector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_oTexProj_set",1,SWIGTYPE_p_CShadowCaster);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTexProjector,0))){
      SWIG_fail_ptr("CShadowCaster_oTexProj_set",2,SWIGTYPE_p_CTexProjector);
    }
    
    if (arg1) (arg1)->oTexProj = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_oTexProj_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CTexProjector *result = 0 ;
    
    SWIG_check_num_args("CShadowCaster::oTexProj",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::oTexProj",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_oTexProj_get",1,SWIGTYPE_p_CShadowCaster);
    }
    
    result = (CTexProjector *)& ((arg1)->oTexProj);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTexProjector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_poShader_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CShadowCaster::poShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::poShader",1,"CShadowCaster *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CShadowCaster::poShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_poShader_set",1,SWIGTYPE_p_CShadowCaster);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CShadowCaster_poShader_set",2,SWIGTYPE_p_CGShader);
    }
    
    if (arg1) (arg1)->poShader = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CShadowCaster_poShader_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CShadowCaster *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CShadowCaster::poShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CShadowCaster::poShader",1,"CShadowCaster *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CShadowCaster,0))){
      SWIG_fail_ptr("CShadowCaster_poShader_get",1,SWIGTYPE_p_CShadowCaster);
    }
    
    result = (CGShader *) ((arg1)->poShader);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CShadowCaster(void *obj) {
CShadowCaster *arg1 = (CShadowCaster *) obj;
delete arg1;
}
static swig_lua_attribute swig_CShadowCaster_attributes[] = {
    { "oCamMat", _wrap_CShadowCaster_oCamMat_get, _wrap_CShadowCaster_oCamMat_set },
    { "oTexProj", _wrap_CShadowCaster_oTexProj_get, _wrap_CShadowCaster_oTexProj_set },
    { "poShader", _wrap_CShadowCaster_poShader_get, _wrap_CShadowCaster_poShader_set },
    {0,0,0}
};
static swig_lua_method swig_CShadowCaster_methods[]= {
    { "Init", _wrap_CShadowCaster_Init},
    { "Setup", _wrap_CShadowCaster_Setup},
    { "poGetBV", _wrap_CShadowCaster_poGetBV},
    { "ComputeLightCamera", _wrap_CShadowCaster_ComputeLightCamera},
    { "ComputeLightViewport", _wrap_CShadowCaster_ComputeLightViewport},
    { "ComputeLightProjection", _wrap_CShadowCaster_ComputeLightProjection},
    { "ComputeTextureProjection", _wrap_CShadowCaster_ComputeTextureProjection},
    { "UploadShadowMap", _wrap_CShadowCaster_UploadShadowMap},
    { "RenderShadowMap", _wrap_CShadowCaster_RenderShadowMap},
    { "Render", _wrap_CShadowCaster_Render},
    {0,0}
};
static swig_lua_method swig_CShadowCaster_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CShadowCaster_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CShadowCaster_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CShadowCaster_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CShadowCaster_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CShadowCaster_Sf_SwigStatic = {
    "CShadowCaster",
    swig_CShadowCaster_Sf_SwigStatic_methods,
    swig_CShadowCaster_Sf_SwigStatic_attributes,
    swig_CShadowCaster_Sf_SwigStatic_constants,
    swig_CShadowCaster_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CShadowCaster_bases[] = {0,0};
static const char *swig_CShadowCaster_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CShadowCaster = { "CShadowCaster", "CShadowCaster", &SWIGTYPE_p_CShadowCaster,0, swig_delete_CShadowCaster, swig_CShadowCaster_methods, swig_CShadowCaster_attributes, &swig_CShadowCaster_Sf_SwigStatic, swig_CShadowCaster_meta, swig_CShadowCaster_bases, swig_CShadowCaster_base_names };

static int _wrap_new_CHUDObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDObject *result = 0 ;
    
    SWIG_check_num_args("CHUDObject::CHUDObject",0,0)
    result = (CHUDObject *)new CHUDObject();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDObject,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDObject(void *obj) {
CHUDObject *arg1 = (CHUDObject *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDObject(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDObject);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDObject_methods[]= {
    {0,0}
};
static swig_lua_method swig_CHUDObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDObject_Sf_SwigStatic = {
    "CHUDObject",
    swig_CHUDObject_Sf_SwigStatic_methods,
    swig_CHUDObject_Sf_SwigStatic_attributes,
    swig_CHUDObject_Sf_SwigStatic_constants,
    swig_CHUDObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDObject_bases[] = {0,0};
static const char *swig_CHUDObject_base_names[] = {"CGSceneSwitch *",0};
static swig_lua_class _wrap_class_CHUDObject = { "CHUDObject", "CHUDObject", &SWIGTYPE_p_CHUDObject,_proxy__wrap_new_CHUDObject, swig_delete_CHUDObject, swig_CHUDObject_methods, swig_CHUDObject_attributes, &swig_CHUDObject_Sf_SwigStatic, swig_CHUDObject_meta, swig_CHUDObject_bases, swig_CHUDObject_base_names };

static int _wrap_new_CHUDIcon(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDIcon *result = 0 ;
    
    SWIG_check_num_args("CHUDIcon::CHUDIcon",0,0)
    result = (CHUDIcon *)new CHUDIcon();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDIcon,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDIcon_SetIcon(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDIcon *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDIcon::SetIcon",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDIcon::SetIcon",1,"CHUDIcon *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDIcon::SetIcon",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDIcon,0))){
      SWIG_fail_ptr("CHUDIcon_SetIcon",1,SWIGTYPE_p_CHUDIcon);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CHUDIcon_SetIcon",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetIcon(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDIcon(void *obj) {
CHUDIcon *arg1 = (CHUDIcon *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDIcon(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDIcon);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDIcon_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDIcon_methods[]= {
    { "SetIcon", _wrap_CHUDIcon_SetIcon},
    {0,0}
};
static swig_lua_method swig_CHUDIcon_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDIcon_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDIcon_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDIcon_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDIcon_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDIcon_Sf_SwigStatic = {
    "CHUDIcon",
    swig_CHUDIcon_Sf_SwigStatic_methods,
    swig_CHUDIcon_Sf_SwigStatic_attributes,
    swig_CHUDIcon_Sf_SwigStatic_constants,
    swig_CHUDIcon_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDIcon_bases[] = {0,0};
static const char *swig_CHUDIcon_base_names[] = {"CHUDObject *",0};
static swig_lua_class _wrap_class_CHUDIcon = { "CHUDIcon", "CHUDIcon", &SWIGTYPE_p_CHUDIcon,_proxy__wrap_new_CHUDIcon, swig_delete_CHUDIcon, swig_CHUDIcon_methods, swig_CHUDIcon_attributes, &swig_CHUDIcon_Sf_SwigStatic, swig_CHUDIcon_meta, swig_CHUDIcon_bases, swig_CHUDIcon_base_names };

static int _wrap_new_CHUDFont(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *result = 0 ;
    
    SWIG_check_num_args("CHUDFont::CHUDFont",0,0)
    result = (CHUDFont *)new CHUDFont();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDFont,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_bInit__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    char *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("CHUDFont::bInit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::bInit",1,"CHUDFont *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CHUDFont::bInit",2,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_bInit",1,SWIGTYPE_p_CHUDFont);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (bool)(arg1)->bInit((char const *)arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_bInit__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    bool result;
    
    SWIG_check_num_args("CHUDFont::bInit",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::bInit",1,"CHUDFont *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CHUDFont::bInit",2,"char const *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CHUDFont::bInit",3,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_bInit",1,SWIGTYPE_p_CHUDFont);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    arg3 = (char *)lua_tostring(L, 3);
    result = (bool)(arg1)->bInit((char const *)arg2,(char const *)arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_bInit(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUDFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CHUDFont_bInit__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUDFont, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_CHUDFont_bInit__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CHUDFont_bInit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHUDFont::bInit(char const *)\n"
    "    CHUDFont::bInit(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_CHUDFont_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CHUDFont::poGetShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::poGetShader",1,"CHUDFont *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_poGetShader",1,SWIGTYPE_p_CHUDFont);
    }
    
    result = (CGShader *)(arg1)->poGetShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_fGetTextWidth(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    char *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDFont::fGetTextWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::fGetTextWidth",1,"CHUDFont *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CHUDFont::fGetTextWidth",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_fGetTextWidth",1,SWIGTYPE_p_CHUDFont);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (float)(arg1)->fGetTextWidth(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_fCharHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    char arg2 ;
    float result;
    
    SWIG_check_num_args("CHUDFont::fCharHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::fCharHeight",1,"CHUDFont *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CHUDFont::fCharHeight",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_fCharHeight",1,SWIGTYPE_p_CHUDFont);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (float)(arg1)->fCharHeight(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_fCharWidth(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    char arg2 ;
    float result;
    
    SWIG_check_num_args("CHUDFont::fCharWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::fCharWidth",1,"CHUDFont *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CHUDFont::fCharWidth",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_fCharWidth",1,SWIGTYPE_p_CHUDFont);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    result = (float)(arg1)->fCharWidth(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_fDefaultCharWidth(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDFont::fDefaultCharWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::fDefaultCharWidth",1,"CHUDFont *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_fDefaultCharWidth",1,SWIGTYPE_p_CHUDFont);
    }
    
    result = (float)(arg1)->fDefaultCharWidth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFont_fDefaultCharHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFont *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDFont::fDefaultCharHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFont::fDefaultCharHeight",1,"CHUDFont *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDFont_fDefaultCharHeight",1,SWIGTYPE_p_CHUDFont);
    }
    
    result = (float)(arg1)->fDefaultCharHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDFont(void *obj) {
CHUDFont *arg1 = (CHUDFont *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDFont(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDFont);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDFont_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDFont_methods[]= {
    { "bInit", _wrap_CHUDFont_bInit},
    { "poGetShader", _wrap_CHUDFont_poGetShader},
    { "fGetTextWidth", _wrap_CHUDFont_fGetTextWidth},
    { "fCharHeight", _wrap_CHUDFont_fCharHeight},
    { "fCharWidth", _wrap_CHUDFont_fCharWidth},
    { "fDefaultCharWidth", _wrap_CHUDFont_fDefaultCharWidth},
    { "fDefaultCharHeight", _wrap_CHUDFont_fDefaultCharHeight},
    {0,0}
};
static swig_lua_method swig_CHUDFont_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDFont_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDFont_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDFont_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDFont_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDFont_Sf_SwigStatic = {
    "CHUDFont",
    swig_CHUDFont_Sf_SwigStatic_methods,
    swig_CHUDFont_Sf_SwigStatic_attributes,
    swig_CHUDFont_Sf_SwigStatic_constants,
    swig_CHUDFont_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDFont_bases[] = {0,0};
static const char *swig_CHUDFont_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CHUDFont = { "CHUDFont", "CHUDFont", &SWIGTYPE_p_CHUDFont,_proxy__wrap_new_CHUDFont, swig_delete_CHUDFont, swig_CHUDFont_methods, swig_CHUDFont_attributes, &swig_CHUDFont_Sf_SwigStatic, swig_CHUDFont_meta, swig_CHUDFont_bases, swig_CHUDFont_base_names };

static int _wrap_new_CHUDLabel__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDLabel *result = 0 ;
    
    SWIG_check_num_args("CHUDLabel::CHUDLabel",0,0)
    result = (CHUDLabel *)new CHUDLabel();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDLabel,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CHUDLabel__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CHUDLabel *result = 0 ;
    
    SWIG_check_num_args("CHUDLabel::CHUDLabel",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CHUDLabel::CHUDLabel",1,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    result = (CHUDLabel *)new CHUDLabel(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDLabel,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CHUDLabel(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CHUDLabel__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CHUDLabel__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CHUDLabel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHUDLabel::CHUDLabel()\n"
    "    CHUDLabel::CHUDLabel(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CHUDLabel_SetFont(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDLabel *arg1 = 0 ;
    CHUDFont *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDLabel::SetFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDLabel::SetFont",1,"CHUDLabel *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDLabel::SetFont",2,"CHUDFont *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDLabel,0))){
      SWIG_fail_ptr("CHUDLabel_SetFont",1,SWIGTYPE_p_CHUDLabel);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CHUDFont,0))){
      SWIG_fail_ptr("CHUDLabel_SetFont",2,SWIGTYPE_p_CHUDFont);
    }
    
    (arg1)->SetFont(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDLabel_SetText__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDLabel *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDLabel::SetText",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDLabel::SetText",1,"CHUDLabel *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUDLabel::SetText",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDLabel,0))){
      SWIG_fail_ptr("CHUDLabel_SetText",1,SWIGTYPE_p_CHUDLabel);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CHUDLabel_SetText",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->SetText((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDLabel_SetText__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDLabel *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CHUDLabel::SetText",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDLabel::SetText",1,"CHUDLabel *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CHUDLabel::SetText",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDLabel,0))){
      SWIG_fail_ptr("CHUDLabel_SetText",1,SWIGTYPE_p_CHUDLabel);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->SetText(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDLabel_SetText(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUDLabel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CHUDLabel_SetText__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHUDLabel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_CHUDLabel_SetText__SWIG_1(L);
        }
        return _wrap_CHUDLabel_SetText__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CHUDLabel_SetText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHUDLabel::SetText(CGString const &)\n"
    "    CHUDLabel::SetText(char *,...)\n");
  lua_error(L);return 0;
}


static int _wrap_CHUDLabel_sGetText(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDLabel *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CHUDLabel::sGetText",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDLabel::sGetText",1,"CHUDLabel *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDLabel,0))){
      SWIG_fail_ptr("CHUDLabel_sGetText",1,SWIGTYPE_p_CHUDLabel);
    }
    
    result = (CGString *) &(arg1)->sGetText();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDLabel_SetColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDLabel *arg1 = 0 ;
    CGColor arg2 ;
    CGColor *argp2 ;
    
    SWIG_check_num_args("CHUDLabel::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDLabel::SetColor",1,"CHUDLabel *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUDLabel::SetColor",2,"CGColor");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDLabel,0))){
      SWIG_fail_ptr("CHUDLabel_SetColor",1,SWIGTYPE_p_CHUDLabel);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CHUDLabel_SetColor",2,SWIGTYPE_p_CGColor);
    }
    arg2 = *argp2;
    
    (arg1)->SetColor(SWIG_STD_MOVE(arg2));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDLabel_SetMaxChars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDLabel *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CHUDLabel::SetMaxChars",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDLabel::SetMaxChars",1,"CHUDLabel *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDLabel::SetMaxChars",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDLabel,0))){
      SWIG_fail_ptr("CHUDLabel_SetMaxChars",1,SWIGTYPE_p_CHUDLabel);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetMaxChars(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDLabel(void *obj) {
CHUDLabel *arg1 = (CHUDLabel *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDLabel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDLabel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDLabel_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDLabel_methods[]= {
    { "SetFont", _wrap_CHUDLabel_SetFont},
    { "SetText", _wrap_CHUDLabel_SetText},
    { "sGetText", _wrap_CHUDLabel_sGetText},
    { "SetColor", _wrap_CHUDLabel_SetColor},
    { "SetMaxChars", _wrap_CHUDLabel_SetMaxChars},
    {0,0}
};
static swig_lua_method swig_CHUDLabel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDLabel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDLabel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDLabel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDLabel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDLabel_Sf_SwigStatic = {
    "CHUDLabel",
    swig_CHUDLabel_Sf_SwigStatic_methods,
    swig_CHUDLabel_Sf_SwigStatic_attributes,
    swig_CHUDLabel_Sf_SwigStatic_constants,
    swig_CHUDLabel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDLabel_bases[] = {0,0};
static const char *swig_CHUDLabel_base_names[] = {"CHUDObject *",0};
static swig_lua_class _wrap_class_CHUDLabel = { "CHUDLabel", "CHUDLabel", &SWIGTYPE_p_CHUDLabel,_proxy__wrap_new_CHUDLabel, swig_delete_CHUDLabel, swig_CHUDLabel_methods, swig_CHUDLabel_attributes, &swig_CHUDLabel_Sf_SwigStatic, swig_CHUDLabel_meta, swig_CHUDLabel_bases, swig_CHUDLabel_base_names };

static int _wrap_new_CHUDProgressBar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDProgressBar *result = 0 ;
    
    SWIG_check_num_args("CHUDProgressBar::CHUDProgressBar",0,0)
    result = (CHUDProgressBar *)new CHUDProgressBar();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDProgressBar,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDProgressBar_SetFrameShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDProgressBar *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDProgressBar::SetFrameShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDProgressBar::SetFrameShader",1,"CHUDProgressBar *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDProgressBar::SetFrameShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDProgressBar,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetFrameShader",1,SWIGTYPE_p_CHUDProgressBar);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetFrameShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetFrameShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDProgressBar_SetBarShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDProgressBar *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDProgressBar::SetBarShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDProgressBar::SetBarShader",1,"CHUDProgressBar *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDProgressBar::SetBarShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDProgressBar,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetBarShader",1,SWIGTYPE_p_CHUDProgressBar);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetBarShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetBarShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDProgressBar_SetIniColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDProgressBar *arg1 = 0 ;
    CGColor arg2 ;
    CGColor *argp2 ;
    
    SWIG_check_num_args("CHUDProgressBar::SetIniColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDProgressBar::SetIniColor",1,"CHUDProgressBar *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUDProgressBar::SetIniColor",2,"CGColor");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDProgressBar,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetIniColor",1,SWIGTYPE_p_CHUDProgressBar);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetIniColor",2,SWIGTYPE_p_CGColor);
    }
    arg2 = *argp2;
    
    (arg1)->SetIniColor(SWIG_STD_MOVE(arg2));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDProgressBar_SetEndColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDProgressBar *arg1 = 0 ;
    CGColor arg2 ;
    CGColor *argp2 ;
    
    SWIG_check_num_args("CHUDProgressBar::SetEndColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDProgressBar::SetEndColor",1,"CHUDProgressBar *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUDProgressBar::SetEndColor",2,"CGColor");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDProgressBar,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetEndColor",1,SWIGTYPE_p_CHUDProgressBar);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CHUDProgressBar_SetEndColor",2,SWIGTYPE_p_CGColor);
    }
    arg2 = *argp2;
    
    (arg1)->SetEndColor(SWIG_STD_MOVE(arg2));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDProgressBar_Value(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDProgressBar *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CHUDProgressBar::Value",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDProgressBar::Value",1,"CHUDProgressBar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDProgressBar::Value",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDProgressBar,0))){
      SWIG_fail_ptr("CHUDProgressBar_Value",1,SWIGTYPE_p_CHUDProgressBar);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Value(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDProgressBar_fValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDProgressBar *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHUDProgressBar::fValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDProgressBar::fValue",1,"CHUDProgressBar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDProgressBar,0))){
      SWIG_fail_ptr("CHUDProgressBar_fValue",1,SWIGTYPE_p_CHUDProgressBar);
    }
    
    result = (float)(arg1)->fValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDProgressBar(void *obj) {
CHUDProgressBar *arg1 = (CHUDProgressBar *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDProgressBar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDProgressBar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDProgressBar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDProgressBar_methods[]= {
    { "SetFrameShader", _wrap_CHUDProgressBar_SetFrameShader},
    { "SetBarShader", _wrap_CHUDProgressBar_SetBarShader},
    { "SetIniColor", _wrap_CHUDProgressBar_SetIniColor},
    { "SetEndColor", _wrap_CHUDProgressBar_SetEndColor},
    { "Value", _wrap_CHUDProgressBar_Value},
    { "fValue", _wrap_CHUDProgressBar_fValue},
    {0,0}
};
static swig_lua_method swig_CHUDProgressBar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDProgressBar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDProgressBar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDProgressBar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDProgressBar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDProgressBar_Sf_SwigStatic = {
    "CHUDProgressBar",
    swig_CHUDProgressBar_Sf_SwigStatic_methods,
    swig_CHUDProgressBar_Sf_SwigStatic_attributes,
    swig_CHUDProgressBar_Sf_SwigStatic_constants,
    swig_CHUDProgressBar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDProgressBar_bases[] = {0,0};
static const char *swig_CHUDProgressBar_base_names[] = {"CHUDObject *",0};
static swig_lua_class _wrap_class_CHUDProgressBar = { "CHUDProgressBar", "CHUDProgressBar", &SWIGTYPE_p_CHUDProgressBar,_proxy__wrap_new_CHUDProgressBar, swig_delete_CHUDProgressBar, swig_CHUDProgressBar_methods, swig_CHUDProgressBar_attributes, &swig_CHUDProgressBar_Sf_SwigStatic, swig_CHUDProgressBar_meta, swig_CHUDProgressBar_bases, swig_CHUDProgressBar_base_names };

static int _wrap_new_CHUDFontWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFontWH *result = 0 ;
    
    SWIG_check_num_args("CHUDFontWH::CHUDFontWH",0,0)
    result = (CHUDFontWH *)new CHUDFontWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDFontWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDFontWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFontWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CHUDFont *result = 0 ;
    
    SWIG_check_num_args("CHUDFontWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFontWH::poLoadResource",1,"CHUDFontWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUDFontWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFontWH,0))){
      SWIG_fail_ptr("CHUDFontWH_poLoadResource",1,SWIGTYPE_p_CHUDFontWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CHUDFontWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CHUDFont *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDFont,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDFontWH(void *obj) {
CHUDFontWH *arg1 = (CHUDFontWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDFontWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDFontWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDFontWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDFontWH_methods[]= {
    { "poLoadResource", _wrap_CHUDFontWH_poLoadResource},
    {0,0}
};
static swig_lua_method swig_CHUDFontWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDFontWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDFontWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDFontWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDFontWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDFontWH_Sf_SwigStatic = {
    "CHUDFontWH",
    swig_CHUDFontWH_Sf_SwigStatic_methods,
    swig_CHUDFontWH_Sf_SwigStatic_attributes,
    swig_CHUDFontWH_Sf_SwigStatic_constants,
    swig_CHUDFontWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDFontWH_bases[] = {0};
static const char *swig_CHUDFontWH_base_names[] = {0};
static swig_lua_class _wrap_class_CHUDFontWH = { "CHUDFontWH", "CHUDFontWH", &SWIGTYPE_p_CHUDFontWH,_proxy__wrap_new_CHUDFontWH, swig_delete_CHUDFontWH, swig_CHUDFontWH_methods, swig_CHUDFontWH_attributes, &swig_CHUDFontWH_Sf_SwigStatic, swig_CHUDFontWH_meta, swig_CHUDFontWH_bases, swig_CHUDFontWH_base_names };

static int _wrap_new_CMenuTextGrid(lua_State* L) {
  {
    int SWIG_arg = 0;
    CMenuTextGrid *result = 0 ;
    
    SWIG_check_num_args("CMenuTextGrid::CMenuTextGrid",0,0)
    result = (CMenuTextGrid *)new CMenuTextGrid();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CMenuTextGrid,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CMenuTextGrid_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CMenuTextGrid *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CMenuTextGrid::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMenuTextGrid::Init",1,"CMenuTextGrid *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CMenuTextGrid::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CMenuTextGrid::Init",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMenuTextGrid,0))){
      SWIG_fail_ptr("CMenuTextGrid_Init",1,SWIGTYPE_p_CMenuTextGrid);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CMenuTextGrid_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CMenuTextGrid *arg1 = 0 ;
    
    SWIG_check_num_args("CMenuTextGrid::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMenuTextGrid::Reset",1,"CMenuTextGrid *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMenuTextGrid,0))){
      SWIG_fail_ptr("CMenuTextGrid_Reset",1,SWIGTYPE_p_CMenuTextGrid);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CMenuTextGrid_WriteText(lua_State* L) {
  {
    int SWIG_arg = 0;
    CMenuTextGrid *arg1 = 0 ;
    char *arg2 = 0 ;
    CGColor arg3 ;
    float arg4 ;
    CGColor *argp3 ;
    
    SWIG_check_num_args("CMenuTextGrid::WriteText",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMenuTextGrid::WriteText",1,"CMenuTextGrid *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CMenuTextGrid::WriteText",2,"char *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CMenuTextGrid::WriteText",3,"CGColor");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CMenuTextGrid::WriteText",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMenuTextGrid,0))){
      SWIG_fail_ptr("CMenuTextGrid_WriteText",1,SWIGTYPE_p_CMenuTextGrid);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CMenuTextGrid_WriteText",3,SWIGTYPE_p_CGColor);
    }
    arg3 = *argp3;
    
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->WriteText(arg2,SWIG_STD_MOVE(arg3),arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CMenuTextGrid(void *obj) {
CMenuTextGrid *arg1 = (CMenuTextGrid *) obj;
delete arg1;
}
static int _proxy__wrap_new_CMenuTextGrid(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CMenuTextGrid);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CMenuTextGrid_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CMenuTextGrid_methods[]= {
    { "Init", _wrap_CMenuTextGrid_Init},
    { "Reset", _wrap_CMenuTextGrid_Reset},
    { "WriteText", _wrap_CMenuTextGrid_WriteText},
    {0,0}
};
static swig_lua_method swig_CMenuTextGrid_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CMenuTextGrid_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CMenuTextGrid_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CMenuTextGrid_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CMenuTextGrid_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CMenuTextGrid_Sf_SwigStatic = {
    "CMenuTextGrid",
    swig_CMenuTextGrid_Sf_SwigStatic_methods,
    swig_CMenuTextGrid_Sf_SwigStatic_attributes,
    swig_CMenuTextGrid_Sf_SwigStatic_constants,
    swig_CMenuTextGrid_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CMenuTextGrid_bases[] = {0,0};
static const char *swig_CMenuTextGrid_base_names[] = {"CGMesh *",0};
static swig_lua_class _wrap_class_CMenuTextGrid = { "CMenuTextGrid", "CMenuTextGrid", &SWIGTYPE_p_CMenuTextGrid,_proxy__wrap_new_CMenuTextGrid, swig_delete_CMenuTextGrid, swig_CMenuTextGrid_methods, swig_CMenuTextGrid_attributes, &swig_CMenuTextGrid_Sf_SwigStatic, swig_CMenuTextGrid_meta, swig_CMenuTextGrid_bases, swig_CMenuTextGrid_base_names };

static int _wrap_TMsgLine_szLine_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TMsgLine *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("TMsgLine::szLine",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TMsgLine::szLine",1,"TMsgLine *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TMsgLine::szLine",2,"char [64]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TMsgLine,0))){
      SWIG_fail_ptr("TMsgLine_szLine_set",1,SWIGTYPE_p_TMsgLine);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->szLine, (const char *)arg2, 64-1);
        arg1->szLine[64-1] = 0;
      } else {
        arg1->szLine[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TMsgLine_szLine_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TMsgLine *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("TMsgLine::szLine",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TMsgLine::szLine",1,"TMsgLine *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TMsgLine,0))){
      SWIG_fail_ptr("TMsgLine_szLine_get",1,SWIGTYPE_p_TMsgLine);
    }
    
    result = (char *)(char *) ((arg1)->szLine);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_TMsgLine(lua_State* L) {
  {
    int SWIG_arg = 0;
    TMsgLine *result = 0 ;
    
    SWIG_check_num_args("TMsgLine::TMsgLine",0,0)
    result = (TMsgLine *)new TMsgLine();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TMsgLine,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_TMsgLine(void *obj) {
TMsgLine *arg1 = (TMsgLine *) obj;
delete arg1;
}
static int _proxy__wrap_new_TMsgLine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TMsgLine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TMsgLine_attributes[] = {
    { "szLine", _wrap_TMsgLine_szLine_get, _wrap_TMsgLine_szLine_set },
    {0,0,0}
};
static swig_lua_method swig_TMsgLine_methods[]= {
    {0,0}
};
static swig_lua_method swig_TMsgLine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TMsgLine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TMsgLine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TMsgLine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TMsgLine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TMsgLine_Sf_SwigStatic = {
    "TMsgLine",
    swig_TMsgLine_Sf_SwigStatic_methods,
    swig_TMsgLine_Sf_SwigStatic_attributes,
    swig_TMsgLine_Sf_SwigStatic_constants,
    swig_TMsgLine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TMsgLine_bases[] = {0};
static const char *swig_TMsgLine_base_names[] = {0};
static swig_lua_class _wrap_class_TMsgLine = { "TMsgLine", "TMsgLine", &SWIGTYPE_p_TMsgLine,_proxy__wrap_new_TMsgLine, swig_delete_TMsgLine, swig_TMsgLine_methods, swig_TMsgLine_attributes, &swig_TMsgLine_Sf_SwigStatic, swig_TMsgLine_meta, swig_TMsgLine_bases, swig_TMsgLine_base_names };

static int _wrap_new_CHUDMsgBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *result = 0 ;
    
    SWIG_check_num_args("CHUDMsgBox::CHUDMsgBox",0,0)
    result = (CHUDMsgBox *)new CHUDMsgBox();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDMsgBox,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CHUDMsgBox::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::Init",1,"CHUDMsgBox *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHUDMsgBox::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHUDMsgBox::Init",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_Init",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_Open(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDMsgBox::Open",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::Open",1,"CHUDMsgBox *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CHUDMsgBox::Open",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_Open",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Open(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_Close(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    
    SWIG_check_num_args("CHUDMsgBox::Close",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::Close",1,"CHUDMsgBox *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_Close",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    (arg1)->Close();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_SetBackground(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDMsgBox::SetBackground",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::SetBackground",1,"CHUDMsgBox *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDMsgBox::SetBackground",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_SetBackground",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CHUDMsgBox_SetBackground",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetBackground(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_SetFont(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CHUDMsgBox::SetFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::SetFont",1,"CHUDMsgBox *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHUDMsgBox::SetFont",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_SetFont",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CHUDMsgBox_SetFont",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetFont(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_SetColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    CGColor arg2 ;
    CGColor *argp2 ;
    
    SWIG_check_num_args("CHUDMsgBox::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::SetColor",1,"CHUDMsgBox *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUDMsgBox::SetColor",2,"CGColor");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_SetColor",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CHUDMsgBox_SetColor",2,SWIGTYPE_p_CGColor);
    }
    arg2 = *argp2;
    
    (arg1)->SetColor(SWIG_STD_MOVE(arg2));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_AdvanceHdr(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    
    SWIG_check_num_args("CHUDMsgBox::AdvanceHdr",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::AdvanceHdr",1,"CHUDMsgBox *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_AdvanceHdr",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    (arg1)->AdvanceHdr();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_PutBackHdr(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    
    SWIG_check_num_args("CHUDMsgBox::PutBackHdr",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::PutBackHdr",1,"CHUDMsgBox *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_PutBackHdr",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    (arg1)->PutBackHdr();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_iGetWidthChars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CHUDMsgBox::iGetWidthChars",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::iGetWidthChars",1,"CHUDMsgBox *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_iGetWidthChars",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    result = (int)(arg1)->iGetWidthChars();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHUDMsgBox_iGetHeightChars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDMsgBox *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CHUDMsgBox::iGetHeightChars",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDMsgBox::iGetHeightChars",1,"CHUDMsgBox *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDMsgBox,0))){
      SWIG_fail_ptr("CHUDMsgBox_iGetHeightChars",1,SWIGTYPE_p_CHUDMsgBox);
    }
    
    result = (int)(arg1)->iGetHeightChars();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDMsgBox(void *obj) {
CHUDMsgBox *arg1 = (CHUDMsgBox *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDMsgBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDMsgBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDMsgBox_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDMsgBox_methods[]= {
    { "Init", _wrap_CHUDMsgBox_Init},
    { "Open", _wrap_CHUDMsgBox_Open},
    { "Close", _wrap_CHUDMsgBox_Close},
    { "SetBackground", _wrap_CHUDMsgBox_SetBackground},
    { "SetFont", _wrap_CHUDMsgBox_SetFont},
    { "SetColor", _wrap_CHUDMsgBox_SetColor},
    { "AdvanceHdr", _wrap_CHUDMsgBox_AdvanceHdr},
    { "PutBackHdr", _wrap_CHUDMsgBox_PutBackHdr},
    { "iGetWidthChars", _wrap_CHUDMsgBox_iGetWidthChars},
    { "iGetHeightChars", _wrap_CHUDMsgBox_iGetHeightChars},
    {0,0}
};
static swig_lua_method swig_CHUDMsgBox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDMsgBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDMsgBox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDMsgBox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDMsgBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDMsgBox_Sf_SwigStatic = {
    "CHUDMsgBox",
    swig_CHUDMsgBox_Sf_SwigStatic_methods,
    swig_CHUDMsgBox_Sf_SwigStatic_attributes,
    swig_CHUDMsgBox_Sf_SwigStatic_constants,
    swig_CHUDMsgBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDMsgBox_bases[] = {0,0};
static const char *swig_CHUDMsgBox_base_names[] = {"CGSceneMux *",0};
static swig_lua_class _wrap_class_CHUDMsgBox = { "CHUDMsgBox", "CHUDMsgBox", &SWIGTYPE_p_CHUDMsgBox,_proxy__wrap_new_CHUDMsgBox, swig_delete_CHUDMsgBox, swig_CHUDMsgBox_methods, swig_CHUDMsgBox_attributes, &swig_CHUDMsgBox_Sf_SwigStatic, swig_CHUDMsgBox_meta, swig_CHUDMsgBox_bases, swig_CHUDMsgBox_base_names };

static int _wrap_CHUDFile_poLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFile *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CHUD *result = 0 ;
    
    SWIG_check_num_args("CHUDFile::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHUDFile::poLoad",1,"CHUDFile *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHUDFile::poLoad",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHUDFile,0))){
      SWIG_fail_ptr("CHUDFile_poLoad",1,SWIGTYPE_p_CHUDFile);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CHUDFile_poLoad",2,SWIGTYPE_p_CGString);
    }
    
    result = (CHUD *)(arg1)->poLoad((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUD,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CHUDFile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHUDFile *result = 0 ;
    
    SWIG_check_num_args("CHUDFile::CHUDFile",0,0)
    result = (CHUDFile *)new CHUDFile();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDFile,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHUDFile(void *obj) {
CHUDFile *arg1 = (CHUDFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHUDFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHUDFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHUDFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHUDFile_methods[]= {
    { "poLoad", _wrap_CHUDFile_poLoad},
    {0,0}
};
static swig_lua_method swig_CHUDFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHUDFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHUDFile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHUDFile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHUDFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHUDFile_Sf_SwigStatic = {
    "CHUDFile",
    swig_CHUDFile_Sf_SwigStatic_methods,
    swig_CHUDFile_Sf_SwigStatic_attributes,
    swig_CHUDFile_Sf_SwigStatic_constants,
    swig_CHUDFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHUDFile_bases[] = {0};
static const char *swig_CHUDFile_base_names[] = {0};
static swig_lua_class _wrap_class_CHUDFile = { "CHUDFile", "CHUDFile", &SWIGTYPE_p_CHUDFile,_proxy__wrap_new_CHUDFile, swig_delete_CHUDFile, swig_CHUDFile_methods, swig_CHUDFile_attributes, &swig_CHUDFile_Sf_SwigStatic, swig_CHUDFile_meta, swig_CHUDFile_bases, swig_CHUDFile_base_names };

static int _wrap_new_CGGameEntity(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *result = 0 ;
    
    SWIG_check_num_args("CGGameEntity::CGGameEntity",0,0)
    result = (CGGameEntity *)new CGGameEntity();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntity,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_sClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGGameEntity::sClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::sClass",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_sClass",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (arg1)->sClass();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_sUID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGGameEntity::sUID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::sUID",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_sUID",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (arg1)->sUID();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_uiClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGGameEntity::uiClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::uiClass",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_uiClass",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (uint)(arg1)->uiClass();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_uiID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGGameEntity::uiID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::uiID",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_uiID",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (uint)(arg1)->uiID();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_PreThink(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameEntity::PreThink",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::PreThink",1,"CGGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntity::PreThink",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_PreThink",1,SWIGTYPE_p_CGGameEntity);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->PreThink(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameEntity::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Think",1,"CGGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntity::Think",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Think",1,SWIGTYPE_p_CGGameEntity);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Think(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Spawn(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Spawn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Spawn",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Spawn",1,SWIGTYPE_p_CGGameEntity);
    }
    
    (arg1)->Spawn();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Reset",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Reset",1,SWIGTYPE_p_CGGameEntity);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_SwitchToState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    TEntityState arg2 ;
    
    SWIG_check_num_args("CGGameEntity::SwitchToState",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::SwitchToState",1,"CGGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntity::SwitchToState",2,"TEntityState");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_SwitchToState",1,SWIGTYPE_p_CGGameEntity);
    }
    
    arg2 = (TEntityState)(int)lua_tonumber(L, 2);
    (arg1)->SwitchToState(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_eGetState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    TEntityState result;
    
    SWIG_check_num_args("CGGameEntity::eGetState",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::eGetState",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_eGetState",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (TEntityState)(arg1)->eGetState();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Enable(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Enable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Enable",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Enable",1,SWIGTYPE_p_CGGameEntity);
    }
    
    (arg1)->Enable();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Disable(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Disable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Disable",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Disable",1,SWIGTYPE_p_CGGameEntity);
    }
    
    (arg1)->Disable();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_bIsEnabled(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGGameEntity::bIsEnabled",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::bIsEnabled",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_bIsEnabled",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (bool)(arg1)->bIsEnabled();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_fTimeMult(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGGameEntity::fTimeMult",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::fTimeMult",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_fTimeMult",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (float)(arg1)->fTimeMult();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_TimeMult(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameEntity::TimeMult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::TimeMult",1,"CGGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntity::TimeMult",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_TimeMult",1,SWIGTYPE_p_CGGameEntity);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->TimeMult(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_fTime(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGGameEntity::fTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::fTime",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_fTime",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (float)(arg1)->fTime();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Time(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameEntity::Time",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Time",1,"CGGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntity::Time",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Time",1,SWIGTYPE_p_CGGameEntity);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Time(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_fDeltaT(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGGameEntity::fDeltaT",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::fDeltaT",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_fDeltaT",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (float)(arg1)->fDeltaT();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_GraphicInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGGraphicInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::GraphicInstance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::GraphicInstance",1,"CGGameEntity *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntity::GraphicInstance",2,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_GraphicInstance",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGameEntity_GraphicInstance",2,SWIGTYPE_p_CGGraphicInstance);
    }
    
    (arg1)->GraphicInstance(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_poGraphicInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGGraphicInstance *result = 0 ;
    
    SWIG_check_num_args("CGGameEntity::poGraphicInstance",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::poGraphicInstance",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_poGraphicInstance",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (CGGraphicInstance *)(arg1)->poGraphicInstance();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicInstance,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Collider(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CCOL_Collider *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Collider",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Collider",1,"CGGameEntity *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntity::Collider",2,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Collider",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CGGameEntity_Collider",2,SWIGTYPE_p_CCOL_Collider);
    }
    
    (arg1)->Collider(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_poCollider(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CCOL_Collider *result = 0 ;
    
    SWIG_check_num_args("CGGameEntity::poCollider",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::poCollider",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_poCollider",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (CCOL_Collider *)(arg1)->poCollider();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Collider,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Logic(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGScriptInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Logic",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Logic",1,"CGGameEntity *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntity::Logic",2,"CGScriptInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Logic",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGScriptInstance,0))){
      SWIG_fail_ptr("CGGameEntity_Logic",2,SWIGTYPE_p_CGScriptInstance);
    }
    
    (arg1)->Logic(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_poLogic(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGScriptInstance *result = 0 ;
    
    SWIG_check_num_args("CGGameEntity::poLogic",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::poLogic",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_poLogic",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (CGScriptInstance *)(arg1)->poLogic();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptInstance,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Input(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGInputHandler *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Input",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Input",1,"CGGameEntity *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntity::Input",2,"CGInputHandler *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Input",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGInputHandler,0))){
      SWIG_fail_ptr("CGGameEntity_Input",2,SWIGTYPE_p_CGInputHandler);
    }
    
    (arg1)->Input(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_poInput(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGInputHandler *result = 0 ;
    
    SWIG_check_num_args("CGGameEntity::poInput",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::poInput",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_poInput",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (CGInputHandler *)(arg1)->poInput();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGInputHandler,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_Logger(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGLogger *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::Logger",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::Logger",1,"CGGameEntity *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntity::Logger",2,"CGLogger *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_Logger",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGLogger,0))){
      SWIG_fail_ptr("CGGameEntity_Logger",2,SWIGTYPE_p_CGLogger);
    }
    
    (arg1)->Logger(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_poLogger(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGLogger *result = 0 ;
    
    SWIG_check_num_args("CGGameEntity::poLogger",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::poLogger",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_poLogger",1,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (CGLogger *)(arg1)->poLogger();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLogger,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_uiAddUserData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    uobject arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGGameEntity::uiAddUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::uiAddUserData",1,"CGGameEntity *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntity::uiAddUserData",2,"uobject");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_uiAddUserData",1,SWIGTYPE_p_CGGameEntity);
    }
    
    arg2=(uobject)SWIG_MustGetPtr(L,2,0,0,2,"CGGameEntity_uiAddUserData");
    result = (uint)(arg1)->uiAddUserData(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_hGetUserData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    uint arg2 ;
    uobject result;
    
    SWIG_check_num_args("CGGameEntity::hGetUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::hGetUserData",1,"CGGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntity::hGetUserData",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_hGetUserData",1,SWIGTYPE_p_CGGameEntity);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (uobject)(arg1)->hGetUserData(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_ClearUserData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::ClearUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::ClearUserData",1,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_ClearUserData",1,SWIGTYPE_p_CGGameEntity);
    }
    
    (arg1)->ClearUserData();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_SetColor__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::SetColor",1,"CGGameEntity *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameEntity::SetColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_SetColor",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGGameEntity_SetColor",2,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetColor((CGColor const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_SetColor__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGGameEntity::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::SetColor",1,"CGGameEntity const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameEntity::SetColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_SetColor",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGGameEntity_SetColor",2,SWIGTYPE_p_CGColor);
    }
    
    result = (CGColor *) &((CGGameEntity const *)arg1)->SetColor((CGColor const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntity_SetColor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGGameEntity_SetColor__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGGameEntity_SetColor__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGGameEntity_SetColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGameEntity::SetColor(CGColor const &)\n"
    "    CGGameEntity::SetColor(CGColor const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_CGGameEntity_UpdatePos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntity::UpdatePos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntity::UpdatePos",1,"CGGameEntity *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameEntity::UpdatePos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntity_UpdatePos",1,SWIGTYPE_p_CGGameEntity);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGameEntity_UpdatePos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->UpdatePos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameEntity(void *obj) {
CGGameEntity *arg1 = (CGGameEntity *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameEntity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameEntity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameEntity_methods[]= {
    { "sClass", _wrap_CGGameEntity_sClass},
    { "sUID", _wrap_CGGameEntity_sUID},
    { "uiClass", _wrap_CGGameEntity_uiClass},
    { "uiID", _wrap_CGGameEntity_uiID},
    { "PreThink", _wrap_CGGameEntity_PreThink},
    { "Think", _wrap_CGGameEntity_Think},
    { "Spawn", _wrap_CGGameEntity_Spawn},
    { "Reset", _wrap_CGGameEntity_Reset},
    { "SwitchToState", _wrap_CGGameEntity_SwitchToState},
    { "eGetState", _wrap_CGGameEntity_eGetState},
    { "Enable", _wrap_CGGameEntity_Enable},
    { "Disable", _wrap_CGGameEntity_Disable},
    { "bIsEnabled", _wrap_CGGameEntity_bIsEnabled},
    { "fTimeMult", _wrap_CGGameEntity_fTimeMult},
    { "TimeMult", _wrap_CGGameEntity_TimeMult},
    { "fTime", _wrap_CGGameEntity_fTime},
    { "Time", _wrap_CGGameEntity_Time},
    { "fDeltaT", _wrap_CGGameEntity_fDeltaT},
    { "GraphicInstance", _wrap_CGGameEntity_GraphicInstance},
    { "poGraphicInstance", _wrap_CGGameEntity_poGraphicInstance},
    { "Collider", _wrap_CGGameEntity_Collider},
    { "poCollider", _wrap_CGGameEntity_poCollider},
    { "Logic", _wrap_CGGameEntity_Logic},
    { "poLogic", _wrap_CGGameEntity_poLogic},
    { "Input", _wrap_CGGameEntity_Input},
    { "poInput", _wrap_CGGameEntity_poInput},
    { "Logger", _wrap_CGGameEntity_Logger},
    { "poLogger", _wrap_CGGameEntity_poLogger},
    { "uiAddUserData", _wrap_CGGameEntity_uiAddUserData},
    { "hGetUserData", _wrap_CGGameEntity_hGetUserData},
    { "ClearUserData", _wrap_CGGameEntity_ClearUserData},
    { "SetColor", _wrap_CGGameEntity_SetColor},
    { "UpdatePos", _wrap_CGGameEntity_UpdatePos},
    {0,0}
};
static swig_lua_method swig_CGGameEntity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameEntity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameEntity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameEntity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameEntity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameEntity_Sf_SwigStatic = {
    "CGGameEntity",
    swig_CGGameEntity_Sf_SwigStatic_methods,
    swig_CGGameEntity_Sf_SwigStatic_attributes,
    swig_CGGameEntity_Sf_SwigStatic_constants,
    swig_CGGameEntity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameEntity_bases[] = {0};
static const char *swig_CGGameEntity_base_names[] = {0};
static swig_lua_class _wrap_class_CGGameEntity = { "CGGameEntity", "CGGameEntity", &SWIGTYPE_p_CGGameEntity,_proxy__wrap_new_CGGameEntity, swig_delete_CGGameEntity, swig_CGGameEntity_methods, swig_CGGameEntity_attributes, &swig_CGGameEntity_Sf_SwigStatic, swig_CGGameEntity_meta, swig_CGGameEntity_bases, swig_CGGameEntity_base_names };

static int _wrap_CGGameEntityMgr_uiRegister(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *arg1 = 0 ;
    CGGameEntity *arg2 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGGameEntityMgr::uiRegister",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntityMgr::uiRegister",1,"CGGameEntityMgr *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntityMgr::uiRegister",2,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntityMgr,0))){
      SWIG_fail_ptr("CGGameEntityMgr_uiRegister",1,SWIGTYPE_p_CGGameEntityMgr);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntityMgr_uiRegister",2,SWIGTYPE_p_CGGameEntity);
    }
    
    result = (uint)(arg1)->uiRegister(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntityMgr_Remove__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *arg1 = 0 ;
    CGGameEntity *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameEntityMgr::Remove",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntityMgr::Remove",1,"CGGameEntityMgr *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntityMgr::Remove",2,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntityMgr,0))){
      SWIG_fail_ptr("CGGameEntityMgr_Remove",1,SWIGTYPE_p_CGGameEntityMgr);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntityMgr_Remove",2,SWIGTYPE_p_CGGameEntity);
    }
    
    (arg1)->Remove(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntityMgr_Remove__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGGameEntityMgr::Remove",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntityMgr::Remove",1,"CGGameEntityMgr *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntityMgr::Remove",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntityMgr,0))){
      SWIG_fail_ptr("CGGameEntityMgr_Remove",1,SWIGTYPE_p_CGGameEntityMgr);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Remove(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntityMgr_Remove(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameEntityMgr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGGameEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGGameEntityMgr_Remove__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameEntityMgr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGGameEntityMgr_Remove__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGGameEntityMgr_Remove'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGameEntityMgr::Remove(CGGameEntity *)\n"
    "    CGGameEntityMgr::Remove(uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGameEntityMgr_uiNumEntities(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGGameEntityMgr::uiNumEntities",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntityMgr::uiNumEntities",1,"CGGameEntityMgr *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntityMgr,0))){
      SWIG_fail_ptr("CGGameEntityMgr_uiNumEntities",1,SWIGTYPE_p_CGGameEntityMgr);
    }
    
    result = (uint)(arg1)->uiNumEntities();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntityMgr_poGetEntity__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *arg1 = 0 ;
    uint arg2 ;
    CGGameEntity *result = 0 ;
    
    SWIG_check_num_args("CGGameEntityMgr::poGetEntity",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntityMgr::poGetEntity",1,"CGGameEntityMgr *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntityMgr::poGetEntity",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntityMgr,0))){
      SWIG_fail_ptr("CGGameEntityMgr_poGetEntity",1,SWIGTYPE_p_CGGameEntityMgr);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGGameEntity *)(arg1)->poGetEntity(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntity,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntityMgr_poGetEntity__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGGameEntity *result = 0 ;
    
    SWIG_check_num_args("CGGameEntityMgr::poGetEntity",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntityMgr::poGetEntity",1,"CGGameEntityMgr *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameEntityMgr::poGetEntity",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntityMgr,0))){
      SWIG_fail_ptr("CGGameEntityMgr_poGetEntity",1,SWIGTYPE_p_CGGameEntityMgr);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGameEntityMgr_poGetEntity",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGGameEntity *)(arg1)->poGetEntity((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntity,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntityMgr_poGetEntity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameEntityMgr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGGameEntityMgr_poGetEntity__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameEntityMgr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGGameEntityMgr_poGetEntity__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGGameEntityMgr_poGetEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGameEntityMgr::poGetEntity(uint)\n"
    "    CGGameEntityMgr::poGetEntity(CGString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGameEntityMgr_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameEntityMgr::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntityMgr::Think",1,"CGGameEntityMgr *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntityMgr::Think",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntityMgr,0))){
      SWIG_fail_ptr("CGGameEntityMgr_Think",1,SWIGTYPE_p_CGGameEntityMgr);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Think(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameEntityMgr(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntityMgr *result = 0 ;
    
    SWIG_check_num_args("CGGameEntityMgr::CGGameEntityMgr",0,0)
    result = (CGGameEntityMgr *)new CGGameEntityMgr();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntityMgr,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameEntityMgr(void *obj) {
CGGameEntityMgr *arg1 = (CGGameEntityMgr *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameEntityMgr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameEntityMgr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameEntityMgr_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameEntityMgr_methods[]= {
    { "uiRegister", _wrap_CGGameEntityMgr_uiRegister},
    { "Remove", _wrap_CGGameEntityMgr_Remove},
    { "uiNumEntities", _wrap_CGGameEntityMgr_uiNumEntities},
    { "poGetEntity", _wrap_CGGameEntityMgr_poGetEntity},
    { "Think", _wrap_CGGameEntityMgr_Think},
    {0,0}
};
static swig_lua_method swig_CGGameEntityMgr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameEntityMgr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameEntityMgr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameEntityMgr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameEntityMgr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameEntityMgr_Sf_SwigStatic = {
    "CGGameEntityMgr",
    swig_CGGameEntityMgr_Sf_SwigStatic_methods,
    swig_CGGameEntityMgr_Sf_SwigStatic_attributes,
    swig_CGGameEntityMgr_Sf_SwigStatic_constants,
    swig_CGGameEntityMgr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameEntityMgr_bases[] = {0};
static const char *swig_CGGameEntityMgr_base_names[] = {0};
static swig_lua_class _wrap_class_CGGameEntityMgr = { "CGGameEntityMgr", "CGGameEntityMgr", &SWIGTYPE_p_CGGameEntityMgr,_proxy__wrap_new_CGGameEntityMgr, swig_delete_CGGameEntityMgr, swig_CGGameEntityMgr_methods, swig_CGGameEntityMgr_attributes, &swig_CGGameEntityMgr_Sf_SwigStatic, swig_CGGameEntityMgr_meta, swig_CGGameEntityMgr_bases, swig_CGGameEntityMgr_base_names };

static int _wrap_CGLiveGameEntity_sClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLiveGameEntity *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGLiveGameEntity::sClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLiveGameEntity::sClass",1,"CGLiveGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLiveGameEntity,0))){
      SWIG_fail_ptr("CGLiveGameEntity_sClass",1,SWIGTYPE_p_CGLiveGameEntity);
    }
    
    result = (arg1)->sClass();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGLiveGameEntity(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLiveGameEntity *result = 0 ;
    
    SWIG_check_num_args("CGLiveGameEntity::CGLiveGameEntity",0,0)
    result = (CGLiveGameEntity *)new CGLiveGameEntity();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGLiveGameEntity,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLiveGameEntity_SetEnergy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLiveGameEntity *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGLiveGameEntity::SetEnergy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLiveGameEntity::SetEnergy",1,"CGLiveGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLiveGameEntity::SetEnergy",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLiveGameEntity,0))){
      SWIG_fail_ptr("CGLiveGameEntity_SetEnergy",1,SWIGTYPE_p_CGLiveGameEntity);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetEnergy(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLiveGameEntity_fGetEnergy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLiveGameEntity *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGLiveGameEntity::fGetEnergy",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLiveGameEntity::fGetEnergy",1,"CGLiveGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLiveGameEntity,0))){
      SWIG_fail_ptr("CGLiveGameEntity_fGetEnergy",1,SWIGTYPE_p_CGLiveGameEntity);
    }
    
    result = (float)(arg1)->fGetEnergy();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLiveGameEntity_InflictDamage(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLiveGameEntity *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGLiveGameEntity::InflictDamage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLiveGameEntity::InflictDamage",1,"CGLiveGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGLiveGameEntity::InflictDamage",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLiveGameEntity,0))){
      SWIG_fail_ptr("CGLiveGameEntity_InflictDamage",1,SWIGTYPE_p_CGLiveGameEntity);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->InflictDamage(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLiveGameEntity_Kill(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLiveGameEntity *arg1 = 0 ;
    
    SWIG_check_num_args("CGLiveGameEntity::Kill",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLiveGameEntity::Kill",1,"CGLiveGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLiveGameEntity,0))){
      SWIG_fail_ptr("CGLiveGameEntity_Kill",1,SWIGTYPE_p_CGLiveGameEntity);
    }
    
    (arg1)->Kill();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGLiveGameEntity_Damage(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGLiveGameEntity *arg1 = 0 ;
    
    SWIG_check_num_args("CGLiveGameEntity::Damage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGLiveGameEntity::Damage",1,"CGLiveGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGLiveGameEntity,0))){
      SWIG_fail_ptr("CGLiveGameEntity_Damage",1,SWIGTYPE_p_CGLiveGameEntity);
    }
    
    (arg1)->Damage();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGLiveGameEntity(void *obj) {
CGLiveGameEntity *arg1 = (CGLiveGameEntity *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGLiveGameEntity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGLiveGameEntity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGLiveGameEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGLiveGameEntity_methods[]= {
    { "sClass", _wrap_CGLiveGameEntity_sClass},
    { "SetEnergy", _wrap_CGLiveGameEntity_SetEnergy},
    { "fGetEnergy", _wrap_CGLiveGameEntity_fGetEnergy},
    { "InflictDamage", _wrap_CGLiveGameEntity_InflictDamage},
    { "Kill", _wrap_CGLiveGameEntity_Kill},
    { "Damage", _wrap_CGLiveGameEntity_Damage},
    {0,0}
};
static swig_lua_method swig_CGLiveGameEntity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGLiveGameEntity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGLiveGameEntity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGLiveGameEntity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGLiveGameEntity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGLiveGameEntity_Sf_SwigStatic = {
    "CGLiveGameEntity",
    swig_CGLiveGameEntity_Sf_SwigStatic_methods,
    swig_CGLiveGameEntity_Sf_SwigStatic_attributes,
    swig_CGLiveGameEntity_Sf_SwigStatic_constants,
    swig_CGLiveGameEntity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGLiveGameEntity_bases[] = {0,0};
static const char *swig_CGLiveGameEntity_base_names[] = {"CGGameEntity *",0};
static swig_lua_class _wrap_class_CGLiveGameEntity = { "CGLiveGameEntity", "CGLiveGameEntity", &SWIGTYPE_p_CGLiveGameEntity,_proxy__wrap_new_CGLiveGameEntity, swig_delete_CGLiveGameEntity, swig_CGLiveGameEntity_methods, swig_CGLiveGameEntity_attributes, &swig_CGLiveGameEntity_Sf_SwigStatic, swig_CGLiveGameEntity_meta, swig_CGLiveGameEntity_bases, swig_CGLiveGameEntity_base_names };

static int _wrap_CGGEntityRenderMgr_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGEntityRenderMgr *arg1 = 0 ;
    
    SWIG_check_num_args("CGGEntityRenderMgr::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGEntityRenderMgr::Render",1,"CGGEntityRenderMgr *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGEntityRenderMgr,0))){
      SWIG_fail_ptr("CGGEntityRenderMgr_Render",1,SWIGTYPE_p_CGGEntityRenderMgr);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGEntityRenderMgr(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGEntityRenderMgr *result = 0 ;
    
    SWIG_check_num_args("CGGEntityRenderMgr::CGGEntityRenderMgr",0,0)
    result = (CGGEntityRenderMgr *)new CGGEntityRenderMgr();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGEntityRenderMgr,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGEntityRenderMgr(void *obj) {
CGGEntityRenderMgr *arg1 = (CGGEntityRenderMgr *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGEntityRenderMgr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGEntityRenderMgr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGEntityRenderMgr_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGEntityRenderMgr_methods[]= {
    { "Render", _wrap_CGGEntityRenderMgr_Render},
    {0,0}
};
static swig_lua_method swig_CGGEntityRenderMgr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGEntityRenderMgr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGEntityRenderMgr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGEntityRenderMgr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGEntityRenderMgr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGEntityRenderMgr_Sf_SwigStatic = {
    "CGGEntityRenderMgr",
    swig_CGGEntityRenderMgr_Sf_SwigStatic_methods,
    swig_CGGEntityRenderMgr_Sf_SwigStatic_attributes,
    swig_CGGEntityRenderMgr_Sf_SwigStatic_constants,
    swig_CGGEntityRenderMgr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGEntityRenderMgr_bases[] = {0};
static const char *swig_CGGEntityRenderMgr_base_names[] = {0};
static swig_lua_class _wrap_class_CGGEntityRenderMgr = { "CGGEntityRenderMgr", "CGGEntityRenderMgr", &SWIGTYPE_p_CGGEntityRenderMgr,_proxy__wrap_new_CGGEntityRenderMgr, swig_delete_CGGEntityRenderMgr, swig_CGGEntityRenderMgr_methods, swig_CGGEntityRenderMgr_attributes, &swig_CGGEntityRenderMgr_Sf_SwigStatic, swig_CGGEntityRenderMgr_meta, swig_CGGEntityRenderMgr_bases, swig_CGGEntityRenderMgr_base_names };

static int _wrap_CGGameApplication_sClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGGameApplication::sClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::sClass",1,"CGGameApplication *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_sClass",1,SWIGTYPE_p_CGGameApplication);
    }
    
    result = (arg1)->sClass();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameApplication(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *result = 0 ;
    
    SWIG_check_num_args("CGGameApplication::CGGameApplication",0,0)
    result = (CGGameApplication *)new CGGameApplication();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameApplication,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameApplication::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::Init",1,"CGGameApplication *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_Init",1,SWIGTYPE_p_CGGameApplication);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameApplication::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::Think",1,"CGGameApplication *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameApplication::Think",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_Think",1,SWIGTYPE_p_CGGameApplication);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Think(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_ReceiveChar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CGGameApplication::ReceiveChar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::ReceiveChar",1,"CGGameApplication *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameApplication::ReceiveChar",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_ReceiveChar",1,SWIGTYPE_p_CGGameApplication);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->ReceiveChar(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameApplication::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::Exec",1,"CGGameApplication *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameApplication::Exec",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_Exec",1,SWIGTYPE_p_CGGameApplication);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGameApplication_Exec",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->Exec((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_Toggle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameApplication::Toggle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::Toggle",1,"CGGameApplication *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_Toggle",1,SWIGTYPE_p_CGGameApplication);
    }
    
    (arg1)->Toggle();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_FullOpen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameApplication::FullOpen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::FullOpen",1,"CGGameApplication *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_FullOpen",1,SWIGTYPE_p_CGGameApplication);
    }
    
    (arg1)->FullOpen();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_FullClose(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameApplication::FullClose",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::FullClose",1,"CGGameApplication *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_FullClose",1,SWIGTYPE_p_CGGameApplication);
    }
    
    (arg1)->FullClose();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameApplication_eGameAppState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameApplication *arg1 = 0 ;
    EGGameAppState result;
    
    SWIG_check_num_args("CGGameApplication::eGameAppState",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameApplication::eGameAppState",1,"CGGameApplication *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameApplication,0))){
      SWIG_fail_ptr("CGGameApplication_eGameAppState",1,SWIGTYPE_p_CGGameApplication);
    }
    
    result = (EGGameAppState)(arg1)->eGameAppState();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameApplication(void *obj) {
CGGameApplication *arg1 = (CGGameApplication *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameApplication(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameApplication);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameApplication_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameApplication_methods[]= {
    { "sClass", _wrap_CGGameApplication_sClass},
    { "Init", _wrap_CGGameApplication_Init},
    { "Think", _wrap_CGGameApplication_Think},
    { "ReceiveChar", _wrap_CGGameApplication_ReceiveChar},
    { "Exec", _wrap_CGGameApplication_Exec},
    { "Toggle", _wrap_CGGameApplication_Toggle},
    { "FullOpen", _wrap_CGGameApplication_FullOpen},
    { "FullClose", _wrap_CGGameApplication_FullClose},
    { "eGameAppState", _wrap_CGGameApplication_eGameAppState},
    {0,0}
};
static swig_lua_method swig_CGGameApplication_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameApplication_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameApplication_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameApplication_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameApplication_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameApplication_Sf_SwigStatic = {
    "CGGameApplication",
    swig_CGGameApplication_Sf_SwigStatic_methods,
    swig_CGGameApplication_Sf_SwigStatic_attributes,
    swig_CGGameApplication_Sf_SwigStatic_constants,
    swig_CGGameApplication_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameApplication_bases[] = {0,0};
static const char *swig_CGGameApplication_base_names[] = {"CGGameEntity *",0};
static swig_lua_class _wrap_class_CGGameApplication = { "CGGameApplication", "CGGameApplication", &SWIGTYPE_p_CGGameApplication,_proxy__wrap_new_CGGameApplication, swig_delete_CGGameApplication, swig_CGGameApplication_methods, swig_CGGameApplication_attributes, &swig_CGGameApplication_Sf_SwigStatic, swig_CGGameApplication_meta, swig_CGGameApplication_bases, swig_CGGameApplication_base_names };

static int _wrap_CGGameConsoleApp_sClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGGameConsoleApp::sClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::sClass",1,"CGGameConsoleApp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_sClass",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    result = (arg1)->sClass();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameConsoleApp(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *result = 0 ;
    
    SWIG_check_num_args("CGGameConsoleApp::CGGameConsoleApp",0,0)
    result = (CGGameConsoleApp *)new CGGameConsoleApp();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameConsoleApp,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_Init__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameConsoleApp::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::Init",1,"CGGameConsoleApp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_Init",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_Init__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CGGameConsoleApp::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::Init",1,"CGGameConsoleApp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameConsoleApp::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGameConsoleApp::Init",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_Init",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_Init(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameConsoleApp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CGGameConsoleApp_Init__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameConsoleApp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGGameConsoleApp_Init__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGGameConsoleApp_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGameConsoleApp::Init()\n"
    "    CGGameConsoleApp::Init(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGameConsoleApp_Print(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    char *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGGameConsoleApp::Print",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::Print",1,"CGGameConsoleApp *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGameConsoleApp::Print",2,"char const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_Print",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->Print((char const *)arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_Type(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    char arg2 ;
    
    SWIG_check_num_args("CGGameConsoleApp::Type",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::Type",1,"CGGameConsoleApp *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGGameConsoleApp::Type",2,"char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_Type",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    arg2 = (lua_tostring(L, 2))[0];
    (arg1)->Type(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_NewLine(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameConsoleApp::NewLine",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::NewLine",1,"CGGameConsoleApp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_NewLine",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    (arg1)->NewLine();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_DumpData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameConsoleApp::DumpData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::DumpData",1,"CGGameConsoleApp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_DumpData",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    (arg1)->DumpData();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_Cls(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameConsoleApp::Cls",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::Cls",1,"CGGameConsoleApp *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_Cls",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    (arg1)->Cls();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameConsoleApp_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameConsoleApp *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameConsoleApp::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameConsoleApp::Think",1,"CGGameConsoleApp *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameConsoleApp::Think",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameConsoleApp,0))){
      SWIG_fail_ptr("CGGameConsoleApp_Think",1,SWIGTYPE_p_CGGameConsoleApp);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Think(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameConsoleApp(void *obj) {
CGGameConsoleApp *arg1 = (CGGameConsoleApp *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameConsoleApp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameConsoleApp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameConsoleApp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameConsoleApp_methods[]= {
    { "sClass", _wrap_CGGameConsoleApp_sClass},
    { "Init", _wrap_CGGameConsoleApp_Init},
    { "Print", _wrap_CGGameConsoleApp_Print},
    { "Type", _wrap_CGGameConsoleApp_Type},
    { "NewLine", _wrap_CGGameConsoleApp_NewLine},
    { "DumpData", _wrap_CGGameConsoleApp_DumpData},
    { "Cls", _wrap_CGGameConsoleApp_Cls},
    { "Think", _wrap_CGGameConsoleApp_Think},
    {0,0}
};
static swig_lua_method swig_CGGameConsoleApp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameConsoleApp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameConsoleApp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameConsoleApp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameConsoleApp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameConsoleApp_SwigStatic = {
    "CGGameConsoleApp",
    swig_CGGameConsoleApp_SwigStatic_methods,
    swig_CGGameConsoleApp_SwigStatic_attributes,
    swig_CGGameConsoleApp_SwigStatic_constants,
    swig_CGGameConsoleApp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameConsoleApp_bases[] = {0,0};
static const char *swig_CGGameConsoleApp_base_names[] = {"CGGameApplication *",0};
static swig_lua_class _wrap_class_CGGameConsoleApp = { "CGGameConsoleApp", "CGGameConsoleApp", &SWIGTYPE_p_CGGameConsoleApp,_proxy__wrap_new_CGGameConsoleApp, swig_delete_CGGameConsoleApp, swig_CGGameConsoleApp_methods, swig_CGGameConsoleApp_attributes, &swig_CGGameConsoleApp_SwigStatic, swig_CGGameConsoleApp_meta, swig_CGGameConsoleApp_bases, swig_CGGameConsoleApp_base_names };

static int _wrap_CGGameCommandInterpreter_sClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGGameCommandInterpreter::sClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::sClass",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_sClass",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (arg1)->sClass();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameCommandInterpreter(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *result = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::CGGameCommandInterpreter",0,0)
    result = (CGGameCommandInterpreter *)new CGGameCommandInterpreter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameCommandInterpreter,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::Think",1,"CGGameCommandInterpreter *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameCommandInterpreter::Think",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_Think",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Think(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_ReceiveChar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::ReceiveChar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::ReceiveChar",1,"CGGameCommandInterpreter *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameCommandInterpreter::ReceiveChar",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_ReceiveChar",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->ReceiveChar(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::Exec",1,"CGGameCommandInterpreter *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameCommandInterpreter::Exec",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_Exec",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_Exec",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->Exec((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_ShowCursor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::ShowCursor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::ShowCursor",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_ShowCursor",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    (arg1)->ShowCursor();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_ShowPrompt(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::ShowPrompt",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::ShowPrompt",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_ShowPrompt",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    (arg1)->ShowPrompt();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_sPrompt(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::sPrompt",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::sPrompt",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_sPrompt",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGString *) &(arg1)->sPrompt();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_SetPrompt(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::SetPrompt",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::SetPrompt",1,"CGGameCommandInterpreter *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameCommandInterpreter::SetPrompt",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_SetPrompt",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_SetPrompt",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->SetPrompt((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_SetDelayTime(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::SetDelayTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::SetDelayTime",1,"CGGameCommandInterpreter *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameCommandInterpreter::SetDelayTime",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_SetDelayTime",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetDelayTime(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_AddInstruction(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::AddInstruction",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::AddInstruction",1,"CGGameCommandInterpreter *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameCommandInterpreter::AddInstruction",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_AddInstruction",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_AddInstruction",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->AddInstruction((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameCommandInterpreter_RegisterCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommand *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameCommandInterpreter::RegisterCommand",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameCommandInterpreter::RegisterCommand",1,"CGGameCommandInterpreter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameCommandInterpreter::RegisterCommand",2,"CGGCICommand *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_RegisterCommand",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGCICommand,0))){
      SWIG_fail_ptr("CGGameCommandInterpreter_RegisterCommand",2,SWIGTYPE_p_CGGCICommand);
    }
    
    (arg1)->RegisterCommand(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameCommandInterpreter(void *obj) {
CGGameCommandInterpreter *arg1 = (CGGameCommandInterpreter *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameCommandInterpreter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameCommandInterpreter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameCommandInterpreter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameCommandInterpreter_methods[]= {
    { "sClass", _wrap_CGGameCommandInterpreter_sClass},
    { "Think", _wrap_CGGameCommandInterpreter_Think},
    { "ReceiveChar", _wrap_CGGameCommandInterpreter_ReceiveChar},
    { "Exec", _wrap_CGGameCommandInterpreter_Exec},
    { "ShowCursor", _wrap_CGGameCommandInterpreter_ShowCursor},
    { "ShowPrompt", _wrap_CGGameCommandInterpreter_ShowPrompt},
    { "sPrompt", _wrap_CGGameCommandInterpreter_sPrompt},
    { "SetPrompt", _wrap_CGGameCommandInterpreter_SetPrompt},
    { "SetDelayTime", _wrap_CGGameCommandInterpreter_SetDelayTime},
    { "AddInstruction", _wrap_CGGameCommandInterpreter_AddInstruction},
    { "RegisterCommand", _wrap_CGGameCommandInterpreter_RegisterCommand},
    {0,0}
};
static swig_lua_method swig_CGGameCommandInterpreter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameCommandInterpreter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameCommandInterpreter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameCommandInterpreter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameCommandInterpreter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameCommandInterpreter_Sf_SwigStatic = {
    "CGGameCommandInterpreter",
    swig_CGGameCommandInterpreter_Sf_SwigStatic_methods,
    swig_CGGameCommandInterpreter_Sf_SwigStatic_attributes,
    swig_CGGameCommandInterpreter_Sf_SwigStatic_constants,
    swig_CGGameCommandInterpreter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameCommandInterpreter_bases[] = {0,0};
static const char *swig_CGGameCommandInterpreter_base_names[] = {"CGGameConsoleApp *",0};
static swig_lua_class _wrap_class_CGGameCommandInterpreter = { "CGGameCommandInterpreter", "CGGameCommandInterpreter", &SWIGTYPE_p_CGGameCommandInterpreter,_proxy__wrap_new_CGGameCommandInterpreter, swig_delete_CGGameCommandInterpreter, swig_CGGameCommandInterpreter_methods, swig_CGGameCommandInterpreter_attributes, &swig_CGGameCommandInterpreter_Sf_SwigStatic, swig_CGGameCommandInterpreter_meta, swig_CGGameCommandInterpreter_bases, swig_CGGameCommandInterpreter_base_names };

static int _wrap_new_CGGCICommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommand *result = 0 ;
    
    SWIG_check_num_args("CGGCICommand::CGGCICommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommand::CGGCICommand",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("new_CGGCICommand",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGGCICommand *)new CGGCICommand(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGCICommand,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommand_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommand *arg1 = 0 ;
    CGString *arg2 = 0 ;
    ECIState result;
    
    SWIG_check_num_args("CGGCICommand::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommand::Exec",1,"CGGCICommand *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGCICommand::Exec",2,"CGString &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommand,0))){
      SWIG_fail_ptr("CGGCICommand_Exec",1,SWIGTYPE_p_CGGCICommand);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGCICommand_Exec",2,SWIGTYPE_p_CGString);
    }
    
    result = (ECIState)(arg1)->Exec(*arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommand_sCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommand *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommand::sCommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommand::sCommand",1,"CGGCICommand *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommand,0))){
      SWIG_fail_ptr("CGGCICommand_sCommand",1,SWIGTYPE_p_CGGCICommand);
    }
    
    result = (CGString *) &(arg1)->sCommand();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommand_sHelpString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommand *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommand::sHelpString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommand::sHelpString",1,"CGGCICommand *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommand,0))){
      SWIG_fail_ptr("CGGCICommand_sHelpString",1,SWIGTYPE_p_CGGCICommand);
    }
    
    result = (CGString *) &(arg1)->sHelpString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGCICommand(void *obj) {
CGGCICommand *arg1 = (CGGCICommand *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGCICommand(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGCICommand);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGCICommand_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGCICommand_methods[]= {
    { "Exec", _wrap_CGGCICommand_Exec},
    { "sCommand", _wrap_CGGCICommand_sCommand},
    { "sHelpString", _wrap_CGGCICommand_sHelpString},
    {0,0}
};
static swig_lua_method swig_CGGCICommand_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGCICommand_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGCICommand_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGCICommand_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGCICommand_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGCICommand_Sf_SwigStatic = {
    "CGGCICommand",
    swig_CGGCICommand_Sf_SwigStatic_methods,
    swig_CGGCICommand_Sf_SwigStatic_attributes,
    swig_CGGCICommand_Sf_SwigStatic_constants,
    swig_CGGCICommand_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGCICommand_bases[] = {0};
static const char *swig_CGGCICommand_base_names[] = {0};
static swig_lua_class _wrap_class_CGGCICommand = { "CGGCICommand", "CGGCICommand", &SWIGTYPE_p_CGGCICommand,_proxy__wrap_new_CGGCICommand, swig_delete_CGGCICommand, swig_CGGCICommand_methods, swig_CGGCICommand_attributes, &swig_CGGCICommand_Sf_SwigStatic, swig_CGGCICommand_meta, swig_CGGCICommand_bases, swig_CGGCICommand_base_names };

static int _wrap_new_CGGEntityStateRegistry(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGEntityStateRegistry *result = 0 ;
    
    SWIG_check_num_args("CGGEntityStateRegistry::CGGEntityStateRegistry",0,0)
    result = (CGGEntityStateRegistry *)new CGGEntityStateRegistry();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGEntityStateRegistry,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGEntityStateRegistry(void *obj) {
CGGEntityStateRegistry *arg1 = (CGGEntityStateRegistry *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGEntityStateRegistry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGEntityStateRegistry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGEntityStateRegistry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGEntityStateRegistry_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGGEntityStateRegistry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGEntityStateRegistry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGEntityStateRegistry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGEntityStateRegistry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGEntityStateRegistry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGEntityStateRegistry_Sf_SwigStatic = {
    "CGGEntityStateRegistry",
    swig_CGGEntityStateRegistry_Sf_SwigStatic_methods,
    swig_CGGEntityStateRegistry_Sf_SwigStatic_attributes,
    swig_CGGEntityStateRegistry_Sf_SwigStatic_constants,
    swig_CGGEntityStateRegistry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGEntityStateRegistry_bases[] = {0};
static const char *swig_CGGEntityStateRegistry_base_names[] = {0};
static swig_lua_class _wrap_class_CGGEntityStateRegistry = { "CGGEntityStateRegistry", "CGGEntityStateRegistry", &SWIGTYPE_p_CGGEntityStateRegistry,_proxy__wrap_new_CGGEntityStateRegistry, swig_delete_CGGEntityStateRegistry, swig_CGGEntityStateRegistry_methods, swig_CGGEntityStateRegistry_attributes, &swig_CGGEntityStateRegistry_Sf_SwigStatic, swig_CGGEntityStateRegistry_meta, swig_CGGEntityStateRegistry_bases, swig_CGGEntityStateRegistry_base_names };

static int _wrap_CGGameExtendedCI_sClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameExtendedCI *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGGameExtendedCI::sClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameExtendedCI::sClass",1,"CGGameExtendedCI *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameExtendedCI,0))){
      SWIG_fail_ptr("CGGameExtendedCI_sClass",1,SWIGTYPE_p_CGGameExtendedCI);
    }
    
    result = (arg1)->sClass();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameExtendedCI(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameExtendedCI *result = 0 ;
    
    SWIG_check_num_args("CGGameExtendedCI::CGGameExtendedCI",0,0)
    result = (CGGameExtendedCI *)new CGGameExtendedCI();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameExtendedCI,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameExtendedCI(void *obj) {
CGGameExtendedCI *arg1 = (CGGameExtendedCI *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameExtendedCI(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameExtendedCI);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameExtendedCI_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameExtendedCI_methods[]= {
    { "sClass", _wrap_CGGameExtendedCI_sClass},
    {0,0}
};
static swig_lua_method swig_CGGameExtendedCI_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameExtendedCI_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameExtendedCI_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameExtendedCI_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameExtendedCI_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameExtendedCI_Sf_SwigStatic = {
    "CGGameExtendedCI",
    swig_CGGameExtendedCI_Sf_SwigStatic_methods,
    swig_CGGameExtendedCI_Sf_SwigStatic_attributes,
    swig_CGGameExtendedCI_Sf_SwigStatic_constants,
    swig_CGGameExtendedCI_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameExtendedCI_bases[] = {0,0};
static const char *swig_CGGameExtendedCI_base_names[] = {"CGGameCommandInterpreter *",0};
static swig_lua_class _wrap_class_CGGameExtendedCI = { "CGGameExtendedCI", "CGGameExtendedCI", &SWIGTYPE_p_CGGameExtendedCI,_proxy__wrap_new_CGGameExtendedCI, swig_delete_CGGameExtendedCI, swig_CGGameExtendedCI_methods, swig_CGGameExtendedCI_attributes, &swig_CGGameExtendedCI_Sf_SwigStatic, swig_CGGameExtendedCI_meta, swig_CGGameExtendedCI_bases, swig_CGGameExtendedCI_base_names };

static int _wrap_new_CGGCICommandSystemLog(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommandSystemLog *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandSystemLog::CGGCICommandSystemLog",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSystemLog::CGGCICommandSystemLog",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("new_CGGCICommandSystemLog",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGGCICommandSystemLog *)new CGGCICommandSystemLog(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGCICommandSystemLog,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandSystemLog_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandSystemLog *arg1 = 0 ;
    CGString *arg2 = 0 ;
    ECIState result;
    
    SWIG_check_num_args("CGGCICommandSystemLog::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSystemLog::Exec",1,"CGGCICommandSystemLog *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGCICommandSystemLog::Exec",2,"CGString &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandSystemLog,0))){
      SWIG_fail_ptr("CGGCICommandSystemLog_Exec",1,SWIGTYPE_p_CGGCICommandSystemLog);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGCICommandSystemLog_Exec",2,SWIGTYPE_p_CGString);
    }
    
    result = (ECIState)(arg1)->Exec(*arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandSystemLog_sCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandSystemLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandSystemLog::sCommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSystemLog::sCommand",1,"CGGCICommandSystemLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandSystemLog,0))){
      SWIG_fail_ptr("CGGCICommandSystemLog_sCommand",1,SWIGTYPE_p_CGGCICommandSystemLog);
    }
    
    result = (CGString *) &(arg1)->sCommand();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandSystemLog_sHelpString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandSystemLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandSystemLog::sHelpString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSystemLog::sHelpString",1,"CGGCICommandSystemLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandSystemLog,0))){
      SWIG_fail_ptr("CGGCICommandSystemLog_sHelpString",1,SWIGTYPE_p_CGGCICommandSystemLog);
    }
    
    result = (CGString *) &(arg1)->sHelpString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGCICommandSystemLog(void *obj) {
CGGCICommandSystemLog *arg1 = (CGGCICommandSystemLog *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGCICommandSystemLog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGCICommandSystemLog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGCICommandSystemLog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGCICommandSystemLog_methods[]= {
    { "Exec", _wrap_CGGCICommandSystemLog_Exec},
    { "sCommand", _wrap_CGGCICommandSystemLog_sCommand},
    { "sHelpString", _wrap_CGGCICommandSystemLog_sHelpString},
    {0,0}
};
static swig_lua_method swig_CGGCICommandSystemLog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGCICommandSystemLog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGCICommandSystemLog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGCICommandSystemLog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGCICommandSystemLog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGCICommandSystemLog_Sf_SwigStatic = {
    "CGGCICommandSystemLog",
    swig_CGGCICommandSystemLog_Sf_SwigStatic_methods,
    swig_CGGCICommandSystemLog_Sf_SwigStatic_attributes,
    swig_CGGCICommandSystemLog_Sf_SwigStatic_constants,
    swig_CGGCICommandSystemLog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGCICommandSystemLog_bases[] = {0,0};
static const char *swig_CGGCICommandSystemLog_base_names[] = {"CGGCICommand *",0};
static swig_lua_class _wrap_class_CGGCICommandSystemLog = { "CGGCICommandSystemLog", "CGGCICommandSystemLog", &SWIGTYPE_p_CGGCICommandSystemLog,_proxy__wrap_new_CGGCICommandSystemLog, swig_delete_CGGCICommandSystemLog, swig_CGGCICommandSystemLog_methods, swig_CGGCICommandSystemLog_attributes, &swig_CGGCICommandSystemLog_Sf_SwigStatic, swig_CGGCICommandSystemLog_meta, swig_CGGCICommandSystemLog_bases, swig_CGGCICommandSystemLog_base_names };

static int _wrap_new_CGGCICommandErrorLog(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommandErrorLog *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandErrorLog::CGGCICommandErrorLog",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandErrorLog::CGGCICommandErrorLog",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("new_CGGCICommandErrorLog",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGGCICommandErrorLog *)new CGGCICommandErrorLog(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGCICommandErrorLog,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandErrorLog_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandErrorLog *arg1 = 0 ;
    CGString *arg2 = 0 ;
    ECIState result;
    
    SWIG_check_num_args("CGGCICommandErrorLog::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandErrorLog::Exec",1,"CGGCICommandErrorLog *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGCICommandErrorLog::Exec",2,"CGString &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandErrorLog,0))){
      SWIG_fail_ptr("CGGCICommandErrorLog_Exec",1,SWIGTYPE_p_CGGCICommandErrorLog);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGCICommandErrorLog_Exec",2,SWIGTYPE_p_CGString);
    }
    
    result = (ECIState)(arg1)->Exec(*arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandErrorLog_sCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandErrorLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandErrorLog::sCommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandErrorLog::sCommand",1,"CGGCICommandErrorLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandErrorLog,0))){
      SWIG_fail_ptr("CGGCICommandErrorLog_sCommand",1,SWIGTYPE_p_CGGCICommandErrorLog);
    }
    
    result = (CGString *) &(arg1)->sCommand();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandErrorLog_sHelpString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandErrorLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandErrorLog::sHelpString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandErrorLog::sHelpString",1,"CGGCICommandErrorLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandErrorLog,0))){
      SWIG_fail_ptr("CGGCICommandErrorLog_sHelpString",1,SWIGTYPE_p_CGGCICommandErrorLog);
    }
    
    result = (CGString *) &(arg1)->sHelpString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGCICommandErrorLog(void *obj) {
CGGCICommandErrorLog *arg1 = (CGGCICommandErrorLog *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGCICommandErrorLog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGCICommandErrorLog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGCICommandErrorLog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGCICommandErrorLog_methods[]= {
    { "Exec", _wrap_CGGCICommandErrorLog_Exec},
    { "sCommand", _wrap_CGGCICommandErrorLog_sCommand},
    { "sHelpString", _wrap_CGGCICommandErrorLog_sHelpString},
    {0,0}
};
static swig_lua_method swig_CGGCICommandErrorLog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGCICommandErrorLog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGCICommandErrorLog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGCICommandErrorLog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGCICommandErrorLog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGCICommandErrorLog_Sf_SwigStatic = {
    "CGGCICommandErrorLog",
    swig_CGGCICommandErrorLog_Sf_SwigStatic_methods,
    swig_CGGCICommandErrorLog_Sf_SwigStatic_attributes,
    swig_CGGCICommandErrorLog_Sf_SwigStatic_constants,
    swig_CGGCICommandErrorLog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGCICommandErrorLog_bases[] = {0,0};
static const char *swig_CGGCICommandErrorLog_base_names[] = {"CGGCICommand *",0};
static swig_lua_class _wrap_class_CGGCICommandErrorLog = { "CGGCICommandErrorLog", "CGGCICommandErrorLog", &SWIGTYPE_p_CGGCICommandErrorLog,_proxy__wrap_new_CGGCICommandErrorLog, swig_delete_CGGCICommandErrorLog, swig_CGGCICommandErrorLog_methods, swig_CGGCICommandErrorLog_attributes, &swig_CGGCICommandErrorLog_Sf_SwigStatic, swig_CGGCICommandErrorLog_meta, swig_CGGCICommandErrorLog_bases, swig_CGGCICommandErrorLog_base_names };

static int _wrap_new_CGGCICommandListEntities(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommandListEntities *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandListEntities::CGGCICommandListEntities",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandListEntities::CGGCICommandListEntities",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("new_CGGCICommandListEntities",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGGCICommandListEntities *)new CGGCICommandListEntities(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGCICommandListEntities,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandListEntities_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandListEntities *arg1 = 0 ;
    CGString *arg2 = 0 ;
    ECIState result;
    
    SWIG_check_num_args("CGGCICommandListEntities::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandListEntities::Exec",1,"CGGCICommandListEntities *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGCICommandListEntities::Exec",2,"CGString &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandListEntities,0))){
      SWIG_fail_ptr("CGGCICommandListEntities_Exec",1,SWIGTYPE_p_CGGCICommandListEntities);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGCICommandListEntities_Exec",2,SWIGTYPE_p_CGString);
    }
    
    result = (ECIState)(arg1)->Exec(*arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandListEntities_sCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandListEntities *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandListEntities::sCommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandListEntities::sCommand",1,"CGGCICommandListEntities *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandListEntities,0))){
      SWIG_fail_ptr("CGGCICommandListEntities_sCommand",1,SWIGTYPE_p_CGGCICommandListEntities);
    }
    
    result = (CGString *) &(arg1)->sCommand();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandListEntities_sHelpString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandListEntities *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandListEntities::sHelpString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandListEntities::sHelpString",1,"CGGCICommandListEntities *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandListEntities,0))){
      SWIG_fail_ptr("CGGCICommandListEntities_sHelpString",1,SWIGTYPE_p_CGGCICommandListEntities);
    }
    
    result = (CGString *) &(arg1)->sHelpString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGCICommandListEntities(void *obj) {
CGGCICommandListEntities *arg1 = (CGGCICommandListEntities *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGCICommandListEntities(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGCICommandListEntities);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGCICommandListEntities_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGCICommandListEntities_methods[]= {
    { "Exec", _wrap_CGGCICommandListEntities_Exec},
    { "sCommand", _wrap_CGGCICommandListEntities_sCommand},
    { "sHelpString", _wrap_CGGCICommandListEntities_sHelpString},
    {0,0}
};
static swig_lua_method swig_CGGCICommandListEntities_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGCICommandListEntities_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGCICommandListEntities_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGCICommandListEntities_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGCICommandListEntities_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGCICommandListEntities_Sf_SwigStatic = {
    "CGGCICommandListEntities",
    swig_CGGCICommandListEntities_Sf_SwigStatic_methods,
    swig_CGGCICommandListEntities_Sf_SwigStatic_attributes,
    swig_CGGCICommandListEntities_Sf_SwigStatic_constants,
    swig_CGGCICommandListEntities_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGCICommandListEntities_bases[] = {0,0};
static const char *swig_CGGCICommandListEntities_base_names[] = {"CGGCICommand *",0};
static swig_lua_class _wrap_class_CGGCICommandListEntities = { "CGGCICommandListEntities", "CGGCICommandListEntities", &SWIGTYPE_p_CGGCICommandListEntities,_proxy__wrap_new_CGGCICommandListEntities, swig_delete_CGGCICommandListEntities, swig_CGGCICommandListEntities_methods, swig_CGGCICommandListEntities_attributes, &swig_CGGCICommandListEntities_Sf_SwigStatic, swig_CGGCICommandListEntities_meta, swig_CGGCICommandListEntities_bases, swig_CGGCICommandListEntities_base_names };

static int _wrap_new_CGGCICommandSwitchEntityState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommandSwitchEntityState *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandSwitchEntityState::CGGCICommandSwitchEntityState",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSwitchEntityState::CGGCICommandSwitchEntityState",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("new_CGGCICommandSwitchEntityState",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGGCICommandSwitchEntityState *)new CGGCICommandSwitchEntityState(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGCICommandSwitchEntityState,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandSwitchEntityState_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandSwitchEntityState *arg1 = 0 ;
    CGString *arg2 = 0 ;
    ECIState result;
    
    SWIG_check_num_args("CGGCICommandSwitchEntityState::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSwitchEntityState::Exec",1,"CGGCICommandSwitchEntityState *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGCICommandSwitchEntityState::Exec",2,"CGString &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandSwitchEntityState,0))){
      SWIG_fail_ptr("CGGCICommandSwitchEntityState_Exec",1,SWIGTYPE_p_CGGCICommandSwitchEntityState);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGCICommandSwitchEntityState_Exec",2,SWIGTYPE_p_CGString);
    }
    
    result = (ECIState)(arg1)->Exec(*arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandSwitchEntityState_sCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandSwitchEntityState *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandSwitchEntityState::sCommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSwitchEntityState::sCommand",1,"CGGCICommandSwitchEntityState *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandSwitchEntityState,0))){
      SWIG_fail_ptr("CGGCICommandSwitchEntityState_sCommand",1,SWIGTYPE_p_CGGCICommandSwitchEntityState);
    }
    
    result = (CGString *) &(arg1)->sCommand();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandSwitchEntityState_sHelpString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandSwitchEntityState *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandSwitchEntityState::sHelpString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandSwitchEntityState::sHelpString",1,"CGGCICommandSwitchEntityState *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandSwitchEntityState,0))){
      SWIG_fail_ptr("CGGCICommandSwitchEntityState_sHelpString",1,SWIGTYPE_p_CGGCICommandSwitchEntityState);
    }
    
    result = (CGString *) &(arg1)->sHelpString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGCICommandSwitchEntityState(void *obj) {
CGGCICommandSwitchEntityState *arg1 = (CGGCICommandSwitchEntityState *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGCICommandSwitchEntityState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGCICommandSwitchEntityState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGCICommandSwitchEntityState_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGCICommandSwitchEntityState_methods[]= {
    { "Exec", _wrap_CGGCICommandSwitchEntityState_Exec},
    { "sCommand", _wrap_CGGCICommandSwitchEntityState_sCommand},
    { "sHelpString", _wrap_CGGCICommandSwitchEntityState_sHelpString},
    {0,0}
};
static swig_lua_method swig_CGGCICommandSwitchEntityState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGCICommandSwitchEntityState_Sf_SwigStatic = {
    "CGGCICommandSwitchEntityState",
    swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_methods,
    swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_attributes,
    swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_constants,
    swig_CGGCICommandSwitchEntityState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGCICommandSwitchEntityState_bases[] = {0,0};
static const char *swig_CGGCICommandSwitchEntityState_base_names[] = {"CGGCICommand *",0};
static swig_lua_class _wrap_class_CGGCICommandSwitchEntityState = { "CGGCICommandSwitchEntityState", "CGGCICommandSwitchEntityState", &SWIGTYPE_p_CGGCICommandSwitchEntityState,_proxy__wrap_new_CGGCICommandSwitchEntityState, swig_delete_CGGCICommandSwitchEntityState, swig_CGGCICommandSwitchEntityState_methods, swig_CGGCICommandSwitchEntityState_attributes, &swig_CGGCICommandSwitchEntityState_Sf_SwigStatic, swig_CGGCICommandSwitchEntityState_meta, swig_CGGCICommandSwitchEntityState_bases, swig_CGGCICommandSwitchEntityState_base_names };

static int _wrap_new_CGGCICommandClearErrorLog(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommandClearErrorLog *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandClearErrorLog::CGGCICommandClearErrorLog",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearErrorLog::CGGCICommandClearErrorLog",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("new_CGGCICommandClearErrorLog",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGGCICommandClearErrorLog *)new CGGCICommandClearErrorLog(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGCICommandClearErrorLog,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandClearErrorLog_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandClearErrorLog *arg1 = 0 ;
    CGString *arg2 = 0 ;
    ECIState result;
    
    SWIG_check_num_args("CGGCICommandClearErrorLog::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearErrorLog::Exec",1,"CGGCICommandClearErrorLog *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGCICommandClearErrorLog::Exec",2,"CGString &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandClearErrorLog,0))){
      SWIG_fail_ptr("CGGCICommandClearErrorLog_Exec",1,SWIGTYPE_p_CGGCICommandClearErrorLog);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGCICommandClearErrorLog_Exec",2,SWIGTYPE_p_CGString);
    }
    
    result = (ECIState)(arg1)->Exec(*arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandClearErrorLog_sCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandClearErrorLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandClearErrorLog::sCommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearErrorLog::sCommand",1,"CGGCICommandClearErrorLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandClearErrorLog,0))){
      SWIG_fail_ptr("CGGCICommandClearErrorLog_sCommand",1,SWIGTYPE_p_CGGCICommandClearErrorLog);
    }
    
    result = (CGString *) &(arg1)->sCommand();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandClearErrorLog_sHelpString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandClearErrorLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandClearErrorLog::sHelpString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearErrorLog::sHelpString",1,"CGGCICommandClearErrorLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandClearErrorLog,0))){
      SWIG_fail_ptr("CGGCICommandClearErrorLog_sHelpString",1,SWIGTYPE_p_CGGCICommandClearErrorLog);
    }
    
    result = (CGString *) &(arg1)->sHelpString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGCICommandClearErrorLog(void *obj) {
CGGCICommandClearErrorLog *arg1 = (CGGCICommandClearErrorLog *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGCICommandClearErrorLog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGCICommandClearErrorLog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGCICommandClearErrorLog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGCICommandClearErrorLog_methods[]= {
    { "Exec", _wrap_CGGCICommandClearErrorLog_Exec},
    { "sCommand", _wrap_CGGCICommandClearErrorLog_sCommand},
    { "sHelpString", _wrap_CGGCICommandClearErrorLog_sHelpString},
    {0,0}
};
static swig_lua_method swig_CGGCICommandClearErrorLog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGCICommandClearErrorLog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGCICommandClearErrorLog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGCICommandClearErrorLog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGCICommandClearErrorLog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGCICommandClearErrorLog_Sf_SwigStatic = {
    "CGGCICommandClearErrorLog",
    swig_CGGCICommandClearErrorLog_Sf_SwigStatic_methods,
    swig_CGGCICommandClearErrorLog_Sf_SwigStatic_attributes,
    swig_CGGCICommandClearErrorLog_Sf_SwigStatic_constants,
    swig_CGGCICommandClearErrorLog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGCICommandClearErrorLog_bases[] = {0,0};
static const char *swig_CGGCICommandClearErrorLog_base_names[] = {"CGGCICommand *",0};
static swig_lua_class _wrap_class_CGGCICommandClearErrorLog = { "CGGCICommandClearErrorLog", "CGGCICommandClearErrorLog", &SWIGTYPE_p_CGGCICommandClearErrorLog,_proxy__wrap_new_CGGCICommandClearErrorLog, swig_delete_CGGCICommandClearErrorLog, swig_CGGCICommandClearErrorLog_methods, swig_CGGCICommandClearErrorLog_attributes, &swig_CGGCICommandClearErrorLog_Sf_SwigStatic, swig_CGGCICommandClearErrorLog_meta, swig_CGGCICommandClearErrorLog_bases, swig_CGGCICommandClearErrorLog_base_names };

static int _wrap_new_CGGCICommandClearSysLog(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameCommandInterpreter *arg1 = 0 ;
    CGGCICommandClearSysLog *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandClearSysLog::CGGCICommandClearSysLog",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearSysLog::CGGCICommandClearSysLog",1,"CGGameCommandInterpreter *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameCommandInterpreter,0))){
      SWIG_fail_ptr("new_CGGCICommandClearSysLog",1,SWIGTYPE_p_CGGameCommandInterpreter);
    }
    
    result = (CGGCICommandClearSysLog *)new CGGCICommandClearSysLog(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGCICommandClearSysLog,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandClearSysLog_Exec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandClearSysLog *arg1 = 0 ;
    CGString *arg2 = 0 ;
    ECIState result;
    
    SWIG_check_num_args("CGGCICommandClearSysLog::Exec",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearSysLog::Exec",1,"CGGCICommandClearSysLog *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGCICommandClearSysLog::Exec",2,"CGString &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandClearSysLog,0))){
      SWIG_fail_ptr("CGGCICommandClearSysLog_Exec",1,SWIGTYPE_p_CGGCICommandClearSysLog);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGCICommandClearSysLog_Exec",2,SWIGTYPE_p_CGString);
    }
    
    result = (ECIState)(arg1)->Exec(*arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandClearSysLog_sCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandClearSysLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandClearSysLog::sCommand",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearSysLog::sCommand",1,"CGGCICommandClearSysLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandClearSysLog,0))){
      SWIG_fail_ptr("CGGCICommandClearSysLog_sCommand",1,SWIGTYPE_p_CGGCICommandClearSysLog);
    }
    
    result = (CGString *) &(arg1)->sCommand();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGCICommandClearSysLog_sHelpString(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGCICommandClearSysLog *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGGCICommandClearSysLog::sHelpString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGCICommandClearSysLog::sHelpString",1,"CGGCICommandClearSysLog *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGCICommandClearSysLog,0))){
      SWIG_fail_ptr("CGGCICommandClearSysLog_sHelpString",1,SWIGTYPE_p_CGGCICommandClearSysLog);
    }
    
    result = (CGString *) &(arg1)->sHelpString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGCICommandClearSysLog(void *obj) {
CGGCICommandClearSysLog *arg1 = (CGGCICommandClearSysLog *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGCICommandClearSysLog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGCICommandClearSysLog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGCICommandClearSysLog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGCICommandClearSysLog_methods[]= {
    { "Exec", _wrap_CGGCICommandClearSysLog_Exec},
    { "sCommand", _wrap_CGGCICommandClearSysLog_sCommand},
    { "sHelpString", _wrap_CGGCICommandClearSysLog_sHelpString},
    {0,0}
};
static swig_lua_method swig_CGGCICommandClearSysLog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGCICommandClearSysLog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGCICommandClearSysLog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGCICommandClearSysLog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGCICommandClearSysLog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGCICommandClearSysLog_Sf_SwigStatic = {
    "CGGCICommandClearSysLog",
    swig_CGGCICommandClearSysLog_Sf_SwigStatic_methods,
    swig_CGGCICommandClearSysLog_Sf_SwigStatic_attributes,
    swig_CGGCICommandClearSysLog_Sf_SwigStatic_constants,
    swig_CGGCICommandClearSysLog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGCICommandClearSysLog_bases[] = {0,0};
static const char *swig_CGGCICommandClearSysLog_base_names[] = {"CGGCICommand *",0};
static swig_lua_class _wrap_class_CGGCICommandClearSysLog = { "CGGCICommandClearSysLog", "CGGCICommandClearSysLog", &SWIGTYPE_p_CGGCICommandClearSysLog,_proxy__wrap_new_CGGCICommandClearSysLog, swig_delete_CGGCICommandClearSysLog, swig_CGGCICommandClearSysLog_methods, swig_CGGCICommandClearSysLog_attributes, &swig_CGGCICommandClearSysLog_Sf_SwigStatic, swig_CGGCICommandClearSysLog_meta, swig_CGGCICommandClearSysLog_bases, swig_CGGCICommandClearSysLog_base_names };

static int _wrap_CGGameEntitySpawner_sClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntitySpawner *arg1 = 0 ;
    CGString result;
    
    SWIG_check_num_args("CGGameEntitySpawner::sClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntitySpawner::sClass",1,"CGGameEntitySpawner *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntitySpawner,0))){
      SWIG_fail_ptr("CGGameEntitySpawner_sClass",1,SWIGTYPE_p_CGGameEntitySpawner);
    }
    
    result = (arg1)->sClass();
    {
      CGString * resultptr = new CGString(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGString,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntitySpawner_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntitySpawner *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGGameEntitySpawner::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntitySpawner::Init",1,"CGGameEntitySpawner *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntitySpawner::Init",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntitySpawner,0))){
      SWIG_fail_ptr("CGGameEntitySpawner_Init",1,SWIGTYPE_p_CGGameEntitySpawner);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntitySpawner_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntitySpawner *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameEntitySpawner::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntitySpawner::Think",1,"CGGameEntitySpawner *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameEntitySpawner::Think",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntitySpawner,0))){
      SWIG_fail_ptr("CGGameEntitySpawner_Think",1,SWIGTYPE_p_CGGameEntitySpawner);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Think(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameEntitySpawner_Spawn(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntitySpawner *arg1 = 0 ;
    CGGameEntity *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGGameEntitySpawner::Spawn",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameEntitySpawner::Spawn",1,"CGGameEntitySpawner *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameEntitySpawner::Spawn",2,"CGGameEntity *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGameEntitySpawner::Spawn",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntitySpawner,0))){
      SWIG_fail_ptr("CGGameEntitySpawner_Spawn",1,SWIGTYPE_p_CGGameEntitySpawner);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameEntitySpawner_Spawn",2,SWIGTYPE_p_CGGameEntity);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->Spawn(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameEntitySpawner(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntitySpawner *result = 0 ;
    
    SWIG_check_num_args("CGGameEntitySpawner::CGGameEntitySpawner",0,0)
    result = (CGGameEntitySpawner *)new CGGameEntitySpawner();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntitySpawner,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameEntitySpawner(void *obj) {
CGGameEntitySpawner *arg1 = (CGGameEntitySpawner *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameEntitySpawner(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameEntitySpawner);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameEntitySpawner_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameEntitySpawner_methods[]= {
    { "sClass", _wrap_CGGameEntitySpawner_sClass},
    { "Init", _wrap_CGGameEntitySpawner_Init},
    { "Think", _wrap_CGGameEntitySpawner_Think},
    { "Spawn", _wrap_CGGameEntitySpawner_Spawn},
    {0,0}
};
static swig_lua_method swig_CGGameEntitySpawner_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameEntitySpawner_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameEntitySpawner_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameEntitySpawner_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameEntitySpawner_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameEntitySpawner_Sf_SwigStatic = {
    "CGGameEntitySpawner",
    swig_CGGameEntitySpawner_Sf_SwigStatic_methods,
    swig_CGGameEntitySpawner_Sf_SwigStatic_attributes,
    swig_CGGameEntitySpawner_Sf_SwigStatic_constants,
    swig_CGGameEntitySpawner_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameEntitySpawner_bases[] = {0,0};
static const char *swig_CGGameEntitySpawner_base_names[] = {"CGGameEntity *",0};
static swig_lua_class _wrap_class_CGGameEntitySpawner = { "CGGameEntitySpawner", "CGGameEntitySpawner", &SWIGTYPE_p_CGGameEntitySpawner,_proxy__wrap_new_CGGameEntitySpawner, swig_delete_CGGameEntitySpawner, swig_CGGameEntitySpawner_methods, swig_CGGameEntitySpawner_attributes, &swig_CGGameEntitySpawner_Sf_SwigStatic, swig_CGGameEntitySpawner_meta, swig_CGGameEntitySpawner_bases, swig_CGGameEntitySpawner_base_names };

static int _wrap_new_CGGameMessage__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessage *result = 0 ;
    
    SWIG_check_num_args("CGGameMessage::CGGameMessage",0,0)
    result = (CGGameMessage *)new CGGameMessage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameMessage,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameMessage__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    CGGameEntity *arg2 = 0 ;
    void *arg3 = 0 ;
    CGGameMessage *result = 0 ;
    
    SWIG_check_num_args("CGGameMessage::CGGameMessage",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGGameMessage::CGGameMessage",1,"uint");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameMessage::CGGameMessage",2,"CGGameEntity *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGGameMessage::CGGameMessage",3,"void *");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("new_CGGameMessage",2,SWIGTYPE_p_CGGameEntity);
    }
    
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"new_CGGameMessage");
    result = (CGGameMessage *)new CGGameMessage(arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameMessage,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGameMessage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGGameMessage__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGGameEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_CGGameMessage__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGGameMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGameMessage::CGGameMessage()\n"
    "    CGGameMessage::CGGameMessage(uint,CGGameEntity *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGameMessage_m_uiMsgID_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessage *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGGameMessage::m_uiMsgID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessage::m_uiMsgID",1,"CGGameMessage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameMessage::m_uiMsgID",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessage,0))){
      SWIG_fail_ptr("CGGameMessage_m_uiMsgID_set",1,SWIGTYPE_p_CGGameMessage);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiMsgID = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessage_m_uiMsgID_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessage *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGGameMessage::m_uiMsgID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessage::m_uiMsgID",1,"CGGameMessage *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessage,0))){
      SWIG_fail_ptr("CGGameMessage_m_uiMsgID_get",1,SWIGTYPE_p_CGGameMessage);
    }
    
    result = (uint) ((arg1)->m_uiMsgID);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessage_m_poEnt_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessage *arg1 = 0 ;
    CGGameEntity *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameMessage::m_poEnt",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessage::m_poEnt",1,"CGGameMessage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameMessage::m_poEnt",2,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessage,0))){
      SWIG_fail_ptr("CGGameMessage_m_poEnt_set",1,SWIGTYPE_p_CGGameMessage);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGameEntity,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGGameMessage_m_poEnt_set",2,SWIGTYPE_p_CGGameEntity);
    }
    
    if (arg1) (arg1)->m_poEnt = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessage_m_poEnt_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessage *arg1 = 0 ;
    CGGameEntity *result = 0 ;
    
    SWIG_check_num_args("CGGameMessage::m_poEnt",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessage::m_poEnt",1,"CGGameMessage *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessage,0))){
      SWIG_fail_ptr("CGGameMessage_m_poEnt_get",1,SWIGTYPE_p_CGGameMessage);
    }
    
    result = (CGGameEntity *) ((arg1)->m_poEnt);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntity,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessage_m_pData_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessage *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameMessage::m_pData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessage::m_pData",1,"CGGameMessage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGameMessage::m_pData",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessage,0))){
      SWIG_fail_ptr("CGGameMessage_m_pData_set",1,SWIGTYPE_p_CGGameMessage);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CGGameMessage_m_pData_set");
    if (arg1) (arg1)->m_pData = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessage_m_pData_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessage *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CGGameMessage::m_pData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessage::m_pData",1,"CGGameMessage *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessage,0))){
      SWIG_fail_ptr("CGGameMessage_m_pData_get",1,SWIGTYPE_p_CGGameMessage);
    }
    
    result = (void *) ((arg1)->m_pData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameMessage(void *obj) {
CGGameMessage *arg1 = (CGGameMessage *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameMessage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameMessage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameMessage_attributes[] = {
    { "m_uiMsgID", _wrap_CGGameMessage_m_uiMsgID_get, _wrap_CGGameMessage_m_uiMsgID_set },
    { "m_poEnt", _wrap_CGGameMessage_m_poEnt_get, _wrap_CGGameMessage_m_poEnt_set },
    { "m_pData", _wrap_CGGameMessage_m_pData_get, _wrap_CGGameMessage_m_pData_set },
    {0,0,0}
};
static swig_lua_method swig_CGGameMessage_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGGameMessage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameMessage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameMessage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameMessage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameMessage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameMessage_Sf_SwigStatic = {
    "CGGameMessage",
    swig_CGGameMessage_Sf_SwigStatic_methods,
    swig_CGGameMessage_Sf_SwigStatic_attributes,
    swig_CGGameMessage_Sf_SwigStatic_constants,
    swig_CGGameMessage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameMessage_bases[] = {0};
static const char *swig_CGGameMessage_base_names[] = {0};
static swig_lua_class _wrap_class_CGGameMessage = { "CGGameMessage", "CGGameMessage", &SWIGTYPE_p_CGGameMessage,_proxy__wrap_new_CGGameMessage, swig_delete_CGGameMessage, swig_CGGameMessage_methods, swig_CGGameMessage_attributes, &swig_CGGameMessage_Sf_SwigStatic, swig_CGGameMessage_meta, swig_CGGameMessage_bases, swig_CGGameMessage_base_names };

static int _wrap_new_CGGameMessageMgr(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessageMgr *result = 0 ;
    
    SWIG_check_num_args("CGGameMessageMgr::CGGameMessageMgr",0,0)
    result = (CGGameMessageMgr *)new CGGameMessageMgr();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameMessageMgr,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessageMgr_SendMsg__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessageMgr *arg1 = 0 ;
    uint arg2 ;
    CGGameEntity *arg3 = 0 ;
    void *arg4 = 0 ;
    
    SWIG_check_num_args("CGGameMessageMgr::SendMsg",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessageMgr::SendMsg",1,"CGGameMessageMgr *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameMessageMgr::SendMsg",2,"uint");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGGameMessageMgr::SendMsg",3,"CGGameEntity *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CGGameMessageMgr::SendMsg",4,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessageMgr,0))){
      SWIG_fail_ptr("CGGameMessageMgr_SendMsg",1,SWIGTYPE_p_CGGameMessageMgr);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameMessageMgr_SendMsg",3,SWIGTYPE_p_CGGameEntity);
    }
    
    arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"CGGameMessageMgr_SendMsg");
    (arg1)->SendMsg(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessageMgr_SendMsg__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessageMgr *arg1 = 0 ;
    uint arg2 ;
    CGGameEntity *arg3 = 0 ;
    
    SWIG_check_num_args("CGGameMessageMgr::SendMsg",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessageMgr::SendMsg",1,"CGGameMessageMgr *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameMessageMgr::SendMsg",2,"uint");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGGameMessageMgr::SendMsg",3,"CGGameEntity *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessageMgr,0))){
      SWIG_fail_ptr("CGGameMessageMgr_SendMsg",1,SWIGTYPE_p_CGGameMessageMgr);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("CGGameMessageMgr_SendMsg",3,SWIGTYPE_p_CGGameEntity);
    }
    
    (arg1)->SendMsg(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessageMgr_SendMsg(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameMessageMgr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGGameEntity, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGGameMessageMgr_SendMsg__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGameMessageMgr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGGameEntity, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CGGameMessageMgr_SendMsg__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGGameMessageMgr_SendMsg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGameMessageMgr::SendMsg(uint,CGGameEntity *,void *)\n"
    "    CGGameMessageMgr::SendMsg(uint,CGGameEntity *)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGameMessageMgr_oPeekMessage(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessageMgr *arg1 = 0 ;
    CGGameMessage result;
    
    SWIG_check_num_args("CGGameMessageMgr::oPeekMessage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessageMgr::oPeekMessage",1,"CGGameMessageMgr *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessageMgr,0))){
      SWIG_fail_ptr("CGGameMessageMgr_oPeekMessage",1,SWIGTYPE_p_CGGameMessageMgr);
    }
    
    result = (arg1)->oPeekMessage();
    {
      CGGameMessage * resultptr = new CGGameMessage(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CGGameMessage,1); SWIG_arg++;
    }
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessageMgr_oWatchMessage(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessageMgr *arg1 = 0 ;
    CGGameMessage *result = 0 ;
    
    SWIG_check_num_args("CGGameMessageMgr::oWatchMessage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessageMgr::oWatchMessage",1,"CGGameMessageMgr *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessageMgr,0))){
      SWIG_fail_ptr("CGGameMessageMgr_oWatchMessage",1,SWIGTYPE_p_CGGameMessageMgr);
    }
    
    result = (CGGameMessage *) &(arg1)->oWatchMessage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameMessage,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMessageMgr_bPendingMessages(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMessageMgr *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGGameMessageMgr::bPendingMessages",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMessageMgr::bPendingMessages",1,"CGGameMessageMgr *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMessageMgr,0))){
      SWIG_fail_ptr("CGGameMessageMgr_bPendingMessages",1,SWIGTYPE_p_CGGameMessageMgr);
    }
    
    result = (bool)(arg1)->bPendingMessages();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameMessageMgr(void *obj) {
CGGameMessageMgr *arg1 = (CGGameMessageMgr *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameMessageMgr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameMessageMgr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameMessageMgr_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameMessageMgr_methods[]= {
    { "SendMsg", _wrap_CGGameMessageMgr_SendMsg},
    { "oPeekMessage", _wrap_CGGameMessageMgr_oPeekMessage},
    { "oWatchMessage", _wrap_CGGameMessageMgr_oWatchMessage},
    { "bPendingMessages", _wrap_CGGameMessageMgr_bPendingMessages},
    {0,0}
};
static swig_lua_method swig_CGGameMessageMgr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameMessageMgr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameMessageMgr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameMessageMgr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameMessageMgr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameMessageMgr_Sf_SwigStatic = {
    "CGGameMessageMgr",
    swig_CGGameMessageMgr_Sf_SwigStatic_methods,
    swig_CGGameMessageMgr_Sf_SwigStatic_attributes,
    swig_CGGameMessageMgr_Sf_SwigStatic_constants,
    swig_CGGameMessageMgr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameMessageMgr_bases[] = {0};
static const char *swig_CGGameMessageMgr_base_names[] = {0};
static swig_lua_class _wrap_class_CGGameMessageMgr = { "CGGameMessageMgr", "CGGameMessageMgr", &SWIGTYPE_p_CGGameMessageMgr,_proxy__wrap_new_CGGameMessageMgr, swig_delete_CGGameMessageMgr, swig_CGGameMessageMgr_methods, swig_CGGameMessageMgr_attributes, &swig_CGGameMessageMgr_Sf_SwigStatic, swig_CGGameMessageMgr_meta, swig_CGGameMessageMgr_bases, swig_CGGameMessageMgr_base_names };

static int _wrap_CGGameMode_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMode *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGGameMode::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMode::Init",1,"CGGameMode *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameMode::Init",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGameMode::Init",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMode,0))){
      SWIG_fail_ptr("CGGameMode_Init",1,SWIGTYPE_p_CGGameMode);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMode_Finish(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMode *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameMode::Finish",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMode::Finish",1,"CGGameMode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMode,0))){
      SWIG_fail_ptr("CGGameMode_Finish",1,SWIGTYPE_p_CGGameMode);
    }
    
    (arg1)->Finish();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMode_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMode *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameMode::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMode::Reset",1,"CGGameMode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMode,0))){
      SWIG_fail_ptr("CGGameMode_Reset",1,SWIGTYPE_p_CGGameMode);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMode_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMode *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGameMode::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMode::Think",1,"CGGameMode *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameMode::Think",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMode,0))){
      SWIG_fail_ptr("CGGameMode_Think",1,SWIGTYPE_p_CGGameMode);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Think(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMode_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMode *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameMode::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMode::Render",1,"CGGameMode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMode,0))){
      SWIG_fail_ptr("CGGameMode_Render",1,SWIGTYPE_p_CGGameMode);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMode_HandleMessageQueue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMode *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameMode::HandleMessageQueue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMode::HandleMessageQueue",1,"CGGameMode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMode,0))){
      SWIG_fail_ptr("CGGameMode_HandleMessageQueue",1,SWIGTYPE_p_CGGameMode);
    }
    
    (arg1)->HandleMessageQueue();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameMode_eState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameMode *arg1 = 0 ;
    TGMState result;
    
    SWIG_check_num_args("CGGameMode::eState",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameMode::eState",1,"CGGameMode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameMode,0))){
      SWIG_fail_ptr("CGGameMode_eState",1,SWIGTYPE_p_CGGameMode);
    }
    
    result = (TGMState)(arg1)->eState();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameMode(void *obj) {
CGGameMode *arg1 = (CGGameMode *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGGameMode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameMode_methods[]= {
    { "Init", _wrap_CGGameMode_Init},
    { "Finish", _wrap_CGGameMode_Finish},
    { "Reset", _wrap_CGGameMode_Reset},
    { "Think", _wrap_CGGameMode_Think},
    { "Render", _wrap_CGGameMode_Render},
    { "HandleMessageQueue", _wrap_CGGameMode_HandleMessageQueue},
    { "eState", _wrap_CGGameMode_eState},
    {0,0}
};
static swig_lua_method swig_CGGameMode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameMode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameMode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameMode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameMode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameMode_Sf_SwigStatic = {
    "CGGameMode",
    swig_CGGameMode_Sf_SwigStatic_methods,
    swig_CGGameMode_Sf_SwigStatic_attributes,
    swig_CGGameMode_Sf_SwigStatic_constants,
    swig_CGGameMode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameMode_bases[] = {0};
static const char *swig_CGGameMode_base_names[] = {0};
static swig_lua_class _wrap_class_CGGameMode = { "CGGameMode", "CGGameMode", &SWIGTYPE_p_CGGameMode,0, swig_delete_CGGameMode, swig_CGGameMode_methods, swig_CGGameMode_attributes, &swig_CGGameMode_Sf_SwigStatic, swig_CGGameMode_meta, swig_CGGameMode_bases, swig_CGGameMode_base_names };

static int _wrap_new_CGGameBase(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameBase *result = 0 ;
    
    SWIG_check_num_args("CGGameBase::CGGameBase",0,0)
    result = (CGGameBase *)new CGGameBase();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameBase,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameBase_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameBase *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    uint arg4 ;
    
    SWIG_check_num_args("CGGameBase::Init",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameBase::Init",1,"CGGameBase *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGameBase::Init",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGGameBase::Init",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGGameBase::Init",4,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameBase,0))){
      SWIG_fail_ptr("CGGameBase_Init",1,SWIGTYPE_p_CGGameBase);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    (arg1)->Init(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameBase_Finish(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameBase *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameBase::Finish",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameBase::Finish",1,"CGGameBase *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameBase,0))){
      SWIG_fail_ptr("CGGameBase_Finish",1,SWIGTYPE_p_CGGameBase);
    }
    
    (arg1)->Finish();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameBase_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameBase *arg1 = 0 ;
    float *arg2 = 0 ;
    
    SWIG_check_num_args("CGGameBase::Think",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameBase::Think",1,"CGGameBase *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGameBase::Think",2,"float &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameBase,0))){
      SWIG_fail_ptr("CGGameBase_Think",1,SWIGTYPE_p_CGGameBase);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("CGGameBase_Think",2,SWIGTYPE_p_float);
    }
    
    (arg1)->Think(*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameBase_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameBase *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameBase::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameBase::Render",1,"CGGameBase *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameBase,0))){
      SWIG_fail_ptr("CGGameBase_Render",1,SWIGTYPE_p_CGGameBase);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGameBase_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameBase *arg1 = 0 ;
    
    SWIG_check_num_args("CGGameBase::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGameBase::Reset",1,"CGGameBase *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameBase,0))){
      SWIG_fail_ptr("CGGameBase_Reset",1,SWIGTYPE_p_CGGameBase);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameBase(void *obj) {
CGGameBase *arg1 = (CGGameBase *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameBase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameBase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameBase_methods[]= {
    { "Init", _wrap_CGGameBase_Init},
    { "Finish", _wrap_CGGameBase_Finish},
    { "Think", _wrap_CGGameBase_Think},
    { "Render", _wrap_CGGameBase_Render},
    { "Reset", _wrap_CGGameBase_Reset},
    {0,0}
};
static swig_lua_method swig_CGGameBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameBase_Sf_SwigStatic = {
    "CGGameBase",
    swig_CGGameBase_Sf_SwigStatic_methods,
    swig_CGGameBase_Sf_SwigStatic_attributes,
    swig_CGGameBase_Sf_SwigStatic_constants,
    swig_CGGameBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameBase_bases[] = {0};
static const char *swig_CGGameBase_base_names[] = {0};
static swig_lua_class _wrap_class_CGGameBase = { "CGGameBase", "CGGameBase", &SWIGTYPE_p_CGGameBase,_proxy__wrap_new_CGGameBase, swig_delete_CGGameBase, swig_CGGameBase_methods, swig_CGGameBase_attributes, &swig_CGGameBase_Sf_SwigStatic, swig_CGGameBase_meta, swig_CGGameBase_bases, swig_CGGameBase_base_names };

static int _wrap_CGControlPoint_m_sName_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGControlPoint::m_sName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_sName",1,"CGControlPoint *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGControlPoint::m_sName",2,"CGString *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_sName_set",1,SWIGTYPE_p_CGControlPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGControlPoint_m_sName_set",2,SWIGTYPE_p_CGString);
    }
    
    if (arg1) (arg1)->m_sName = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_sName_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGControlPoint::m_sName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_sName",1,"CGControlPoint *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_sName_get",1,SWIGTYPE_p_CGControlPoint);
    }
    
    result = (CGString *)& ((arg1)->m_sName);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_oPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGControlPoint::m_oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_oPos",1,"CGControlPoint *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGControlPoint::m_oPos",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_oPos_set",1,SWIGTYPE_p_CGControlPoint);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGControlPoint_m_oPos_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oPos = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_oPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGControlPoint::m_oPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_oPos",1,"CGControlPoint *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_oPos_get",1,SWIGTYPE_p_CGControlPoint);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucCPType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char arg2 ;
    
    SWIG_check_num_args("CGControlPoint::m_ucCPType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucCPType",1,"CGControlPoint *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGControlPoint::m_ucCPType",2,"unsigned char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucCPType_set",1,SWIGTYPE_p_CGControlPoint);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned char)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_ucCPType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucCPType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("CGControlPoint::m_ucCPType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucCPType",1,"CGControlPoint *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucCPType_get",1,SWIGTYPE_p_CGControlPoint);
    }
    
    result = (unsigned char) ((arg1)->m_ucCPType);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucSubType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char arg2 ;
    
    SWIG_check_num_args("CGControlPoint::m_ucSubType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucSubType",1,"CGControlPoint *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGControlPoint::m_ucSubType",2,"unsigned char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucSubType_set",1,SWIGTYPE_p_CGControlPoint);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned char)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_ucSubType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucSubType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("CGControlPoint::m_ucSubType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucSubType",1,"CGControlPoint *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucSubType_get",1,SWIGTYPE_p_CGControlPoint);
    }
    
    result = (unsigned char) ((arg1)->m_ucSubType);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucDir_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char arg2 ;
    
    SWIG_check_num_args("CGControlPoint::m_ucDir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucDir",1,"CGControlPoint *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGControlPoint::m_ucDir",2,"unsigned char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucDir_set",1,SWIGTYPE_p_CGControlPoint);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned char)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_ucDir = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucDir_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("CGControlPoint::m_ucDir",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucDir",1,"CGControlPoint *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucDir_get",1,SWIGTYPE_p_CGControlPoint);
    }
    
    result = (unsigned char) ((arg1)->m_ucDir);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucPad_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char arg2 ;
    
    SWIG_check_num_args("CGControlPoint::m_ucPad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucPad",1,"CGControlPoint *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGControlPoint::m_ucPad",2,"unsigned char");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucPad_set",1,SWIGTYPE_p_CGControlPoint);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned char)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_ucPad = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGControlPoint_m_ucPad_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("CGControlPoint::m_ucPad",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGControlPoint::m_ucPad",1,"CGControlPoint *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGControlPoint,0))){
      SWIG_fail_ptr("CGControlPoint_m_ucPad_get",1,SWIGTYPE_p_CGControlPoint);
    }
    
    result = (unsigned char) ((arg1)->m_ucPad);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGControlPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGControlPoint *result = 0 ;
    
    SWIG_check_num_args("CGControlPoint::CGControlPoint",0,0)
    result = (CGControlPoint *)new CGControlPoint();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGControlPoint,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGControlPoint(void *obj) {
CGControlPoint *arg1 = (CGControlPoint *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGControlPoint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGControlPoint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGControlPoint_attributes[] = {
    { "m_sName", _wrap_CGControlPoint_m_sName_get, _wrap_CGControlPoint_m_sName_set },
    { "m_oPos", _wrap_CGControlPoint_m_oPos_get, _wrap_CGControlPoint_m_oPos_set },
    { "m_ucCPType", _wrap_CGControlPoint_m_ucCPType_get, _wrap_CGControlPoint_m_ucCPType_set },
    { "m_ucSubType", _wrap_CGControlPoint_m_ucSubType_get, _wrap_CGControlPoint_m_ucSubType_set },
    { "m_ucDir", _wrap_CGControlPoint_m_ucDir_get, _wrap_CGControlPoint_m_ucDir_set },
    { "m_ucPad", _wrap_CGControlPoint_m_ucPad_get, _wrap_CGControlPoint_m_ucPad_set },
    {0,0,0}
};
static swig_lua_method swig_CGControlPoint_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGControlPoint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGControlPoint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGControlPoint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGControlPoint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGControlPoint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGControlPoint_Sf_SwigStatic = {
    "CGControlPoint",
    swig_CGControlPoint_Sf_SwigStatic_methods,
    swig_CGControlPoint_Sf_SwigStatic_attributes,
    swig_CGControlPoint_Sf_SwigStatic_constants,
    swig_CGControlPoint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGControlPoint_bases[] = {0};
static const char *swig_CGControlPoint_base_names[] = {0};
static swig_lua_class _wrap_class_CGControlPoint = { "CGControlPoint", "CGControlPoint", &SWIGTYPE_p_CGControlPoint,_proxy__wrap_new_CGControlPoint, swig_delete_CGControlPoint, swig_CGControlPoint_methods, swig_CGControlPoint_attributes, &swig_CGControlPoint_Sf_SwigStatic, swig_CGControlPoint_meta, swig_CGControlPoint_bases, swig_CGControlPoint_base_names };

static int _wrap_new_CGGraphicResource__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    CGGraphicResource *result = 0 ;
    
    SWIG_check_num_args("CGGraphicResource::CGGraphicResource",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicResource::CGGraphicResource",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("new_CGGraphicResource",1,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (CGGraphicResource *)new CGGraphicResource(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicResource,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphicResource__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResource *result = 0 ;
    
    SWIG_check_num_args("CGGraphicResource::CGGraphicResource",0,0)
    result = (CGGraphicResource *)new CGGraphicResource();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicResource,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphicResource(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGGraphicResource__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGSceneNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGGraphicResource__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGGraphicResource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGraphicResource::CGGraphicResource(CGSceneNode *)\n"
    "    CGGraphicResource::CGGraphicResource()\n");
  lua_error(L);return 0;
}


static int _wrap_CGGraphicResource_poGetCP(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResource *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGControlPoint *result = 0 ;
    
    SWIG_check_num_args("CGGraphicResource::poGetCP",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicResource::poGetCP",1,"CGGraphicResource *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphicResource::poGetCP",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicResource,0))){
      SWIG_fail_ptr("CGGraphicResource_poGetCP",1,SWIGTYPE_p_CGGraphicResource);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGraphicResource_poGetCP",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGControlPoint *)(arg1)->poGetCP((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGControlPoint,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicResource_poGetModel(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResource *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGGraphicResource::poGetModel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicResource::poGetModel",1,"CGGraphicResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicResource,0))){
      SWIG_fail_ptr("CGGraphicResource_poGetModel",1,SWIGTYPE_p_CGGraphicResource);
    }
    
    result = (CGSceneNode *)(arg1)->poGetModel();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicResource_SetModel(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResource *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphicResource::SetModel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicResource::SetModel",1,"CGGraphicResource *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphicResource::SetModel",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicResource,0))){
      SWIG_fail_ptr("CGGraphicResource_SetModel",1,SWIGTYPE_p_CGGraphicResource);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CGGraphicResource_SetModel",2,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->SetModel(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicResource_m_oCPs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResource *arg1 = 0 ;
    CGDynArray< CGControlPoint > *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphicResource::m_oCPs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicResource::m_oCPs",1,"CGGraphicResource *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGGraphicResource::m_oCPs",2,"CGDynArray< CGControlPoint > *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicResource,0))){
      SWIG_fail_ptr("CGGraphicResource_m_oCPs_set",1,SWIGTYPE_p_CGGraphicResource);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGDynArrayT_CGControlPoint_t,0))){
      SWIG_fail_ptr("CGGraphicResource_m_oCPs_set",2,SWIGTYPE_p_CGDynArrayT_CGControlPoint_t);
    }
    
    if (arg1) (arg1)->m_oCPs = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicResource_m_oCPs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResource *arg1 = 0 ;
    CGDynArray< CGControlPoint > *result = 0 ;
    
    SWIG_check_num_args("CGGraphicResource::m_oCPs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicResource::m_oCPs",1,"CGGraphicResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicResource,0))){
      SWIG_fail_ptr("CGGraphicResource_m_oCPs_get",1,SWIGTYPE_p_CGGraphicResource);
    }
    
    result = (CGDynArray< CGControlPoint > *)& ((arg1)->m_oCPs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGDynArrayT_CGControlPoint_t,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphicResource(void *obj) {
CGGraphicResource *arg1 = (CGGraphicResource *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphicResource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphicResource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphicResource_attributes[] = {
    { "m_oCPs", _wrap_CGGraphicResource_m_oCPs_get, _wrap_CGGraphicResource_m_oCPs_set },
    {0,0,0}
};
static swig_lua_method swig_CGGraphicResource_methods[]= {
    { "poGetCP", _wrap_CGGraphicResource_poGetCP},
    { "poGetModel", _wrap_CGGraphicResource_poGetModel},
    { "SetModel", _wrap_CGGraphicResource_SetModel},
    {0,0}
};
static swig_lua_method swig_CGGraphicResource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphicResource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphicResource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphicResource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphicResource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphicResource_Sf_SwigStatic = {
    "CGGraphicResource",
    swig_CGGraphicResource_Sf_SwigStatic_methods,
    swig_CGGraphicResource_Sf_SwigStatic_attributes,
    swig_CGGraphicResource_Sf_SwigStatic_constants,
    swig_CGGraphicResource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphicResource_bases[] = {0,0};
static const char *swig_CGGraphicResource_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGGraphicResource = { "CGGraphicResource", "CGGraphicResource", &SWIGTYPE_p_CGGraphicResource,_proxy__wrap_new_CGGraphicResource, swig_delete_CGGraphicResource, swig_CGGraphicResource_methods, swig_CGGraphicResource_attributes, &swig_CGGraphicResource_Sf_SwigStatic, swig_CGGraphicResource_meta, swig_CGGraphicResource_bases, swig_CGGraphicResource_base_names };

static int _wrap_new_CGGraphicInstance__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *result = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::CGGraphicInstance",0,0)
    result = (CGGraphicInstance *)new CGGraphicInstance();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphicInstance__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResource *arg1 = 0 ;
    CGGraphicInstance *result = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::CGGraphicInstance",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::CGGraphicInstance",1,"CGGraphicResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicResource,0))){
      SWIG_fail_ptr("new_CGGraphicInstance",1,SWIGTYPE_p_CGGraphicResource);
    }
    
    result = (CGGraphicInstance *)new CGGraphicInstance(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphicInstance__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGGraphicInstance *result = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::CGGraphicInstance",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGGraphicInstance::CGGraphicInstance",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("new_CGGraphicInstance",1,SWIGTYPE_p_CGString);
    }
    
    result = (CGGraphicInstance *)new CGGraphicInstance((CGString const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphicInstance(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGGraphicInstance__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGraphicResource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGGraphicInstance__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGGraphicInstance__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGGraphicInstance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGraphicInstance::CGGraphicInstance()\n"
    "    CGGraphicInstance::CGGraphicInstance(CGGraphicResource *)\n"
    "    CGGraphicInstance::CGGraphicInstance(CGString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGraphicInstance_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Init",1,"CGGraphicInstance *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphicInstance::Init",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Init",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGraphicInstance_Init",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->Init((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Update(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGraphicInstance::Update",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Update",1,"CGGraphicInstance *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGraphicInstance::Update",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Update",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Update(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Render",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Render",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Visible(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGGraphicInstance::Visible",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Visible",1,"CGGraphicInstance *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGGraphicInstance::Visible",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Visible",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->Visible(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_bVisible(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGGraphicInstance::bVisible",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::bVisible",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_bVisible",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (bool)(arg1)->bVisible();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Pos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::Pos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Pos",1,"CGGraphicInstance *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphicInstance::Pos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Pos",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGGraphicInstance_Pos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->Pos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_oPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::oPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::oPos",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_oPos",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (CGVect3 *) &(arg1)->oPos();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Scale(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGraphicInstance::Scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Scale",1,"CGGraphicInstance *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGraphicInstance::Scale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Scale",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Scale(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_fScale(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGGraphicInstance::fScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::fScale",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_fScale",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (float)(arg1)->fScale();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Pitch(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGraphicInstance::Pitch",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Pitch",1,"CGGraphicInstance *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGraphicInstance::Pitch",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Pitch",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Pitch(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_fPitch(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGGraphicInstance::fPitch",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::fPitch",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_fPitch",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (float)(arg1)->fPitch();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Yaw(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGraphicInstance::Yaw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Yaw",1,"CGGraphicInstance *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGraphicInstance::Yaw",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Yaw",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Yaw(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_fYaw(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGGraphicInstance::fYaw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::fYaw",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_fYaw",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (float)(arg1)->fYaw();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_Roll(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGGraphicInstance::Roll",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::Roll",1,"CGGraphicInstance *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGGraphicInstance::Roll",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_Roll",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->Roll(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_fRoll(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGGraphicInstance::fRoll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::fRoll",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_fRoll",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (float)(arg1)->fRoll();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_poGraphicResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    CGGraphicResource *result = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::poGraphicResource",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::poGraphicResource",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_poGraphicResource",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (CGGraphicResource *)(arg1)->poGraphicResource();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_oTransform(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    CGMatrix4x4 *result = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::oTransform",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::oTransform",1,"CGGraphicInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_oTransform",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    result = (CGMatrix4x4 *) &(arg1)->oTransform();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMatrix4x4,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_SetColor__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::SetColor",1,"CGGraphicInstance *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphicInstance::SetColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_SetColor",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGGraphicInstance_SetColor",2,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetColor((CGColor const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_SetColor__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicInstance *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGGraphicInstance::SetColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicInstance::SetColor",1,"CGGraphicInstance const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphicInstance::SetColor",2,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicInstance,0))){
      SWIG_fail_ptr("CGGraphicInstance_SetColor",1,SWIGTYPE_p_CGGraphicInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGGraphicInstance_SetColor",2,SWIGTYPE_p_CGColor);
    }
    
    result = (CGColor *) &((CGGraphicInstance const *)arg1)->SetColor((CGColor const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGGraphicInstance_SetColor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGraphicInstance, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGGraphicInstance_SetColor__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGGraphicInstance, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGGraphicInstance_SetColor__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGGraphicInstance_SetColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGGraphicInstance::SetColor(CGColor const &)\n"
    "    CGGraphicInstance::SetColor(CGColor const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_CGGraphicInstance(void *obj) {
CGGraphicInstance *arg1 = (CGGraphicInstance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphicInstance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphicInstance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphicInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphicInstance_methods[]= {
    { "Init", _wrap_CGGraphicInstance_Init},
    { "Update", _wrap_CGGraphicInstance_Update},
    { "Render", _wrap_CGGraphicInstance_Render},
    { "Visible", _wrap_CGGraphicInstance_Visible},
    { "bVisible", _wrap_CGGraphicInstance_bVisible},
    { "Pos", _wrap_CGGraphicInstance_Pos},
    { "oPos", _wrap_CGGraphicInstance_oPos},
    { "Scale", _wrap_CGGraphicInstance_Scale},
    { "fScale", _wrap_CGGraphicInstance_fScale},
    { "Pitch", _wrap_CGGraphicInstance_Pitch},
    { "fPitch", _wrap_CGGraphicInstance_fPitch},
    { "Yaw", _wrap_CGGraphicInstance_Yaw},
    { "fYaw", _wrap_CGGraphicInstance_fYaw},
    { "Roll", _wrap_CGGraphicInstance_Roll},
    { "fRoll", _wrap_CGGraphicInstance_fRoll},
    { "poGraphicResource", _wrap_CGGraphicInstance_poGraphicResource},
    { "oTransform", _wrap_CGGraphicInstance_oTransform},
    { "SetColor", _wrap_CGGraphicInstance_SetColor},
    {0,0}
};
static swig_lua_method swig_CGGraphicInstance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphicInstance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphicInstance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphicInstance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphicInstance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphicInstance_Sf_SwigStatic = {
    "CGGraphicInstance",
    swig_CGGraphicInstance_Sf_SwigStatic_methods,
    swig_CGGraphicInstance_Sf_SwigStatic_attributes,
    swig_CGGraphicInstance_Sf_SwigStatic_constants,
    swig_CGGraphicInstance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphicInstance_bases[] = {0};
static const char *swig_CGGraphicInstance_base_names[] = {0};
static swig_lua_class _wrap_class_CGGraphicInstance = { "CGGraphicInstance", "CGGraphicInstance", &SWIGTYPE_p_CGGraphicInstance,_proxy__wrap_new_CGGraphicInstance, swig_delete_CGGraphicInstance, swig_CGGraphicInstance_methods, swig_CGGraphicInstance_attributes, &swig_CGGraphicInstance_Sf_SwigStatic, swig_CGGraphicInstance_meta, swig_CGGraphicInstance_bases, swig_CGGraphicInstance_base_names };

static int _wrap_CGGraphicResourceWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResourceWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGGraphicResource *result = 0 ;
    
    SWIG_check_num_args("CGGraphicResourceWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGGraphicResourceWH::poLoadResource",1,"CGGraphicResourceWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGGraphicResourceWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphicResourceWH,0))){
      SWIG_fail_ptr("CGGraphicResourceWH_poLoadResource",1,SWIGTYPE_p_CGGraphicResourceWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGGraphicResourceWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGGraphicResource *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGGraphicResourceWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphicResourceWH *result = 0 ;
    
    SWIG_check_num_args("CGGraphicResourceWH::CGGraphicResourceWH",0,0)
    result = (CGGraphicResourceWH *)new CGGraphicResourceWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphicResourceWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGraphicResourceWH(void *obj) {
CGGraphicResourceWH *arg1 = (CGGraphicResourceWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGraphicResourceWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGraphicResourceWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGraphicResourceWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGraphicResourceWH_methods[]= {
    { "poLoadResource", _wrap_CGGraphicResourceWH_poLoadResource},
    {0,0}
};
static swig_lua_method swig_CGGraphicResourceWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGraphicResourceWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGraphicResourceWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGraphicResourceWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGraphicResourceWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGraphicResourceWH_Sf_SwigStatic = {
    "CGGraphicResourceWH",
    swig_CGGraphicResourceWH_Sf_SwigStatic_methods,
    swig_CGGraphicResourceWH_Sf_SwigStatic_attributes,
    swig_CGGraphicResourceWH_Sf_SwigStatic_constants,
    swig_CGGraphicResourceWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGraphicResourceWH_bases[] = {0};
static const char *swig_CGGraphicResourceWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGGraphicResourceWH = { "CGGraphicResourceWH", "CGGraphicResourceWH", &SWIGTYPE_p_CGGraphicResourceWH,_proxy__wrap_new_CGGraphicResourceWH, swig_delete_CGGraphicResourceWH, swig_CGGraphicResourceWH_methods, swig_CGGraphicResourceWH_attributes, &swig_CGGraphicResourceWH_Sf_SwigStatic, swig_CGGraphicResourceWH_meta, swig_CGGraphicResourceWH_bases, swig_CGGraphicResourceWH_base_names };

static int _wrap_new_CGScriptResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptResource *result = 0 ;
    
    SWIG_check_num_args("CGScriptResource::CGScriptResource",0,0)
    result = (CGScriptResource *)new CGScriptResource();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptResource,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptResource_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptResource *arg1 = 0 ;
    
    SWIG_check_num_args("CGScriptResource::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptResource::Init",1,"CGScriptResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptResource,0))){
      SWIG_fail_ptr("CGScriptResource_Init",1,SWIGTYPE_p_CGScriptResource);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptResource_Finish(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptResource *arg1 = 0 ;
    
    SWIG_check_num_args("CGScriptResource::Finish",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptResource::Finish",1,"CGScriptResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptResource,0))){
      SWIG_fail_ptr("CGScriptResource_Finish",1,SWIGTYPE_p_CGScriptResource);
    }
    
    (arg1)->Finish();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptResource_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptResource *arg1 = 0 ;
    float arg2 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGScriptResource::Think",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptResource::Think",1,"CGScriptResource *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGScriptResource::Think",2,"float");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGScriptResource::Think",3,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptResource,0))){
      SWIG_fail_ptr("CGScriptResource_Think",1,SWIGTYPE_p_CGScriptResource);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CGScriptResource_Think");
    (arg1)->Think(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGScriptResource(void *obj) {
CGScriptResource *arg1 = (CGScriptResource *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGScriptResource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGScriptResource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGScriptResource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGScriptResource_methods[]= {
    { "Init", _wrap_CGScriptResource_Init},
    { "Finish", _wrap_CGScriptResource_Finish},
    { "Think", _wrap_CGScriptResource_Think},
    {0,0}
};
static swig_lua_method swig_CGScriptResource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGScriptResource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGScriptResource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGScriptResource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGScriptResource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGScriptResource_Sf_SwigStatic = {
    "CGScriptResource",
    swig_CGScriptResource_Sf_SwigStatic_methods,
    swig_CGScriptResource_Sf_SwigStatic_attributes,
    swig_CGScriptResource_Sf_SwigStatic_constants,
    swig_CGScriptResource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGScriptResource_bases[] = {0,0};
static const char *swig_CGScriptResource_base_names[] = {"CGTextResource *",0};
static swig_lua_class _wrap_class_CGScriptResource = { "CGScriptResource", "CGScriptResource", &SWIGTYPE_p_CGScriptResource,_proxy__wrap_new_CGScriptResource, swig_delete_CGScriptResource, swig_CGScriptResource_methods, swig_CGScriptResource_attributes, &swig_CGScriptResource_Sf_SwigStatic, swig_CGScriptResource_meta, swig_CGScriptResource_bases, swig_CGScriptResource_base_names };

static int _wrap_CGScriptResourceWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptResourceWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGScriptResource *result = 0 ;
    
    SWIG_check_num_args("CGScriptResourceWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptResourceWH::poLoadResource",1,"CGScriptResourceWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGScriptResourceWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptResourceWH,0))){
      SWIG_fail_ptr("CGScriptResourceWH_poLoadResource",1,SWIGTYPE_p_CGScriptResourceWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptResourceWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGScriptResource *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGScriptResourceWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptResourceWH *result = 0 ;
    
    SWIG_check_num_args("CGScriptResourceWH::CGScriptResourceWH",0,0)
    result = (CGScriptResourceWH *)new CGScriptResourceWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptResourceWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGScriptResourceWH(void *obj) {
CGScriptResourceWH *arg1 = (CGScriptResourceWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGScriptResourceWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGScriptResourceWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGScriptResourceWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGScriptResourceWH_methods[]= {
    { "poLoadResource", _wrap_CGScriptResourceWH_poLoadResource},
    {0,0}
};
static swig_lua_method swig_CGScriptResourceWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGScriptResourceWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGScriptResourceWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGScriptResourceWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGScriptResourceWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGScriptResourceWH_Sf_SwigStatic = {
    "CGScriptResourceWH",
    swig_CGScriptResourceWH_Sf_SwigStatic_methods,
    swig_CGScriptResourceWH_Sf_SwigStatic_attributes,
    swig_CGScriptResourceWH_Sf_SwigStatic_constants,
    swig_CGScriptResourceWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGScriptResourceWH_bases[] = {0};
static const char *swig_CGScriptResourceWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGScriptResourceWH = { "CGScriptResourceWH", "CGScriptResourceWH", &SWIGTYPE_p_CGScriptResourceWH,_proxy__wrap_new_CGScriptResourceWH, swig_delete_CGScriptResourceWH, swig_CGScriptResourceWH_methods, swig_CGScriptResourceWH_attributes, &swig_CGScriptResourceWH_Sf_SwigStatic, swig_CGScriptResourceWH_meta, swig_CGScriptResourceWH_bases, swig_CGScriptResourceWH_base_names };

static int _wrap_CGScriptingSystem_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::Init",1,"CGScriptingSystem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_Init",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_Finish(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::Finish",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::Finish",1,"CGScriptingSystem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_Finish",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    (arg1)->Finish();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_hHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    handler result;
    
    SWIG_check_num_args("CGScriptingSystem::hHandler",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::hHandler",1,"CGScriptingSystem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_hHandler",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    result = (handler)(arg1)->hHandler();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_RegisterExtension__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    CGString *arg2 = 0 ;
    void *arg3 = 0 ;
    CGString *arg4 = 0 ;
    CGString *arg5 = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::RegisterExtension",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",1,"CGScriptingSystem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",2,"CGString const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",3,"void *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",4,"CGString const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",5,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",2,SWIGTYPE_p_CGString);
    }
    
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CGScriptingSystem_RegisterExtension");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",4,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",5,SWIGTYPE_p_CGString);
    }
    
    (arg1)->RegisterExtension((CGString const &)*arg2,arg3,(CGString const &)*arg4,(CGString const &)*arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_RegisterExtension__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    CGString *arg2 = 0 ;
    void *arg3 = 0 ;
    CGString *arg4 = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::RegisterExtension",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",1,"CGScriptingSystem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",2,"CGString const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",3,"void *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",4,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",2,SWIGTYPE_p_CGString);
    }
    
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CGScriptingSystem_RegisterExtension");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",4,SWIGTYPE_p_CGString);
    }
    
    (arg1)->RegisterExtension((CGString const &)*arg2,arg3,(CGString const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_RegisterExtension__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    CGString *arg2 = 0 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::RegisterExtension",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",1,"CGScriptingSystem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",2,"CGString const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGScriptingSystem::RegisterExtension",3,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_RegisterExtension",2,SWIGTYPE_p_CGString);
    }
    
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CGScriptingSystem_RegisterExtension");
    (arg1)->RegisterExtension((CGString const &)*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_RegisterExtension(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGScriptingSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGScriptingSystem_RegisterExtension__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGScriptingSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CGScriptingSystem_RegisterExtension__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGScriptingSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_CGScriptingSystem_RegisterExtension__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGScriptingSystem_RegisterExtension'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGScriptingSystem::RegisterExtension(CGString const &,void *,CGString const &,CGString const &)\n"
    "    CGScriptingSystem::RegisterExtension(CGString const &,void *,CGString const &)\n"
    "    CGScriptingSystem::RegisterExtension(CGString const &,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CGScriptingSystem_pCallExtension__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGString *arg3 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::pCallExtension",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::pCallExtension",1,"CGScriptingSystem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGScriptingSystem::pCallExtension",2,"CGString const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGScriptingSystem::pCallExtension",3,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_pCallExtension",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_pCallExtension",2,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_pCallExtension",3,SWIGTYPE_p_CGString);
    }
    
    result = (void *)(arg1)->pCallExtension((CGString const &)*arg2,(CGString const &)*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_pCallExtension__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *arg1 = 0 ;
    CGString *arg2 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::pCallExtension",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptingSystem::pCallExtension",1,"CGScriptingSystem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGScriptingSystem::pCallExtension",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptingSystem,0))){
      SWIG_fail_ptr("CGScriptingSystem_pCallExtension",1,SWIGTYPE_p_CGScriptingSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptingSystem_pCallExtension",2,SWIGTYPE_p_CGString);
    }
    
    result = (void *)(arg1)->pCallExtension((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptingSystem_pCallExtension(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGScriptingSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGScriptingSystem_pCallExtension__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGScriptingSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGScriptingSystem_pCallExtension__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGScriptingSystem_pCallExtension'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGScriptingSystem::pCallExtension(CGString const &,CGString const &)\n"
    "    CGScriptingSystem::pCallExtension(CGString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_CGScriptingSystem(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptingSystem *result = 0 ;
    
    SWIG_check_num_args("CGScriptingSystem::CGScriptingSystem",0,0)
    result = (CGScriptingSystem *)new CGScriptingSystem();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptingSystem,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGScriptingSystem(void *obj) {
CGScriptingSystem *arg1 = (CGScriptingSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGScriptingSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGScriptingSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGScriptingSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGScriptingSystem_methods[]= {
    { "Init", _wrap_CGScriptingSystem_Init},
    { "Finish", _wrap_CGScriptingSystem_Finish},
    { "hHandler", _wrap_CGScriptingSystem_hHandler},
    { "RegisterExtension", _wrap_CGScriptingSystem_RegisterExtension},
    { "pCallExtension", _wrap_CGScriptingSystem_pCallExtension},
    {0,0}
};
static swig_lua_method swig_CGScriptingSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGScriptingSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGScriptingSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGScriptingSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGScriptingSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGScriptingSystem_Sf_SwigStatic = {
    "CGScriptingSystem",
    swig_CGScriptingSystem_Sf_SwigStatic_methods,
    swig_CGScriptingSystem_Sf_SwigStatic_attributes,
    swig_CGScriptingSystem_Sf_SwigStatic_constants,
    swig_CGScriptingSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGScriptingSystem_bases[] = {0};
static const char *swig_CGScriptingSystem_base_names[] = {0};
static swig_lua_class _wrap_class_CGScriptingSystem = { "CGScriptingSystem", "CGScriptingSystem", &SWIGTYPE_p_CGScriptingSystem,_proxy__wrap_new_CGScriptingSystem, swig_delete_CGScriptingSystem, swig_CGScriptingSystem_methods, swig_CGScriptingSystem_attributes, &swig_CGScriptingSystem_Sf_SwigStatic, swig_CGScriptingSystem_meta, swig_CGScriptingSystem_bases, swig_CGScriptingSystem_base_names };

static int _wrap_new_CGScriptInstance__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptInstance *result = 0 ;
    
    SWIG_check_num_args("CGScriptInstance::CGScriptInstance",0,0)
    result = (CGScriptInstance *)new CGScriptInstance();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGScriptInstance__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptResource *arg1 = 0 ;
    CGScriptInstance *result = 0 ;
    
    SWIG_check_num_args("CGScriptInstance::CGScriptInstance",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptInstance::CGScriptInstance",1,"CGScriptResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptResource,0))){
      SWIG_fail_ptr("new_CGScriptInstance",1,SWIGTYPE_p_CGScriptResource);
    }
    
    result = (CGScriptInstance *)new CGScriptInstance(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGScriptInstance__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGString *arg1 = 0 ;
    CGScriptInstance *result = 0 ;
    
    SWIG_check_num_args("CGScriptInstance::CGScriptInstance",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CGScriptInstance::CGScriptInstance",1,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("new_CGScriptInstance",1,SWIGTYPE_p_CGString);
    }
    
    result = (CGScriptInstance *)new CGScriptInstance((CGString const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGScriptInstance(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CGScriptInstance__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGScriptResource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGScriptInstance__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CGScriptInstance__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CGScriptInstance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGScriptInstance::CGScriptInstance()\n"
    "    CGScriptInstance::CGScriptInstance(CGScriptResource *)\n"
    "    CGScriptInstance::CGScriptInstance(CGString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGScriptInstance_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptInstance *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGScriptInstance::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptInstance::Init",1,"CGScriptInstance *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGScriptInstance::Init",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptInstance,0))){
      SWIG_fail_ptr("CGScriptInstance_Init",1,SWIGTYPE_p_CGScriptInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGScriptInstance_Init",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->Init((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptInstance_Think(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptInstance *arg1 = 0 ;
    float arg2 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CGScriptInstance::Think",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptInstance::Think",1,"CGScriptInstance *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGScriptInstance::Think",2,"float");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGScriptInstance::Think",3,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptInstance,0))){
      SWIG_fail_ptr("CGScriptInstance_Think",1,SWIGTYPE_p_CGScriptInstance);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CGScriptInstance_Think");
    (arg1)->Think(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptInstance_poScriptResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptInstance *arg1 = 0 ;
    CGScriptResource *result = 0 ;
    
    SWIG_check_num_args("CGScriptInstance::poScriptResource",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptInstance::poScriptResource",1,"CGScriptInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptInstance,0))){
      SWIG_fail_ptr("CGScriptInstance_poScriptResource",1,SWIGTYPE_p_CGScriptInstance);
    }
    
    result = (CGScriptResource *)(arg1)->poScriptResource();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGScriptResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGScriptInstance_ScriptResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGScriptInstance *arg1 = 0 ;
    CGScriptResource *arg2 = 0 ;
    
    SWIG_check_num_args("CGScriptInstance::ScriptResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGScriptInstance::ScriptResource",1,"CGScriptInstance *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGScriptInstance::ScriptResource",2,"CGScriptResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGScriptInstance,0))){
      SWIG_fail_ptr("CGScriptInstance_ScriptResource",1,SWIGTYPE_p_CGScriptInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGScriptResource,0))){
      SWIG_fail_ptr("CGScriptInstance_ScriptResource",2,SWIGTYPE_p_CGScriptResource);
    }
    
    (arg1)->ScriptResource(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGScriptInstance(void *obj) {
CGScriptInstance *arg1 = (CGScriptInstance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGScriptInstance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGScriptInstance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGScriptInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGScriptInstance_methods[]= {
    { "Init", _wrap_CGScriptInstance_Init},
    { "Think", _wrap_CGScriptInstance_Think},
    { "poScriptResource", _wrap_CGScriptInstance_poScriptResource},
    { "ScriptResource", _wrap_CGScriptInstance_ScriptResource},
    {0,0}
};
static swig_lua_method swig_CGScriptInstance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGScriptInstance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGScriptInstance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGScriptInstance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGScriptInstance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGScriptInstance_Sf_SwigStatic = {
    "CGScriptInstance",
    swig_CGScriptInstance_Sf_SwigStatic_methods,
    swig_CGScriptInstance_Sf_SwigStatic_attributes,
    swig_CGScriptInstance_Sf_SwigStatic_constants,
    swig_CGScriptInstance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGScriptInstance_bases[] = {0};
static const char *swig_CGScriptInstance_base_names[] = {0};
static swig_lua_class _wrap_class_CGScriptInstance = { "CGScriptInstance", "CGScriptInstance", &SWIGTYPE_p_CGScriptInstance,_proxy__wrap_new_CGScriptInstance, swig_delete_CGScriptInstance, swig_CGScriptInstance_methods, swig_CGScriptInstance_attributes, &swig_CGScriptInstance_Sf_SwigStatic, swig_CGScriptInstance_meta, swig_CGScriptInstance_bases, swig_CGScriptInstance_base_names };

static int _wrap_new_CGInputHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputHandler *result = 0 ;
    
    SWIG_check_num_args("CGInputHandler::CGInputHandler",0,0)
    result = (CGInputHandler *)new CGInputHandler();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGInputHandler,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGInputHandler_Register(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputHandler *arg1 = 0 ;
    CGString *arg2 = 0 ;
    
    SWIG_check_num_args("CGInputHandler::Register",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGInputHandler::Register",1,"CGInputHandler *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGInputHandler::Register",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGInputHandler,0))){
      SWIG_fail_ptr("CGInputHandler_Register",1,SWIGTYPE_p_CGInputHandler);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGInputHandler_Register",2,SWIGTYPE_p_CGString);
    }
    
    (arg1)->Register((CGString const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGInputHandler_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputHandler *arg1 = 0 ;
    CGString *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGInputHandler::SetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGInputHandler::SetValue",1,"CGInputHandler *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGInputHandler::SetValue",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGInputHandler::SetValue",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGInputHandler,0))){
      SWIG_fail_ptr("CGInputHandler_SetValue",1,SWIGTYPE_p_CGInputHandler);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGInputHandler_SetValue",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetValue((CGString const &)*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGInputHandler_fGetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputHandler *arg1 = 0 ;
    CGString *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CGInputHandler::fGetValue",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGInputHandler::fGetValue",1,"CGInputHandler const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGInputHandler::fGetValue",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGInputHandler,0))){
      SWIG_fail_ptr("CGInputHandler_fGetValue",1,SWIGTYPE_p_CGInputHandler);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGInputHandler_fGetValue",2,SWIGTYPE_p_CGString);
    }
    
    result = (float)((CGInputHandler const *)arg1)->fGetValue((CGString const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGInputHandler_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputHandler *arg1 = 0 ;
    
    SWIG_check_num_args("CGInputHandler::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGInputHandler::Clear",1,"CGInputHandler *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGInputHandler,0))){
      SWIG_fail_ptr("CGInputHandler_Clear",1,SWIGTYPE_p_CGInputHandler);
    }
    
    (arg1)->Clear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGInputHandler(void *obj) {
CGInputHandler *arg1 = (CGInputHandler *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGInputHandler(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGInputHandler);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGInputHandler_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGInputHandler_methods[]= {
    { "Register", _wrap_CGInputHandler_Register},
    { "SetValue", _wrap_CGInputHandler_SetValue},
    { "fGetValue", _wrap_CGInputHandler_fGetValue},
    { "Clear", _wrap_CGInputHandler_Clear},
    {0,0}
};
static swig_lua_method swig_CGInputHandler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGInputHandler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGInputHandler_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGInputHandler_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGInputHandler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGInputHandler_Sf_SwigStatic = {
    "CGInputHandler",
    swig_CGInputHandler_Sf_SwigStatic_methods,
    swig_CGInputHandler_Sf_SwigStatic_attributes,
    swig_CGInputHandler_Sf_SwigStatic_constants,
    swig_CGInputHandler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGInputHandler_bases[] = {0};
static const char *swig_CGInputHandler_base_names[] = {0};
static swig_lua_class _wrap_class_CGInputHandler = { "CGInputHandler", "CGInputHandler", &SWIGTYPE_p_CGInputHandler,_proxy__wrap_new_CGInputHandler, swig_delete_CGInputHandler, swig_CGInputHandler_methods, swig_CGInputHandler_attributes, &swig_CGInputHandler_Sf_SwigStatic, swig_CGInputHandler_meta, swig_CGInputHandler_bases, swig_CGInputHandler_base_names };

static int _wrap_new_CGGameRegistry(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameRegistry *result = 0 ;
    
    SWIG_check_num_args("CGGameRegistry::CGGameRegistry",0,0)
    result = (CGGameRegistry *)new CGGameRegistry();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameRegistry,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGGameRegistry(void *obj) {
CGGameRegistry *arg1 = (CGGameRegistry *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGGameRegistry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGGameRegistry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGGameRegistry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGGameRegistry_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGGameRegistry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGGameRegistry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGGameRegistry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGGameRegistry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGGameRegistry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGGameRegistry_Sf_SwigStatic = {
    "CGGameRegistry",
    swig_CGGameRegistry_Sf_SwigStatic_methods,
    swig_CGGameRegistry_Sf_SwigStatic_attributes,
    swig_CGGameRegistry_Sf_SwigStatic_constants,
    swig_CGGameRegistry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGGameRegistry_bases[] = {0};
static const char *swig_CGGameRegistry_base_names[] = {0};
static swig_lua_class _wrap_class_CGGameRegistry = { "CGGameRegistry", "CGGameRegistry", &SWIGTYPE_p_CGGameRegistry,_proxy__wrap_new_CGGameRegistry, swig_delete_CGGameRegistry, swig_CGGameRegistry_methods, swig_CGGameRegistry_attributes, &swig_CGGameRegistry_Sf_SwigStatic, swig_CGGameRegistry_meta, swig_CGGameRegistry_bases, swig_CGGameRegistry_base_names };

static int _wrap_CGPath_oPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPath *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGPath::oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPath::oPos",1,"CGPath *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPath::oPos",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPath,0))){
      SWIG_fail_ptr("CGPath_oPos",1,SWIGTYPE_p_CGPath);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &(arg1)->oPos(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPath_fTime(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPath *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPath::fTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPath::fTime",1,"CGPath *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPath,0))){
      SWIG_fail_ptr("CGPath_fTime",1,SWIGTYPE_p_CGPath);
    }
    
    result = (float)(arg1)->fTime();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPath(void *obj) {
CGPath *arg1 = (CGPath *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGPath_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPath_methods[]= {
    { "oPos", _wrap_CGPath_oPos},
    { "fTime", _wrap_CGPath_fTime},
    {0,0}
};
static swig_lua_method swig_CGPath_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPath_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPath_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPath_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPath_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPath_Sf_SwigStatic = {
    "CGPath",
    swig_CGPath_Sf_SwigStatic_methods,
    swig_CGPath_Sf_SwigStatic_attributes,
    swig_CGPath_Sf_SwigStatic_constants,
    swig_CGPath_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPath_bases[] = {0};
static const char *swig_CGPath_base_names[] = {0};
static swig_lua_class _wrap_class_CGPath = { "CGPath", "CGPath", &SWIGTYPE_p_CGPath,0, swig_delete_CGPath, swig_CGPath_methods, swig_CGPath_attributes, &swig_CGPath_Sf_SwigStatic, swig_CGPath_meta, swig_CGPath_bases, swig_CGPath_base_names };

static int _wrap_new_CGInputRegistry(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputRegistry *result = 0 ;
    
    SWIG_check_num_args("CGInputRegistry::CGInputRegistry",0,0)
    result = (CGInputRegistry *)new CGInputRegistry();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGInputRegistry,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGInputRegistry_Register(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputRegistry *arg1 = 0 ;
    CGString *arg2 = 0 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGInputRegistry::Register",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGInputRegistry::Register",1,"CGInputRegistry *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGInputRegistry::Register",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGInputRegistry::Register",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGInputRegistry,0))){
      SWIG_fail_ptr("CGInputRegistry_Register",1,SWIGTYPE_p_CGInputRegistry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGInputRegistry_Register",2,SWIGTYPE_p_CGString);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Register((CGString const &)*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGInputRegistry_iInput(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGInputRegistry *arg1 = 0 ;
    CGString *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGInputRegistry::iInput",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGInputRegistry::iInput",1,"CGInputRegistry *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGInputRegistry::iInput",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGInputRegistry,0))){
      SWIG_fail_ptr("CGInputRegistry_iInput",1,SWIGTYPE_p_CGInputRegistry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGInputRegistry_iInput",2,SWIGTYPE_p_CGString);
    }
    
    result = (int)(arg1)->iInput((CGString const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGInputRegistry(void *obj) {
CGInputRegistry *arg1 = (CGInputRegistry *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGInputRegistry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGInputRegistry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGInputRegistry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGInputRegistry_methods[]= {
    { "Register", _wrap_CGInputRegistry_Register},
    { "iInput", _wrap_CGInputRegistry_iInput},
    {0,0}
};
static swig_lua_method swig_CGInputRegistry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGInputRegistry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGInputRegistry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGInputRegistry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGInputRegistry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGInputRegistry_Sf_SwigStatic = {
    "CGInputRegistry",
    swig_CGInputRegistry_Sf_SwigStatic_methods,
    swig_CGInputRegistry_Sf_SwigStatic_attributes,
    swig_CGInputRegistry_Sf_SwigStatic_constants,
    swig_CGInputRegistry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGInputRegistry_bases[] = {0};
static const char *swig_CGInputRegistry_base_names[] = {0};
static swig_lua_class _wrap_class_CGInputRegistry = { "CGInputRegistry", "CGInputRegistry", &SWIGTYPE_p_CGInputRegistry,_proxy__wrap_new_CGInputRegistry, swig_delete_CGInputRegistry, swig_CGInputRegistry_methods, swig_CGInputRegistry_attributes, &swig_CGInputRegistry_Sf_SwigStatic, swig_CGInputRegistry_meta, swig_CGInputRegistry_bases, swig_CGInputRegistry_base_names };

static int _wrap_CGCommandRegistry_RegisterCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandRegistry *arg1 = 0 ;
    CGString *arg2 = 0 ;
    TDispatchCommandCallback arg3 = 0 ;
    
    SWIG_check_num_args("CGCommandRegistry::RegisterCommand",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandRegistry::RegisterCommand",1,"CGCommandRegistry *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCommandRegistry::RegisterCommand",2,"CGString const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGCommandRegistry::RegisterCommand",3,"TDispatchCommandCallback");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandRegistry,0))){
      SWIG_fail_ptr("CGCommandRegistry_RegisterCommand",1,SWIGTYPE_p_CGCommandRegistry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGCommandRegistry_RegisterCommand",2,SWIGTYPE_p_CGString);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void,0))){
      SWIG_fail_ptr("CGCommandRegistry_RegisterCommand",3,SWIGTYPE_p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void);
    }
    
    (arg1)->RegisterCommand((CGString const &)*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandRegistry_iRetrieveCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandRegistry *arg1 = 0 ;
    CGString *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CGCommandRegistry::iRetrieveCommand",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandRegistry::iRetrieveCommand",1,"CGCommandRegistry *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCommandRegistry::iRetrieveCommand",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandRegistry,0))){
      SWIG_fail_ptr("CGCommandRegistry_iRetrieveCommand",1,SWIGTYPE_p_CGCommandRegistry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGCommandRegistry_iRetrieveCommand",2,SWIGTYPE_p_CGString);
    }
    
    result = (int)(arg1)->iRetrieveCommand((CGString const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandRegistry_DispatchCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandRegistry *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    uint arg4 ;
    uint arg5 ;
    CGString *arg6 = 0 ;
    
    SWIG_check_num_args("CGCommandRegistry::DispatchCommand",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandRegistry::DispatchCommand",1,"CGCommandRegistry *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCommandRegistry::DispatchCommand",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCommandRegistry::DispatchCommand",3,"uint");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGCommandRegistry::DispatchCommand",4,"uint");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGCommandRegistry::DispatchCommand",5,"uint");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("CGCommandRegistry::DispatchCommand",6,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandRegistry,0))){
      SWIG_fail_ptr("CGCommandRegistry_DispatchCommand",1,SWIGTYPE_p_CGCommandRegistry);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
    arg4 = (uint)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGCommandRegistry_DispatchCommand",6,SWIGTYPE_p_CGString);
    }
    
    (arg1)->DispatchCommand(arg2,arg3,arg4,arg5,(CGString const &)*arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCommandRegistry(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandRegistry *result = 0 ;
    
    SWIG_check_num_args("CGCommandRegistry::CGCommandRegistry",0,0)
    result = (CGCommandRegistry *)new CGCommandRegistry();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCommandRegistry,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCommandRegistry(void *obj) {
CGCommandRegistry *arg1 = (CGCommandRegistry *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCommandRegistry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCommandRegistry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCommandRegistry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCommandRegistry_methods[]= {
    { "RegisterCommand", _wrap_CGCommandRegistry_RegisterCommand},
    { "iRetrieveCommand", _wrap_CGCommandRegistry_iRetrieveCommand},
    { "DispatchCommand", _wrap_CGCommandRegistry_DispatchCommand},
    {0,0}
};
static swig_lua_method swig_CGCommandRegistry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCommandRegistry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCommandRegistry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCommandRegistry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCommandRegistry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCommandRegistry_Sf_SwigStatic = {
    "CGCommandRegistry",
    swig_CGCommandRegistry_Sf_SwigStatic_methods,
    swig_CGCommandRegistry_Sf_SwigStatic_attributes,
    swig_CGCommandRegistry_Sf_SwigStatic_constants,
    swig_CGCommandRegistry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCommandRegistry_bases[] = {0};
static const char *swig_CGCommandRegistry_base_names[] = {0};
static swig_lua_class _wrap_class_CGCommandRegistry = { "CGCommandRegistry", "CGCommandRegistry", &SWIGTYPE_p_CGCommandRegistry,_proxy__wrap_new_CGCommandRegistry, swig_delete_CGCommandRegistry, swig_CGCommandRegistry_methods, swig_CGCommandRegistry_attributes, &swig_CGCommandRegistry_Sf_SwigStatic, swig_CGCommandRegistry_meta, swig_CGCommandRegistry_bases, swig_CGCommandRegistry_base_names };

static int _wrap_CMDBINDER_MAX_BINDABLE_KEYS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    int result;
    
    SWIG_check_num_args("CMDBINDER_MAX_BINDABLE_KEYS",0,0)
    result = (int)(int)CMDBINDER_MAX_BINDABLE_KEYS;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCommandBinder(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBinder *result = 0 ;
    
    SWIG_check_num_args("CGCommandBinder::CGCommandBinder",0,0)
    result = (CGCommandBinder *)new CGCommandBinder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCommandBinder,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandBinder_Bind__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBinder *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    CGString *arg4 = 0 ;
    
    SWIG_check_num_args("CGCommandBinder::Bind",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandBinder::Bind",1,"CGCommandBinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCommandBinder::Bind",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCommandBinder::Bind",3,"uint");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGCommandBinder::Bind",4,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandBinder,0))){
      SWIG_fail_ptr("CGCommandBinder_Bind",1,SWIGTYPE_p_CGCommandBinder);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGCommandBinder_Bind",4,SWIGTYPE_p_CGString);
    }
    
    (arg1)->Bind(arg2,arg3,(CGString const &)*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandBinder_Bind__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBinder *arg1 = 0 ;
    uint arg2 ;
    uint arg3 ;
    
    SWIG_check_num_args("CGCommandBinder::Bind",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandBinder::Bind",1,"CGCommandBinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCommandBinder::Bind",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCommandBinder::Bind",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandBinder,0))){
      SWIG_fail_ptr("CGCommandBinder_Bind",1,SWIGTYPE_p_CGCommandBinder);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    (arg1)->Bind(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandBinder_Bind(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGCommandBinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGCommandBinder_Bind__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGCommandBinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CGCommandBinder_Bind__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGCommandBinder_Bind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGCommandBinder::Bind(uint,uint,CGString const &)\n"
    "    CGCommandBinder::Bind(uint,uint)\n");
  lua_error(L);return 0;
}


static int _wrap_CGCommandBinder_UnBind(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBinder *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGCommandBinder::UnBind",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandBinder::UnBind",1,"CGCommandBinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCommandBinder::UnBind",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandBinder,0))){
      SWIG_fail_ptr("CGCommandBinder_UnBind",1,SWIGTYPE_p_CGCommandBinder);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->UnBind(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandBinder_iBindedCommand(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBinder *arg1 = 0 ;
    uint arg2 ;
    int result;
    
    SWIG_check_num_args("CGCommandBinder::iBindedCommand",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandBinder::iBindedCommand",1,"CGCommandBinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCommandBinder::iBindedCommand",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandBinder,0))){
      SWIG_fail_ptr("CGCommandBinder_iBindedCommand",1,SWIGTYPE_p_CGCommandBinder);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (int)(arg1)->iBindedCommand(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandBinder_sBindedParameters(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBinder *arg1 = 0 ;
    uint arg2 ;
    CGString *result = 0 ;
    
    SWIG_check_num_args("CGCommandBinder::sBindedParameters",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandBinder::sBindedParameters",1,"CGCommandBinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCommandBinder::sBindedParameters",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandBinder,0))){
      SWIG_fail_ptr("CGCommandBinder_sBindedParameters",1,SWIGTYPE_p_CGCommandBinder);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGString *) &(arg1)->sBindedParameters(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGString,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCommandBinder_UnBindAll(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBinder *arg1 = 0 ;
    
    SWIG_check_num_args("CGCommandBinder::UnBindAll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandBinder::UnBindAll",1,"CGCommandBinder *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandBinder,0))){
      SWIG_fail_ptr("CGCommandBinder_UnBindAll",1,SWIGTYPE_p_CGCommandBinder);
    }
    
    (arg1)->UnBindAll();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCommandBinder(void *obj) {
CGCommandBinder *arg1 = (CGCommandBinder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCommandBinder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCommandBinder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCommandBinder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCommandBinder_methods[]= {
    { "Bind", _wrap_CGCommandBinder_Bind},
    { "UnBind", _wrap_CGCommandBinder_UnBind},
    { "iBindedCommand", _wrap_CGCommandBinder_iBindedCommand},
    { "sBindedParameters", _wrap_CGCommandBinder_sBindedParameters},
    { "UnBindAll", _wrap_CGCommandBinder_UnBindAll},
    {0,0}
};
static swig_lua_method swig_CGCommandBinder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCommandBinder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCommandBinder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCommandBinder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCommandBinder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCommandBinder_Sf_SwigStatic = {
    "CGCommandBinder",
    swig_CGCommandBinder_Sf_SwigStatic_methods,
    swig_CGCommandBinder_Sf_SwigStatic_attributes,
    swig_CGCommandBinder_Sf_SwigStatic_constants,
    swig_CGCommandBinder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCommandBinder_bases[] = {0};
static const char *swig_CGCommandBinder_base_names[] = {0};
static swig_lua_class _wrap_class_CGCommandBinder = { "CGCommandBinder", "CGCommandBinder", &SWIGTYPE_p_CGCommandBinder,_proxy__wrap_new_CGCommandBinder, swig_delete_CGCommandBinder, swig_CGCommandBinder_methods, swig_CGCommandBinder_attributes, &swig_CGCommandBinder_Sf_SwigStatic, swig_CGCommandBinder_meta, swig_CGCommandBinder_bases, swig_CGCommandBinder_base_names };

static int _wrap_CGCommandBindingLoader_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBindingLoader *arg1 = 0 ;
    char *arg2 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGCommandBindingLoader::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCommandBindingLoader::Init",1,"CGCommandBindingLoader *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CGCommandBindingLoader::Init",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCommandBindingLoader,0))){
      SWIG_fail_ptr("CGCommandBindingLoader_Init",1,SWIGTYPE_p_CGCommandBindingLoader);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (bool)(arg1)->Init(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCommandBindingLoader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCommandBindingLoader *result = 0 ;
    
    SWIG_check_num_args("CGCommandBindingLoader::CGCommandBindingLoader",0,0)
    result = (CGCommandBindingLoader *)new CGCommandBindingLoader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCommandBindingLoader,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCommandBindingLoader(void *obj) {
CGCommandBindingLoader *arg1 = (CGCommandBindingLoader *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCommandBindingLoader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCommandBindingLoader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCommandBindingLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCommandBindingLoader_methods[]= {
    { "Init", _wrap_CGCommandBindingLoader_Init},
    {0,0}
};
static swig_lua_method swig_CGCommandBindingLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCommandBindingLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCommandBindingLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCommandBindingLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCommandBindingLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCommandBindingLoader_Sf_SwigStatic = {
    "CGCommandBindingLoader",
    swig_CGCommandBindingLoader_Sf_SwigStatic_methods,
    swig_CGCommandBindingLoader_Sf_SwigStatic_attributes,
    swig_CGCommandBindingLoader_Sf_SwigStatic_constants,
    swig_CGCommandBindingLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCommandBindingLoader_bases[] = {0};
static const char *swig_CGCommandBindingLoader_base_names[] = {0};
static swig_lua_class _wrap_class_CGCommandBindingLoader = { "CGCommandBindingLoader", "CGCommandBindingLoader", &SWIGTYPE_p_CGCommandBindingLoader,_proxy__wrap_new_CGCommandBindingLoader, swig_delete_CGCommandBindingLoader, swig_CGCommandBindingLoader_methods, swig_CGCommandBindingLoader_attributes, &swig_CGCommandBindingLoader_Sf_SwigStatic, swig_CGCommandBindingLoader_meta, swig_CGCommandBindingLoader_bases, swig_CGCommandBindingLoader_base_names };

static int _wrap_new_CGBillboardRenderer(lua_State* L) {
  {
    int SWIG_arg = 0;
    uint arg1 ;
    uint arg2 ;
    CGBillboardRenderer *result = 0 ;
    
    SWIG_check_num_args("CGBillboardRenderer::CGBillboardRenderer",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CGBillboardRenderer::CGBillboardRenderer",1,"uint");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGBillboardRenderer::CGBillboardRenderer",2,"uint");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
    arg1 = (uint)lua_tonumber(L, 1);
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGBillboardRenderer *)new CGBillboardRenderer(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBillboardRenderer,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboardRenderer_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboardRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGBillboardRenderer::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboardRenderer::Reset",1,"CGBillboardRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboardRenderer,0))){
      SWIG_fail_ptr("CGBillboardRenderer_Reset",1,SWIGTYPE_p_CGBillboardRenderer);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboardRenderer_Begin(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboardRenderer *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGBillboardRenderer::Begin",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboardRenderer::Begin",1,"CGBillboardRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGBillboardRenderer::Begin",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboardRenderer,0))){
      SWIG_fail_ptr("CGBillboardRenderer_Begin",1,SWIGTYPE_p_CGBillboardRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGBillboardRenderer_Begin",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->Begin(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboardRenderer_AddBillboards(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboardRenderer *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect2 *arg3 = 0 ;
    CGColor *arg4 = 0 ;
    uint arg5 ;
    
    SWIG_check_num_args("CGBillboardRenderer::AddBillboards",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboardRenderer::AddBillboards",1,"CGBillboardRenderer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGBillboardRenderer::AddBillboards",2,"CGVect3 *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CGBillboardRenderer::AddBillboards",3,"CGVect2 *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CGBillboardRenderer::AddBillboards",4,"CGColor *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGBillboardRenderer::AddBillboards",5,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboardRenderer,0))){
      SWIG_fail_ptr("CGBillboardRenderer_AddBillboards",1,SWIGTYPE_p_CGBillboardRenderer);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGBillboardRenderer_AddBillboards",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect2,0))){
      SWIG_fail_ptr("CGBillboardRenderer_AddBillboards",3,SWIGTYPE_p_CGVect2);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGBillboardRenderer_AddBillboards",4,SWIGTYPE_p_CGColor);
    }
    
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
    arg5 = (uint)lua_tonumber(L, 5);
    (arg1)->AddBillboards(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboardRenderer_End(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboardRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGBillboardRenderer::End",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboardRenderer::End",1,"CGBillboardRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboardRenderer,0))){
      SWIG_fail_ptr("CGBillboardRenderer_End",1,SWIGTYPE_p_CGBillboardRenderer);
    }
    
    (arg1)->End();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboardRenderer_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboardRenderer *arg1 = 0 ;
    
    SWIG_check_num_args("CGBillboardRenderer::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboardRenderer::Render",1,"CGBillboardRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboardRenderer,0))){
      SWIG_fail_ptr("CGBillboardRenderer_Render",1,SWIGTYPE_p_CGBillboardRenderer);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBillboardRenderer(void *obj) {
CGBillboardRenderer *arg1 = (CGBillboardRenderer *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBillboardRenderer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBillboardRenderer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBillboardRenderer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBillboardRenderer_methods[]= {
    { "Reset", _wrap_CGBillboardRenderer_Reset},
    { "Begin", _wrap_CGBillboardRenderer_Begin},
    { "AddBillboards", _wrap_CGBillboardRenderer_AddBillboards},
    { "End", _wrap_CGBillboardRenderer_End},
    { "Render", _wrap_CGBillboardRenderer_Render},
    {0,0}
};
static swig_lua_method swig_CGBillboardRenderer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBillboardRenderer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBillboardRenderer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBillboardRenderer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBillboardRenderer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBillboardRenderer_Sf_SwigStatic = {
    "CGBillboardRenderer",
    swig_CGBillboardRenderer_Sf_SwigStatic_methods,
    swig_CGBillboardRenderer_Sf_SwigStatic_attributes,
    swig_CGBillboardRenderer_Sf_SwigStatic_constants,
    swig_CGBillboardRenderer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBillboardRenderer_bases[] = {0,0};
static const char *swig_CGBillboardRenderer_base_names[] = {"CGSceneLeaf *",0};
static swig_lua_class _wrap_class_CGBillboardRenderer = { "CGBillboardRenderer", "CGBillboardRenderer", &SWIGTYPE_p_CGBillboardRenderer,_proxy__wrap_new_CGBillboardRenderer, swig_delete_CGBillboardRenderer, swig_CGBillboardRenderer_methods, swig_CGBillboardRenderer_attributes, &swig_CGBillboardRenderer_Sf_SwigStatic, swig_CGBillboardRenderer_meta, swig_CGBillboardRenderer_bases, swig_CGBillboardRenderer_base_names };

static int _wrap_new_CGBillboard(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard *result = 0 ;
    
    SWIG_check_num_args("CGBillboard::CGBillboard",0,0)
    result = (CGBillboard *)new CGBillboard();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBillboard,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBillboard(void *obj) {
CGBillboard *arg1 = (CGBillboard *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBillboard(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBillboard);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBillboard_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBillboard_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGBillboard_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBillboard_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBillboard_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBillboard_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBillboard_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBillboard_Sf_SwigStatic = {
    "CGBillboard",
    swig_CGBillboard_Sf_SwigStatic_methods,
    swig_CGBillboard_Sf_SwigStatic_attributes,
    swig_CGBillboard_Sf_SwigStatic_constants,
    swig_CGBillboard_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBillboard_bases[] = {0,0};
static const char *swig_CGBillboard_base_names[] = {"CGSceneGroup *",0};
static swig_lua_class _wrap_class_CGBillboard = { "CGBillboard", "CGBillboard", &SWIGTYPE_p_CGBillboard,_proxy__wrap_new_CGBillboard, swig_delete_CGBillboard, swig_CGBillboard_methods, swig_CGBillboard_attributes, &swig_CGBillboard_Sf_SwigStatic, swig_CGBillboard_meta, swig_CGBillboard_bases, swig_CGBillboard_base_names };

static int _wrap_new_CGBillboard_AxisAlign(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard_AxisAlign *result = 0 ;
    
    SWIG_check_num_args("CGBillboard_AxisAlign::CGBillboard_AxisAlign",0,0)
    result = (CGBillboard_AxisAlign *)new CGBillboard_AxisAlign();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBillboard_AxisAlign,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboard_AxisAlign_SetAxis(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard_AxisAlign *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    bool arg4 ;
    
    SWIG_check_num_args("CGBillboard_AxisAlign::SetAxis",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboard_AxisAlign::SetAxis",1,"CGBillboard_AxisAlign *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGBillboard_AxisAlign::SetAxis",2,"bool");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("CGBillboard_AxisAlign::SetAxis",3,"bool");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("CGBillboard_AxisAlign::SetAxis",4,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboard_AxisAlign,0))){
      SWIG_fail_ptr("CGBillboard_AxisAlign_SetAxis",1,SWIGTYPE_p_CGBillboard_AxisAlign);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    arg3 = (lua_toboolean(L, 3)!=0);
    arg4 = (lua_toboolean(L, 4)!=0);
    (arg1)->SetAxis(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboard_AxisAlign_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard_AxisAlign *arg1 = 0 ;
    
    SWIG_check_num_args("CGBillboard_AxisAlign::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboard_AxisAlign::Render",1,"CGBillboard_AxisAlign *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboard_AxisAlign,0))){
      SWIG_fail_ptr("CGBillboard_AxisAlign_Render",1,SWIGTYPE_p_CGBillboard_AxisAlign);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBillboard_AxisAlign(void *obj) {
CGBillboard_AxisAlign *arg1 = (CGBillboard_AxisAlign *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBillboard_AxisAlign(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBillboard_AxisAlign);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBillboard_AxisAlign_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBillboard_AxisAlign_methods[]= {
    { "SetAxis", _wrap_CGBillboard_AxisAlign_SetAxis},
    { "Render", _wrap_CGBillboard_AxisAlign_Render},
    {0,0}
};
static swig_lua_method swig_CGBillboard_AxisAlign_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBillboard_AxisAlign_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBillboard_AxisAlign_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBillboard_AxisAlign_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBillboard_AxisAlign_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBillboard_AxisAlign_Sf_SwigStatic = {
    "CGBillboard_AxisAlign",
    swig_CGBillboard_AxisAlign_Sf_SwigStatic_methods,
    swig_CGBillboard_AxisAlign_Sf_SwigStatic_attributes,
    swig_CGBillboard_AxisAlign_Sf_SwigStatic_constants,
    swig_CGBillboard_AxisAlign_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBillboard_AxisAlign_bases[] = {0,0};
static const char *swig_CGBillboard_AxisAlign_base_names[] = {"CGBillboard *",0};
static swig_lua_class _wrap_class_CGBillboard_AxisAlign = { "CGBillboard_AxisAlign", "CGBillboard_AxisAlign", &SWIGTYPE_p_CGBillboard_AxisAlign,_proxy__wrap_new_CGBillboard_AxisAlign, swig_delete_CGBillboard_AxisAlign, swig_CGBillboard_AxisAlign_methods, swig_CGBillboard_AxisAlign_attributes, &swig_CGBillboard_AxisAlign_Sf_SwigStatic, swig_CGBillboard_AxisAlign_meta, swig_CGBillboard_AxisAlign_bases, swig_CGBillboard_AxisAlign_base_names };

static int _wrap_new_CGBillboard_ScrAlign(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard_ScrAlign *result = 0 ;
    
    SWIG_check_num_args("CGBillboard_ScrAlign::CGBillboard_ScrAlign",0,0)
    result = (CGBillboard_ScrAlign *)new CGBillboard_ScrAlign();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBillboard_ScrAlign,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboard_ScrAlign_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard_ScrAlign *arg1 = 0 ;
    
    SWIG_check_num_args("CGBillboard_ScrAlign::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboard_ScrAlign::Render",1,"CGBillboard_ScrAlign *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboard_ScrAlign,0))){
      SWIG_fail_ptr("CGBillboard_ScrAlign_Render",1,SWIGTYPE_p_CGBillboard_ScrAlign);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBillboard_ScrAlign(void *obj) {
CGBillboard_ScrAlign *arg1 = (CGBillboard_ScrAlign *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBillboard_ScrAlign(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBillboard_ScrAlign);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBillboard_ScrAlign_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBillboard_ScrAlign_methods[]= {
    { "Render", _wrap_CGBillboard_ScrAlign_Render},
    {0,0}
};
static swig_lua_method swig_CGBillboard_ScrAlign_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBillboard_ScrAlign_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBillboard_ScrAlign_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBillboard_ScrAlign_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBillboard_ScrAlign_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBillboard_ScrAlign_Sf_SwigStatic = {
    "CGBillboard_ScrAlign",
    swig_CGBillboard_ScrAlign_Sf_SwigStatic_methods,
    swig_CGBillboard_ScrAlign_Sf_SwigStatic_attributes,
    swig_CGBillboard_ScrAlign_Sf_SwigStatic_constants,
    swig_CGBillboard_ScrAlign_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBillboard_ScrAlign_bases[] = {0,0};
static const char *swig_CGBillboard_ScrAlign_base_names[] = {"CGBillboard *",0};
static swig_lua_class _wrap_class_CGBillboard_ScrAlign = { "CGBillboard_ScrAlign", "CGBillboard_ScrAlign", &SWIGTYPE_p_CGBillboard_ScrAlign,_proxy__wrap_new_CGBillboard_ScrAlign, swig_delete_CGBillboard_ScrAlign, swig_CGBillboard_ScrAlign_methods, swig_CGBillboard_ScrAlign_attributes, &swig_CGBillboard_ScrAlign_Sf_SwigStatic, swig_CGBillboard_ScrAlign_meta, swig_CGBillboard_ScrAlign_bases, swig_CGBillboard_ScrAlign_base_names };

static int _wrap_new_CGBillboard_WorldAlign(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard_WorldAlign *result = 0 ;
    
    SWIG_check_num_args("CGBillboard_WorldAlign::CGBillboard_WorldAlign",0,0)
    result = (CGBillboard_WorldAlign *)new CGBillboard_WorldAlign();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBillboard_WorldAlign,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGBillboard_WorldAlign_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGBillboard_WorldAlign *arg1 = 0 ;
    
    SWIG_check_num_args("CGBillboard_WorldAlign::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGBillboard_WorldAlign::Render",1,"CGBillboard_WorldAlign *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGBillboard_WorldAlign,0))){
      SWIG_fail_ptr("CGBillboard_WorldAlign_Render",1,SWIGTYPE_p_CGBillboard_WorldAlign);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGBillboard_WorldAlign(void *obj) {
CGBillboard_WorldAlign *arg1 = (CGBillboard_WorldAlign *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGBillboard_WorldAlign(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGBillboard_WorldAlign);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGBillboard_WorldAlign_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGBillboard_WorldAlign_methods[]= {
    { "Render", _wrap_CGBillboard_WorldAlign_Render},
    {0,0}
};
static swig_lua_method swig_CGBillboard_WorldAlign_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGBillboard_WorldAlign_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGBillboard_WorldAlign_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGBillboard_WorldAlign_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGBillboard_WorldAlign_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGBillboard_WorldAlign_Sf_SwigStatic = {
    "CGBillboard_WorldAlign",
    swig_CGBillboard_WorldAlign_Sf_SwigStatic_methods,
    swig_CGBillboard_WorldAlign_Sf_SwigStatic_attributes,
    swig_CGBillboard_WorldAlign_Sf_SwigStatic_constants,
    swig_CGBillboard_WorldAlign_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGBillboard_WorldAlign_bases[] = {0,0};
static const char *swig_CGBillboard_WorldAlign_base_names[] = {"CGBillboard *",0};
static swig_lua_class _wrap_class_CGBillboard_WorldAlign = { "CGBillboard_WorldAlign", "CGBillboard_WorldAlign", &SWIGTYPE_p_CGBillboard_WorldAlign,_proxy__wrap_new_CGBillboard_WorldAlign, swig_delete_CGBillboard_WorldAlign, swig_CGBillboard_WorldAlign_methods, swig_CGBillboard_WorldAlign_attributes, &swig_CGBillboard_WorldAlign_Sf_SwigStatic, swig_CGBillboard_WorldAlign_meta, swig_CGBillboard_WorldAlign_bases, swig_CGBillboard_WorldAlign_base_names };

static int _wrap_CGParticle_m_fEnergy_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGParticle::m_fEnergy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticle::m_fEnergy",1,"CGParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGParticle::m_fEnergy",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticle,0))){
      SWIG_fail_ptr("CGParticle_m_fEnergy_set",1,SWIGTYPE_p_CGParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fEnergy = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticle_m_fEnergy_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGParticle::m_fEnergy",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticle::m_fEnergy",1,"CGParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticle,0))){
      SWIG_fail_ptr("CGParticle_m_fEnergy_get",1,SWIGTYPE_p_CGParticle);
    }
    
    result = (float) ((arg1)->m_fEnergy);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGParticle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticle *result = 0 ;
    
    SWIG_check_num_args("CGParticle::CGParticle",0,0)
    result = (CGParticle *)new CGParticle();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGParticle,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGParticle(void *obj) {
CGParticle *arg1 = (CGParticle *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGParticle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGParticle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGParticle_attributes[] = {
    { "m_fEnergy", _wrap_CGParticle_m_fEnergy_get, _wrap_CGParticle_m_fEnergy_set },
    {0,0,0}
};
static swig_lua_method swig_CGParticle_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGParticle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGParticle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGParticle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGParticle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGParticle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGParticle_Sf_SwigStatic = {
    "CGParticle",
    swig_CGParticle_Sf_SwigStatic_methods,
    swig_CGParticle_Sf_SwigStatic_attributes,
    swig_CGParticle_Sf_SwigStatic_constants,
    swig_CGParticle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGParticle_bases[] = {0};
static const char *swig_CGParticle_base_names[] = {0};
static swig_lua_class _wrap_class_CGParticle = { "CGParticle", "CGParticle", &SWIGTYPE_p_CGParticle,_proxy__wrap_new_CGParticle, swig_delete_CGParticle, swig_CGParticle_methods, swig_CGParticle_attributes, &swig_CGParticle_Sf_SwigStatic, swig_CGParticle_meta, swig_CGParticle_bases, swig_CGParticle_base_names };

static int _wrap_CGParticleSystemGenerator_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    
    SWIG_check_num_args("CGParticleSystemGenerator::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::Init",1,"CGParticleSystemGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_Init",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_SetMaxParticles(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGParticleSystemGenerator::SetMaxParticles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::SetMaxParticles",1,"CGParticleSystemGenerator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGParticleSystemGenerator::SetMaxParticles",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_SetMaxParticles",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetMaxParticles(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_uiMaxParticles(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGParticleSystemGenerator::uiMaxParticles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::uiMaxParticles",1,"CGParticleSystemGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_uiMaxParticles",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    result = (uint)(arg1)->uiMaxParticles();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_SetEnergyFact__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGParticleSystemGenerator::SetEnergyFact",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::SetEnergyFact",1,"CGParticleSystemGenerator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGParticleSystemGenerator::SetEnergyFact",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGParticleSystemGenerator::SetEnergyFact",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_SetEnergyFact",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetEnergyFact(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_SetEnergyFact__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGParticleSystemGenerator::SetEnergyFact",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::SetEnergyFact",1,"CGParticleSystemGenerator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGParticleSystemGenerator::SetEnergyFact",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_SetEnergyFact",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetEnergyFact(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_SetEnergyFact(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGParticleSystemGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGParticleSystemGenerator_SetEnergyFact__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGParticleSystemGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGParticleSystemGenerator_SetEnergyFact__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGParticleSystemGenerator_SetEnergyFact'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGParticleSystemGenerator::SetEnergyFact(float,float)\n"
    "    CGParticleSystemGenerator::SetEnergyFact(float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGParticleSystemGenerator_SetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGParticleSystemGenerator::SetShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::SetShader",1,"CGParticleSystemGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGParticleSystemGenerator::SetShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_SetShader",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_SetShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_fGetInitialEnergy(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGParticleSystemGenerator::fGetInitialEnergy",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::fGetInitialEnergy",1,"CGParticleSystemGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_fGetInitialEnergy",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    result = (float)(arg1)->fGetInitialEnergy();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_fGetInitialEnergyRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGParticleSystemGenerator::fGetInitialEnergyRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::fGetInitialEnergyRnds",1,"CGParticleSystemGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_fGetInitialEnergyRnds",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    result = (float)(arg1)->fGetInitialEnergyRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGParticleSystemGenerator::poGetShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::poGetShader",1,"CGParticleSystemGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_poGetShader",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    result = (CGShader *)(arg1)->poGetShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemGenerator_poCreateParticlePool(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    CGParticle *result = 0 ;
    
    SWIG_check_num_args("CGParticleSystemGenerator::poCreateParticlePool",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemGenerator::poCreateParticlePool",1,"CGParticleSystemGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("CGParticleSystemGenerator_poCreateParticlePool",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    result = (CGParticle *)(arg1)->poCreateParticlePool();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGParticle,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGParticleSystemGenerator(void *obj) {
CGParticleSystemGenerator *arg1 = (CGParticleSystemGenerator *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGParticleSystemGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGParticleSystemGenerator_methods[]= {
    { "Init", _wrap_CGParticleSystemGenerator_Init},
    { "SetMaxParticles", _wrap_CGParticleSystemGenerator_SetMaxParticles},
    { "uiMaxParticles", _wrap_CGParticleSystemGenerator_uiMaxParticles},
    { "SetEnergyFact", _wrap_CGParticleSystemGenerator_SetEnergyFact},
    { "SetShader", _wrap_CGParticleSystemGenerator_SetShader},
    { "fGetInitialEnergy", _wrap_CGParticleSystemGenerator_fGetInitialEnergy},
    { "fGetInitialEnergyRnds", _wrap_CGParticleSystemGenerator_fGetInitialEnergyRnds},
    { "poGetShader", _wrap_CGParticleSystemGenerator_poGetShader},
    { "poCreateParticlePool", _wrap_CGParticleSystemGenerator_poCreateParticlePool},
    {0,0}
};
static swig_lua_method swig_CGParticleSystemGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGParticleSystemGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGParticleSystemGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGParticleSystemGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGParticleSystemGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGParticleSystemGenerator_Sf_SwigStatic = {
    "CGParticleSystemGenerator",
    swig_CGParticleSystemGenerator_Sf_SwigStatic_methods,
    swig_CGParticleSystemGenerator_Sf_SwigStatic_attributes,
    swig_CGParticleSystemGenerator_Sf_SwigStatic_constants,
    swig_CGParticleSystemGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGParticleSystemGenerator_bases[] = {0,0};
static const char *swig_CGParticleSystemGenerator_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGParticleSystemGenerator = { "CGParticleSystemGenerator", "CGParticleSystemGenerator", &SWIGTYPE_p_CGParticleSystemGenerator,0, swig_delete_CGParticleSystemGenerator, swig_CGParticleSystemGenerator_methods, swig_CGParticleSystemGenerator_attributes, &swig_CGParticleSystemGenerator_Sf_SwigStatic, swig_CGParticleSystemGenerator_meta, swig_CGParticleSystemGenerator_bases, swig_CGParticleSystemGenerator_base_names };

static int _wrap_new_CGParticleSystemInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemGenerator *arg1 = 0 ;
    CGParticleSystemInstance *result = 0 ;
    
    SWIG_check_num_args("CGParticleSystemInstance::CGParticleSystemInstance",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::CGParticleSystemInstance",1,"CGParticleSystemGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemGenerator,0))){
      SWIG_fail_ptr("new_CGParticleSystemInstance",1,SWIGTYPE_p_CGParticleSystemGenerator);
    }
    
    result = (CGParticleSystemInstance *)new CGParticleSystemInstance(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGParticleSystemInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemInstance_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemInstance *arg1 = 0 ;
    
    SWIG_check_num_args("CGParticleSystemInstance::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::Render",1,"CGParticleSystemInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGParticleSystemInstance_Render",1,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemInstance_Regenerate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemInstance *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGParticleSystemInstance::Regenerate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::Regenerate",1,"CGParticleSystemInstance *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGParticleSystemInstance::Regenerate",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGParticleSystemInstance_Regenerate",1,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->Regenerate(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemInstance_bRegenerate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemInstance *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGParticleSystemInstance::bRegenerate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::bRegenerate",1,"CGParticleSystemInstance const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGParticleSystemInstance_bRegenerate",1,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    result = (bool)((CGParticleSystemInstance const *)arg1)->bRegenerate();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemInstance_poGetParticlePool(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemInstance *arg1 = 0 ;
    CGParticle *result = 0 ;
    
    SWIG_check_num_args("CGParticleSystemInstance::poGetParticlePool",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::poGetParticlePool",1,"CGParticleSystemInstance const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGParticleSystemInstance_poGetParticlePool",1,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    result = (CGParticle *)((CGParticleSystemInstance const *)arg1)->poGetParticlePool();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGParticle,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemInstance_poGetMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemInstance *arg1 = 0 ;
    CGUnmanagedMesh *result = 0 ;
    
    SWIG_check_num_args("CGParticleSystemInstance::poGetMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::poGetMesh",1,"CGParticleSystemInstance const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGParticleSystemInstance_poGetMesh",1,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    result = (CGUnmanagedMesh *)((CGParticleSystemInstance const *)arg1)->poGetMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGUnmanagedMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemInstance_SetLiveParticles(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemInstance *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGParticleSystemInstance::SetLiveParticles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::SetLiveParticles",1,"CGParticleSystemInstance *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGParticleSystemInstance::SetLiveParticles",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGParticleSystemInstance_SetLiveParticles",1,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetLiveParticles(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGParticleSystemInstance_uiLiveParticles(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGParticleSystemInstance *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGParticleSystemInstance::uiLiveParticles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGParticleSystemInstance::uiLiveParticles",1,"CGParticleSystemInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGParticleSystemInstance_uiLiveParticles",1,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    result = (uint)(arg1)->uiLiveParticles();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGParticleSystemInstance(void *obj) {
CGParticleSystemInstance *arg1 = (CGParticleSystemInstance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGParticleSystemInstance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGParticleSystemInstance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGParticleSystemInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGParticleSystemInstance_methods[]= {
    { "Render", _wrap_CGParticleSystemInstance_Render},
    { "Regenerate", _wrap_CGParticleSystemInstance_Regenerate},
    { "bRegenerate", _wrap_CGParticleSystemInstance_bRegenerate},
    { "poGetParticlePool", _wrap_CGParticleSystemInstance_poGetParticlePool},
    { "poGetMesh", _wrap_CGParticleSystemInstance_poGetMesh},
    { "SetLiveParticles", _wrap_CGParticleSystemInstance_SetLiveParticles},
    { "uiLiveParticles", _wrap_CGParticleSystemInstance_uiLiveParticles},
    {0,0}
};
static swig_lua_method swig_CGParticleSystemInstance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGParticleSystemInstance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGParticleSystemInstance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGParticleSystemInstance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGParticleSystemInstance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGParticleSystemInstance_Sf_SwigStatic = {
    "CGParticleSystemInstance",
    swig_CGParticleSystemInstance_Sf_SwigStatic_methods,
    swig_CGParticleSystemInstance_Sf_SwigStatic_attributes,
    swig_CGParticleSystemInstance_Sf_SwigStatic_constants,
    swig_CGParticleSystemInstance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGParticleSystemInstance_bases[] = {0,0};
static const char *swig_CGParticleSystemInstance_base_names[] = {"CGSceneSwitch *",0};
static swig_lua_class _wrap_class_CGParticleSystemInstance = { "CGParticleSystemInstance", "CGParticleSystemInstance", &SWIGTYPE_p_CGParticleSystemInstance,_proxy__wrap_new_CGParticleSystemInstance, swig_delete_CGParticleSystemInstance, swig_CGParticleSystemInstance_methods, swig_CGParticleSystemInstance_attributes, &swig_CGParticleSystemInstance_Sf_SwigStatic, swig_CGParticleSystemInstance_meta, swig_CGParticleSystemInstance_bases, swig_CGParticleSystemInstance_base_names };

static int _wrap_CGPSGGeneric_SetColorsPars__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    CGColor arg2 ;
    CGColor arg3 ;
    float arg4 ;
    float arg5 ;
    CGColor *argp2 ;
    CGColor *argp3 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetColorsPars",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",1,"CGPSGGeneric *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",2,"CGColor");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",3,"CGColor");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",2,SWIGTYPE_p_CGColor);
    }
    arg2 = *argp2;
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",3,SWIGTYPE_p_CGColor);
    }
    arg3 = *argp3;
    
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetColorsPars(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetColorsPars__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    CGColor arg2 ;
    CGColor arg3 ;
    float arg4 ;
    CGColor *argp2 ;
    CGColor *argp3 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetColorsPars",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",1,"CGPSGGeneric *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",2,"CGColor");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",3,"CGColor");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",2,SWIGTYPE_p_CGColor);
    }
    arg2 = *argp2;
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",3,SWIGTYPE_p_CGColor);
    }
    arg3 = *argp3;
    
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetColorsPars(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetColorsPars__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    CGColor arg2 ;
    CGColor arg3 ;
    CGColor *argp2 ;
    CGColor *argp3 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetColorsPars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",1,"CGPSGGeneric *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",2,"CGColor");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGPSGGeneric::SetColorsPars",3,"CGColor");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",2,SWIGTYPE_p_CGColor);
    }
    arg2 = *argp2;
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetColorsPars",3,SWIGTYPE_p_CGColor);
    }
    arg3 = *argp3;
    
    (arg1)->SetColorsPars(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetColorsPars(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CGPSGGeneric_SetColorsPars__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGPSGGeneric_SetColorsPars__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGColor, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGPSGGeneric_SetColorsPars__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGPSGGeneric_SetColorsPars'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGPSGGeneric::SetColorsPars(CGColor,CGColor,float,float)\n"
    "    CGPSGGeneric::SetColorsPars(CGColor,CGColor,float)\n"
    "    CGPSGGeneric::SetColorsPars(CGColor,CGColor)\n");
  lua_error(L);return 0;
}


static int _wrap_CGPSGGeneric_SetSizePars__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetSizePars",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetSizePars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetSizePars(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetSizePars__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetSizePars",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetSizePars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetSizePars(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetSizePars__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetSizePars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetSizePars",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetSizePars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetSizePars(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetSizePars(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGPSGGeneric_SetSizePars__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGPSGGeneric_SetSizePars__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGPSGGeneric_SetSizePars__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGPSGGeneric_SetSizePars'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGPSGGeneric::SetSizePars(float,float,float,float)\n"
    "    CGPSGGeneric::SetSizePars(float,float,float)\n"
    "    CGPSGGeneric::SetSizePars(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGPSGGeneric_SetAnglePars__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetAnglePars",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetAnglePars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetAnglePars(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetAnglePars__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetAnglePars",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetAnglePars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetAnglePars(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetAnglePars__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetAnglePars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetAnglePars",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetAnglePars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetAnglePars(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetAnglePars(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGPSGGeneric_SetAnglePars__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGPSGGeneric_SetAnglePars__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGPSGGeneric_SetAnglePars__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGPSGGeneric_SetAnglePars'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGPSGGeneric::SetAnglePars(float,float,float,float)\n"
    "    CGPSGGeneric::SetAnglePars(float,float,float)\n"
    "    CGPSGGeneric::SetAnglePars(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGPSGGeneric_SetRadiusPars__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetRadiusPars",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetRadiusPars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetRadiusPars(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetRadiusPars__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetRadiusPars",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetRadiusPars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->SetRadiusPars(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetRadiusPars__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGPSGGeneric::SetRadiusPars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",1,"CGPSGGeneric *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGeneric::SetRadiusPars",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_SetRadiusPars",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetRadiusPars(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_SetRadiusPars(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGPSGGeneric_SetRadiusPars__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CGPSGGeneric_SetRadiusPars__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSGGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CGPSGGeneric_SetRadiusPars__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGPSGGeneric_SetRadiusPars'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGPSGGeneric::SetRadiusPars(float,float,float,float)\n"
    "    CGPSGGeneric::SetRadiusPars(float,float,float)\n"
    "    CGPSGGeneric::SetRadiusPars(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CGPSGGeneric_oGetInitialColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGPSGGeneric::oGetInitialColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::oGetInitialColor",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_oGetInitialColor",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (CGColor *) &(arg1)->oGetInitialColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_oGetFinalColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGPSGGeneric::oGetFinalColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::oGetFinalColor",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_oGetFinalColor",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (CGColor *) &(arg1)->oGetFinalColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetInitialColorRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetInitialColorRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetInitialColorRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetInitialColorRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetInitialColorRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetFinalColorRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetFinalColorRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetFinalColorRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetFinalColorRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetFinalColorRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetInitialSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetInitialSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetInitialSize",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetInitialSize",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetInitialSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetFinalSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetFinalSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetFinalSize",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetFinalSize",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetFinalSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetInitialSizeRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetInitialSizeRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetInitialSizeRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetInitialSizeRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetInitialSizeRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetFinalSizeRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetFinalSizeRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetFinalSizeRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetFinalSizeRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetFinalSizeRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetInitialAngle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetInitialAngle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetInitialAngle",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetInitialAngle",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetInitialAngle();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetFinalAngle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetFinalAngle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetFinalAngle",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetFinalAngle",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetFinalAngle();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetInitialAngleRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetInitialAngleRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetInitialAngleRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetInitialAngleRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetInitialAngleRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetFinalAngleRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetFinalAngleRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetFinalAngleRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetFinalAngleRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetFinalAngleRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetInnerRadius(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetInnerRadius",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetInnerRadius",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetInnerRadius",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetInnerRadius();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetOuterRadius(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetOuterRadius",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetOuterRadius",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetOuterRadius",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetOuterRadius();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetInnerRadiusRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetInnerRadiusRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetInnerRadiusRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetInnerRadiusRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetInnerRadiusRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGeneric_fGetOuterRadiusRnds(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGeneric *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGeneric::fGetOuterRadiusRnds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGeneric::fGetOuterRadiusRnds",1,"CGPSGGeneric *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGeneric,0))){
      SWIG_fail_ptr("CGPSGGeneric_fGetOuterRadiusRnds",1,SWIGTYPE_p_CGPSGGeneric);
    }
    
    result = (float)(arg1)->fGetOuterRadiusRnds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPSGGeneric(void *obj) {
CGPSGGeneric *arg1 = (CGPSGGeneric *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGPSGGeneric_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPSGGeneric_methods[]= {
    { "SetColorsPars", _wrap_CGPSGGeneric_SetColorsPars},
    { "SetSizePars", _wrap_CGPSGGeneric_SetSizePars},
    { "SetAnglePars", _wrap_CGPSGGeneric_SetAnglePars},
    { "SetRadiusPars", _wrap_CGPSGGeneric_SetRadiusPars},
    { "oGetInitialColor", _wrap_CGPSGGeneric_oGetInitialColor},
    { "oGetFinalColor", _wrap_CGPSGGeneric_oGetFinalColor},
    { "fGetInitialColorRnds", _wrap_CGPSGGeneric_fGetInitialColorRnds},
    { "fGetFinalColorRnds", _wrap_CGPSGGeneric_fGetFinalColorRnds},
    { "fGetInitialSize", _wrap_CGPSGGeneric_fGetInitialSize},
    { "fGetFinalSize", _wrap_CGPSGGeneric_fGetFinalSize},
    { "fGetInitialSizeRnds", _wrap_CGPSGGeneric_fGetInitialSizeRnds},
    { "fGetFinalSizeRnds", _wrap_CGPSGGeneric_fGetFinalSizeRnds},
    { "fGetInitialAngle", _wrap_CGPSGGeneric_fGetInitialAngle},
    { "fGetFinalAngle", _wrap_CGPSGGeneric_fGetFinalAngle},
    { "fGetInitialAngleRnds", _wrap_CGPSGGeneric_fGetInitialAngleRnds},
    { "fGetFinalAngleRnds", _wrap_CGPSGGeneric_fGetFinalAngleRnds},
    { "fGetInnerRadius", _wrap_CGPSGGeneric_fGetInnerRadius},
    { "fGetOuterRadius", _wrap_CGPSGGeneric_fGetOuterRadius},
    { "fGetInnerRadiusRnds", _wrap_CGPSGGeneric_fGetInnerRadiusRnds},
    { "fGetOuterRadiusRnds", _wrap_CGPSGGeneric_fGetOuterRadiusRnds},
    {0,0}
};
static swig_lua_method swig_CGPSGGeneric_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPSGGeneric_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPSGGeneric_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPSGGeneric_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPSGGeneric_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPSGGeneric_Sf_SwigStatic = {
    "CGPSGGeneric",
    swig_CGPSGGeneric_Sf_SwigStatic_methods,
    swig_CGPSGGeneric_Sf_SwigStatic_attributes,
    swig_CGPSGGeneric_Sf_SwigStatic_constants,
    swig_CGPSGGeneric_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPSGGeneric_bases[] = {0,0};
static const char *swig_CGPSGGeneric_base_names[] = {"CGParticleSystemGenerator *",0};
static swig_lua_class _wrap_class_CGPSGGeneric = { "CGPSGGeneric", "CGPSGGeneric", &SWIGTYPE_p_CGPSGGeneric,0, swig_delete_CGPSGGeneric, swig_CGPSGGeneric_methods, swig_CGPSGGeneric_attributes, &swig_CGPSGGeneric_Sf_SwigStatic, swig_CGPSGGeneric_meta, swig_CGPSGGeneric_bases, swig_CGPSGGeneric_base_names };

static int _wrap_CGPSGGenericQuadParticle_m_oColor_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oColor",1,"CGPSGGenericQuadParticle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oColor",2,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oColor_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oColor_set",2,SWIGTYPE_p_CGColor);
    }
    
    if (arg1) (arg1)->m_oColor = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_oColor_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oColor",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oColor_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (CGColor *)& ((arg1)->m_oColor);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fSize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fSize",1,"CGPSGGenericQuadParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fSize",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fSize_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fSize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fSize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fSize",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fSize_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (float) ((arg1)->m_fSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fAngle_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fAngle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fAngle",1,"CGPSGGenericQuadParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fAngle",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fAngle_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fAngle = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fAngle_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fAngle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fAngle",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fAngle_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (float) ((arg1)->m_fAngle);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fRadius_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fRadius",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fRadius",1,"CGPSGGenericQuadParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fRadius",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fRadius_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fRadius = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fRadius_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fRadius",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fRadius",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fRadius_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (float) ((arg1)->m_fRadius);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_oDColor_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oDColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oDColor",1,"CGPSGGenericQuadParticle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oDColor",2,"CGColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oDColor_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oDColor_set",2,SWIGTYPE_p_CGColor);
    }
    
    if (arg1) (arg1)->m_oDColor = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_oDColor_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGColor *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oDColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oDColor",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oDColor_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (CGColor *)& ((arg1)->m_oDColor);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGColor,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fDSize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fDSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDSize",1,"CGPSGGenericQuadParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDSize",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fDSize_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fDSize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fDSize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fDSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDSize",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fDSize_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (float) ((arg1)->m_fDSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fDAngle_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fDAngle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDAngle",1,"CGPSGGenericQuadParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDAngle",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fDAngle_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fDAngle = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fDAngle_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fDAngle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDAngle",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fDAngle_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (float) ((arg1)->m_fDAngle);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fDRadius_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fDRadius",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDRadius",1,"CGPSGGenericQuadParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDRadius",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fDRadius_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fDRadius = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fDRadius_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fDRadius",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fDRadius",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fDRadius_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (float) ((arg1)->m_fDRadius);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_oPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oPos",1,"CGPSGGenericQuadParticle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oPos",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oPos_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oPos_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oPos = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_oPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oPos",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oPos_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_oDir_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oDir",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oDir",1,"CGPSGGenericQuadParticle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oDir",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oDir_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oDir_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oDir = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_oDir_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_oDir",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_oDir",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_oDir_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oDir);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fIEnergy_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fIEnergy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fIEnergy",1,"CGPSGGenericQuadParticle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fIEnergy",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fIEnergy_set",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fIEnergy = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadParticle_m_fIEnergy_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::m_fIEnergy",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadParticle::m_fIEnergy",1,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadParticle_m_fIEnergy_get",1,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    result = (float) ((arg1)->m_fIEnergy);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGPSGGenericQuadParticle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadParticle *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadParticle::CGPSGGenericQuadParticle",0,0)
    result = (CGPSGGenericQuadParticle *)new CGPSGGenericQuadParticle();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPSGGenericQuadParticle,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPSGGenericQuadParticle(void *obj) {
CGPSGGenericQuadParticle *arg1 = (CGPSGGenericQuadParticle *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPSGGenericQuadParticle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPSGGenericQuadParticle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPSGGenericQuadParticle_attributes[] = {
    { "m_oColor", _wrap_CGPSGGenericQuadParticle_m_oColor_get, _wrap_CGPSGGenericQuadParticle_m_oColor_set },
    { "m_fSize", _wrap_CGPSGGenericQuadParticle_m_fSize_get, _wrap_CGPSGGenericQuadParticle_m_fSize_set },
    { "m_fAngle", _wrap_CGPSGGenericQuadParticle_m_fAngle_get, _wrap_CGPSGGenericQuadParticle_m_fAngle_set },
    { "m_fRadius", _wrap_CGPSGGenericQuadParticle_m_fRadius_get, _wrap_CGPSGGenericQuadParticle_m_fRadius_set },
    { "m_oDColor", _wrap_CGPSGGenericQuadParticle_m_oDColor_get, _wrap_CGPSGGenericQuadParticle_m_oDColor_set },
    { "m_fDSize", _wrap_CGPSGGenericQuadParticle_m_fDSize_get, _wrap_CGPSGGenericQuadParticle_m_fDSize_set },
    { "m_fDAngle", _wrap_CGPSGGenericQuadParticle_m_fDAngle_get, _wrap_CGPSGGenericQuadParticle_m_fDAngle_set },
    { "m_fDRadius", _wrap_CGPSGGenericQuadParticle_m_fDRadius_get, _wrap_CGPSGGenericQuadParticle_m_fDRadius_set },
    { "m_oPos", _wrap_CGPSGGenericQuadParticle_m_oPos_get, _wrap_CGPSGGenericQuadParticle_m_oPos_set },
    { "m_oDir", _wrap_CGPSGGenericQuadParticle_m_oDir_get, _wrap_CGPSGGenericQuadParticle_m_oDir_set },
    { "m_fIEnergy", _wrap_CGPSGGenericQuadParticle_m_fIEnergy_get, _wrap_CGPSGGenericQuadParticle_m_fIEnergy_set },
    {0,0,0}
};
static swig_lua_method swig_CGPSGGenericQuadParticle_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGPSGGenericQuadParticle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPSGGenericQuadParticle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPSGGenericQuadParticle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPSGGenericQuadParticle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPSGGenericQuadParticle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPSGGenericQuadParticle_Sf_SwigStatic = {
    "CGPSGGenericQuadParticle",
    swig_CGPSGGenericQuadParticle_Sf_SwigStatic_methods,
    swig_CGPSGGenericQuadParticle_Sf_SwigStatic_attributes,
    swig_CGPSGGenericQuadParticle_Sf_SwigStatic_constants,
    swig_CGPSGGenericQuadParticle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPSGGenericQuadParticle_bases[] = {0,0};
static const char *swig_CGPSGGenericQuadParticle_base_names[] = {"CGParticle *",0};
static swig_lua_class _wrap_class_CGPSGGenericQuadParticle = { "CGPSGGenericQuadParticle", "CGPSGGenericQuadParticle", &SWIGTYPE_p_CGPSGGenericQuadParticle,_proxy__wrap_new_CGPSGGenericQuadParticle, swig_delete_CGPSGGenericQuadParticle, swig_CGPSGGenericQuadParticle_methods, swig_CGPSGGenericQuadParticle_attributes, &swig_CGPSGGenericQuadParticle_Sf_SwigStatic, swig_CGPSGGenericQuadParticle_meta, swig_CGPSGGenericQuadParticle_bases, swig_CGPSGGenericQuadParticle_base_names };

static int _wrap_CGPSGGenericQuad_poCreateParticlePool(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuad *arg1 = 0 ;
    CGParticle *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuad::poCreateParticlePool",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuad::poCreateParticlePool",1,"CGPSGGenericQuad *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuad,0))){
      SWIG_fail_ptr("CGPSGGenericQuad_poCreateParticlePool",1,SWIGTYPE_p_CGPSGGenericQuad);
    }
    
    result = (CGParticle *)(arg1)->poCreateParticlePool();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGParticle,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuad_UpdateInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuad *arg1 = 0 ;
    CGParticleSystemInstance *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGPSGGenericQuad::UpdateInstance",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuad::UpdateInstance",1,"CGPSGGenericQuad *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSGGenericQuad::UpdateInstance",2,"CGParticleSystemInstance &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSGGenericQuad::UpdateInstance",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuad,0))){
      SWIG_fail_ptr("CGPSGGenericQuad_UpdateInstance",1,SWIGTYPE_p_CGPSGGenericQuad);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGPSGGenericQuad_UpdateInstance",2,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->UpdateInstance(*arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGPSGGenericQuad(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuad *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuad::CGPSGGenericQuad",0,0)
    result = (CGPSGGenericQuad *)new CGPSGGenericQuad();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPSGGenericQuad,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPSGGenericQuad(void *obj) {
CGPSGGenericQuad *arg1 = (CGPSGGenericQuad *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPSGGenericQuad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPSGGenericQuad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPSGGenericQuad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPSGGenericQuad_methods[]= {
    { "poCreateParticlePool", _wrap_CGPSGGenericQuad_poCreateParticlePool},
    { "UpdateInstance", _wrap_CGPSGGenericQuad_UpdateInstance},
    {0,0}
};
static swig_lua_method swig_CGPSGGenericQuad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPSGGenericQuad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPSGGenericQuad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPSGGenericQuad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPSGGenericQuad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPSGGenericQuad_Sf_SwigStatic = {
    "CGPSGGenericQuad",
    swig_CGPSGGenericQuad_Sf_SwigStatic_methods,
    swig_CGPSGGenericQuad_Sf_SwigStatic_attributes,
    swig_CGPSGGenericQuad_Sf_SwigStatic_constants,
    swig_CGPSGGenericQuad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPSGGenericQuad_bases[] = {0,0};
static const char *swig_CGPSGGenericQuad_base_names[] = {"CGPSGGeneric *",0};
static swig_lua_class _wrap_class_CGPSGGenericQuad = { "CGPSGGenericQuad", "CGPSGGenericQuad", &SWIGTYPE_p_CGPSGGenericQuad,_proxy__wrap_new_CGPSGGenericQuad, swig_delete_CGPSGGenericQuad, swig_CGPSGGenericQuad_methods, swig_CGPSGGenericQuad_attributes, &swig_CGPSGGenericQuad_Sf_SwigStatic, swig_CGPSGGenericQuad_meta, swig_CGPSGGenericQuad_bases, swig_CGPSGGenericQuad_base_names };

static int _wrap_CGPSGGenericQuadOrbit_InitParticle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadOrbit *arg1 = 0 ;
    CGPSGGenericQuadParticle *arg2 = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadOrbit::InitParticle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadOrbit::InitParticle",1,"CGPSGGenericQuadOrbit *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGPSGGenericQuadOrbit::InitParticle",2,"CGPSGGenericQuadParticle *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadOrbit,0))){
      SWIG_fail_ptr("CGPSGGenericQuadOrbit_InitParticle",1,SWIGTYPE_p_CGPSGGenericQuadOrbit);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPSGGenericQuadParticle,0))){
      SWIG_fail_ptr("CGPSGGenericQuadOrbit_InitParticle",2,SWIGTYPE_p_CGPSGGenericQuadParticle);
    }
    
    (arg1)->InitParticle(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGGenericQuadOrbit_SetOrbitFactor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadOrbit *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGPSGGenericQuadOrbit::SetOrbitFactor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGGenericQuadOrbit::SetOrbitFactor",1,"CGPSGGenericQuadOrbit *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSGGenericQuadOrbit::SetOrbitFactor",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGGenericQuadOrbit,0))){
      SWIG_fail_ptr("CGPSGGenericQuadOrbit_SetOrbitFactor",1,SWIGTYPE_p_CGPSGGenericQuadOrbit);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetOrbitFactor(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGPSGGenericQuadOrbit(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGGenericQuadOrbit *result = 0 ;
    
    SWIG_check_num_args("CGPSGGenericQuadOrbit::CGPSGGenericQuadOrbit",0,0)
    result = (CGPSGGenericQuadOrbit *)new CGPSGGenericQuadOrbit();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPSGGenericQuadOrbit,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPSGGenericQuadOrbit(void *obj) {
CGPSGGenericQuadOrbit *arg1 = (CGPSGGenericQuadOrbit *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPSGGenericQuadOrbit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPSGGenericQuadOrbit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPSGGenericQuadOrbit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPSGGenericQuadOrbit_methods[]= {
    { "InitParticle", _wrap_CGPSGGenericQuadOrbit_InitParticle},
    { "SetOrbitFactor", _wrap_CGPSGGenericQuadOrbit_SetOrbitFactor},
    {0,0}
};
static swig_lua_method swig_CGPSGGenericQuadOrbit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPSGGenericQuadOrbit_Sf_SwigStatic = {
    "CGPSGGenericQuadOrbit",
    swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_methods,
    swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_attributes,
    swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_constants,
    swig_CGPSGGenericQuadOrbit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPSGGenericQuadOrbit_bases[] = {0,0};
static const char *swig_CGPSGGenericQuadOrbit_base_names[] = {"CGPSGGenericQuad *",0};
static swig_lua_class _wrap_class_CGPSGGenericQuadOrbit = { "CGPSGGenericQuadOrbit", "CGPSGGenericQuadOrbit", &SWIGTYPE_p_CGPSGGenericQuadOrbit,_proxy__wrap_new_CGPSGGenericQuadOrbit, swig_delete_CGPSGGenericQuadOrbit, swig_CGPSGGenericQuadOrbit_methods, swig_CGPSGGenericQuadOrbit_attributes, &swig_CGPSGGenericQuadOrbit_Sf_SwigStatic, swig_CGPSGGenericQuadOrbit_meta, swig_CGPSGGenericQuadOrbit_bases, swig_CGPSGGenericQuadOrbit_base_names };

static int _wrap_new_CGPSIManager(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *result = 0 ;
    
    SWIG_check_num_args("CGPSIManager::CGPSIManager",0,0)
    result = (CGPSIManager *)new CGPSIManager();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPSIManager,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSIManager_uiCreatePool(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *arg1 = 0 ;
    CGString *arg2 = 0 ;
    uint arg3 ;
    uint result;
    
    SWIG_check_num_args("CGPSIManager::uiCreatePool",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSIManager::uiCreatePool",1,"CGPSIManager *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSIManager::uiCreatePool",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSIManager::uiCreatePool",3,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSIManager,0))){
      SWIG_fail_ptr("CGPSIManager_uiCreatePool",1,SWIGTYPE_p_CGPSIManager);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGPSIManager_uiCreatePool",2,SWIGTYPE_p_CGString);
    }
    
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (uint)lua_tonumber(L, 3);
    result = (uint)(arg1)->uiCreatePool((CGString const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSIManager_poGet__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGParticleSystemInstance *result = 0 ;
    
    SWIG_check_num_args("CGPSIManager::poGet",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSIManager::poGet",1,"CGPSIManager *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSIManager::poGet",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSIManager,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",1,SWIGTYPE_p_CGPSIManager);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGParticleSystemInstance *)(arg1)->poGet((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGParticleSystemInstance,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSIManager_poGet__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *arg1 = 0 ;
    uint arg2 ;
    CGParticleSystemInstance *result = 0 ;
    
    SWIG_check_num_args("CGPSIManager::poGet",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSIManager::poGet",1,"CGPSIManager *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSIManager::poGet",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSIManager,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",1,SWIGTYPE_p_CGPSIManager);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    result = (CGParticleSystemInstance *)(arg1)->poGet(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGParticleSystemInstance,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSIManager_poGet__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *arg1 = 0 ;
    CGString *arg2 = 0 ;
    float arg3 ;
    CGVect3 *arg4 = 0 ;
    CGSceneTransf *result = 0 ;
    
    SWIG_check_num_args("CGPSIManager::poGet",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSIManager::poGet",1,"CGPSIManager *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSIManager::poGet",2,"CGString const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSIManager::poGet",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGPSIManager::poGet",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSIManager,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",1,SWIGTYPE_p_CGPSIManager);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",2,SWIGTYPE_p_CGString);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (CGSceneTransf *)(arg1)->poGet((CGString const &)*arg2,arg3,(CGVect3 const &)*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneTransf,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSIManager_poGet__SWIG_3(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *arg1 = 0 ;
    uint arg2 ;
    float arg3 ;
    CGVect3 *arg4 = 0 ;
    CGSceneTransf *result = 0 ;
    
    SWIG_check_num_args("CGPSIManager::poGet",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSIManager::poGet",1,"CGPSIManager *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGPSIManager::poGet",2,"uint");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGPSIManager::poGet",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CGPSIManager::poGet",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSIManager,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",1,SWIGTYPE_p_CGPSIManager);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGPSIManager_poGet",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (CGSceneTransf *)(arg1)->poGet(arg2,arg3,(CGVect3 const &)*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneTransf,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSIManager_poGet(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSIManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CGPSIManager_poGet__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSIManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGPSIManager_poGet__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSIManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CGPSIManager_poGet__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGPSIManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CGPSIManager_poGet__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CGPSIManager_poGet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGPSIManager::poGet(CGString const &)\n"
    "    CGPSIManager::poGet(uint)\n"
    "    CGPSIManager::poGet(CGString const &,float,CGVect3 const &)\n"
    "    CGPSIManager::poGet(uint,float,CGVect3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CGPSIManager_Release(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *arg1 = 0 ;
    CGParticleSystemInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGPSIManager::Release",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSIManager::Release",1,"CGPSIManager *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGPSIManager::Release",2,"CGParticleSystemInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSIManager,0))){
      SWIG_fail_ptr("CGPSIManager_Release",1,SWIGTYPE_p_CGPSIManager);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGParticleSystemInstance,0))){
      SWIG_fail_ptr("CGPSIManager_Release",2,SWIGTYPE_p_CGParticleSystemInstance);
    }
    
    (arg1)->Release(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSIManager_poGetNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSIManager *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGPSIManager::poGetNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSIManager::poGetNode",1,"CGPSIManager *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSIManager,0))){
      SWIG_fail_ptr("CGPSIManager_poGetNode",1,SWIGTYPE_p_CGPSIManager);
    }
    
    result = (CGSceneNode *)(arg1)->poGetNode();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPSIManager(void *obj) {
CGPSIManager *arg1 = (CGPSIManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPSIManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPSIManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPSIManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPSIManager_methods[]= {
    { "uiCreatePool", _wrap_CGPSIManager_uiCreatePool},
    { "poGet", _wrap_CGPSIManager_poGet},
    { "Release", _wrap_CGPSIManager_Release},
    { "poGetNode", _wrap_CGPSIManager_poGetNode},
    {0,0}
};
static swig_lua_method swig_CGPSIManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPSIManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPSIManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPSIManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPSIManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPSIManager_Sf_SwigStatic = {
    "CGPSIManager",
    swig_CGPSIManager_Sf_SwigStatic_methods,
    swig_CGPSIManager_Sf_SwigStatic_attributes,
    swig_CGPSIManager_Sf_SwigStatic_constants,
    swig_CGPSIManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPSIManager_bases[] = {0};
static const char *swig_CGPSIManager_base_names[] = {0};
static swig_lua_class _wrap_class_CGPSIManager = { "CGPSIManager", "CGPSIManager", &SWIGTYPE_p_CGPSIManager,_proxy__wrap_new_CGPSIManager, swig_delete_CGPSIManager, swig_CGPSIManager_methods, swig_CGPSIManager_attributes, &swig_CGPSIManager_Sf_SwigStatic, swig_CGPSIManager_meta, swig_CGPSIManager_bases, swig_CGPSIManager_base_names };

static int _wrap_CGPSGDefFileWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGDefFileWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGTextResource *result = 0 ;
    
    SWIG_check_num_args("CGPSGDefFileWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGDefFileWH::poLoadResource",1,"CGPSGDefFileWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPSGDefFileWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGDefFileWH,0))){
      SWIG_fail_ptr("CGPSGDefFileWH_poLoadResource",1,SWIGTYPE_p_CGPSGDefFileWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGPSGDefFileWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGTextResource *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPSGDefFileWH_Reload(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGDefFileWH *arg1 = 0 ;
    
    SWIG_check_num_args("CGPSGDefFileWH::Reload",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPSGDefFileWH::Reload",1,"CGPSGDefFileWH *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPSGDefFileWH,0))){
      SWIG_fail_ptr("CGPSGDefFileWH_Reload",1,SWIGTYPE_p_CGPSGDefFileWH);
    }
    
    (arg1)->Reload();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGPSGDefFileWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSGDefFileWH *result = 0 ;
    
    SWIG_check_num_args("CGPSGDefFileWH::CGPSGDefFileWH",0,0)
    result = (CGPSGDefFileWH *)new CGPSGDefFileWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPSGDefFileWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPSGDefFileWH(void *obj) {
CGPSGDefFileWH *arg1 = (CGPSGDefFileWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPSGDefFileWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPSGDefFileWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPSGDefFileWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPSGDefFileWH_methods[]= {
    { "poLoadResource", _wrap_CGPSGDefFileWH_poLoadResource},
    { "Reload", _wrap_CGPSGDefFileWH_Reload},
    {0,0}
};
static swig_lua_method swig_CGPSGDefFileWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPSGDefFileWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPSGDefFileWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPSGDefFileWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPSGDefFileWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPSGDefFileWH_Sf_SwigStatic = {
    "CGPSGDefFileWH",
    swig_CGPSGDefFileWH_Sf_SwigStatic_methods,
    swig_CGPSGDefFileWH_Sf_SwigStatic_attributes,
    swig_CGPSGDefFileWH_Sf_SwigStatic_constants,
    swig_CGPSGDefFileWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPSGDefFileWH_bases[] = {0};
static const char *swig_CGPSGDefFileWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGPSGDefFileWH = { "CGPSGDefFileWH", "CGPSGDefFileWH", &SWIGTYPE_p_CGPSGDefFileWH,_proxy__wrap_new_CGPSGDefFileWH, swig_delete_CGPSGDefFileWH, swig_CGPSGDefFileWH_methods, swig_CGPSGDefFileWH_attributes, &swig_CGPSGDefFileWH_Sf_SwigStatic, swig_CGPSGDefFileWH_meta, swig_CGPSGDefFileWH_bases, swig_CGPSGDefFileWH_base_names };

static int _wrap_new_CGPSysGenWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPSysGenWH *result = 0 ;
    
    SWIG_check_num_args("CGPSysGenWH::CGPSysGenWH",0,0)
    result = (CGPSysGenWH *)new CGPSysGenWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPSysGenWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPSysGenWH(void *obj) {
CGPSysGenWH *arg1 = (CGPSysGenWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPSysGenWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPSysGenWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPSysGenWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPSysGenWH_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGPSysGenWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPSysGenWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPSysGenWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPSysGenWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPSysGenWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPSysGenWH_Sf_SwigStatic = {
    "CGPSysGenWH",
    swig_CGPSysGenWH_Sf_SwigStatic_methods,
    swig_CGPSysGenWH_Sf_SwigStatic_attributes,
    swig_CGPSysGenWH_Sf_SwigStatic_constants,
    swig_CGPSysGenWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPSysGenWH_bases[] = {0};
static const char *swig_CGPSysGenWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGPSysGenWH = { "CGPSysGenWH", "CGPSysGenWH", &SWIGTYPE_p_CGPSysGenWH,_proxy__wrap_new_CGPSysGenWH, swig_delete_CGPSysGenWH, swig_CGPSysGenWH_methods, swig_CGPSysGenWH_attributes, &swig_CGPSysGenWH_Sf_SwigStatic, swig_CGPSysGenWH_meta, swig_CGPSysGenWH_bases, swig_CGPSysGenWH_base_names };

static int _wrap_CGTrail_SetPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrail *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTrail::SetPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrail::SetPos",1,"CGTrail *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGTrail::SetPos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrail,0))){
      SWIG_fail_ptr("CGTrail_SetPos",1,SWIGTYPE_p_CGTrail);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTrail_SetPos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetPos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTrail(void *obj) {
CGTrail *arg1 = (CGTrail *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGTrail_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTrail_methods[]= {
    { "SetPos", _wrap_CGTrail_SetPos},
    {0,0}
};
static swig_lua_method swig_CGTrail_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTrail_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTrail_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTrail_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTrail_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTrail_Sf_SwigStatic = {
    "CGTrail",
    swig_CGTrail_Sf_SwigStatic_methods,
    swig_CGTrail_Sf_SwigStatic_attributes,
    swig_CGTrail_Sf_SwigStatic_constants,
    swig_CGTrail_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTrail_bases[] = {0};
static const char *swig_CGTrail_base_names[] = {0};
static swig_lua_class _wrap_class_CGTrail = { "CGTrail", "CGTrail", &SWIGTYPE_p_CGTrail,0, swig_delete_CGTrail, swig_CGTrail_methods, swig_CGTrail_attributes, &swig_CGTrail_Sf_SwigStatic, swig_CGTrail_meta, swig_CGTrail_bases, swig_CGTrail_base_names };

static int _wrap_CGTrailGenerator_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    
    SWIG_check_num_args("CGTrailGenerator::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::Init",1,"CGTrailGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_Init",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_poCreateInstanceData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGTrail *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenerator::poCreateInstanceData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::poCreateInstanceData",1,"CGTrailGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_poCreateInstanceData",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    result = (CGTrail *)(arg1)->poCreateInstanceData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrail,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_UpdateInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGTrailInstance *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGTrailGenerator::UpdateInstance",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::UpdateInstance",1,"CGTrailGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTrailGenerator::UpdateInstance",2,"CGTrailInstance *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGTrailGenerator::UpdateInstance",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_UpdateInstance",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailGenerator_UpdateInstance",2,SWIGTYPE_p_CGTrailInstance);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->UpdateInstance(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_InitInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGTrailInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGTrailGenerator::InitInstance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::InitInstance",1,"CGTrailGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTrailGenerator::InitInstance",2,"CGTrailInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_InitInstance",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailGenerator_InitInstance",2,SWIGTYPE_p_CGTrailInstance);
    }
    
    (arg1)->InitInstance(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_SetBillboardRenderer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGBillboardRenderer *arg2 = 0 ;
    
    SWIG_check_num_args("CGTrailGenerator::SetBillboardRenderer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::SetBillboardRenderer",1,"CGTrailGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTrailGenerator::SetBillboardRenderer",2,"CGBillboardRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_SetBillboardRenderer",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBillboardRenderer,0))){
      SWIG_fail_ptr("CGTrailGenerator_SetBillboardRenderer",2,SWIGTYPE_p_CGBillboardRenderer);
    }
    
    (arg1)->SetBillboardRenderer(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_poGetBillboardRenderer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGBillboardRenderer *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenerator::poGetBillboardRenderer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::poGetBillboardRenderer",1,"CGTrailGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_poGetBillboardRenderer",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    result = (CGBillboardRenderer *)(arg1)->poGetBillboardRenderer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBillboardRenderer,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_SetMaxDivisions(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGTrailGenerator::SetMaxDivisions",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::SetMaxDivisions",1,"CGTrailGenerator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTrailGenerator::SetMaxDivisions",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_SetMaxDivisions",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetMaxDivisions(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_uiMaxDivisions(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGTrailGenerator::uiMaxDivisions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::uiMaxDivisions",1,"CGTrailGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_uiMaxDivisions",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    result = (uint)(arg1)->uiMaxDivisions();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_SetMaxPoints(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CGTrailGenerator::SetMaxPoints",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::SetMaxPoints",1,"CGTrailGenerator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTrailGenerator::SetMaxPoints",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_SetMaxPoints",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->SetMaxPoints(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_uiMaxPoints(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGTrailGenerator::uiMaxPoints",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::uiMaxPoints",1,"CGTrailGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_uiMaxPoints",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    result = (uint)(arg1)->uiMaxPoints();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_SetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGTrailGenerator::SetShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::SetShader",1,"CGTrailGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTrailGenerator::SetShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_SetShader",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGTrailGenerator_SetShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenerator::poGetShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::poGetShader",1,"CGTrailGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_poGetShader",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    result = (CGShader *)(arg1)->poGetShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenerator_SetEnergyPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGTrailGenerator::SetEnergyPars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenerator::SetEnergyPars",1,"CGTrailGenerator *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTrailGenerator::SetEnergyPars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGTrailGenerator::SetEnergyPars",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("CGTrailGenerator_SetEnergyPars",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetEnergyPars(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTrailGenerator(void *obj) {
CGTrailGenerator *arg1 = (CGTrailGenerator *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGTrailGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTrailGenerator_methods[]= {
    { "Init", _wrap_CGTrailGenerator_Init},
    { "poCreateInstanceData", _wrap_CGTrailGenerator_poCreateInstanceData},
    { "UpdateInstance", _wrap_CGTrailGenerator_UpdateInstance},
    { "InitInstance", _wrap_CGTrailGenerator_InitInstance},
    { "SetBillboardRenderer", _wrap_CGTrailGenerator_SetBillboardRenderer},
    { "poGetBillboardRenderer", _wrap_CGTrailGenerator_poGetBillboardRenderer},
    { "SetMaxDivisions", _wrap_CGTrailGenerator_SetMaxDivisions},
    { "uiMaxDivisions", _wrap_CGTrailGenerator_uiMaxDivisions},
    { "SetMaxPoints", _wrap_CGTrailGenerator_SetMaxPoints},
    { "uiMaxPoints", _wrap_CGTrailGenerator_uiMaxPoints},
    { "SetShader", _wrap_CGTrailGenerator_SetShader},
    { "poGetShader", _wrap_CGTrailGenerator_poGetShader},
    { "SetEnergyPars", _wrap_CGTrailGenerator_SetEnergyPars},
    {0,0}
};
static swig_lua_method swig_CGTrailGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTrailGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTrailGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTrailGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTrailGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTrailGenerator_Sf_SwigStatic = {
    "CGTrailGenerator",
    swig_CGTrailGenerator_Sf_SwigStatic_methods,
    swig_CGTrailGenerator_Sf_SwigStatic_attributes,
    swig_CGTrailGenerator_Sf_SwigStatic_constants,
    swig_CGTrailGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTrailGenerator_bases[] = {0,0};
static const char *swig_CGTrailGenerator_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGTrailGenerator = { "CGTrailGenerator", "CGTrailGenerator", &SWIGTYPE_p_CGTrailGenerator,0, swig_delete_CGTrailGenerator, swig_CGTrailGenerator_methods, swig_CGTrailGenerator_attributes, &swig_CGTrailGenerator_Sf_SwigStatic, swig_CGTrailGenerator_meta, swig_CGTrailGenerator_bases, swig_CGTrailGenerator_base_names };

static int _wrap_new_CGTrailInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenerator *arg1 = 0 ;
    CGTrailInstance *result = 0 ;
    
    SWIG_check_num_args("CGTrailInstance::CGTrailInstance",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailInstance::CGTrailInstance",1,"CGTrailGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenerator,0))){
      SWIG_fail_ptr("new_CGTrailInstance",1,SWIGTYPE_p_CGTrailGenerator);
    }
    
    result = (CGTrailInstance *)new CGTrailInstance(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrailInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailInstance_Reinit(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailInstance *arg1 = 0 ;
    
    SWIG_check_num_args("CGTrailInstance::Reinit",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailInstance::Reinit",1,"CGTrailInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailInstance_Reinit",1,SWIGTYPE_p_CGTrailInstance);
    }
    
    (arg1)->Reinit();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailInstance_SetPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailInstance *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGTrailInstance::SetPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailInstance::SetPos",1,"CGTrailInstance *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGTrailInstance::SetPos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailInstance_SetPos",1,SWIGTYPE_p_CGTrailInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGTrailInstance_SetPos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetPos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailInstance_Update(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailInstance *arg1 = 0 ;
    
    SWIG_check_num_args("CGTrailInstance::Update",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailInstance::Update",1,"CGTrailInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailInstance_Update",1,SWIGTYPE_p_CGTrailInstance);
    }
    
    (arg1)->Update();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailInstance_poGetTrailData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailInstance *arg1 = 0 ;
    CGTrail *result = 0 ;
    
    SWIG_check_num_args("CGTrailInstance::poGetTrailData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailInstance::poGetTrailData",1,"CGTrailInstance const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailInstance_poGetTrailData",1,SWIGTYPE_p_CGTrailInstance);
    }
    
    result = (CGTrail *)((CGTrailInstance const *)arg1)->poGetTrailData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrail,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTrailInstance(void *obj) {
CGTrailInstance *arg1 = (CGTrailInstance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTrailInstance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTrailInstance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTrailInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTrailInstance_methods[]= {
    { "Reinit", _wrap_CGTrailInstance_Reinit},
    { "SetPos", _wrap_CGTrailInstance_SetPos},
    { "Update", _wrap_CGTrailInstance_Update},
    { "poGetTrailData", _wrap_CGTrailInstance_poGetTrailData},
    {0,0}
};
static swig_lua_method swig_CGTrailInstance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTrailInstance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTrailInstance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTrailInstance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTrailInstance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTrailInstance_Sf_SwigStatic = {
    "CGTrailInstance",
    swig_CGTrailInstance_Sf_SwigStatic_methods,
    swig_CGTrailInstance_Sf_SwigStatic_attributes,
    swig_CGTrailInstance_Sf_SwigStatic_constants,
    swig_CGTrailInstance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTrailInstance_bases[] = {0};
static const char *swig_CGTrailInstance_base_names[] = {0};
static swig_lua_class _wrap_class_CGTrailInstance = { "CGTrailInstance", "CGTrailInstance", &SWIGTYPE_p_CGTrailInstance,_proxy__wrap_new_CGTrailInstance, swig_delete_CGTrailInstance, swig_CGTrailInstance_methods, swig_CGTrailInstance_attributes, &swig_CGTrailInstance_Sf_SwigStatic, swig_CGTrailInstance_meta, swig_CGTrailInstance_bases, swig_CGTrailInstance_base_names };

static int _wrap_new_CGTrailGenStd(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenStd::CGTrailGenStd",0,0)
    result = (CGTrailGenStd *)new CGTrailGenStd();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrailGenStd,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenStd_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *arg1 = 0 ;
    
    SWIG_check_num_args("CGTrailGenStd::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenStd::Init",1,"CGTrailGenStd *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenStd,0))){
      SWIG_fail_ptr("CGTrailGenStd_Init",1,SWIGTYPE_p_CGTrailGenStd);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenStd_poCreateInstanceData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *arg1 = 0 ;
    CGTrail *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenStd::poCreateInstanceData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenStd::poCreateInstanceData",1,"CGTrailGenStd *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenStd,0))){
      SWIG_fail_ptr("CGTrailGenStd_poCreateInstanceData",1,SWIGTYPE_p_CGTrailGenStd);
    }
    
    result = (CGTrail *)(arg1)->poCreateInstanceData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrail,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenStd_UpdateInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *arg1 = 0 ;
    CGTrailInstance *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGTrailGenStd::UpdateInstance",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenStd::UpdateInstance",1,"CGTrailGenStd *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTrailGenStd::UpdateInstance",2,"CGTrailInstance *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGTrailGenStd::UpdateInstance",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenStd,0))){
      SWIG_fail_ptr("CGTrailGenStd_UpdateInstance",1,SWIGTYPE_p_CGTrailGenStd);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailGenStd_UpdateInstance",2,SWIGTYPE_p_CGTrailInstance);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->UpdateInstance(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenStd_InitInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *arg1 = 0 ;
    CGTrailInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGTrailGenStd::InitInstance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenStd::InitInstance",1,"CGTrailGenStd *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGTrailGenStd::InitInstance",2,"CGTrailInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenStd,0))){
      SWIG_fail_ptr("CGTrailGenStd_InitInstance",1,SWIGTYPE_p_CGTrailGenStd);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTrailInstance,0))){
      SWIG_fail_ptr("CGTrailGenStd_InitInstance",2,SWIGTYPE_p_CGTrailInstance);
    }
    
    (arg1)->InitInstance(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenStd_SetColorPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    CGColor *arg3 = 0 ;
    
    SWIG_check_num_args("CGTrailGenStd::SetColorPars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenStd::SetColorPars",1,"CGTrailGenStd *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGTrailGenStd::SetColorPars",2,"CGColor const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGTrailGenStd::SetColorPars",3,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenStd,0))){
      SWIG_fail_ptr("CGTrailGenStd_SetColorPars",1,SWIGTYPE_p_CGTrailGenStd);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGTrailGenStd_SetColorPars",2,SWIGTYPE_p_CGColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGTrailGenStd_SetColorPars",3,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetColorPars((CGColor const &)*arg2,(CGColor const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenStd_SetSizePars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    
    SWIG_check_num_args("CGTrailGenStd::SetSizePars",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenStd::SetSizePars",1,"CGTrailGenStd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTrailGenStd::SetSizePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGTrailGenStd::SetSizePars",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGTrailGenStd::SetSizePars",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGTrailGenStd::SetSizePars",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenStd,0))){
      SWIG_fail_ptr("CGTrailGenStd_SetSizePars",1,SWIGTYPE_p_CGTrailGenStd);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    (arg1)->SetSizePars(arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenStd_SetUpdateTimePar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenStd *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CGTrailGenStd::SetUpdateTimePar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenStd::SetUpdateTimePar",1,"CGTrailGenStd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGTrailGenStd::SetUpdateTimePar",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenStd,0))){
      SWIG_fail_ptr("CGTrailGenStd_SetUpdateTimePar",1,SWIGTYPE_p_CGTrailGenStd);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetUpdateTimePar(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTrailGenStd(void *obj) {
CGTrailGenStd *arg1 = (CGTrailGenStd *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTrailGenStd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTrailGenStd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTrailGenStd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTrailGenStd_methods[]= {
    { "Init", _wrap_CGTrailGenStd_Init},
    { "poCreateInstanceData", _wrap_CGTrailGenStd_poCreateInstanceData},
    { "UpdateInstance", _wrap_CGTrailGenStd_UpdateInstance},
    { "InitInstance", _wrap_CGTrailGenStd_InitInstance},
    { "SetColorPars", _wrap_CGTrailGenStd_SetColorPars},
    { "SetSizePars", _wrap_CGTrailGenStd_SetSizePars},
    { "SetUpdateTimePar", _wrap_CGTrailGenStd_SetUpdateTimePar},
    {0,0}
};
static swig_lua_method swig_CGTrailGenStd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTrailGenStd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTrailGenStd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTrailGenStd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTrailGenStd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTrailGenStd_Sf_SwigStatic = {
    "CGTrailGenStd",
    swig_CGTrailGenStd_Sf_SwigStatic_methods,
    swig_CGTrailGenStd_Sf_SwigStatic_attributes,
    swig_CGTrailGenStd_Sf_SwigStatic_constants,
    swig_CGTrailGenStd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTrailGenStd_bases[] = {0,0};
static const char *swig_CGTrailGenStd_base_names[] = {"CGTrailGenerator *",0};
static swig_lua_class _wrap_class_CGTrailGenStd = { "CGTrailGenStd", "CGTrailGenStd", &SWIGTYPE_p_CGTrailGenStd,_proxy__wrap_new_CGTrailGenStd, swig_delete_CGTrailGenStd, swig_CGTrailGenStd_methods, swig_CGTrailGenStd_attributes, &swig_CGTrailGenStd_Sf_SwigStatic, swig_CGTrailGenStd_meta, swig_CGTrailGenStd_bases, swig_CGTrailGenStd_base_names };

static int _wrap_CGTrailManager_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailManager *arg1 = 0 ;
    
    SWIG_check_num_args("CGTrailManager::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailManager::Init",1,"CGTrailManager *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailManager,0))){
      SWIG_fail_ptr("CGTrailManager_Init",1,SWIGTYPE_p_CGTrailManager);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailManager_poGet(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailManager *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGTrailInstance *result = 0 ;
    
    SWIG_check_num_args("CGTrailManager::poGet",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailManager::poGet",1,"CGTrailManager *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGTrailManager::poGet",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailManager,0))){
      SWIG_fail_ptr("CGTrailManager_poGet",1,SWIGTYPE_p_CGTrailManager);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGTrailManager_poGet",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGTrailInstance *)(arg1)->poGet((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrailInstance,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailManager_poGetNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailManager *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CGTrailManager::poGetNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailManager::poGetNode",1,"CGTrailManager *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailManager,0))){
      SWIG_fail_ptr("CGTrailManager_poGetNode",1,SWIGTYPE_p_CGTrailManager);
    }
    
    result = (CGSceneNode *)(arg1)->poGetNode();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGTrailManager(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailManager *result = 0 ;
    
    SWIG_check_num_args("CGTrailManager::CGTrailManager",0,0)
    result = (CGTrailManager *)new CGTrailManager();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrailManager,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTrailManager(void *obj) {
CGTrailManager *arg1 = (CGTrailManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTrailManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTrailManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTrailManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTrailManager_methods[]= {
    { "Init", _wrap_CGTrailManager_Init},
    { "poGet", _wrap_CGTrailManager_poGet},
    { "poGetNode", _wrap_CGTrailManager_poGetNode},
    {0,0}
};
static swig_lua_method swig_CGTrailManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTrailManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTrailManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTrailManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTrailManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTrailManager_Sf_SwigStatic = {
    "CGTrailManager",
    swig_CGTrailManager_Sf_SwigStatic_methods,
    swig_CGTrailManager_Sf_SwigStatic_attributes,
    swig_CGTrailManager_Sf_SwigStatic_constants,
    swig_CGTrailManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTrailManager_bases[] = {0};
static const char *swig_CGTrailManager_base_names[] = {0};
static swig_lua_class _wrap_class_CGTrailManager = { "CGTrailManager", "CGTrailManager", &SWIGTYPE_p_CGTrailManager,_proxy__wrap_new_CGTrailManager, swig_delete_CGTrailManager, swig_CGTrailManager_methods, swig_CGTrailManager_attributes, &swig_CGTrailManager_Sf_SwigStatic, swig_CGTrailManager_meta, swig_CGTrailManager_bases, swig_CGTrailManager_base_names };

static int _wrap_new_CGTrailGenWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenWH *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenWH::CGTrailGenWH",0,0)
    result = (CGTrailGenWH *)new CGTrailGenWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrailGenWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTrailGenWH(void *obj) {
CGTrailGenWH *arg1 = (CGTrailGenWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTrailGenWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTrailGenWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTrailGenWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTrailGenWH_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGTrailGenWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTrailGenWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTrailGenWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTrailGenWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTrailGenWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTrailGenWH_Sf_SwigStatic = {
    "CGTrailGenWH",
    swig_CGTrailGenWH_Sf_SwigStatic_methods,
    swig_CGTrailGenWH_Sf_SwigStatic_attributes,
    swig_CGTrailGenWH_Sf_SwigStatic_constants,
    swig_CGTrailGenWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTrailGenWH_bases[] = {0};
static const char *swig_CGTrailGenWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGTrailGenWH = { "CGTrailGenWH", "CGTrailGenWH", &SWIGTYPE_p_CGTrailGenWH,_proxy__wrap_new_CGTrailGenWH, swig_delete_CGTrailGenWH, swig_CGTrailGenWH_methods, swig_CGTrailGenWH_attributes, &swig_CGTrailGenWH_Sf_SwigStatic, swig_CGTrailGenWH_meta, swig_CGTrailGenWH_bases, swig_CGTrailGenWH_base_names };

static int _wrap_CGTrailGenDefFileWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenDefFileWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGTextResource *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenDefFileWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenDefFileWH::poLoadResource",1,"CGTrailGenDefFileWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGTrailGenDefFileWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenDefFileWH,0))){
      SWIG_fail_ptr("CGTrailGenDefFileWH_poLoadResource",1,SWIGTYPE_p_CGTrailGenDefFileWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGTrailGenDefFileWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGTextResource *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGTrailGenDefFileWH_Reload(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenDefFileWH *arg1 = 0 ;
    
    SWIG_check_num_args("CGTrailGenDefFileWH::Reload",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGTrailGenDefFileWH::Reload",1,"CGTrailGenDefFileWH *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGTrailGenDefFileWH,0))){
      SWIG_fail_ptr("CGTrailGenDefFileWH_Reload",1,SWIGTYPE_p_CGTrailGenDefFileWH);
    }
    
    (arg1)->Reload();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGTrailGenDefFileWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGTrailGenDefFileWH *result = 0 ;
    
    SWIG_check_num_args("CGTrailGenDefFileWH::CGTrailGenDefFileWH",0,0)
    result = (CGTrailGenDefFileWH *)new CGTrailGenDefFileWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTrailGenDefFileWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGTrailGenDefFileWH(void *obj) {
CGTrailGenDefFileWH *arg1 = (CGTrailGenDefFileWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGTrailGenDefFileWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGTrailGenDefFileWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGTrailGenDefFileWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGTrailGenDefFileWH_methods[]= {
    { "poLoadResource", _wrap_CGTrailGenDefFileWH_poLoadResource},
    { "Reload", _wrap_CGTrailGenDefFileWH_Reload},
    {0,0}
};
static swig_lua_method swig_CGTrailGenDefFileWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGTrailGenDefFileWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGTrailGenDefFileWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGTrailGenDefFileWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGTrailGenDefFileWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGTrailGenDefFileWH_Sf_SwigStatic = {
    "CGTrailGenDefFileWH",
    swig_CGTrailGenDefFileWH_Sf_SwigStatic_methods,
    swig_CGTrailGenDefFileWH_Sf_SwigStatic_attributes,
    swig_CGTrailGenDefFileWH_Sf_SwigStatic_constants,
    swig_CGTrailGenDefFileWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGTrailGenDefFileWH_bases[] = {0};
static const char *swig_CGTrailGenDefFileWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGTrailGenDefFileWH = { "CGTrailGenDefFileWH", "CGTrailGenDefFileWH", &SWIGTYPE_p_CGTrailGenDefFileWH,_proxy__wrap_new_CGTrailGenDefFileWH, swig_delete_CGTrailGenDefFileWH, swig_CGTrailGenDefFileWH_methods, swig_CGTrailGenDefFileWH_attributes, &swig_CGTrailGenDefFileWH_Sf_SwigStatic, swig_CGTrailGenDefFileWH_meta, swig_CGTrailGenDefFileWH_bases, swig_CGTrailGenDefFileWH_base_names };

static int _wrap_CGCorona_SetPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCorona *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGCorona::SetPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCorona::SetPos",1,"CGCorona *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCorona::SetPos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCorona,0))){
      SWIG_fail_ptr("CGCorona_SetPos",1,SWIGTYPE_p_CGCorona);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCorona_SetPos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetPos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCorona(void *obj) {
CGCorona *arg1 = (CGCorona *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGCorona_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCorona_methods[]= {
    { "SetPos", _wrap_CGCorona_SetPos},
    {0,0}
};
static swig_lua_method swig_CGCorona_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCorona_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCorona_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCorona_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCorona_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCorona_Sf_SwigStatic = {
    "CGCorona",
    swig_CGCorona_Sf_SwigStatic_methods,
    swig_CGCorona_Sf_SwigStatic_attributes,
    swig_CGCorona_Sf_SwigStatic_constants,
    swig_CGCorona_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCorona_bases[] = {0};
static const char *swig_CGCorona_base_names[] = {0};
static swig_lua_class _wrap_class_CGCorona = { "CGCorona", "CGCorona", &SWIGTYPE_p_CGCorona,0, swig_delete_CGCorona, swig_CGCorona_methods, swig_CGCorona_attributes, &swig_CGCorona_Sf_SwigStatic, swig_CGCorona_meta, swig_CGCorona_bases, swig_CGCorona_base_names };

static int _wrap_CGCoronaGenerator_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenerator::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::Init",1,"CGCoronaGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_Init",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenerator_poCreateInstanceData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGCorona *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenerator::poCreateInstanceData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::poCreateInstanceData",1,"CGCoronaGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_poCreateInstanceData",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    result = (CGCorona *)(arg1)->poCreateInstanceData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCorona,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenerator_UpdateInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGCoronaInstance *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGCoronaGenerator::UpdateInstance",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::UpdateInstance",1,"CGCoronaGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCoronaGenerator::UpdateInstance",2,"CGCoronaInstance *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCoronaGenerator::UpdateInstance",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_UpdateInstance",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaGenerator_UpdateInstance",2,SWIGTYPE_p_CGCoronaInstance);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->UpdateInstance(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenerator_InitInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGCoronaInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenerator::InitInstance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::InitInstance",1,"CGCoronaGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCoronaGenerator::InitInstance",2,"CGCoronaInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_InitInstance",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaGenerator_InitInstance",2,SWIGTYPE_p_CGCoronaInstance);
    }
    
    (arg1)->InitInstance(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenerator_SetBillboardRenderer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGBillboardRenderer *arg2 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenerator::SetBillboardRenderer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::SetBillboardRenderer",1,"CGCoronaGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCoronaGenerator::SetBillboardRenderer",2,"CGBillboardRenderer *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_SetBillboardRenderer",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBillboardRenderer,0))){
      SWIG_fail_ptr("CGCoronaGenerator_SetBillboardRenderer",2,SWIGTYPE_p_CGBillboardRenderer);
    }
    
    (arg1)->SetBillboardRenderer(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenerator_poGetBillboardRenderer(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGBillboardRenderer *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenerator::poGetBillboardRenderer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::poGetBillboardRenderer",1,"CGCoronaGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_poGetBillboardRenderer",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    result = (CGBillboardRenderer *)(arg1)->poGetBillboardRenderer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBillboardRenderer,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenerator_SetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGShader *arg2 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenerator::SetShader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::SetShader",1,"CGCoronaGenerator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCoronaGenerator::SetShader",2,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_SetShader",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CGCoronaGenerator_SetShader",2,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetShader(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenerator_poGetShader(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenerator::poGetShader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenerator::poGetShader",1,"CGCoronaGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("CGCoronaGenerator_poGetShader",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    result = (CGShader *)(arg1)->poGetShader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCoronaGenerator(void *obj) {
CGCoronaGenerator *arg1 = (CGCoronaGenerator *) obj;
delete arg1;
}
static swig_lua_attribute swig_CGCoronaGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCoronaGenerator_methods[]= {
    { "Init", _wrap_CGCoronaGenerator_Init},
    { "poCreateInstanceData", _wrap_CGCoronaGenerator_poCreateInstanceData},
    { "UpdateInstance", _wrap_CGCoronaGenerator_UpdateInstance},
    { "InitInstance", _wrap_CGCoronaGenerator_InitInstance},
    { "SetBillboardRenderer", _wrap_CGCoronaGenerator_SetBillboardRenderer},
    { "poGetBillboardRenderer", _wrap_CGCoronaGenerator_poGetBillboardRenderer},
    { "SetShader", _wrap_CGCoronaGenerator_SetShader},
    { "poGetShader", _wrap_CGCoronaGenerator_poGetShader},
    {0,0}
};
static swig_lua_method swig_CGCoronaGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCoronaGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCoronaGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCoronaGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCoronaGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCoronaGenerator_Sf_SwigStatic = {
    "CGCoronaGenerator",
    swig_CGCoronaGenerator_Sf_SwigStatic_methods,
    swig_CGCoronaGenerator_Sf_SwigStatic_attributes,
    swig_CGCoronaGenerator_Sf_SwigStatic_constants,
    swig_CGCoronaGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCoronaGenerator_bases[] = {0,0};
static const char *swig_CGCoronaGenerator_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGCoronaGenerator = { "CGCoronaGenerator", "CGCoronaGenerator", &SWIGTYPE_p_CGCoronaGenerator,0, swig_delete_CGCoronaGenerator, swig_CGCoronaGenerator_methods, swig_CGCoronaGenerator_attributes, &swig_CGCoronaGenerator_Sf_SwigStatic, swig_CGCoronaGenerator_meta, swig_CGCoronaGenerator_bases, swig_CGCoronaGenerator_base_names };

static int _wrap_new_CGCoronaInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenerator *arg1 = 0 ;
    CGCoronaInstance *result = 0 ;
    
    SWIG_check_num_args("CGCoronaInstance::CGCoronaInstance",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaInstance::CGCoronaInstance",1,"CGCoronaGenerator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenerator,0))){
      SWIG_fail_ptr("new_CGCoronaInstance",1,SWIGTYPE_p_CGCoronaGenerator);
    }
    
    result = (CGCoronaInstance *)new CGCoronaInstance(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCoronaInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaInstance_SetPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaInstance *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CGCoronaInstance::SetPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaInstance::SetPos",1,"CGCoronaInstance *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCoronaInstance::SetPos",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaInstance_SetPos",1,SWIGTYPE_p_CGCoronaInstance);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CGCoronaInstance_SetPos",2,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetPos((CGVect3 const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaInstance_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaInstance *arg1 = 0 ;
    
    SWIG_check_num_args("CGCoronaInstance::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaInstance::Render",1,"CGCoronaInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaInstance_Render",1,SWIGTYPE_p_CGCoronaInstance);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaInstance_Reinit(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaInstance *arg1 = 0 ;
    
    SWIG_check_num_args("CGCoronaInstance::Reinit",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaInstance::Reinit",1,"CGCoronaInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaInstance_Reinit",1,SWIGTYPE_p_CGCoronaInstance);
    }
    
    (arg1)->Reinit();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaInstance_poGetCoronaData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaInstance *arg1 = 0 ;
    CGCorona *result = 0 ;
    
    SWIG_check_num_args("CGCoronaInstance::poGetCoronaData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaInstance::poGetCoronaData",1,"CGCoronaInstance const *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaInstance_poGetCoronaData",1,SWIGTYPE_p_CGCoronaInstance);
    }
    
    result = (CGCorona *)((CGCoronaInstance const *)arg1)->poGetCoronaData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCorona,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCoronaInstance(void *obj) {
CGCoronaInstance *arg1 = (CGCoronaInstance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCoronaInstance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCoronaInstance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCoronaInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCoronaInstance_methods[]= {
    { "SetPos", _wrap_CGCoronaInstance_SetPos},
    { "Render", _wrap_CGCoronaInstance_Render},
    { "Reinit", _wrap_CGCoronaInstance_Reinit},
    { "poGetCoronaData", _wrap_CGCoronaInstance_poGetCoronaData},
    {0,0}
};
static swig_lua_method swig_CGCoronaInstance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCoronaInstance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCoronaInstance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCoronaInstance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCoronaInstance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCoronaInstance_Sf_SwigStatic = {
    "CGCoronaInstance",
    swig_CGCoronaInstance_Sf_SwigStatic_methods,
    swig_CGCoronaInstance_Sf_SwigStatic_attributes,
    swig_CGCoronaInstance_Sf_SwigStatic_constants,
    swig_CGCoronaInstance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCoronaInstance_bases[] = {0,0};
static const char *swig_CGCoronaInstance_base_names[] = {"CGSceneTransf *",0};
static swig_lua_class _wrap_class_CGCoronaInstance = { "CGCoronaInstance", "CGCoronaInstance", &SWIGTYPE_p_CGCoronaInstance,_proxy__wrap_new_CGCoronaInstance, swig_delete_CGCoronaInstance, swig_CGCoronaInstance_methods, swig_CGCoronaInstance_attributes, &swig_CGCoronaInstance_Sf_SwigStatic, swig_CGCoronaInstance_meta, swig_CGCoronaInstance_bases, swig_CGCoronaInstance_base_names };

static int _wrap_new_CGCoronaGenStd(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenStd::CGCoronaGenStd",0,0)
    result = (CGCoronaGenStd *)new CGCoronaGenStd();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCoronaGenStd,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenStd_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *arg1 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenStd::Init",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenStd::Init",1,"CGCoronaGenStd *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenStd,0))){
      SWIG_fail_ptr("CGCoronaGenStd_Init",1,SWIGTYPE_p_CGCoronaGenStd);
    }
    
    (arg1)->Init();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenStd_poCreateInstanceData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *arg1 = 0 ;
    CGCorona *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenStd::poCreateInstanceData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenStd::poCreateInstanceData",1,"CGCoronaGenStd *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenStd,0))){
      SWIG_fail_ptr("CGCoronaGenStd_poCreateInstanceData",1,SWIGTYPE_p_CGCoronaGenStd);
    }
    
    result = (CGCorona *)(arg1)->poCreateInstanceData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCorona,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenStd_UpdateInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *arg1 = 0 ;
    CGCoronaInstance *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CGCoronaGenStd::UpdateInstance",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenStd::UpdateInstance",1,"CGCoronaGenStd *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCoronaGenStd::UpdateInstance",2,"CGCoronaInstance *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCoronaGenStd::UpdateInstance",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenStd,0))){
      SWIG_fail_ptr("CGCoronaGenStd_UpdateInstance",1,SWIGTYPE_p_CGCoronaGenStd);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaGenStd_UpdateInstance",2,SWIGTYPE_p_CGCoronaInstance);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->UpdateInstance(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenStd_InitInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *arg1 = 0 ;
    CGCoronaInstance *arg2 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenStd::InitInstance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenStd::InitInstance",1,"CGCoronaGenStd *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCoronaGenStd::InitInstance",2,"CGCoronaInstance *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenStd,0))){
      SWIG_fail_ptr("CGCoronaGenStd_InitInstance",1,SWIGTYPE_p_CGCoronaGenStd);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCoronaInstance,0))){
      SWIG_fail_ptr("CGCoronaGenStd_InitInstance",2,SWIGTYPE_p_CGCoronaInstance);
    }
    
    (arg1)->InitInstance(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenStd_SetColorPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *arg1 = 0 ;
    CGColor *arg2 = 0 ;
    CGColor *arg3 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenStd::SetColorPars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenStd::SetColorPars",1,"CGCoronaGenStd *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCoronaGenStd::SetColorPars",2,"CGColor const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CGCoronaGenStd::SetColorPars",3,"CGColor const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenStd,0))){
      SWIG_fail_ptr("CGCoronaGenStd_SetColorPars",1,SWIGTYPE_p_CGCoronaGenStd);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGCoronaGenStd_SetColorPars",2,SWIGTYPE_p_CGColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGColor,0))){
      SWIG_fail_ptr("CGCoronaGenStd_SetColorPars",3,SWIGTYPE_p_CGColor);
    }
    
    (arg1)->SetColorPars((CGColor const &)*arg2,(CGColor const &)*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenStd_SetFuncPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *arg1 = 0 ;
    ECoronaFunction arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGCoronaGenStd::SetFuncPars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenStd::SetFuncPars",1,"CGCoronaGenStd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCoronaGenStd::SetFuncPars",2,"ECoronaFunction");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCoronaGenStd::SetFuncPars",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenStd,0))){
      SWIG_fail_ptr("CGCoronaGenStd_SetFuncPars",1,SWIGTYPE_p_CGCoronaGenStd);
    }
    
    arg2 = (ECoronaFunction)(int)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetFuncPars(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenStd_SetSizePars(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenStd *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    
    SWIG_check_num_args("CGCoronaGenStd::SetSizePars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenStd::SetSizePars",1,"CGCoronaGenStd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCoronaGenStd::SetSizePars",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGCoronaGenStd::SetSizePars",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenStd,0))){
      SWIG_fail_ptr("CGCoronaGenStd_SetSizePars",1,SWIGTYPE_p_CGCoronaGenStd);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->SetSizePars(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCoronaGenStd(void *obj) {
CGCoronaGenStd *arg1 = (CGCoronaGenStd *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCoronaGenStd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCoronaGenStd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCoronaGenStd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCoronaGenStd_methods[]= {
    { "Init", _wrap_CGCoronaGenStd_Init},
    { "poCreateInstanceData", _wrap_CGCoronaGenStd_poCreateInstanceData},
    { "UpdateInstance", _wrap_CGCoronaGenStd_UpdateInstance},
    { "InitInstance", _wrap_CGCoronaGenStd_InitInstance},
    { "SetColorPars", _wrap_CGCoronaGenStd_SetColorPars},
    { "SetFuncPars", _wrap_CGCoronaGenStd_SetFuncPars},
    { "SetSizePars", _wrap_CGCoronaGenStd_SetSizePars},
    {0,0}
};
static swig_lua_method swig_CGCoronaGenStd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCoronaGenStd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCoronaGenStd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCoronaGenStd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCoronaGenStd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCoronaGenStd_Sf_SwigStatic = {
    "CGCoronaGenStd",
    swig_CGCoronaGenStd_Sf_SwigStatic_methods,
    swig_CGCoronaGenStd_Sf_SwigStatic_attributes,
    swig_CGCoronaGenStd_Sf_SwigStatic_constants,
    swig_CGCoronaGenStd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCoronaGenStd_bases[] = {0,0};
static const char *swig_CGCoronaGenStd_base_names[] = {"CGCoronaGenerator *",0};
static swig_lua_class _wrap_class_CGCoronaGenStd = { "CGCoronaGenStd", "CGCoronaGenStd", &SWIGTYPE_p_CGCoronaGenStd,_proxy__wrap_new_CGCoronaGenStd, swig_delete_CGCoronaGenStd, swig_CGCoronaGenStd_methods, swig_CGCoronaGenStd_attributes, &swig_CGCoronaGenStd_Sf_SwigStatic, swig_CGCoronaGenStd_meta, swig_CGCoronaGenStd_bases, swig_CGCoronaGenStd_base_names };

static int _wrap_new_CGCoronaGenWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenWH *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenWH::CGCoronaGenWH",0,0)
    result = (CGCoronaGenWH *)new CGCoronaGenWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCoronaGenWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCoronaGenWH(void *obj) {
CGCoronaGenWH *arg1 = (CGCoronaGenWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCoronaGenWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCoronaGenWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCoronaGenWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCoronaGenWH_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGCoronaGenWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCoronaGenWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCoronaGenWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCoronaGenWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCoronaGenWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCoronaGenWH_Sf_SwigStatic = {
    "CGCoronaGenWH",
    swig_CGCoronaGenWH_Sf_SwigStatic_methods,
    swig_CGCoronaGenWH_Sf_SwigStatic_attributes,
    swig_CGCoronaGenWH_Sf_SwigStatic_constants,
    swig_CGCoronaGenWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCoronaGenWH_bases[] = {0};
static const char *swig_CGCoronaGenWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGCoronaGenWH = { "CGCoronaGenWH", "CGCoronaGenWH", &SWIGTYPE_p_CGCoronaGenWH,_proxy__wrap_new_CGCoronaGenWH, swig_delete_CGCoronaGenWH, swig_CGCoronaGenWH_methods, swig_CGCoronaGenWH_attributes, &swig_CGCoronaGenWH_Sf_SwigStatic, swig_CGCoronaGenWH_meta, swig_CGCoronaGenWH_bases, swig_CGCoronaGenWH_base_names };

static int _wrap_new_CSFXObjectInstance(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSFXObjectInstance *result = 0 ;
    
    SWIG_check_num_args("CSFXObjectInstance::CSFXObjectInstance",0,0)
    result = (CSFXObjectInstance *)new CSFXObjectInstance();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSFXObjectInstance,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSFXObjectInstance(void *obj) {
CSFXObjectInstance *arg1 = (CSFXObjectInstance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSFXObjectInstance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSFXObjectInstance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSFXObjectInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSFXObjectInstance_methods[]= {
    {0,0}
};
static swig_lua_method swig_CSFXObjectInstance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSFXObjectInstance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSFXObjectInstance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSFXObjectInstance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSFXObjectInstance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSFXObjectInstance_Sf_SwigStatic = {
    "CSFXObjectInstance",
    swig_CSFXObjectInstance_Sf_SwigStatic_methods,
    swig_CSFXObjectInstance_Sf_SwigStatic_attributes,
    swig_CSFXObjectInstance_Sf_SwigStatic_constants,
    swig_CSFXObjectInstance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSFXObjectInstance_bases[] = {0};
static const char *swig_CSFXObjectInstance_base_names[] = {0};
static swig_lua_class _wrap_class_CSFXObjectInstance = { "CSFXObjectInstance", "CSFXObjectInstance", &SWIGTYPE_p_CSFXObjectInstance,_proxy__wrap_new_CSFXObjectInstance, swig_delete_CSFXObjectInstance, swig_CSFXObjectInstance_methods, swig_CSFXObjectInstance_attributes, &swig_CSFXObjectInstance_Sf_SwigStatic, swig_CSFXObjectInstance_meta, swig_CSFXObjectInstance_bases, swig_CSFXObjectInstance_base_names };

static int _wrap_new_CGCoronaManager(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaManager *result = 0 ;
    
    SWIG_check_num_args("CGCoronaManager::CGCoronaManager",0,0)
    result = (CGCoronaManager *)new CGCoronaManager();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCoronaManager,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCoronaManager(void *obj) {
CGCoronaManager *arg1 = (CGCoronaManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCoronaManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCoronaManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCoronaManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCoronaManager_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGCoronaManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCoronaManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCoronaManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCoronaManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCoronaManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCoronaManager_Sf_SwigStatic = {
    "CGCoronaManager",
    swig_CGCoronaManager_Sf_SwigStatic_methods,
    swig_CGCoronaManager_Sf_SwigStatic_attributes,
    swig_CGCoronaManager_Sf_SwigStatic_constants,
    swig_CGCoronaManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCoronaManager_bases[] = {0};
static const char *swig_CGCoronaManager_base_names[] = {0};
static swig_lua_class _wrap_class_CGCoronaManager = { "CGCoronaManager", "CGCoronaManager", &SWIGTYPE_p_CGCoronaManager,_proxy__wrap_new_CGCoronaManager, swig_delete_CGCoronaManager, swig_CGCoronaManager_methods, swig_CGCoronaManager_attributes, &swig_CGCoronaManager_Sf_SwigStatic, swig_CGCoronaManager_meta, swig_CGCoronaManager_bases, swig_CGCoronaManager_base_names };

static int _wrap_CGCoronaGenDefFileWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenDefFileWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGTextResource *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenDefFileWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenDefFileWH::poLoadResource",1,"CGCoronaGenDefFileWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGCoronaGenDefFileWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenDefFileWH,0))){
      SWIG_fail_ptr("CGCoronaGenDefFileWH_poLoadResource",1,SWIGTYPE_p_CGCoronaGenDefFileWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGCoronaGenDefFileWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGTextResource *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCoronaGenDefFileWH_Reload(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenDefFileWH *arg1 = 0 ;
    
    SWIG_check_num_args("CGCoronaGenDefFileWH::Reload",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCoronaGenDefFileWH::Reload",1,"CGCoronaGenDefFileWH *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCoronaGenDefFileWH,0))){
      SWIG_fail_ptr("CGCoronaGenDefFileWH_Reload",1,SWIGTYPE_p_CGCoronaGenDefFileWH);
    }
    
    (arg1)->Reload();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCoronaGenDefFileWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCoronaGenDefFileWH *result = 0 ;
    
    SWIG_check_num_args("CGCoronaGenDefFileWH::CGCoronaGenDefFileWH",0,0)
    result = (CGCoronaGenDefFileWH *)new CGCoronaGenDefFileWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCoronaGenDefFileWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCoronaGenDefFileWH(void *obj) {
CGCoronaGenDefFileWH *arg1 = (CGCoronaGenDefFileWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCoronaGenDefFileWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCoronaGenDefFileWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCoronaGenDefFileWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCoronaGenDefFileWH_methods[]= {
    { "poLoadResource", _wrap_CGCoronaGenDefFileWH_poLoadResource},
    { "Reload", _wrap_CGCoronaGenDefFileWH_Reload},
    {0,0}
};
static swig_lua_method swig_CGCoronaGenDefFileWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCoronaGenDefFileWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCoronaGenDefFileWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCoronaGenDefFileWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCoronaGenDefFileWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCoronaGenDefFileWH_Sf_SwigStatic = {
    "CGCoronaGenDefFileWH",
    swig_CGCoronaGenDefFileWH_Sf_SwigStatic_methods,
    swig_CGCoronaGenDefFileWH_Sf_SwigStatic_attributes,
    swig_CGCoronaGenDefFileWH_Sf_SwigStatic_constants,
    swig_CGCoronaGenDefFileWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCoronaGenDefFileWH_bases[] = {0};
static const char *swig_CGCoronaGenDefFileWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGCoronaGenDefFileWH = { "CGCoronaGenDefFileWH", "CGCoronaGenDefFileWH", &SWIGTYPE_p_CGCoronaGenDefFileWH,_proxy__wrap_new_CGCoronaGenDefFileWH, swig_delete_CGCoronaGenDefFileWH, swig_CGCoronaGenDefFileWH_methods, swig_CGCoronaGenDefFileWH_attributes, &swig_CGCoronaGenDefFileWH_Sf_SwigStatic, swig_CGCoronaGenDefFileWH_meta, swig_CGCoronaGenDefFileWH_bases, swig_CGCoronaGenDefFileWH_base_names };

static int _wrap_new_CTileBookmark(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *result = 0 ;
    
    SWIG_check_num_args("CTileBookmark::CTileBookmark",0,0)
    result = (CTileBookmark *)new CTileBookmark();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTileBookmark,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CTileBookmark::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::Init",1,"CTileBookmark *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTileBookmark::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTileBookmark::Init",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_Init",1,SWIGTYPE_p_CTileBookmark);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_SetTileMaterial(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CGShader *arg4 = 0 ;
    
    SWIG_check_num_args("CTileBookmark::SetTileMaterial",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::SetTileMaterial",1,"CTileBookmark *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTileBookmark::SetTileMaterial",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTileBookmark::SetTileMaterial",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CTileBookmark::SetTileMaterial",4,"CGShader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_SetTileMaterial",1,SWIGTYPE_p_CTileBookmark);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGShader,0))){
      SWIG_fail_ptr("CTileBookmark_SetTileMaterial",4,SWIGTYPE_p_CGShader);
    }
    
    (arg1)->SetTileMaterial(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_poGetTileMaterial(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CGShader *result = 0 ;
    
    SWIG_check_num_args("CTileBookmark::poGetTileMaterial",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::poGetTileMaterial",1,"CTileBookmark *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTileBookmark::poGetTileMaterial",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTileBookmark::poGetTileMaterial",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_poGetTileMaterial",1,SWIGTYPE_p_CTileBookmark);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CGShader *)(arg1)->poGetTileMaterial(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_GetTileLODs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int arg2 ;
    int result;
    
    SWIG_check_num_args("CTileBookmark::GetTileLODs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::GetTileLODs",1,"CTileBookmark *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTileBookmark::GetTileLODs",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_GetTileLODs",1,SWIGTYPE_p_CTileBookmark);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (int)(arg1)->GetTileLODs(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    
    SWIG_check_num_args("CTileBookmark::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::Invalidate",1,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_Invalidate",1,SWIGTYPE_p_CTileBookmark);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_GetMaxTiles(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTileBookmark::GetMaxTiles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::GetMaxTiles",1,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_GetMaxTiles",1,SWIGTYPE_p_CTileBookmark);
    }
    
    result = (int)(arg1)->GetMaxTiles();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_GetMaxLODs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTileBookmark::GetMaxLODs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::GetMaxLODs",1,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_GetMaxLODs",1,SWIGTYPE_p_CTileBookmark);
    }
    
    result = (int)(arg1)->GetMaxLODs();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_Tiles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    CGShader **arg2 = 0 ;
    
    SWIG_check_num_args("CTileBookmark::Tiles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::Tiles",1,"CTileBookmark *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTileBookmark::Tiles",2,"CGShader **");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_Tiles_set",1,SWIGTYPE_p_CTileBookmark);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_CGShader,0))){
      SWIG_fail_ptr("CTileBookmark_Tiles_set",2,SWIGTYPE_p_p_CGShader);
    }
    
    if (arg1) (arg1)->Tiles = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_Tiles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    CGShader **result = 0 ;
    
    SWIG_check_num_args("CTileBookmark::Tiles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::Tiles",1,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_Tiles_get",1,SWIGTYPE_p_CTileBookmark);
    }
    
    result = (CGShader **) ((arg1)->Tiles);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_CGShader,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_MaxTiles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTileBookmark::MaxTiles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::MaxTiles",1,"CTileBookmark *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTileBookmark::MaxTiles",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_MaxTiles_set",1,SWIGTYPE_p_CTileBookmark);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MaxTiles = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_MaxTiles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTileBookmark::MaxTiles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::MaxTiles",1,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_MaxTiles_get",1,SWIGTYPE_p_CTileBookmark);
    }
    
    result = (int) ((arg1)->MaxTiles);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_MaxLODs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTileBookmark::MaxLODs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::MaxLODs",1,"CTileBookmark *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTileBookmark::MaxLODs",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_MaxLODs_set",1,SWIGTYPE_p_CTileBookmark);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MaxLODs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_MaxLODs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTileBookmark::MaxLODs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::MaxLODs",1,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_MaxLODs_get",1,SWIGTYPE_p_CTileBookmark);
    }
    
    result = (int) ((arg1)->MaxLODs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_TileLODs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int *arg2 = 0 ;
    
    SWIG_check_num_args("CTileBookmark::TileLODs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::TileLODs",1,"CTileBookmark *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTileBookmark::TileLODs",2,"int *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_TileLODs_set",1,SWIGTYPE_p_CTileBookmark);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTileBookmark_TileLODs_set",2,SWIGTYPE_p_int);
    }
    
    if (arg1) (arg1)->TileLODs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTileBookmark_TileLODs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTileBookmark *arg1 = 0 ;
    int *result = 0 ;
    
    SWIG_check_num_args("CTileBookmark::TileLODs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTileBookmark::TileLODs",1,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTileBookmark_TileLODs_get",1,SWIGTYPE_p_CTileBookmark);
    }
    
    result = (int *) ((arg1)->TileLODs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTileBookmark(void *obj) {
CTileBookmark *arg1 = (CTileBookmark *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTileBookmark(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTileBookmark);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTileBookmark_attributes[] = {
    { "Tiles", _wrap_CTileBookmark_Tiles_get, _wrap_CTileBookmark_Tiles_set },
    { "MaxTiles", _wrap_CTileBookmark_MaxTiles_get, _wrap_CTileBookmark_MaxTiles_set },
    { "MaxLODs", _wrap_CTileBookmark_MaxLODs_get, _wrap_CTileBookmark_MaxLODs_set },
    { "TileLODs", _wrap_CTileBookmark_TileLODs_get, _wrap_CTileBookmark_TileLODs_set },
    {0,0,0}
};
static swig_lua_method swig_CTileBookmark_methods[]= {
    { "Init", _wrap_CTileBookmark_Init},
    { "SetTileMaterial", _wrap_CTileBookmark_SetTileMaterial},
    { "poGetTileMaterial", _wrap_CTileBookmark_poGetTileMaterial},
    { "GetTileLODs", _wrap_CTileBookmark_GetTileLODs},
    { "Invalidate", _wrap_CTileBookmark_Invalidate},
    { "GetMaxTiles", _wrap_CTileBookmark_GetMaxTiles},
    { "GetMaxLODs", _wrap_CTileBookmark_GetMaxLODs},
    {0,0}
};
static swig_lua_method swig_CTileBookmark_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTileBookmark_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTileBookmark_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTileBookmark_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTileBookmark_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTileBookmark_Sf_SwigStatic = {
    "CTileBookmark",
    swig_CTileBookmark_Sf_SwigStatic_methods,
    swig_CTileBookmark_Sf_SwigStatic_attributes,
    swig_CTileBookmark_Sf_SwigStatic_constants,
    swig_CTileBookmark_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTileBookmark_bases[] = {0};
static const char *swig_CTileBookmark_base_names[] = {0};
static swig_lua_class _wrap_class_CTileBookmark = { "CTileBookmark", "CTileBookmark", &SWIGTYPE_p_CTileBookmark,_proxy__wrap_new_CTileBookmark, swig_delete_CTileBookmark, swig_CTileBookmark_methods, swig_CTileBookmark_attributes, &swig_CTileBookmark_Sf_SwigStatic, swig_CTileBookmark_meta, swig_CTileBookmark_bases, swig_CTileBookmark_base_names };

static int _wrap_new_CLODSelector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLODSelector *result = 0 ;
    
    SWIG_check_num_args("CLODSelector::CLODSelector",0,0)
    result = (CLODSelector *)new CLODSelector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLODSelector_GetLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLODSelector *arg1 = 0 ;
    float arg2 ;
    float result;
    
    SWIG_check_num_args("CLODSelector::GetLOD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLODSelector::GetLOD",1,"CLODSelector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLODSelector::GetLOD",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLODSelector,0))){
      SWIG_fail_ptr("CLODSelector_GetLOD",1,SWIGTYPE_p_CLODSelector);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (float)(arg1)->GetLOD(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLODSelector(void *obj) {
CLODSelector *arg1 = (CLODSelector *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLODSelector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLODSelector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLODSelector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLODSelector_methods[]= {
    { "GetLOD", _wrap_CLODSelector_GetLOD},
    {0,0}
};
static swig_lua_method swig_CLODSelector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLODSelector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLODSelector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLODSelector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLODSelector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLODSelector_Sf_SwigStatic = {
    "CLODSelector",
    swig_CLODSelector_Sf_SwigStatic_methods,
    swig_CLODSelector_Sf_SwigStatic_attributes,
    swig_CLODSelector_Sf_SwigStatic_constants,
    swig_CLODSelector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLODSelector_bases[] = {0};
static const char *swig_CLODSelector_base_names[] = {0};
static swig_lua_class _wrap_class_CLODSelector = { "CLODSelector", "CLODSelector", &SWIGTYPE_p_CLODSelector,_proxy__wrap_new_CLODSelector, swig_delete_CLODSelector, swig_CLODSelector_methods, swig_CLODSelector_attributes, &swig_CLODSelector_Sf_SwigStatic, swig_CLODSelector_meta, swig_CLODSelector_bases, swig_CLODSelector_base_names };

static int _wrap_new_CTerrainCircuit(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *result = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::CTerrainCircuit",0,0)
    result = (CTerrainCircuit *)new CTerrainCircuit();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTerrainCircuit,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CTerrainCircuit::Init",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::Init",1,"CTerrainCircuit *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainCircuit::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainCircuit::Init",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CTerrainCircuit::Init",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_Init",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Init(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_SetSector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CGSceneNode *arg4 = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::SetSector",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::SetSector",1,"CTerrainCircuit *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainCircuit::SetSector",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainCircuit::SetSector",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CTerrainCircuit::SetSector",4,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_SetSector",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CTerrainCircuit_SetSector",4,SWIGTYPE_p_CGSceneNode);
    }
    
    (arg1)->SetSector(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::Render",1,"CTerrainCircuit *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_Render",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_ComputeVISLODMatrix(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::ComputeVISLODMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::ComputeVISLODMatrix",1,"CTerrainCircuit *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_ComputeVISLODMatrix",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    (arg1)->ComputeVISLODMatrix();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_ComputeLODArrays(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CTerrainCircuit::ComputeLODArrays",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::ComputeLODArrays",1,"CTerrainCircuit *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainCircuit::ComputeLODArrays",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainCircuit::ComputeLODArrays",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_ComputeLODArrays",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->ComputeLODArrays(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_SetLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    
    SWIG_check_num_args("CTerrainCircuit::SetLOD",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::SetLOD",1,"CTerrainCircuit *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainCircuit::SetLOD",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainCircuit::SetLOD",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CTerrainCircuit::SetLOD",4,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_SetLOD",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    (arg1)->SetLOD(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_BlockInRange(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    SWIG_check_num_args("CTerrainCircuit::BlockInRange",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::BlockInRange",1,"CTerrainCircuit *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainCircuit::BlockInRange",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainCircuit::BlockInRange",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_BlockInRange",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (bool)(arg1)->BlockInRange(arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_GetLODSelector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    CLODSelector *result = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::GetLODSelector",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::GetLODSelector",1,"CTerrainCircuit *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_GetLODSelector",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    result = (CLODSelector *)(arg1)->GetLODSelector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_SetLODSelector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    CLODSelector *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::SetLODSelector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::SetLODSelector",1,"CTerrainCircuit *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainCircuit::SetLODSelector",2,"CLODSelector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_SetLODSelector",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CLODSelector,0))){
      SWIG_fail_ptr("CTerrainCircuit_SetLODSelector",2,SWIGTYPE_p_CLODSelector);
    }
    
    (arg1)->SetLODSelector(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_LODSelector_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    CLODSelector *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::LODSelector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::LODSelector",1,"CTerrainCircuit *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainCircuit::LODSelector",2,"CLODSelector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_LODSelector_set",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CLODSelector,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTerrainCircuit_LODSelector_set",2,SWIGTYPE_p_CLODSelector);
    }
    
    if (arg1) (arg1)->LODSelector = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainCircuit_LODSelector_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainCircuit *arg1 = 0 ;
    CLODSelector *result = 0 ;
    
    SWIG_check_num_args("CTerrainCircuit::LODSelector",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainCircuit::LODSelector",1,"CTerrainCircuit *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainCircuit,0))){
      SWIG_fail_ptr("CTerrainCircuit_LODSelector_get",1,SWIGTYPE_p_CTerrainCircuit);
    }
    
    result = (CLODSelector *) ((arg1)->LODSelector);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTerrainCircuit(void *obj) {
CTerrainCircuit *arg1 = (CTerrainCircuit *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTerrainCircuit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTerrainCircuit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTerrainCircuit_attributes[] = {
    { "LODSelector", _wrap_CTerrainCircuit_LODSelector_get, _wrap_CTerrainCircuit_LODSelector_set },
    {0,0,0}
};
static swig_lua_method swig_CTerrainCircuit_methods[]= {
    { "Init", _wrap_CTerrainCircuit_Init},
    { "SetSector", _wrap_CTerrainCircuit_SetSector},
    { "Render", _wrap_CTerrainCircuit_Render},
    { "ComputeVISLODMatrix", _wrap_CTerrainCircuit_ComputeVISLODMatrix},
    { "ComputeLODArrays", _wrap_CTerrainCircuit_ComputeLODArrays},
    { "SetLOD", _wrap_CTerrainCircuit_SetLOD},
    { "BlockInRange", _wrap_CTerrainCircuit_BlockInRange},
    { "GetLODSelector", _wrap_CTerrainCircuit_GetLODSelector},
    { "SetLODSelector", _wrap_CTerrainCircuit_SetLODSelector},
    {0,0}
};
static swig_lua_method swig_CTerrainCircuit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTerrainCircuit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTerrainCircuit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTerrainCircuit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTerrainCircuit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTerrainCircuit_Sf_SwigStatic = {
    "CTerrainCircuit",
    swig_CTerrainCircuit_Sf_SwigStatic_methods,
    swig_CTerrainCircuit_Sf_SwigStatic_attributes,
    swig_CTerrainCircuit_Sf_SwigStatic_constants,
    swig_CTerrainCircuit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTerrainCircuit_bases[] = {0,0};
static const char *swig_CTerrainCircuit_base_names[] = {"CGSceneGroup *",0};
static swig_lua_class _wrap_class_CTerrainCircuit = { "CTerrainCircuit", "CTerrainCircuit", &SWIGTYPE_p_CTerrainCircuit,_proxy__wrap_new_CTerrainCircuit, swig_delete_CTerrainCircuit, swig_CTerrainCircuit_methods, swig_CTerrainCircuit_attributes, &swig_CTerrainCircuit_Sf_SwigStatic, swig_CTerrainCircuit_meta, swig_CTerrainCircuit_bases, swig_CTerrainCircuit_base_names };

static int _wrap_CSectElem_ByteSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CSectElem::ByteSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::ByteSize",1,"CSectElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_ByteSize",1,SWIGTYPE_p_CSectElem);
    }
    
    result = (unsigned long)(arg1)->ByteSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Sum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::Sum",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Sum",1,"CSectElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSectElem::Sum",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CSectElem::Sum",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Sum",1,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Sum",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Sum",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Sum(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Mult__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::Mult",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Mult",1,"CSectElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSectElem::Mult",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CSectElem::Mult",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Mult",1,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Mult",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_LinInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::LinInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::LinInterpolate",1,"CSectElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSectElem::LinInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CSectElem::LinInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CSectElem::LinInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_LinInterpolate",1,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_LinInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_LinInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->LinInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_CosInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::CosInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::CosInterpolate",1,"CSectElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSectElem::CosInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CSectElem::CosInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CSectElem::CosInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_CosInterpolate",1,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_CosInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_CosInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->CosInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CSectElem::Get",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Get",1,"CSectElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Get",1,SWIGTYPE_p_CSectElem);
    }
    
    result = (void *)(arg1)->Get();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CSectElem::Set",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Set",1,"CSectElem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSectElem::Set",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Set",1,SWIGTYPE_p_CSectElem);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CSectElem_Set");
    (arg1)->Set(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::CreateClass",1,"CSectElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_CreateClass",1,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Clear",1,"CSectElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Clear",1,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Clear();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Add(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::Add",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Add",1,"CSectElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSectElem::Add",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Add",1,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Add",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Add(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Mult__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::Mult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Mult",1,"CSectElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CSectElem::Mult",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Mult",1,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectElem_Mult(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSectElem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSectElem_Mult__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSectElem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CSectElem_Mult__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSectElem_Mult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CSectElem::Mult(CSectElem &,CSectElem &)\n"
    "    CSectElem::Mult(CSectElem &)\n");
  lua_error(L);return 0;
}


static int _wrap_CSectElem_Scale(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectElem *arg1 = 0 ;
    float arg2 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectElem::Scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectElem::Scale",1,"CSectElem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectElem::Scale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectElem_Scale",1,SWIGTYPE_p_CSectElem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CSectElem *) &(arg1)->Scale(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSectElem(void *obj) {
CSectElem *arg1 = (CSectElem *) obj;
delete arg1;
}
static swig_lua_attribute swig_CSectElem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSectElem_methods[]= {
    { "ByteSize", _wrap_CSectElem_ByteSize},
    { "Sum", _wrap_CSectElem_Sum},
    { "LinInterpolate", _wrap_CSectElem_LinInterpolate},
    { "CosInterpolate", _wrap_CSectElem_CosInterpolate},
    { "Get", _wrap_CSectElem_Get},
    { "Set", _wrap_CSectElem_Set},
    { "CreateClass", _wrap_CSectElem_CreateClass},
    { "Clear", _wrap_CSectElem_Clear},
    { "Add", _wrap_CSectElem_Add},
    { "Mult", _wrap_CSectElem_Mult},
    { "Scale", _wrap_CSectElem_Scale},
    {0,0}
};
static swig_lua_method swig_CSectElem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSectElem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSectElem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSectElem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSectElem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSectElem_Sf_SwigStatic = {
    "CSectElem",
    swig_CSectElem_Sf_SwigStatic_methods,
    swig_CSectElem_Sf_SwigStatic_attributes,
    swig_CSectElem_Sf_SwigStatic_constants,
    swig_CSectElem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSectElem_bases[] = {0};
static const char *swig_CSectElem_base_names[] = {0};
static swig_lua_class _wrap_class_CSectElem = { "CSectElem", "CSectElem", &SWIGTYPE_p_CSectElem,0, swig_delete_CSectElem, swig_CSectElem_methods, swig_CSectElem_attributes, &swig_CSectElem_Sf_SwigStatic, swig_CSectElem_meta, swig_CSectElem_bases, swig_CSectElem_base_names };

static int _wrap_new_CColor(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *result = 0 ;
    
    SWIG_check_num_args("CColor::CColor",0,0)
    result = (CColor *)new CColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CColor,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_ByteSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CColor::ByteSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::ByteSize",1,"CColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_ByteSize",1,SWIGTYPE_p_CColor);
    }
    
    result = (unsigned long)(arg1)->ByteSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Sum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::Sum",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Sum",1,"CColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CColor::Sum",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CColor::Sum",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Sum",1,SWIGTYPE_p_CColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_Sum",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_Sum",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Sum(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Mult__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::Mult",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Mult",1,"CColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CColor::Mult",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CColor::Mult",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Mult",1,SWIGTYPE_p_CColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_Mult",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_LinInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::LinInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::LinInterpolate",1,"CColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CColor::LinInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CColor::LinInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CColor::LinInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_LinInterpolate",1,SWIGTYPE_p_CColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_LinInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_LinInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->LinInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_CosInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::CosInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::CosInterpolate",1,"CColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CColor::CosInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CColor::CosInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CColor::CosInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_CosInterpolate",1,SWIGTYPE_p_CColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_CosInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_CosInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->CosInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CColor::Get",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Get",1,"CColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Get",1,SWIGTYPE_p_CColor);
    }
    
    result = (void *)(arg1)->Get();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CColor::Set",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Set",1,"CColor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CColor::Set",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Set",1,SWIGTYPE_p_CColor);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CColor_Set");
    (arg1)->Set(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::CreateClass",1,"CColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_CreateClass",1,SWIGTYPE_p_CColor);
    }
    
    result = (CSectElem *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Clear",1,"CColor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Clear",1,SWIGTYPE_p_CColor);
    }
    
    result = (CSectElem *) &(arg1)->Clear();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Add(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::Add",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Add",1,"CColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CColor::Add",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Add",1,SWIGTYPE_p_CColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_Add",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Add(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Mult__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::Mult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Mult",1,"CColor *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CColor::Mult",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Mult",1,SWIGTYPE_p_CColor);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CColor_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CColor_Mult(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CColor_Mult__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CColor_Mult__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CColor_Mult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CColor::Mult(CSectElem &,CSectElem &)\n"
    "    CColor::Mult(CSectElem &)\n");
  lua_error(L);return 0;
}


static int _wrap_CColor_Scale(lua_State* L) {
  {
    int SWIG_arg = 0;
    CColor *arg1 = 0 ;
    float arg2 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CColor::Scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CColor::Scale",1,"CColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CColor::Scale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CColor,0))){
      SWIG_fail_ptr("CColor_Scale",1,SWIGTYPE_p_CColor);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CSectElem *) &(arg1)->Scale(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CColor(void *obj) {
CColor *arg1 = (CColor *) obj;
delete arg1;
}
static int _proxy__wrap_new_CColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CColor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CColor_methods[]= {
    { "ByteSize", _wrap_CColor_ByteSize},
    { "Sum", _wrap_CColor_Sum},
    { "LinInterpolate", _wrap_CColor_LinInterpolate},
    { "CosInterpolate", _wrap_CColor_CosInterpolate},
    { "Get", _wrap_CColor_Get},
    { "Set", _wrap_CColor_Set},
    { "CreateClass", _wrap_CColor_CreateClass},
    { "Clear", _wrap_CColor_Clear},
    { "Add", _wrap_CColor_Add},
    { "Mult", _wrap_CColor_Mult},
    { "Scale", _wrap_CColor_Scale},
    {0,0}
};
static swig_lua_method swig_CColor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CColor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CColor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CColor_Sf_SwigStatic = {
    "CColor",
    swig_CColor_Sf_SwigStatic_methods,
    swig_CColor_Sf_SwigStatic_attributes,
    swig_CColor_Sf_SwigStatic_constants,
    swig_CColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CColor_bases[] = {0,0};
static const char *swig_CColor_base_names[] = {"CSectElem *",0};
static swig_lua_class _wrap_class_CColor = { "CColor", "CColor", &SWIGTYPE_p_CColor,_proxy__wrap_new_CColor, swig_delete_CColor, swig_CColor_methods, swig_CColor_attributes, &swig_CColor_Sf_SwigStatic, swig_CColor_meta, swig_CColor_bases, swig_CColor_base_names };

static int _wrap_new_CHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *result = 0 ;
    
    SWIG_check_num_args("CHeight::CHeight",0,0)
    result = (CHeight *)new CHeight();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHeight,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_ByteSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CHeight::ByteSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::ByteSize",1,"CHeight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_ByteSize",1,SWIGTYPE_p_CHeight);
    }
    
    result = (unsigned long)(arg1)->ByteSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Sum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::Sum",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Sum",1,"CHeight *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHeight::Sum",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CHeight::Sum",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Sum",1,SWIGTYPE_p_CHeight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_Sum",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_Sum",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Sum(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Mult__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::Mult",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Mult",1,"CHeight *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHeight::Mult",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CHeight::Mult",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Mult",1,SWIGTYPE_p_CHeight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_Mult",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_LinInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::LinInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::LinInterpolate",1,"CHeight *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHeight::LinInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CHeight::LinInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHeight::LinInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_LinInterpolate",1,SWIGTYPE_p_CHeight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_LinInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_LinInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->LinInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_CosInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::CosInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::CosInterpolate",1,"CHeight *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHeight::CosInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CHeight::CosInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHeight::CosInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_CosInterpolate",1,SWIGTYPE_p_CHeight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_CosInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_CosInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->CosInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CHeight::Get",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Get",1,"CHeight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Get",1,SWIGTYPE_p_CHeight);
    }
    
    result = (void *)(arg1)->Get();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CHeight::Set",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Set",1,"CHeight *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CHeight::Set",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Set",1,SWIGTYPE_p_CHeight);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CHeight_Set");
    (arg1)->Set(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::CreateClass",1,"CHeight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_CreateClass",1,SWIGTYPE_p_CHeight);
    }
    
    result = (CSectElem *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Clear",1,"CHeight *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Clear",1,SWIGTYPE_p_CHeight);
    }
    
    result = (CSectElem *) &(arg1)->Clear();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Add(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::Add",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Add",1,"CHeight *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHeight::Add",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Add",1,SWIGTYPE_p_CHeight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_Add",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Add(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Mult__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::Mult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Mult",1,"CHeight *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CHeight::Mult",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Mult",1,SWIGTYPE_p_CHeight);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeight_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeight_Mult(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHeight, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CHeight_Mult__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CHeight, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CHeight_Mult__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CHeight_Mult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHeight::Mult(CSectElem &,CSectElem &)\n"
    "    CHeight::Mult(CSectElem &)\n");
  lua_error(L);return 0;
}


static int _wrap_CHeight_Scale(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeight *arg1 = 0 ;
    float arg2 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeight::Scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeight::Scale",1,"CHeight *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHeight::Scale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeight,0))){
      SWIG_fail_ptr("CHeight_Scale",1,SWIGTYPE_p_CHeight);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CSectElem *) &(arg1)->Scale(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHeight(void *obj) {
CHeight *arg1 = (CHeight *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHeight(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHeight);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHeight_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHeight_methods[]= {
    { "ByteSize", _wrap_CHeight_ByteSize},
    { "Sum", _wrap_CHeight_Sum},
    { "LinInterpolate", _wrap_CHeight_LinInterpolate},
    { "CosInterpolate", _wrap_CHeight_CosInterpolate},
    { "Get", _wrap_CHeight_Get},
    { "Set", _wrap_CHeight_Set},
    { "CreateClass", _wrap_CHeight_CreateClass},
    { "Clear", _wrap_CHeight_Clear},
    { "Add", _wrap_CHeight_Add},
    { "Mult", _wrap_CHeight_Mult},
    { "Scale", _wrap_CHeight_Scale},
    {0,0}
};
static swig_lua_method swig_CHeight_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHeight_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHeight_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHeight_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHeight_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHeight_Sf_SwigStatic = {
    "CHeight",
    swig_CHeight_Sf_SwigStatic_methods,
    swig_CHeight_Sf_SwigStatic_attributes,
    swig_CHeight_Sf_SwigStatic_constants,
    swig_CHeight_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHeight_bases[] = {0,0};
static const char *swig_CHeight_base_names[] = {"CSectElem *",0};
static swig_lua_class _wrap_class_CHeight = { "CHeight", "CHeight", &SWIGTYPE_p_CHeight,_proxy__wrap_new_CHeight, swig_delete_CHeight, swig_CHeight_methods, swig_CHeight_attributes, &swig_CHeight_Sf_SwigStatic, swig_CHeight_meta, swig_CHeight_bases, swig_CHeight_base_names };

static int _wrap_new_CLightElem(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::CLightElem",0,0)
    result = (CLightElem *)new CLightElem();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLightElem,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_ByteSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CLightElem::ByteSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::ByteSize",1,"CLightElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_ByteSize",1,SWIGTYPE_p_CLightElem);
    }
    
    result = (unsigned long)(arg1)->ByteSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Sum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::Sum",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Sum",1,"CLightElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLightElem::Sum",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CLightElem::Sum",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Sum",1,SWIGTYPE_p_CLightElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_Sum",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_Sum",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Sum(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Mult__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::Mult",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Mult",1,"CLightElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLightElem::Mult",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CLightElem::Mult",3,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Mult",1,SWIGTYPE_p_CLightElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_Mult",3,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_LinInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::LinInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::LinInterpolate",1,"CLightElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLightElem::LinInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CLightElem::LinInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CLightElem::LinInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_LinInterpolate",1,SWIGTYPE_p_CLightElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_LinInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_LinInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->LinInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_CosInterpolate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *arg3 = 0 ;
    float arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::CosInterpolate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::CosInterpolate",1,"CLightElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLightElem::CosInterpolate",2,"CSectElem &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CLightElem::CosInterpolate",3,"CSectElem &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CLightElem::CosInterpolate",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_CosInterpolate",1,SWIGTYPE_p_CLightElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_CosInterpolate",2,SWIGTYPE_p_CSectElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_CosInterpolate",3,SWIGTYPE_p_CSectElem);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->CosInterpolate(*arg2,*arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CLightElem::Get",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Get",1,"CLightElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Get",1,SWIGTYPE_p_CLightElem);
    }
    
    result = (void *)(arg1)->Get();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CLightElem::Set",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Set",1,"CLightElem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CLightElem::Set",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Set",1,SWIGTYPE_p_CLightElem);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CLightElem_Set");
    (arg1)->Set(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::CreateClass",1,"CLightElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_CreateClass",1,SWIGTYPE_p_CLightElem);
    }
    
    result = (CSectElem *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Clear(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Clear",1,"CLightElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Clear",1,SWIGTYPE_p_CLightElem);
    }
    
    result = (CSectElem *) &(arg1)->Clear();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Add(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::Add",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Add",1,"CLightElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLightElem::Add",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Add",1,SWIGTYPE_p_CLightElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_Add",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Add(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Mult__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    CSectElem *arg2 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::Mult",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Mult",1,"CLightElem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CLightElem::Mult",2,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Mult",1,SWIGTYPE_p_CLightElem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLightElem_Mult",2,SWIGTYPE_p_CSectElem);
    }
    
    result = (CSectElem *) &(arg1)->Mult(*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightElem_Mult(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CLightElem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CLightElem_Mult__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CLightElem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CSectElem, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CLightElem_Mult__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CLightElem_Mult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CLightElem::Mult(CSectElem &,CSectElem &)\n"
    "    CLightElem::Mult(CSectElem &)\n");
  lua_error(L);return 0;
}


static int _wrap_CLightElem_Scale(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightElem *arg1 = 0 ;
    float arg2 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLightElem::Scale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightElem::Scale",1,"CLightElem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLightElem::Scale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightElem,0))){
      SWIG_fail_ptr("CLightElem_Scale",1,SWIGTYPE_p_CLightElem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CSectElem *) &(arg1)->Scale(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLightElem(void *obj) {
CLightElem *arg1 = (CLightElem *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLightElem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLightElem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLightElem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLightElem_methods[]= {
    { "ByteSize", _wrap_CLightElem_ByteSize},
    { "Sum", _wrap_CLightElem_Sum},
    { "LinInterpolate", _wrap_CLightElem_LinInterpolate},
    { "CosInterpolate", _wrap_CLightElem_CosInterpolate},
    { "Get", _wrap_CLightElem_Get},
    { "Set", _wrap_CLightElem_Set},
    { "CreateClass", _wrap_CLightElem_CreateClass},
    { "Clear", _wrap_CLightElem_Clear},
    { "Add", _wrap_CLightElem_Add},
    { "Mult", _wrap_CLightElem_Mult},
    { "Scale", _wrap_CLightElem_Scale},
    {0,0}
};
static swig_lua_method swig_CLightElem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLightElem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLightElem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLightElem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLightElem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLightElem_Sf_SwigStatic = {
    "CLightElem",
    swig_CLightElem_Sf_SwigStatic_methods,
    swig_CLightElem_Sf_SwigStatic_attributes,
    swig_CLightElem_Sf_SwigStatic_constants,
    swig_CLightElem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLightElem_bases[] = {0,0};
static const char *swig_CLightElem_base_names[] = {"CSectElem *",0};
static swig_lua_class _wrap_class_CLightElem = { "CLightElem", "CLightElem", &SWIGTYPE_p_CLightElem,_proxy__wrap_new_CLightElem, swig_delete_CLightElem, swig_CLightElem_methods, swig_CLightElem_attributes, &swig_CLightElem_Sf_SwigStatic, swig_CLightElem_meta, swig_CLightElem_bases, swig_CLightElem_base_names };

static int _wrap_new_CTile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *result = 0 ;
    
    SWIG_check_num_args("CTile::CTile",0,0)
    result = (CTile *)new CTile();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTile,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_ByteSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CTile::ByteSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::ByteSize",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_ByteSize",1,SWIGTYPE_p_CTile);
    }
    
    result = (unsigned long)(arg1)->ByteSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_Get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CTile::Get",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::Get",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_Get",1,SWIGTYPE_p_CTile);
    }
    
    result = (void *)(arg1)->Get();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CTile::Set",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::Set",1,"CTile *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTile::Set",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_Set",1,SWIGTYPE_p_CTile);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CTile_Set");
    (arg1)->Set(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CTile::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::CreateClass",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_CreateClass",1,SWIGTYPE_p_CTile);
    }
    
    result = (CSectElem *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_GetTileIdx(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::GetTileIdx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::GetTileIdx",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_GetTileIdx",1,SWIGTYPE_p_CTile);
    }
    
    result = (int)(arg1)->GetTileIdx();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_SetTileIdx(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::SetTileIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::SetTileIdx",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::SetTileIdx",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_SetTileIdx",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->SetTileIdx(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_GetTransitionType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::GetTransitionType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::GetTransitionType",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_GetTransitionType",1,SWIGTYPE_p_CTile);
    }
    
    result = (int)(arg1)->GetTransitionType();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_SetTransitionType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::SetTransitionType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::SetTransitionType",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::SetTransitionType",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_SetTransitionType",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->SetTransitionType(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_GetTransTileIdx(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::GetTransTileIdx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::GetTransTileIdx",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_GetTransTileIdx",1,SWIGTYPE_p_CTile);
    }
    
    result = (int)(arg1)->GetTransTileIdx();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_SetTransTileIdx(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::SetTransTileIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::SetTransTileIdx",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::SetTransTileIdx",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_SetTransTileIdx",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->SetTransTileIdx(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_GetRotationType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::GetRotationType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::GetRotationType",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_GetRotationType",1,SWIGTYPE_p_CTile);
    }
    
    result = (int)(arg1)->GetRotationType();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_SetRotationType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::SetRotationType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::SetRotationType",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::SetRotationType",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_SetRotationType",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->SetRotationType(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_GetInvisible(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CTile::GetInvisible",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::GetInvisible",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_GetInvisible",1,SWIGTYPE_p_CTile);
    }
    
    result = (bool)(arg1)->GetInvisible();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_SetInvisible(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CTile::SetInvisible",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::SetInvisible",1,"CTile *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CTile::SetInvisible",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_SetInvisible",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->SetInvisible(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_GetOldTransition(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::GetOldTransition",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::GetOldTransition",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_GetOldTransition",1,SWIGTYPE_p_CTile);
    }
    
    result = (int)(arg1)->GetOldTransition();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_SetOldTransition(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::SetOldTransition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::SetOldTransition",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::SetOldTransition",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_SetOldTransition",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->SetOldTransition(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_TileIdx_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::TileIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::TileIdx",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::TileIdx",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_TileIdx_set",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TileIdx = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_TileIdx_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::TileIdx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::TileIdx",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_TileIdx_get",1,SWIGTYPE_p_CTile);
    }
    
    result = (int) ((arg1)->TileIdx);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_TransitionType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::TransitionType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::TransitionType",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::TransitionType",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_TransitionType_set",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TransitionType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_TransitionType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::TransitionType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::TransitionType",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_TransitionType_get",1,SWIGTYPE_p_CTile);
    }
    
    result = (int) ((arg1)->TransitionType);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_TransTileIdx_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::TransTileIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::TransTileIdx",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::TransTileIdx",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_TransTileIdx_set",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TransTileIdx = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_TransTileIdx_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::TransTileIdx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::TransTileIdx",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_TransTileIdx_get",1,SWIGTYPE_p_CTile);
    }
    
    result = (int) ((arg1)->TransTileIdx);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_RotationType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::RotationType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::RotationType",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::RotationType",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_RotationType_set",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->RotationType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_RotationType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::RotationType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::RotationType",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_RotationType_get",1,SWIGTYPE_p_CTile);
    }
    
    result = (int) ((arg1)->RotationType);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_Invisible_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CTile::Invisible",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::Invisible",1,"CTile *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CTile::Invisible",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_Invisible_set",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Invisible = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_Invisible_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CTile::Invisible",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::Invisible",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_Invisible_get",1,SWIGTYPE_p_CTile);
    }
    
    result = (bool) ((arg1)->Invisible);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_OldTransition_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTile::OldTransition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::OldTransition",1,"CTile *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTile::OldTransition",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_OldTransition_set",1,SWIGTYPE_p_CTile);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->OldTransition = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTile_OldTransition_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTile *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CTile::OldTransition",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTile::OldTransition",1,"CTile *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTile,0))){
      SWIG_fail_ptr("CTile_OldTransition_get",1,SWIGTYPE_p_CTile);
    }
    
    result = (int) ((arg1)->OldTransition);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTile(void *obj) {
CTile *arg1 = (CTile *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTile_attributes[] = {
    { "TileIdx", _wrap_CTile_TileIdx_get, _wrap_CTile_TileIdx_set },
    { "TransitionType", _wrap_CTile_TransitionType_get, _wrap_CTile_TransitionType_set },
    { "TransTileIdx", _wrap_CTile_TransTileIdx_get, _wrap_CTile_TransTileIdx_set },
    { "RotationType", _wrap_CTile_RotationType_get, _wrap_CTile_RotationType_set },
    { "Invisible", _wrap_CTile_Invisible_get, _wrap_CTile_Invisible_set },
    { "OldTransition", _wrap_CTile_OldTransition_get, _wrap_CTile_OldTransition_set },
    {0,0,0}
};
static swig_lua_method swig_CTile_methods[]= {
    { "ByteSize", _wrap_CTile_ByteSize},
    { "Get", _wrap_CTile_Get},
    { "Set", _wrap_CTile_Set},
    { "CreateClass", _wrap_CTile_CreateClass},
    { "GetTileIdx", _wrap_CTile_GetTileIdx},
    { "SetTileIdx", _wrap_CTile_SetTileIdx},
    { "GetTransitionType", _wrap_CTile_GetTransitionType},
    { "SetTransitionType", _wrap_CTile_SetTransitionType},
    { "GetTransTileIdx", _wrap_CTile_GetTransTileIdx},
    { "SetTransTileIdx", _wrap_CTile_SetTransTileIdx},
    { "GetRotationType", _wrap_CTile_GetRotationType},
    { "SetRotationType", _wrap_CTile_SetRotationType},
    { "GetInvisible", _wrap_CTile_GetInvisible},
    { "SetInvisible", _wrap_CTile_SetInvisible},
    { "GetOldTransition", _wrap_CTile_GetOldTransition},
    { "SetOldTransition", _wrap_CTile_SetOldTransition},
    {0,0}
};
static swig_lua_method swig_CTile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTile_Sf_SwigStatic = {
    "CTile",
    swig_CTile_Sf_SwigStatic_methods,
    swig_CTile_Sf_SwigStatic_attributes,
    swig_CTile_Sf_SwigStatic_constants,
    swig_CTile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTile_bases[] = {0,0};
static const char *swig_CTile_base_names[] = {"CSectElem *",0};
static swig_lua_class _wrap_class_CTile = { "CTile", "CTile", &SWIGTYPE_p_CTile,_proxy__wrap_new_CTile, swig_delete_CTile, swig_CTile_methods, swig_CTile_attributes, &swig_CTile_Sf_SwigStatic, swig_CTile_meta, swig_CTile_bases, swig_CTile_base_names };

static int _wrap_CSector_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int arg2 ;
    bool arg3 ;
    
    SWIG_check_num_args("CSector::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::Init",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::Init",2,"int");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("CSector::Init",3,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_Init",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    
    SWIG_check_num_args("CSector::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::Invalidate",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_Invalidate",1,SWIGTYPE_p_CSector);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_GetID(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CSector::GetID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::GetID",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_GetID",1,SWIGTYPE_p_CSector);
    }
    
    result = (unsigned long)(arg1)->GetID();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_ByteSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CSector::ByteSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::ByteSize",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_ByteSize",1,SWIGTYPE_p_CSector);
    }
    
    result = (unsigned long)(arg1)->ByteSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_GetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSector::GetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::GetValue",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::GetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSector::GetValue",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_GetValue",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValue(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CSector::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::SetValue",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSector::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CSector::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_SetValue",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSector_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_GetValueF(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSector::GetValueF",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::GetValueF",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::GetValueF",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSector::GetValueF",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_GetValueF",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValueF(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_GenerateLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int arg2 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSector::GenerateLOD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::GenerateLOD",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::GenerateLOD",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_GenerateLOD",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CSector *)(arg1)->GenerateLOD(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_GetLODData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int arg2 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CSector::GetLODData",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::GetLODData",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::GetLODData",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CSector::GetLODData",3,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_GetLODData",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CSector_GetLODData");
    (arg1)->GetLODData(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_iLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    char *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CSector::iLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::iLoad",1,"CSector *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CSector::iLoad",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_iLoad",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (int)(arg1)->iLoad(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_iLoadWithHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    FILE *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CSector::iLoadWithHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::iLoadWithHandler",1,"CSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSector::iLoadWithHandler",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_iLoadWithHandler",1,SWIGTYPE_p_CSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSector_iLoadWithHandler",2,SWIGTYPE_p_FILE);
    }
    
    result = (int)(arg1)->iLoadWithHandler(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_iSave(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    char *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CSector::iSave",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::iSave",1,"CSector *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CSector::iSave",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_iSave",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (int)(arg1)->iSave(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_iSaveWithHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    FILE *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CSector::iSaveWithHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::iSaveWithHandler",1,"CSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSector::iSaveWithHandler",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_iSaveWithHandler",1,SWIGTYPE_p_CSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSector_iSaveWithHandler",2,SWIGTYPE_p_FILE);
    }
    
    result = (int)(arg1)->iSaveWithHandler(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_DataSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CSector::DataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::DataSize",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_DataSize",1,SWIGTYPE_p_CSector);
    }
    
    result = (unsigned long)(arg1)->DataSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSector::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::CreateClass",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_CreateClass",1,SWIGTYPE_p_CSector);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_ElemArraySize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int arg2 ;
    unsigned long result;
    
    SWIG_check_num_args("CSector::ElemArraySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::ElemArraySize",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::ElemArraySize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_ElemArraySize",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (unsigned long)(arg1)->ElemArraySize(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_GetVGenMethod(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    EGenerationMethod result;
    
    SWIG_check_num_args("CSector::GetVGenMethod",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::GetVGenMethod",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_GetVGenMethod",1,SWIGTYPE_p_CSector);
    }
    
    result = (EGenerationMethod)(arg1)->GetVGenMethod();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_SetVGenMethod(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    EGenerationMethod arg2 ;
    
    SWIG_check_num_args("CSector::SetVGenMethod",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::SetVGenMethod",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::SetVGenMethod",2,"EGenerationMethod");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_SetVGenMethod",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (EGenerationMethod)(int)lua_tonumber(L, 2);
    (arg1)->SetVGenMethod(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_GetResolution(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CSector::GetResolution",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::GetResolution",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_GetResolution",1,SWIGTYPE_p_CSector);
    }
    
    result = (int)(arg1)->GetResolution();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_VGenMethod_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    EGenerationMethod arg2 ;
    
    SWIG_check_num_args("CSector::VGenMethod",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::VGenMethod",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::VGenMethod",2,"EGenerationMethod");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_VGenMethod_set",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (EGenerationMethod)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->VGenMethod = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_VGenMethod_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    EGenerationMethod result;
    
    SWIG_check_num_args("CSector::VGenMethod",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::VGenMethod",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_VGenMethod_get",1,SWIGTYPE_p_CSector);
    }
    
    result = (EGenerationMethod) ((arg1)->VGenMethod);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_Resolution_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CSector::Resolution",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::Resolution",1,"CSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSector::Resolution",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_Resolution_set",1,SWIGTYPE_p_CSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->Resolution = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSector_Resolution_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSector *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CSector::Resolution",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSector::Resolution",1,"CSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSector,0))){
      SWIG_fail_ptr("CSector_Resolution_get",1,SWIGTYPE_p_CSector);
    }
    
    result = (int) ((arg1)->Resolution);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSector(void *obj) {
CSector *arg1 = (CSector *) obj;
delete arg1;
}
static swig_lua_attribute swig_CSector_attributes[] = {
    { "VGenMethod", _wrap_CSector_VGenMethod_get, _wrap_CSector_VGenMethod_set },
    { "Resolution", _wrap_CSector_Resolution_get, _wrap_CSector_Resolution_set },
    {0,0,0}
};
static swig_lua_method swig_CSector_methods[]= {
    { "Init", _wrap_CSector_Init},
    { "Invalidate", _wrap_CSector_Invalidate},
    { "GetID", _wrap_CSector_GetID},
    { "ByteSize", _wrap_CSector_ByteSize},
    { "GetValue", _wrap_CSector_GetValue},
    { "SetValue", _wrap_CSector_SetValue},
    { "GetValueF", _wrap_CSector_GetValueF},
    { "GenerateLOD", _wrap_CSector_GenerateLOD},
    { "GetLODData", _wrap_CSector_GetLODData},
    { "iLoad", _wrap_CSector_iLoad},
    { "iLoadWithHandler", _wrap_CSector_iLoadWithHandler},
    { "iSave", _wrap_CSector_iSave},
    { "iSaveWithHandler", _wrap_CSector_iSaveWithHandler},
    { "DataSize", _wrap_CSector_DataSize},
    { "CreateClass", _wrap_CSector_CreateClass},
    { "ElemArraySize", _wrap_CSector_ElemArraySize},
    { "GetVGenMethod", _wrap_CSector_GetVGenMethod},
    { "SetVGenMethod", _wrap_CSector_SetVGenMethod},
    { "GetResolution", _wrap_CSector_GetResolution},
    {0,0}
};
static swig_lua_method swig_CSector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSector_Sf_SwigStatic = {
    "CSector",
    swig_CSector_Sf_SwigStatic_methods,
    swig_CSector_Sf_SwigStatic_attributes,
    swig_CSector_Sf_SwigStatic_constants,
    swig_CSector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSector_bases[] = {0};
static const char *swig_CSector_base_names[] = {0};
static swig_lua_class _wrap_class_CSector = { "CSector", "CSector", &SWIGTYPE_p_CSector,0, swig_delete_CSector, swig_CSector_methods, swig_CSector_attributes, &swig_CSector_Sf_SwigStatic, swig_CSector_meta, swig_CSector_bases, swig_CSector_base_names };

static void swig_delete_CTexSector(void *obj) {
CTexSector *arg1 = (CTexSector *) obj;
delete arg1;
}
static swig_lua_attribute swig_CTexSector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CTexSector_methods[]= {
    {0,0}
};
static swig_lua_method swig_CTexSector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTexSector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTexSector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTexSector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTexSector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTexSector_Sf_SwigStatic = {
    "CTexSector",
    swig_CTexSector_Sf_SwigStatic_methods,
    swig_CTexSector_Sf_SwigStatic_attributes,
    swig_CTexSector_Sf_SwigStatic_constants,
    swig_CTexSector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTexSector_bases[] = {0,0};
static const char *swig_CTexSector_base_names[] = {"CSector *",0};
static swig_lua_class _wrap_class_CTexSector = { "CTexSector", "CTexSector", &SWIGTYPE_p_CTexSector,0, swig_delete_CTexSector, swig_CTexSector_methods, swig_CTexSector_attributes, &swig_CTexSector_Sf_SwigStatic, swig_CTexSector_meta, swig_CTexSector_bases, swig_CTexSector_base_names };

static void swig_delete_CTMSector(void *obj) {
CTMSector *arg1 = (CTMSector *) obj;
delete arg1;
}
static swig_lua_attribute swig_CTMSector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CTMSector_methods[]= {
    {0,0}
};
static swig_lua_method swig_CTMSector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTMSector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTMSector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTMSector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTMSector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTMSector_Sf_SwigStatic = {
    "CTMSector",
    swig_CTMSector_Sf_SwigStatic_methods,
    swig_CTMSector_Sf_SwigStatic_attributes,
    swig_CTMSector_Sf_SwigStatic_constants,
    swig_CTMSector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTMSector_bases[] = {0,0};
static const char *swig_CTMSector_base_names[] = {"CSector *",0};
static swig_lua_class _wrap_class_CTMSector = { "CTMSector", "CTMSector", &SWIGTYPE_p_CTMSector,0, swig_delete_CTMSector, swig_CTMSector_methods, swig_CTMSector_attributes, &swig_CTMSector_Sf_SwigStatic, swig_CTMSector_meta, swig_CTMSector_bases, swig_CTMSector_base_names };

static int _wrap_CHFSector_GetMaxHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHFSector::GetMaxHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector::GetMaxHeight",1,"CHFSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector,0))){
      SWIG_fail_ptr("CHFSector_GetMaxHeight",1,SWIGTYPE_p_CHFSector);
    }
    
    result = (float)(arg1)->GetMaxHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_GetMinHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHFSector::GetMinHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector::GetMinHeight",1,"CHFSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector,0))){
      SWIG_fail_ptr("CHFSector_GetMinHeight",1,SWIGTYPE_p_CHFSector);
    }
    
    result = (float)(arg1)->GetMinHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_RecomputeMaxMins(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector *arg1 = 0 ;
    
    SWIG_check_num_args("CHFSector::RecomputeMaxMins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector::RecomputeMaxMins",1,"CHFSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector,0))){
      SWIG_fail_ptr("CHFSector_RecomputeMaxMins",1,SWIGTYPE_p_CHFSector);
    }
    
    (arg1)->RecomputeMaxMins();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CHFSector::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector::SetValue",1,"CHFSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHFSector::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHFSector::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CHFSector::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector,0))){
      SWIG_fail_ptr("CHFSector_SetValue",1,SWIGTYPE_p_CHFSector);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHFSector_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHFSector(void *obj) {
CHFSector *arg1 = (CHFSector *) obj;
delete arg1;
}
static swig_lua_attribute swig_CHFSector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHFSector_methods[]= {
    { "GetMaxHeight", _wrap_CHFSector_GetMaxHeight},
    { "GetMinHeight", _wrap_CHFSector_GetMinHeight},
    { "RecomputeMaxMins", _wrap_CHFSector_RecomputeMaxMins},
    { "SetValue", _wrap_CHFSector_SetValue},
    {0,0}
};
static swig_lua_method swig_CHFSector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHFSector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHFSector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHFSector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHFSector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHFSector_Sf_SwigStatic = {
    "CHFSector",
    swig_CHFSector_Sf_SwigStatic_methods,
    swig_CHFSector_Sf_SwigStatic_attributes,
    swig_CHFSector_Sf_SwigStatic_constants,
    swig_CHFSector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHFSector_bases[] = {0,0};
static const char *swig_CHFSector_base_names[] = {"CSector *",0};
static swig_lua_class _wrap_class_CHFSector = { "CHFSector", "CHFSector", &SWIGTYPE_p_CHFSector,0, swig_delete_CHFSector, swig_CHFSector_methods, swig_CHFSector_attributes, &swig_CHFSector_Sf_SwigStatic, swig_CHFSector_meta, swig_CHFSector_bases, swig_CHFSector_base_names };

static void swig_delete_CLMSector(void *obj) {
CLMSector *arg1 = (CLMSector *) obj;
delete arg1;
}
static swig_lua_attribute swig_CLMSector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLMSector_methods[]= {
    {0,0}
};
static swig_lua_method swig_CLMSector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLMSector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLMSector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLMSector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLMSector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLMSector_Sf_SwigStatic = {
    "CLMSector",
    swig_CLMSector_Sf_SwigStatic_methods,
    swig_CLMSector_Sf_SwigStatic_attributes,
    swig_CLMSector_Sf_SwigStatic_constants,
    swig_CLMSector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLMSector_bases[] = {0,0};
static const char *swig_CLMSector_base_names[] = {"CSector *",0};
static swig_lua_class _wrap_class_CLMSector = { "CLMSector", "CLMSector", &SWIGTYPE_p_CLMSector,0, swig_delete_CLMSector, swig_CLMSector_methods, swig_CLMSector_attributes, &swig_CLMSector_Sf_SwigStatic, swig_CLMSector_meta, swig_CLMSector_bases, swig_CLMSector_base_names };

static int _wrap_new_CHFSector_FN(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector_FN *result = 0 ;
    
    SWIG_check_num_args("CHFSector_FN::CHFSector_FN",0,0)
    result = (CHFSector_FN *)new CHFSector_FN();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHFSector_FN,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_FN_GetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector_FN *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHFSector_FN::GetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector_FN::GetValue",1,"CHFSector_FN *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHFSector_FN::GetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHFSector_FN::GetValue",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector_FN,0))){
      SWIG_fail_ptr("CHFSector_FN_GetValue",1,SWIGTYPE_p_CHFSector_FN);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValue(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_FN_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector_FN *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CHFSector_FN::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector_FN::SetValue",1,"CHFSector_FN *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHFSector_FN::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHFSector_FN::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CHFSector_FN::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector_FN,0))){
      SWIG_fail_ptr("CHFSector_FN_SetValue",1,SWIGTYPE_p_CHFSector_FN);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHFSector_FN_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_FN_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector_FN *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CHFSector_FN::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector_FN::CreateClass",1,"CHFSector_FN *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector_FN,0))){
      SWIG_fail_ptr("CHFSector_FN_CreateClass",1,SWIGTYPE_p_CHFSector_FN);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_FN_ElemArraySize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector_FN *arg1 = 0 ;
    int arg2 ;
    unsigned long result;
    
    SWIG_check_num_args("CHFSector_FN::ElemArraySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector_FN::ElemArraySize",1,"CHFSector_FN *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHFSector_FN::ElemArraySize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector_FN,0))){
      SWIG_fail_ptr("CHFSector_FN_ElemArraySize",1,SWIGTYPE_p_CHFSector_FN);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (unsigned long)(arg1)->ElemArraySize(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_FN_GetLODData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector_FN *arg1 = 0 ;
    int arg2 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CHFSector_FN::GetLODData",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector_FN::GetLODData",1,"CHFSector_FN *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHFSector_FN::GetLODData",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CHFSector_FN::GetLODData",3,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector_FN,0))){
      SWIG_fail_ptr("CHFSector_FN_GetLODData",1,SWIGTYPE_p_CHFSector_FN);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CHFSector_FN_GetLODData");
    (arg1)->GetLODData(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHFSector_FN_GetValueF(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHFSector_FN *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHFSector_FN::GetValueF",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHFSector_FN::GetValueF",1,"CHFSector_FN *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHFSector_FN::GetValueF",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHFSector_FN::GetValueF",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHFSector_FN,0))){
      SWIG_fail_ptr("CHFSector_FN_GetValueF",1,SWIGTYPE_p_CHFSector_FN);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValueF(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHFSector_FN(void *obj) {
CHFSector_FN *arg1 = (CHFSector_FN *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHFSector_FN(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHFSector_FN);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHFSector_FN_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHFSector_FN_methods[]= {
    { "GetValue", _wrap_CHFSector_FN_GetValue},
    { "SetValue", _wrap_CHFSector_FN_SetValue},
    { "CreateClass", _wrap_CHFSector_FN_CreateClass},
    { "ElemArraySize", _wrap_CHFSector_FN_ElemArraySize},
    { "GetLODData", _wrap_CHFSector_FN_GetLODData},
    { "GetValueF", _wrap_CHFSector_FN_GetValueF},
    {0,0}
};
static swig_lua_method swig_CHFSector_FN_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHFSector_FN_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHFSector_FN_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHFSector_FN_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHFSector_FN_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHFSector_FN_Sf_SwigStatic = {
    "CHFSector_FN",
    swig_CHFSector_FN_Sf_SwigStatic_methods,
    swig_CHFSector_FN_Sf_SwigStatic_attributes,
    swig_CHFSector_FN_Sf_SwigStatic_constants,
    swig_CHFSector_FN_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHFSector_FN_bases[] = {0,0};
static const char *swig_CHFSector_FN_base_names[] = {"CHFSector *",0};
static swig_lua_class _wrap_class_CHFSector_FN = { "CHFSector_FN", "CHFSector_FN", &SWIGTYPE_p_CHFSector_FN,_proxy__wrap_new_CHFSector_FN, swig_delete_CHFSector_FN, swig_CHFSector_FN_methods, swig_CHFSector_FN_attributes, &swig_CHFSector_FN_Sf_SwigStatic, swig_CHFSector_FN_meta, swig_CHFSector_FN_bases, swig_CHFSector_FN_base_names };

static int _wrap_new_CLMSector_Gray(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Gray *result = 0 ;
    
    SWIG_check_num_args("CLMSector_Gray::CLMSector_Gray",0,0)
    result = (CLMSector_Gray *)new CLMSector_Gray();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLMSector_Gray,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Gray_GetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Gray *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLMSector_Gray::GetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Gray::GetValue",1,"CLMSector_Gray *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_Gray::GetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLMSector_Gray::GetValue",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Gray,0))){
      SWIG_fail_ptr("CLMSector_Gray_GetValue",1,SWIGTYPE_p_CLMSector_Gray);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValue(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Gray_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Gray *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CLMSector_Gray::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Gray::SetValue",1,"CLMSector_Gray *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_Gray::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLMSector_Gray::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CLMSector_Gray::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Gray,0))){
      SWIG_fail_ptr("CLMSector_Gray_SetValue",1,SWIGTYPE_p_CLMSector_Gray);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLMSector_Gray_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Gray_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Gray *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CLMSector_Gray::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Gray::CreateClass",1,"CLMSector_Gray *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Gray,0))){
      SWIG_fail_ptr("CLMSector_Gray_CreateClass",1,SWIGTYPE_p_CLMSector_Gray);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Gray_ElemArraySize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Gray *arg1 = 0 ;
    int arg2 ;
    unsigned long result;
    
    SWIG_check_num_args("CLMSector_Gray::ElemArraySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Gray::ElemArraySize",1,"CLMSector_Gray *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_Gray::ElemArraySize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Gray,0))){
      SWIG_fail_ptr("CLMSector_Gray_ElemArraySize",1,SWIGTYPE_p_CLMSector_Gray);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (unsigned long)(arg1)->ElemArraySize(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLMSector_Gray(void *obj) {
CLMSector_Gray *arg1 = (CLMSector_Gray *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLMSector_Gray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLMSector_Gray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLMSector_Gray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLMSector_Gray_methods[]= {
    { "GetValue", _wrap_CLMSector_Gray_GetValue},
    { "SetValue", _wrap_CLMSector_Gray_SetValue},
    { "CreateClass", _wrap_CLMSector_Gray_CreateClass},
    { "ElemArraySize", _wrap_CLMSector_Gray_ElemArraySize},
    {0,0}
};
static swig_lua_method swig_CLMSector_Gray_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLMSector_Gray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLMSector_Gray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLMSector_Gray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLMSector_Gray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLMSector_Gray_Sf_SwigStatic = {
    "CLMSector_Gray",
    swig_CLMSector_Gray_Sf_SwigStatic_methods,
    swig_CLMSector_Gray_Sf_SwigStatic_attributes,
    swig_CLMSector_Gray_Sf_SwigStatic_constants,
    swig_CLMSector_Gray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLMSector_Gray_bases[] = {0,0};
static const char *swig_CLMSector_Gray_base_names[] = {"CLMSector *",0};
static swig_lua_class _wrap_class_CLMSector_Gray = { "CLMSector_Gray", "CLMSector_Gray", &SWIGTYPE_p_CLMSector_Gray,_proxy__wrap_new_CLMSector_Gray, swig_delete_CLMSector_Gray, swig_CLMSector_Gray_methods, swig_CLMSector_Gray_attributes, &swig_CLMSector_Gray_Sf_SwigStatic, swig_CLMSector_Gray_meta, swig_CLMSector_Gray_bases, swig_CLMSector_Gray_base_names };

static int _wrap_new_CLMSector_Pal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Pal *result = 0 ;
    
    SWIG_check_num_args("CLMSector_Pal::CLMSector_Pal",0,0)
    result = (CLMSector_Pal *)new CLMSector_Pal();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLMSector_Pal,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Pal_GetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Pal *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLMSector_Pal::GetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Pal::GetValue",1,"CLMSector_Pal *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_Pal::GetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLMSector_Pal::GetValue",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Pal,0))){
      SWIG_fail_ptr("CLMSector_Pal_GetValue",1,SWIGTYPE_p_CLMSector_Pal);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValue(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Pal_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Pal *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CLMSector_Pal::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Pal::SetValue",1,"CLMSector_Pal *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_Pal::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLMSector_Pal::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CLMSector_Pal::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Pal,0))){
      SWIG_fail_ptr("CLMSector_Pal_SetValue",1,SWIGTYPE_p_CLMSector_Pal);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLMSector_Pal_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Pal_DataSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Pal *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CLMSector_Pal::DataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Pal::DataSize",1,"CLMSector_Pal *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Pal,0))){
      SWIG_fail_ptr("CLMSector_Pal_DataSize",1,SWIGTYPE_p_CLMSector_Pal);
    }
    
    result = (unsigned long)(arg1)->DataSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Pal_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Pal *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CLMSector_Pal::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Pal::CreateClass",1,"CLMSector_Pal *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Pal,0))){
      SWIG_fail_ptr("CLMSector_Pal_CreateClass",1,SWIGTYPE_p_CLMSector_Pal);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Pal_set_Pal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Pal *arg1 = 0 ;
    char *arg2 = 0 ;
    
    SWIG_check_num_args("CLMSector_Pal::set_Pal",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Pal::set_Pal",1,"CLMSector_Pal *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CLMSector_Pal::set_Pal",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Pal,0))){
      SWIG_fail_ptr("CLMSector_Pal_set_Pal",1,SWIGTYPE_p_CLMSector_Pal);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    (arg1)->set_Pal(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_Pal_ElemArraySize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_Pal *arg1 = 0 ;
    int arg2 ;
    unsigned long result;
    
    SWIG_check_num_args("CLMSector_Pal::ElemArraySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_Pal::ElemArraySize",1,"CLMSector_Pal *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_Pal::ElemArraySize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_Pal,0))){
      SWIG_fail_ptr("CLMSector_Pal_ElemArraySize",1,SWIGTYPE_p_CLMSector_Pal);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (unsigned long)(arg1)->ElemArraySize(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLMSector_Pal(void *obj) {
CLMSector_Pal *arg1 = (CLMSector_Pal *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLMSector_Pal(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLMSector_Pal);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLMSector_Pal_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLMSector_Pal_methods[]= {
    { "GetValue", _wrap_CLMSector_Pal_GetValue},
    { "SetValue", _wrap_CLMSector_Pal_SetValue},
    { "DataSize", _wrap_CLMSector_Pal_DataSize},
    { "CreateClass", _wrap_CLMSector_Pal_CreateClass},
    { "set_Pal", _wrap_CLMSector_Pal_set_Pal},
    { "ElemArraySize", _wrap_CLMSector_Pal_ElemArraySize},
    {0,0}
};
static swig_lua_method swig_CLMSector_Pal_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLMSector_Pal_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLMSector_Pal_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLMSector_Pal_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLMSector_Pal_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLMSector_Pal_Sf_SwigStatic = {
    "CLMSector_Pal",
    swig_CLMSector_Pal_Sf_SwigStatic_methods,
    swig_CLMSector_Pal_Sf_SwigStatic_attributes,
    swig_CLMSector_Pal_Sf_SwigStatic_constants,
    swig_CLMSector_Pal_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLMSector_Pal_bases[] = {0,0};
static const char *swig_CLMSector_Pal_base_names[] = {"CLMSector *",0};
static swig_lua_class _wrap_class_CLMSector_Pal = { "CLMSector_Pal", "CLMSector_Pal", &SWIGTYPE_p_CLMSector_Pal,_proxy__wrap_new_CLMSector_Pal, swig_delete_CLMSector_Pal, swig_CLMSector_Pal_methods, swig_CLMSector_Pal_attributes, &swig_CLMSector_Pal_Sf_SwigStatic, swig_CLMSector_Pal_meta, swig_CLMSector_Pal_bases, swig_CLMSector_Pal_base_names };

static int _wrap_new_CLMSector_RGB24(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_RGB24 *result = 0 ;
    
    SWIG_check_num_args("CLMSector_RGB24::CLMSector_RGB24",0,0)
    result = (CLMSector_RGB24 *)new CLMSector_RGB24();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLMSector_RGB24,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_RGB24_GetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_RGB24 *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CLMSector_RGB24::GetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_RGB24::GetValue",1,"CLMSector_RGB24 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_RGB24::GetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLMSector_RGB24::GetValue",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_RGB24,0))){
      SWIG_fail_ptr("CLMSector_RGB24_GetValue",1,SWIGTYPE_p_CLMSector_RGB24);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValue(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_RGB24_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_RGB24 *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CLMSector_RGB24::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_RGB24::SetValue",1,"CLMSector_RGB24 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_RGB24::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLMSector_RGB24::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CLMSector_RGB24::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_RGB24,0))){
      SWIG_fail_ptr("CLMSector_RGB24_SetValue",1,SWIGTYPE_p_CLMSector_RGB24);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CLMSector_RGB24_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_RGB24_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_RGB24 *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CLMSector_RGB24::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_RGB24::CreateClass",1,"CLMSector_RGB24 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_RGB24,0))){
      SWIG_fail_ptr("CLMSector_RGB24_CreateClass",1,SWIGTYPE_p_CLMSector_RGB24);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_RGB24_ElemArraySize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_RGB24 *arg1 = 0 ;
    int arg2 ;
    unsigned long result;
    
    SWIG_check_num_args("CLMSector_RGB24::ElemArraySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_RGB24::ElemArraySize",1,"CLMSector_RGB24 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_RGB24::ElemArraySize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_RGB24,0))){
      SWIG_fail_ptr("CLMSector_RGB24_ElemArraySize",1,SWIGTYPE_p_CLMSector_RGB24);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (unsigned long)(arg1)->ElemArraySize(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLMSector_RGB24_GetLODData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLMSector_RGB24 *arg1 = 0 ;
    int arg2 ;
    void *arg3 = 0 ;
    
    SWIG_check_num_args("CLMSector_RGB24::GetLODData",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLMSector_RGB24::GetLODData",1,"CLMSector_RGB24 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLMSector_RGB24::GetLODData",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CLMSector_RGB24::GetLODData",3,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLMSector_RGB24,0))){
      SWIG_fail_ptr("CLMSector_RGB24_GetLODData",1,SWIGTYPE_p_CLMSector_RGB24);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CLMSector_RGB24_GetLODData");
    (arg1)->GetLODData(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLMSector_RGB24(void *obj) {
CLMSector_RGB24 *arg1 = (CLMSector_RGB24 *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLMSector_RGB24(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLMSector_RGB24);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLMSector_RGB24_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLMSector_RGB24_methods[]= {
    { "GetValue", _wrap_CLMSector_RGB24_GetValue},
    { "SetValue", _wrap_CLMSector_RGB24_SetValue},
    { "CreateClass", _wrap_CLMSector_RGB24_CreateClass},
    { "ElemArraySize", _wrap_CLMSector_RGB24_ElemArraySize},
    { "GetLODData", _wrap_CLMSector_RGB24_GetLODData},
    {0,0}
};
static swig_lua_method swig_CLMSector_RGB24_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLMSector_RGB24_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLMSector_RGB24_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLMSector_RGB24_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLMSector_RGB24_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLMSector_RGB24_Sf_SwigStatic = {
    "CLMSector_RGB24",
    swig_CLMSector_RGB24_Sf_SwigStatic_methods,
    swig_CLMSector_RGB24_Sf_SwigStatic_attributes,
    swig_CLMSector_RGB24_Sf_SwigStatic_constants,
    swig_CLMSector_RGB24_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLMSector_RGB24_bases[] = {0,0};
static const char *swig_CLMSector_RGB24_base_names[] = {"CLMSector *",0};
static swig_lua_class _wrap_class_CLMSector_RGB24 = { "CLMSector_RGB24", "CLMSector_RGB24", &SWIGTYPE_p_CLMSector_RGB24,_proxy__wrap_new_CLMSector_RGB24, swig_delete_CLMSector_RGB24, swig_CLMSector_RGB24_methods, swig_CLMSector_RGB24_attributes, &swig_CLMSector_RGB24_Sf_SwigStatic, swig_CLMSector_RGB24_meta, swig_CLMSector_RGB24_bases, swig_CLMSector_RGB24_base_names };

static int _wrap_new_CTMSector_8_16(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTMSector_8_16 *result = 0 ;
    
    SWIG_check_num_args("CTMSector_8_16::CTMSector_8_16",0,0)
    result = (CTMSector_8_16 *)new CTMSector_8_16();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTMSector_8_16,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTMSector_8_16_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTMSector_8_16 *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CTMSector_8_16::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTMSector_8_16::CreateClass",1,"CTMSector_8_16 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTMSector_8_16,0))){
      SWIG_fail_ptr("CTMSector_8_16_CreateClass",1,SWIGTYPE_p_CTMSector_8_16);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTMSector_8_16_ElemArraySize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTMSector_8_16 *arg1 = 0 ;
    int arg2 ;
    unsigned long result;
    
    SWIG_check_num_args("CTMSector_8_16::ElemArraySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTMSector_8_16::ElemArraySize",1,"CTMSector_8_16 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTMSector_8_16::ElemArraySize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTMSector_8_16,0))){
      SWIG_fail_ptr("CTMSector_8_16_ElemArraySize",1,SWIGTYPE_p_CTMSector_8_16);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (unsigned long)(arg1)->ElemArraySize(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTMSector_8_16_GetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTMSector_8_16 *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CTMSector_8_16::GetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTMSector_8_16::GetValue",1,"CTMSector_8_16 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTMSector_8_16::GetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTMSector_8_16::GetValue",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTMSector_8_16,0))){
      SWIG_fail_ptr("CTMSector_8_16_GetValue",1,SWIGTYPE_p_CTMSector_8_16);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValue(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTMSector_8_16_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTMSector_8_16 *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CTMSector_8_16::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTMSector_8_16::SetValue",1,"CTMSector_8_16 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTMSector_8_16::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTMSector_8_16::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CTMSector_8_16::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTMSector_8_16,0))){
      SWIG_fail_ptr("CTMSector_8_16_SetValue",1,SWIGTYPE_p_CTMSector_8_16);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CTMSector_8_16_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTMSector_8_16(void *obj) {
CTMSector_8_16 *arg1 = (CTMSector_8_16 *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTMSector_8_16(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTMSector_8_16);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTMSector_8_16_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CTMSector_8_16_methods[]= {
    { "CreateClass", _wrap_CTMSector_8_16_CreateClass},
    { "ElemArraySize", _wrap_CTMSector_8_16_ElemArraySize},
    { "GetValue", _wrap_CTMSector_8_16_GetValue},
    { "SetValue", _wrap_CTMSector_8_16_SetValue},
    {0,0}
};
static swig_lua_method swig_CTMSector_8_16_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTMSector_8_16_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTMSector_8_16_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTMSector_8_16_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTMSector_8_16_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTMSector_8_16_Sf_SwigStatic = {
    "CTMSector_8_16",
    swig_CTMSector_8_16_Sf_SwigStatic_methods,
    swig_CTMSector_8_16_Sf_SwigStatic_attributes,
    swig_CTMSector_8_16_Sf_SwigStatic_constants,
    swig_CTMSector_8_16_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTMSector_8_16_bases[] = {0,0};
static const char *swig_CTMSector_8_16_base_names[] = {"CTMSector *",0};
static swig_lua_class _wrap_class_CTMSector_8_16 = { "CTMSector_8_16", "CTMSector_8_16", &SWIGTYPE_p_CTMSector_8_16,_proxy__wrap_new_CTMSector_8_16, swig_delete_CTMSector_8_16, swig_CTMSector_8_16_methods, swig_CTMSector_8_16_attributes, &swig_CTMSector_8_16_Sf_SwigStatic, swig_CTMSector_8_16_meta, swig_CTMSector_8_16_bases, swig_CTMSector_8_16_base_names };

static int _wrap_new_CSectorLoaderManager(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorLoaderManager *result = 0 ;
    
    SWIG_check_num_args("CSectorLoaderManager::CSectorLoaderManager",0,0)
    result = (CSectorLoaderManager *)new CSectorLoaderManager();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectorLoaderManager,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorLoaderManager_poCreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorLoaderManager *arg1 = 0 ;
    FILE *arg2 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSectorLoaderManager::poCreateClass",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorLoaderManager::poCreateClass",1,"CSectorLoaderManager *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSectorLoaderManager::poCreateClass",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorLoaderManager,0))){
      SWIG_fail_ptr("CSectorLoaderManager_poCreateClass",1,SWIGTYPE_p_CSectorLoaderManager);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSectorLoaderManager_poCreateClass",2,SWIGTYPE_p_FILE);
    }
    
    result = (CSector *)(arg1)->poCreateClass(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSectorLoaderManager(void *obj) {
CSectorLoaderManager *arg1 = (CSectorLoaderManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSectorLoaderManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSectorLoaderManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSectorLoaderManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSectorLoaderManager_methods[]= {
    { "poCreateClass", _wrap_CSectorLoaderManager_poCreateClass},
    {0,0}
};
static swig_lua_method swig_CSectorLoaderManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSectorLoaderManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSectorLoaderManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSectorLoaderManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSectorLoaderManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSectorLoaderManager_Sf_SwigStatic = {
    "CSectorLoaderManager",
    swig_CSectorLoaderManager_Sf_SwigStatic_methods,
    swig_CSectorLoaderManager_Sf_SwigStatic_attributes,
    swig_CSectorLoaderManager_Sf_SwigStatic_constants,
    swig_CSectorLoaderManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSectorLoaderManager_bases[] = {0};
static const char *swig_CSectorLoaderManager_base_names[] = {0};
static swig_lua_class _wrap_class_CSectorLoaderManager = { "CSectorLoaderManager", "CSectorLoaderManager", &SWIGTYPE_p_CSectorLoaderManager,_proxy__wrap_new_CSectorLoaderManager, swig_delete_CSectorLoaderManager, swig_CSectorLoaderManager_methods, swig_CSectorLoaderManager_attributes, &swig_CSectorLoaderManager_Sf_SwigStatic, swig_CSectorLoaderManager_meta, swig_CSectorLoaderManager_bases, swig_CSectorLoaderManager_base_names };

static int _wrap_CSectorMatrix_iLoadWithHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    FILE *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CSectorMatrix::iLoadWithHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::iLoadWithHandler",1,"CSectorMatrix *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSectorMatrix::iLoadWithHandler",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_iLoadWithHandler",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSectorMatrix_iLoadWithHandler",2,SWIGTYPE_p_FILE);
    }
    
    result = (int)(arg1)->iLoadWithHandler(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_iSaveWithHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    FILE *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CSectorMatrix::iSaveWithHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::iSaveWithHandler",1,"CSectorMatrix *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSectorMatrix::iSaveWithHandler",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_iSaveWithHandler",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSectorMatrix_iSaveWithHandler",2,SWIGTYPE_p_FILE);
    }
    
    result = (int)(arg1)->iSaveWithHandler(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::Invalidate",1,"CSectorMatrix *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_Invalidate",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_Init__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CSectorMatrix::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::Init",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSectorMatrix::Init",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_Init",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_Init__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool arg6 ;
    
    SWIG_check_num_args("CSectorMatrix::Init",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::Init",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSectorMatrix::Init",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CSectorMatrix::Init",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CSectorMatrix::Init",5,"int");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("CSectorMatrix::Init",6,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_Init",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    arg6 = (lua_toboolean(L, 6)!=0);
    (arg1)->Init(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_Init__SWIG_2(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    bool arg3 ;
    
    SWIG_check_num_args("CSectorMatrix::Init",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::Init",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::Init",2,"int");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("CSectorMatrix::Init",3,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_Init",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0);
    (arg1)->Init(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_Init(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSectorMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CSectorMatrix_Init__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSectorMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CSectorMatrix_Init__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSectorMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_CSectorMatrix_Init__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSectorMatrix_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CSectorMatrix::Init(int,int)\n"
    "    CSectorMatrix::Init(int,int,int,int,bool)\n"
    "    CSectorMatrix::Init(int,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_CSectorMatrix_GetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::GetValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::GetValue",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::GetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSectorMatrix::GetValue",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_GetValue",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValue(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::SetValue",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSectorMatrix::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CSectorMatrix::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_SetValue",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectorMatrix_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_GetValueFromSect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::GetValueFromSect",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::GetValueFromSect",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::GetValueFromSect",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSectorMatrix::GetValueFromSect",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CSectorMatrix::GetValueFromSect",4,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_GetValueFromSect",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    result = (CSectElem *) &(arg1)->GetValueFromSect(arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_SetValueFromSect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CSectElem *arg5 = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::SetValueFromSect",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::SetValueFromSect",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::SetValueFromSect",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSectorMatrix::SetValueFromSect",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CSectorMatrix::SetValueFromSect",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CSectorMatrix::SetValueFromSect",5,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_SetValueFromSect",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CSectorMatrix_SetValueFromSect",5,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValueFromSect(arg2,arg3,arg4,*arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_ByteSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CSectorMatrix::ByteSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::ByteSize",1,"CSectorMatrix *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_ByteSize",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    result = (unsigned long)(arg1)->ByteSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_GetSector__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::GetSector",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::GetSector",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::GetSector",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_GetSector",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CSector *)(arg1)->GetSector(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_GetSector__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::GetSector",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::GetSector",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::GetSector",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CSectorMatrix::GetSector",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_GetSector",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (CSector *)(arg1)->GetSector(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_GetSector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSectorMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CSectorMatrix_GetSector__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CSectorMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CSectorMatrix_GetSector__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSectorMatrix_GetSector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CSectorMatrix::GetSector(int)\n"
    "    CSectorMatrix::GetSector(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CSectorMatrix_iGetSecsPerRow(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CSectorMatrix::iGetSecsPerRow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::iGetSecsPerRow",1,"CSectorMatrix *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_iGetSecsPerRow",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    result = (int)(arg1)->iGetSecsPerRow();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_iGetSecsPerCol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CSectorMatrix::iGetSecsPerCol",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::iGetSecsPerCol",1,"CSectorMatrix *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_iGetSecsPerCol",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    result = (int)(arg1)->iGetSecsPerCol();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_iGetDataType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CSectorMatrix::iGetDataType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::iGetDataType",1,"CSectorMatrix *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_iGetDataType",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    result = (int)(arg1)->iGetDataType();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_GenerateLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    int arg2 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::GenerateLOD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::GenerateLOD",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::GenerateLOD",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_GenerateLOD",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CSector *)(arg1)->GenerateLOD(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_SetVGenMethod(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    EGenerationMethod arg2 ;
    
    SWIG_check_num_args("CSectorMatrix::SetVGenMethod",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::SetVGenMethod",1,"CSectorMatrix *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CSectorMatrix::SetVGenMethod",2,"EGenerationMethod");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_SetVGenMethod",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    arg2 = (EGenerationMethod)(int)lua_tonumber(L, 2);
    (arg1)->SetVGenMethod(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_poSectManager_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    CSectorLoaderManager *arg2 = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::poSectManager",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::poSectManager",1,"CSectorMatrix *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSectorMatrix::poSectManager",2,"CSectorLoaderManager *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_poSectManager_set",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CSectorLoaderManager,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CSectorMatrix_poSectManager_set",2,SWIGTYPE_p_CSectorLoaderManager);
    }
    
    if (arg1) (arg1)->poSectManager = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSectorMatrix_poSectManager_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSectorMatrix *arg1 = 0 ;
    CSectorLoaderManager *result = 0 ;
    
    SWIG_check_num_args("CSectorMatrix::poSectManager",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSectorMatrix::poSectManager",1,"CSectorMatrix *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSectorMatrix,0))){
      SWIG_fail_ptr("CSectorMatrix_poSectManager_get",1,SWIGTYPE_p_CSectorMatrix);
    }
    
    result = (CSectorLoaderManager *) ((arg1)->poSectManager);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectorLoaderManager,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSectorMatrix(void *obj) {
CSectorMatrix *arg1 = (CSectorMatrix *) obj;
delete arg1;
}
static swig_lua_attribute swig_CSectorMatrix_attributes[] = {
    { "poSectManager", _wrap_CSectorMatrix_poSectManager_get, _wrap_CSectorMatrix_poSectManager_set },
    {0,0,0}
};
static swig_lua_method swig_CSectorMatrix_methods[]= {
    { "iLoadWithHandler", _wrap_CSectorMatrix_iLoadWithHandler},
    { "iSaveWithHandler", _wrap_CSectorMatrix_iSaveWithHandler},
    { "Invalidate", _wrap_CSectorMatrix_Invalidate},
    { "Init", _wrap_CSectorMatrix_Init},
    { "GetValue", _wrap_CSectorMatrix_GetValue},
    { "SetValue", _wrap_CSectorMatrix_SetValue},
    { "GetValueFromSect", _wrap_CSectorMatrix_GetValueFromSect},
    { "SetValueFromSect", _wrap_CSectorMatrix_SetValueFromSect},
    { "ByteSize", _wrap_CSectorMatrix_ByteSize},
    { "GetSector", _wrap_CSectorMatrix_GetSector},
    { "iGetSecsPerRow", _wrap_CSectorMatrix_iGetSecsPerRow},
    { "iGetSecsPerCol", _wrap_CSectorMatrix_iGetSecsPerCol},
    { "iGetDataType", _wrap_CSectorMatrix_iGetDataType},
    { "GenerateLOD", _wrap_CSectorMatrix_GenerateLOD},
    { "SetVGenMethod", _wrap_CSectorMatrix_SetVGenMethod},
    {0,0}
};
static swig_lua_method swig_CSectorMatrix_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSectorMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSectorMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSectorMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSectorMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSectorMatrix_Sf_SwigStatic = {
    "CSectorMatrix",
    swig_CSectorMatrix_Sf_SwigStatic_methods,
    swig_CSectorMatrix_Sf_SwigStatic_attributes,
    swig_CSectorMatrix_Sf_SwigStatic_constants,
    swig_CSectorMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSectorMatrix_bases[] = {0,0};
static const char *swig_CSectorMatrix_base_names[] = {"CSector *",0};
static swig_lua_class _wrap_class_CSectorMatrix = { "CSectorMatrix", "CSectorMatrix", &SWIGTYPE_p_CSectorMatrix,0, swig_delete_CSectorMatrix, swig_CSectorMatrix_methods, swig_CSectorMatrix_attributes, &swig_CSectorMatrix_Sf_SwigStatic, swig_CSectorMatrix_meta, swig_CSectorMatrix_bases, swig_CSectorMatrix_base_names };

static int _wrap_new_CSLM_HFieldSect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSLM_HFieldSect *result = 0 ;
    
    SWIG_check_num_args("CSLM_HFieldSect::CSLM_HFieldSect",0,0)
    result = (CSLM_HFieldSect *)new CSLM_HFieldSect();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSLM_HFieldSect,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSLM_HFieldSect_poCreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSLM_HFieldSect *arg1 = 0 ;
    FILE *arg2 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSLM_HFieldSect::poCreateClass",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSLM_HFieldSect::poCreateClass",1,"CSLM_HFieldSect *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSLM_HFieldSect::poCreateClass",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSLM_HFieldSect,0))){
      SWIG_fail_ptr("CSLM_HFieldSect_poCreateClass",1,SWIGTYPE_p_CSLM_HFieldSect);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSLM_HFieldSect_poCreateClass",2,SWIGTYPE_p_FILE);
    }
    
    result = (CSector *)(arg1)->poCreateClass(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSLM_HFieldSect(void *obj) {
CSLM_HFieldSect *arg1 = (CSLM_HFieldSect *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSLM_HFieldSect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSLM_HFieldSect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSLM_HFieldSect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSLM_HFieldSect_methods[]= {
    { "poCreateClass", _wrap_CSLM_HFieldSect_poCreateClass},
    {0,0}
};
static swig_lua_method swig_CSLM_HFieldSect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSLM_HFieldSect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSLM_HFieldSect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSLM_HFieldSect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSLM_HFieldSect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSLM_HFieldSect_Sf_SwigStatic = {
    "CSLM_HFieldSect",
    swig_CSLM_HFieldSect_Sf_SwigStatic_methods,
    swig_CSLM_HFieldSect_Sf_SwigStatic_attributes,
    swig_CSLM_HFieldSect_Sf_SwigStatic_constants,
    swig_CSLM_HFieldSect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSLM_HFieldSect_bases[] = {0,0};
static const char *swig_CSLM_HFieldSect_base_names[] = {"CSectorLoaderManager *",0};
static swig_lua_class _wrap_class_CSLM_HFieldSect = { "CSLM_HFieldSect", "CSLM_HFieldSect", &SWIGTYPE_p_CSLM_HFieldSect,_proxy__wrap_new_CSLM_HFieldSect, swig_delete_CSLM_HFieldSect, swig_CSLM_HFieldSect_methods, swig_CSLM_HFieldSect_attributes, &swig_CSLM_HFieldSect_Sf_SwigStatic, swig_CSLM_HFieldSect_meta, swig_CSLM_HFieldSect_bases, swig_CSLM_HFieldSect_base_names };

static int _wrap_THeightFieldData_fMaxHeight_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    THeightFieldData *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("THeightFieldData::fMaxHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THeightFieldData::fMaxHeight",1,"THeightFieldData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("THeightFieldData::fMaxHeight",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THeightFieldData,0))){
      SWIG_fail_ptr("THeightFieldData_fMaxHeight_set",1,SWIGTYPE_p_THeightFieldData);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fMaxHeight = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_THeightFieldData_fMaxHeight_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    THeightFieldData *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("THeightFieldData::fMaxHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THeightFieldData::fMaxHeight",1,"THeightFieldData *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THeightFieldData,0))){
      SWIG_fail_ptr("THeightFieldData_fMaxHeight_get",1,SWIGTYPE_p_THeightFieldData);
    }
    
    result = (float) ((arg1)->fMaxHeight);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_THeightFieldData_fMinHeight_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    THeightFieldData *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("THeightFieldData::fMinHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THeightFieldData::fMinHeight",1,"THeightFieldData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("THeightFieldData::fMinHeight",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THeightFieldData,0))){
      SWIG_fail_ptr("THeightFieldData_fMinHeight_set",1,SWIGTYPE_p_THeightFieldData);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fMinHeight = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_THeightFieldData_fMinHeight_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    THeightFieldData *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("THeightFieldData::fMinHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THeightFieldData::fMinHeight",1,"THeightFieldData *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THeightFieldData,0))){
      SWIG_fail_ptr("THeightFieldData_fMinHeight_get",1,SWIGTYPE_p_THeightFieldData);
    }
    
    result = (float) ((arg1)->fMinHeight);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_THeightFieldData(lua_State* L) {
  {
    int SWIG_arg = 0;
    THeightFieldData *result = 0 ;
    
    SWIG_check_num_args("THeightFieldData::THeightFieldData",0,0)
    result = (THeightFieldData *)new THeightFieldData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_THeightFieldData,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_THeightFieldData(void *obj) {
THeightFieldData *arg1 = (THeightFieldData *) obj;
delete arg1;
}
static int _proxy__wrap_new_THeightFieldData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_THeightFieldData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_THeightFieldData_attributes[] = {
    { "fMaxHeight", _wrap_THeightFieldData_fMaxHeight_get, _wrap_THeightFieldData_fMaxHeight_set },
    { "fMinHeight", _wrap_THeightFieldData_fMinHeight_get, _wrap_THeightFieldData_fMinHeight_set },
    {0,0,0}
};
static swig_lua_method swig_THeightFieldData_methods[]= {
    {0,0}
};
static swig_lua_method swig_THeightFieldData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_THeightFieldData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_THeightFieldData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_THeightFieldData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_THeightFieldData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_THeightFieldData_Sf_SwigStatic = {
    "THeightFieldData",
    swig_THeightFieldData_Sf_SwigStatic_methods,
    swig_THeightFieldData_Sf_SwigStatic_attributes,
    swig_THeightFieldData_Sf_SwigStatic_constants,
    swig_THeightFieldData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_THeightFieldData_bases[] = {0};
static const char *swig_THeightFieldData_base_names[] = {0};
static swig_lua_class _wrap_class_THeightFieldData = { "THeightFieldData", "THeightFieldData", &SWIGTYPE_p_THeightFieldData,_proxy__wrap_new_THeightFieldData, swig_delete_THeightFieldData, swig_THeightFieldData_methods, swig_THeightFieldData_attributes, &swig_THeightFieldData_Sf_SwigStatic, swig_THeightFieldData_meta, swig_THeightFieldData_bases, swig_THeightFieldData_base_names };

static int _wrap_new_CHeightField(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *result = 0 ;
    
    SWIG_check_num_args("CHeightField::CHeightField",0,0)
    result = (CHeightField *)new CHeightField();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHeightField,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CHeightField::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::CreateClass",1,"CHeightField *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_CreateClass",1,SWIGTYPE_p_CHeightField);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool arg6 ;
    
    SWIG_check_num_args("CHeightField::Init",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::Init",1,"CHeightField *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHeightField::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHeightField::Init",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHeightField::Init",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CHeightField::Init",5,"int");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("CHeightField::Init",6,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_Init",1,SWIGTYPE_p_CHeightField);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    arg6 = (lua_toboolean(L, 6)!=0);
    (arg1)->Init(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_DataSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CHeightField::DataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::DataSize",1,"CHeightField *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_DataSize",1,SWIGTYPE_p_CHeightField);
    }
    
    result = (unsigned long)(arg1)->DataSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_GetMaxHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHeightField::GetMaxHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::GetMaxHeight",1,"CHeightField *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_GetMaxHeight",1,SWIGTYPE_p_CHeightField);
    }
    
    result = (float)(arg1)->GetMaxHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_GetMinHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CHeightField::GetMinHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::GetMinHeight",1,"CHeightField *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_GetMinHeight",1,SWIGTYPE_p_CHeightField);
    }
    
    result = (float)(arg1)->GetMinHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_SetValue(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CSectElem *arg4 = 0 ;
    
    SWIG_check_num_args("CHeightField::SetValue",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::SetValue",1,"CHeightField *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHeightField::SetValue",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHeightField::SetValue",3,"int");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CHeightField::SetValue",4,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_SetValue",1,SWIGTYPE_p_CHeightField);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeightField_SetValue",4,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValue(arg2,arg3,*arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_SetValueFromSect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CSectElem *arg5 = 0 ;
    
    SWIG_check_num_args("CHeightField::SetValueFromSect",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::SetValueFromSect",1,"CHeightField *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHeightField::SetValueFromSect",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHeightField::SetValueFromSect",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CHeightField::SetValueFromSect",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CHeightField::SetValueFromSect",5,"CSectElem &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_SetValueFromSect",1,SWIGTYPE_p_CHeightField);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CSectElem,0))){
      SWIG_fail_ptr("CHeightField_SetValueFromSect",5,SWIGTYPE_p_CSectElem);
    }
    
    (arg1)->SetValueFromSect(arg2,arg3,arg4,*arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_RecomputeMaxMins(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    
    SWIG_check_num_args("CHeightField::RecomputeMaxMins",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::RecomputeMaxMins",1,"CHeightField *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_RecomputeMaxMins",1,SWIGTYPE_p_CHeightField);
    }
    
    (arg1)->RecomputeMaxMins();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_GenerateLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    int arg2 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CHeightField::GenerateLOD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::GenerateLOD",1,"CHeightField *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHeightField::GenerateLOD",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_GenerateLOD",1,SWIGTYPE_p_CHeightField);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CSector *)(arg1)->GenerateLOD(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CHeightField_GetValueF(lua_State* L) {
  {
    int SWIG_arg = 0;
    CHeightField *arg1 = 0 ;
    float arg2 ;
    float arg3 ;
    CSectElem *result = 0 ;
    
    SWIG_check_num_args("CHeightField::GetValueF",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CHeightField::GetValueF",1,"CHeightField *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CHeightField::GetValueF",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CHeightField::GetValueF",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CHeightField_GetValueF",1,SWIGTYPE_p_CHeightField);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3);
    result = (CSectElem *) &(arg1)->GetValueF(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSectElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CHeightField(void *obj) {
CHeightField *arg1 = (CHeightField *) obj;
delete arg1;
}
static int _proxy__wrap_new_CHeightField(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CHeightField);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CHeightField_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CHeightField_methods[]= {
    { "CreateClass", _wrap_CHeightField_CreateClass},
    { "Init", _wrap_CHeightField_Init},
    { "DataSize", _wrap_CHeightField_DataSize},
    { "GetMaxHeight", _wrap_CHeightField_GetMaxHeight},
    { "GetMinHeight", _wrap_CHeightField_GetMinHeight},
    { "SetValue", _wrap_CHeightField_SetValue},
    { "SetValueFromSect", _wrap_CHeightField_SetValueFromSect},
    { "RecomputeMaxMins", _wrap_CHeightField_RecomputeMaxMins},
    { "GenerateLOD", _wrap_CHeightField_GenerateLOD},
    { "GetValueF", _wrap_CHeightField_GetValueF},
    {0,0}
};
static swig_lua_method swig_CHeightField_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CHeightField_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CHeightField_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CHeightField_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CHeightField_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CHeightField_Sf_SwigStatic = {
    "CHeightField",
    swig_CHeightField_Sf_SwigStatic_methods,
    swig_CHeightField_Sf_SwigStatic_attributes,
    swig_CHeightField_Sf_SwigStatic_constants,
    swig_CHeightField_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CHeightField_bases[] = {0,0};
static const char *swig_CHeightField_base_names[] = {"CSectorMatrix *",0};
static swig_lua_class _wrap_class_CHeightField = { "CHeightField", "CHeightField", &SWIGTYPE_p_CHeightField,_proxy__wrap_new_CHeightField, swig_delete_CHeightField, swig_CHeightField_methods, swig_CHeightField_attributes, &swig_CHeightField_Sf_SwigStatic, swig_CHeightField_meta, swig_CHeightField_bases, swig_CHeightField_base_names };

static int _wrap_new_CSLM_LMapSect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSLM_LMapSect *result = 0 ;
    
    SWIG_check_num_args("CSLM_LMapSect::CSLM_LMapSect",0,0)
    result = (CSLM_LMapSect *)new CSLM_LMapSect();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSLM_LMapSect,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSLM_LMapSect_poCreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSLM_LMapSect *arg1 = 0 ;
    FILE *arg2 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSLM_LMapSect::poCreateClass",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSLM_LMapSect::poCreateClass",1,"CSLM_LMapSect *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSLM_LMapSect::poCreateClass",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSLM_LMapSect,0))){
      SWIG_fail_ptr("CSLM_LMapSect_poCreateClass",1,SWIGTYPE_p_CSLM_LMapSect);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSLM_LMapSect_poCreateClass",2,SWIGTYPE_p_FILE);
    }
    
    result = (CSector *)(arg1)->poCreateClass(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSLM_LMapSect(void *obj) {
CSLM_LMapSect *arg1 = (CSLM_LMapSect *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSLM_LMapSect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSLM_LMapSect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSLM_LMapSect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSLM_LMapSect_methods[]= {
    { "poCreateClass", _wrap_CSLM_LMapSect_poCreateClass},
    {0,0}
};
static swig_lua_method swig_CSLM_LMapSect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSLM_LMapSect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSLM_LMapSect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSLM_LMapSect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSLM_LMapSect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSLM_LMapSect_Sf_SwigStatic = {
    "CSLM_LMapSect",
    swig_CSLM_LMapSect_Sf_SwigStatic_methods,
    swig_CSLM_LMapSect_Sf_SwigStatic_attributes,
    swig_CSLM_LMapSect_Sf_SwigStatic_constants,
    swig_CSLM_LMapSect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSLM_LMapSect_bases[] = {0,0};
static const char *swig_CSLM_LMapSect_base_names[] = {"CSectorLoaderManager *",0};
static swig_lua_class _wrap_class_CSLM_LMapSect = { "CSLM_LMapSect", "CSLM_LMapSect", &SWIGTYPE_p_CSLM_LMapSect,_proxy__wrap_new_CSLM_LMapSect, swig_delete_CSLM_LMapSect, swig_CSLM_LMapSect_methods, swig_CSLM_LMapSect_attributes, &swig_CSLM_LMapSect_Sf_SwigStatic, swig_CSLM_LMapSect_meta, swig_CSLM_LMapSect_bases, swig_CSLM_LMapSect_base_names };

static int _wrap_new_CLightMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightMap *result = 0 ;
    
    SWIG_check_num_args("CLightMap::CLightMap",0,0)
    result = (CLightMap *)new CLightMap();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLightMap,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightMap_DataSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightMap *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CLightMap::DataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightMap::DataSize",1,"CLightMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightMap,0))){
      SWIG_fail_ptr("CLightMap_DataSize",1,SWIGTYPE_p_CLightMap);
    }
    
    result = (unsigned long)(arg1)->DataSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightMap_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightMap *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CLightMap::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightMap::CreateClass",1,"CLightMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightMap,0))){
      SWIG_fail_ptr("CLightMap_CreateClass",1,SWIGTYPE_p_CLightMap);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLightMap_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLightMap *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool arg6 ;
    
    SWIG_check_num_args("CLightMap::Init",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLightMap::Init",1,"CLightMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLightMap::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CLightMap::Init",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CLightMap::Init",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CLightMap::Init",5,"int");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("CLightMap::Init",6,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLightMap,0))){
      SWIG_fail_ptr("CLightMap_Init",1,SWIGTYPE_p_CLightMap);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    arg6 = (lua_toboolean(L, 6)!=0);
    (arg1)->Init(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLightMap(void *obj) {
CLightMap *arg1 = (CLightMap *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLightMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLightMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLightMap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLightMap_methods[]= {
    { "DataSize", _wrap_CLightMap_DataSize},
    { "CreateClass", _wrap_CLightMap_CreateClass},
    { "Init", _wrap_CLightMap_Init},
    {0,0}
};
static swig_lua_method swig_CLightMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLightMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLightMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLightMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLightMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLightMap_SwigStatic = {
    "CLightMap",
    swig_CLightMap_SwigStatic_methods,
    swig_CLightMap_SwigStatic_attributes,
    swig_CLightMap_SwigStatic_constants,
    swig_CLightMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLightMap_bases[] = {0,0};
static const char *swig_CLightMap_base_names[] = {"CSectorMatrix *",0};
static swig_lua_class _wrap_class_CLightMap = { "CLightMap", "CLightMap", &SWIGTYPE_p_CLightMap,_proxy__wrap_new_CLightMap, swig_delete_CLightMap, swig_CLightMap_methods, swig_CLightMap_attributes, &swig_CLightMap_SwigStatic, swig_CLightMap_meta, swig_CLightMap_bases, swig_CLightMap_base_names };

static int _wrap_new_CSLM_TMapSect(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSLM_TMapSect *result = 0 ;
    
    SWIG_check_num_args("CSLM_TMapSect::CSLM_TMapSect",0,0)
    result = (CSLM_TMapSect *)new CSLM_TMapSect();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSLM_TMapSect,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CSLM_TMapSect_poCreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CSLM_TMapSect *arg1 = 0 ;
    FILE *arg2 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CSLM_TMapSect::poCreateClass",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CSLM_TMapSect::poCreateClass",1,"CSLM_TMapSect *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CSLM_TMapSect::poCreateClass",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CSLM_TMapSect,0))){
      SWIG_fail_ptr("CSLM_TMapSect_poCreateClass",1,SWIGTYPE_p_CSLM_TMapSect);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CSLM_TMapSect_poCreateClass",2,SWIGTYPE_p_FILE);
    }
    
    result = (CSector *)(arg1)->poCreateClass(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CSLM_TMapSect(void *obj) {
CSLM_TMapSect *arg1 = (CSLM_TMapSect *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSLM_TMapSect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSLM_TMapSect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSLM_TMapSect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CSLM_TMapSect_methods[]= {
    { "poCreateClass", _wrap_CSLM_TMapSect_poCreateClass},
    {0,0}
};
static swig_lua_method swig_CSLM_TMapSect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSLM_TMapSect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSLM_TMapSect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSLM_TMapSect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSLM_TMapSect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSLM_TMapSect_Sf_SwigStatic = {
    "CSLM_TMapSect",
    swig_CSLM_TMapSect_Sf_SwigStatic_methods,
    swig_CSLM_TMapSect_Sf_SwigStatic_attributes,
    swig_CSLM_TMapSect_Sf_SwigStatic_constants,
    swig_CSLM_TMapSect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSLM_TMapSect_bases[] = {0,0};
static const char *swig_CSLM_TMapSect_base_names[] = {"CSectorLoaderManager *",0};
static swig_lua_class _wrap_class_CSLM_TMapSect = { "CSLM_TMapSect", "CSLM_TMapSect", &SWIGTYPE_p_CSLM_TMapSect,_proxy__wrap_new_CSLM_TMapSect, swig_delete_CSLM_TMapSect, swig_CSLM_TMapSect_methods, swig_CSLM_TMapSect_attributes, &swig_CSLM_TMapSect_Sf_SwigStatic, swig_CSLM_TMapSect_meta, swig_CSLM_TMapSect_bases, swig_CSLM_TMapSect_base_names };

static int _wrap_new_CTexMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTexMap *result = 0 ;
    
    SWIG_check_num_args("CTexMap::CTexMap",0,0)
    result = (CTexMap *)new CTexMap();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTexMap,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTexMap_CreateClass(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTexMap *arg1 = 0 ;
    CSector *result = 0 ;
    
    SWIG_check_num_args("CTexMap::CreateClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTexMap::CreateClass",1,"CTexMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTexMap,0))){
      SWIG_fail_ptr("CTexMap_CreateClass",1,SWIGTYPE_p_CTexMap);
    }
    
    result = (CSector *)(arg1)->CreateClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTexMap_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTexMap *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool arg6 ;
    
    SWIG_check_num_args("CTexMap::Init",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTexMap::Init",1,"CTexMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTexMap::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTexMap::Init",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CTexMap::Init",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CTexMap::Init",5,"int");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("CTexMap::Init",6,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTexMap,0))){
      SWIG_fail_ptr("CTexMap_Init",1,SWIGTYPE_p_CTexMap);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    arg6 = (lua_toboolean(L, 6)!=0);
    (arg1)->Init(arg2,arg3,arg4,arg5,arg6);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTexMap_DataSize(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTexMap *arg1 = 0 ;
    unsigned long result;
    
    SWIG_check_num_args("CTexMap::DataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTexMap::DataSize",1,"CTexMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTexMap,0))){
      SWIG_fail_ptr("CTexMap_DataSize",1,SWIGTYPE_p_CTexMap);
    }
    
    result = (unsigned long)(arg1)->DataSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTexMap(void *obj) {
CTexMap *arg1 = (CTexMap *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTexMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTexMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTexMap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CTexMap_methods[]= {
    { "CreateClass", _wrap_CTexMap_CreateClass},
    { "Init", _wrap_CTexMap_Init},
    { "DataSize", _wrap_CTexMap_DataSize},
    {0,0}
};
static swig_lua_method swig_CTexMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTexMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTexMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTexMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTexMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTexMap_SwigStatic = {
    "CTexMap",
    swig_CTexMap_SwigStatic_methods,
    swig_CTexMap_SwigStatic_attributes,
    swig_CTexMap_SwigStatic_constants,
    swig_CTexMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTexMap_bases[] = {0,0};
static const char *swig_CTexMap_base_names[] = {"CSectorMatrix *",0};
static swig_lua_class _wrap_class_CTexMap = { "CTexMap", "CTexMap", &SWIGTYPE_p_CTexMap,_proxy__wrap_new_CTexMap, swig_delete_CTexMap, swig_CTexMap_methods, swig_CTexMap_attributes, &swig_CTexMap_SwigStatic, swig_CTexMap_meta, swig_CTexMap_bases, swig_CTexMap_base_names };

static int _wrap_TTextureEntry_Used_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTextureEntry *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("TTextureEntry::Used",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTextureEntry::Used",1,"TTextureEntry *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("TTextureEntry::Used",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTextureEntry,0))){
      SWIG_fail_ptr("TTextureEntry_Used_set",1,SWIGTYPE_p_TTextureEntry);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Used = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTextureEntry_Used_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTextureEntry *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("TTextureEntry::Used",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTextureEntry::Used",1,"TTextureEntry *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTextureEntry,0))){
      SWIG_fail_ptr("TTextureEntry_Used_get",1,SWIGTYPE_p_TTextureEntry);
    }
    
    result = (bool) ((arg1)->Used);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTextureEntry_Filename_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTextureEntry *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("TTextureEntry::Filename",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTextureEntry::Filename",1,"TTextureEntry *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TTextureEntry::Filename",2,"char [256]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTextureEntry,0))){
      SWIG_fail_ptr("TTextureEntry_Filename_set",1,SWIGTYPE_p_TTextureEntry);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->Filename, (const char *)arg2, 256-1);
        arg1->Filename[256-1] = 0;
      } else {
        arg1->Filename[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTextureEntry_Filename_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTextureEntry *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("TTextureEntry::Filename",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTextureEntry::Filename",1,"TTextureEntry *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTextureEntry,0))){
      SWIG_fail_ptr("TTextureEntry_Filename_get",1,SWIGTYPE_p_TTextureEntry);
    }
    
    result = (char *)(char *) ((arg1)->Filename);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTextureEntry_m_poTex_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTextureEntry *arg1 = 0 ;
    CGMipMap *arg2 = 0 ;
    
    SWIG_check_num_args("TTextureEntry::m_poTex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTextureEntry::m_poTex",1,"TTextureEntry *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TTextureEntry::m_poTex",2,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTextureEntry,0))){
      SWIG_fail_ptr("TTextureEntry_m_poTex_set",1,SWIGTYPE_p_TTextureEntry);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMipMap,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TTextureEntry_m_poTex_set",2,SWIGTYPE_p_CGMipMap);
    }
    
    if (arg1) (arg1)->m_poTex = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTextureEntry_m_poTex_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTextureEntry *arg1 = 0 ;
    CGMipMap *result = 0 ;
    
    SWIG_check_num_args("TTextureEntry::m_poTex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTextureEntry::m_poTex",1,"TTextureEntry *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTextureEntry,0))){
      SWIG_fail_ptr("TTextureEntry_m_poTex_get",1,SWIGTYPE_p_TTextureEntry);
    }
    
    result = (CGMipMap *) ((arg1)->m_poTex);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMipMap,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_TTextureEntry(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTextureEntry *result = 0 ;
    
    SWIG_check_num_args("TTextureEntry::TTextureEntry",0,0)
    result = (TTextureEntry *)new TTextureEntry();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TTextureEntry,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_TTextureEntry(void *obj) {
TTextureEntry *arg1 = (TTextureEntry *) obj;
delete arg1;
}
static int _proxy__wrap_new_TTextureEntry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TTextureEntry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TTextureEntry_attributes[] = {
    { "Used", _wrap_TTextureEntry_Used_get, _wrap_TTextureEntry_Used_set },
    { "Filename", _wrap_TTextureEntry_Filename_get, _wrap_TTextureEntry_Filename_set },
    { "m_poTex", _wrap_TTextureEntry_m_poTex_get, _wrap_TTextureEntry_m_poTex_set },
    {0,0,0}
};
static swig_lua_method swig_TTextureEntry_methods[]= {
    {0,0}
};
static swig_lua_method swig_TTextureEntry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TTextureEntry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TTextureEntry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TTextureEntry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TTextureEntry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TTextureEntry_Sf_SwigStatic = {
    "TTextureEntry",
    swig_TTextureEntry_Sf_SwigStatic_methods,
    swig_TTextureEntry_Sf_SwigStatic_attributes,
    swig_TTextureEntry_Sf_SwigStatic_constants,
    swig_TTextureEntry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TTextureEntry_bases[] = {0};
static const char *swig_TTextureEntry_base_names[] = {0};
static swig_lua_class _wrap_class_TTextureEntry = { "TTextureEntry", "TTextureEntry", &SWIGTYPE_p_TTextureEntry,_proxy__wrap_new_TTextureEntry, swig_delete_TTextureEntry, swig_TTextureEntry_methods, swig_TTextureEntry_attributes, &swig_TTextureEntry_Sf_SwigStatic, swig_TTextureEntry_meta, swig_TTextureEntry_bases, swig_TTextureEntry_base_names };

static int _wrap_new_TTexSet(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *result = 0 ;
    
    SWIG_check_num_args("TTexSet::TTexSet",0,0)
    result = (TTexSet *)new TTexSet();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TTexSet,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_LoadTexture(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    char *arg2 = 0 ;
    unsigned int arg3 ;
    int result;
    
    SWIG_check_num_args("TTexSet::LoadTexture",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::LoadTexture",1,"TTexSet *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TTexSet::LoadTexture",2,"char *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("TTexSet::LoadTexture",3,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_LoadTexture",1,SWIGTYPE_p_TTexSet);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
    arg3 = (unsigned int)lua_tonumber(L, 3);
    result = (int)(arg1)->LoadTexture(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_GetMipMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    unsigned int arg2 ;
    CGMipMap *result = 0 ;
    
    SWIG_check_num_args("TTexSet::GetMipMap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::GetMipMap",1,"TTexSet *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TTexSet::GetMipMap",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_GetMipMap",1,SWIGTYPE_p_TTexSet);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    result = (CGMipMap *)(arg1)->GetMipMap(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGMipMap,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_SetMipMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    unsigned int arg2 ;
    CGMipMap *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("TTexSet::SetMipMap",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::SetMipMap",1,"TTexSet *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TTexSet::SetMipMap",2,"unsigned int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TTexSet::SetMipMap",3,"CGMipMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_SetMipMap",1,SWIGTYPE_p_TTexSet);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMipMap,0))){
      SWIG_fail_ptr("TTexSet_SetMipMap",3,SWIGTYPE_p_CGMipMap);
    }
    
    result = (int)(arg1)->SetMipMap(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_GetTextureName(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    unsigned int arg2 ;
    char *result = 0 ;
    
    SWIG_check_num_args("TTexSet::GetTextureName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::GetTextureName",1,"TTexSet *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TTexSet::GetTextureName",2,"unsigned int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_GetTextureName",1,SWIGTYPE_p_TTexSet);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (unsigned int)lua_tonumber(L, 2);
    result = (char *)(arg1)->GetTextureName(arg2);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_Load(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    char *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("TTexSet::Load",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::Load",1,"TTexSet *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TTexSet::Load",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_Load",1,SWIGTYPE_p_TTexSet);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (int)(arg1)->Load(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_Save(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    char *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("TTexSet::Save",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::Save",1,"TTexSet *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TTexSet::Save",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_Save",1,SWIGTYPE_p_TTexSet);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (int)(arg1)->Save(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_LoadWithHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    FILE *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("TTexSet::LoadWithHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::LoadWithHandler",1,"TTexSet *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TTexSet::LoadWithHandler",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_LoadWithHandler",1,SWIGTYPE_p_TTexSet);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("TTexSet_LoadWithHandler",2,SWIGTYPE_p_FILE);
    }
    
    result = (int)(arg1)->LoadWithHandler(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_SaveWithHandler(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    FILE *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("TTexSet::SaveWithHandler",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::SaveWithHandler",1,"TTexSet *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TTexSet::SaveWithHandler",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_SaveWithHandler",1,SWIGTYPE_p_TTexSet);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("TTexSet_SaveWithHandler",2,SWIGTYPE_p_FILE);
    }
    
    result = (int)(arg1)->SaveWithHandler(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_LoadTexSetList(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    char *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("TTexSet::LoadTexSetList",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::LoadTexSetList",1,"TTexSet *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TTexSet::LoadTexSetList",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_LoadTexSetList",1,SWIGTYPE_p_TTexSet);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (int)(arg1)->LoadTexSetList(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_SaveTexSetList(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    char *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("TTexSet::SaveTexSetList",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::SaveTexSetList",1,"TTexSet *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TTexSet::SaveTexSetList",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_SaveTexSetList",1,SWIGTYPE_p_TTexSet);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (int)(arg1)->SaveTexSetList(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    
    SWIG_check_num_args("TTexSet::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::Invalidate",1,"TTexSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_Invalidate",1,SWIGTYPE_p_TTexSet);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_Name_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("TTexSet::Name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::Name",1,"TTexSet *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TTexSet::Name",2,"char [80]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_Name_set",1,SWIGTYPE_p_TTexSet);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->Name, (const char *)arg2, 80-1);
        arg1->Name[80-1] = 0;
      } else {
        arg1->Name[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_Name_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("TTexSet::Name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::Name",1,"TTexSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_Name_get",1,SWIGTYPE_p_TTexSet);
    }
    
    result = (char *)(char *) ((arg1)->Name);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_GetNumMipMaps(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("TTexSet::GetNumMipMaps",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::GetNumMipMaps",1,"TTexSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_GetNumMipMaps",1,SWIGTYPE_p_TTexSet);
    }
    
    result = (unsigned int)(arg1)->GetNumMipMaps();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_GetMaxMipMaps(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    unsigned int result;
    
    SWIG_check_num_args("TTexSet::GetMaxMipMaps",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::GetMaxMipMaps",1,"TTexSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_GetMaxMipMaps",1,SWIGTYPE_p_TTexSet);
    }
    
    result = (unsigned int)(arg1)->GetMaxMipMaps();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TTexSet_GetMaxLODS(lua_State* L) {
  {
    int SWIG_arg = 0;
    TTexSet *arg1 = 0 ;
    unsigned char result;
    
    SWIG_check_num_args("TTexSet::GetMaxLODS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTexSet::GetMaxLODS",1,"TTexSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTexSet,0))){
      SWIG_fail_ptr("TTexSet_GetMaxLODS",1,SWIGTYPE_p_TTexSet);
    }
    
    result = (unsigned char)(arg1)->GetMaxLODS();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_TTexSet(void *obj) {
TTexSet *arg1 = (TTexSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_TTexSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TTexSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TTexSet_attributes[] = {
    { "Name", _wrap_TTexSet_Name_get, _wrap_TTexSet_Name_set },
    {0,0,0}
};
static swig_lua_method swig_TTexSet_methods[]= {
    { "LoadTexture", _wrap_TTexSet_LoadTexture},
    { "GetMipMap", _wrap_TTexSet_GetMipMap},
    { "SetMipMap", _wrap_TTexSet_SetMipMap},
    { "GetTextureName", _wrap_TTexSet_GetTextureName},
    { "Load", _wrap_TTexSet_Load},
    { "Save", _wrap_TTexSet_Save},
    { "LoadWithHandler", _wrap_TTexSet_LoadWithHandler},
    { "SaveWithHandler", _wrap_TTexSet_SaveWithHandler},
    { "LoadTexSetList", _wrap_TTexSet_LoadTexSetList},
    { "SaveTexSetList", _wrap_TTexSet_SaveTexSetList},
    { "Invalidate", _wrap_TTexSet_Invalidate},
    { "GetNumMipMaps", _wrap_TTexSet_GetNumMipMaps},
    { "GetMaxMipMaps", _wrap_TTexSet_GetMaxMipMaps},
    { "GetMaxLODS", _wrap_TTexSet_GetMaxLODS},
    {0,0}
};
static swig_lua_method swig_TTexSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TTexSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TTexSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TTexSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TTexSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TTexSet_Sf_SwigStatic = {
    "TTexSet",
    swig_TTexSet_Sf_SwigStatic_methods,
    swig_TTexSet_Sf_SwigStatic_attributes,
    swig_TTexSet_Sf_SwigStatic_constants,
    swig_TTexSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TTexSet_bases[] = {0};
static const char *swig_TTexSet_base_names[] = {0};
static swig_lua_class _wrap_class_TTexSet = { "TTexSet", "TTexSet", &SWIGTYPE_p_TTexSet,_proxy__wrap_new_TTexSet, swig_delete_TTexSet, swig_TTexSet_methods, swig_TTexSet_attributes, &swig_TTexSet_Sf_SwigStatic, swig_TTexSet_meta, swig_TTexSet_bases, swig_TTexSet_base_names };

static int _wrap_new_CTerrainTesselator(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *result = 0 ;
    
    SWIG_check_num_args("CTerrainTesselator::CTerrainTesselator",0,0)
    result = (CTerrainTesselator *)new CTerrainTesselator();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTerrainTesselator,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselator_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselator::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselator::Render",1,"CTerrainTesselator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselator,0))){
      SWIG_fail_ptr("CTerrainTesselator_Render",1,SWIGTYPE_p_CTerrainTesselator);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselator_SetData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *arg1 = 0 ;
    CHFSector *arg2 = 0 ;
    CLMSector *arg3 = 0 ;
    CTMSector *arg4 = 0 ;
    CTileBookmark *arg5 = 0 ;
    float *arg6 = 0 ;
    int *arg7 = 0 ;
    float arg8 ;
    
    SWIG_check_num_args("CTerrainTesselator::SetData",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselator::SetData",1,"CTerrainTesselator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainTesselator::SetData",2,"CHFSector *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CTerrainTesselator::SetData",3,"CLMSector *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CTerrainTesselator::SetData",4,"CTMSector *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("CTerrainTesselator::SetData",5,"CTileBookmark *");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("CTerrainTesselator::SetData",6,"float *");
    if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("CTerrainTesselator::SetData",7,"int *");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("CTerrainTesselator::SetData",8,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselator,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetData",1,SWIGTYPE_p_CTerrainTesselator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CHFSector,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetData",2,SWIGTYPE_p_CHFSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CLMSector,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetData",3,SWIGTYPE_p_CLMSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CTMSector,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetData",4,SWIGTYPE_p_CTMSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CTileBookmark,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetData",5,SWIGTYPE_p_CTileBookmark);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetData",6,SWIGTYPE_p_float);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetData",7,SWIGTYPE_p_int);
    }
    
    arg8 = (float)lua_tonumber(L, 8);
    (arg1)->SetData(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselator_SetCameraPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *arg1 = 0 ;
    CGVect3 arg2 ;
    CGVect3 *argp2 ;
    
    SWIG_check_num_args("CTerrainTesselator::SetCameraPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselator::SetCameraPos",1,"CTerrainTesselator *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CTerrainTesselator::SetCameraPos",2,"CGVect3");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselator,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetCameraPos",1,SWIGTYPE_p_CTerrainTesselator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetCameraPos",2,SWIGTYPE_p_CGVect3);
    }
    arg2 = *argp2;
    
    (arg1)->SetCameraPos(SWIG_STD_MOVE(arg2));
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselator_GetTileLODSel(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *arg1 = 0 ;
    CLODSelector *result = 0 ;
    
    SWIG_check_num_args("CTerrainTesselator::GetTileLODSel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselator::GetTileLODSel",1,"CTerrainTesselator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselator,0))){
      SWIG_fail_ptr("CTerrainTesselator_GetTileLODSel",1,SWIGTYPE_p_CTerrainTesselator);
    }
    
    result = (CLODSelector *)(arg1)->GetTileLODSel();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselator_SetTileLODSel(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *arg1 = 0 ;
    CLODSelector *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselator::SetTileLODSel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselator::SetTileLODSel",1,"CTerrainTesselator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainTesselator::SetTileLODSel",2,"CLODSelector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselator,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetTileLODSel",1,SWIGTYPE_p_CTerrainTesselator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CLODSelector,0))){
      SWIG_fail_ptr("CTerrainTesselator_SetTileLODSel",2,SWIGTYPE_p_CLODSelector);
    }
    
    (arg1)->SetTileLODSel(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselator_TileLODSel_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *arg1 = 0 ;
    CLODSelector *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselator::TileLODSel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselator::TileLODSel",1,"CTerrainTesselator *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainTesselator::TileLODSel",2,"CLODSelector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselator,0))){
      SWIG_fail_ptr("CTerrainTesselator_TileLODSel_set",1,SWIGTYPE_p_CTerrainTesselator);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CLODSelector,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTerrainTesselator_TileLODSel_set",2,SWIGTYPE_p_CLODSelector);
    }
    
    if (arg1) (arg1)->TileLODSel = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselator_TileLODSel_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselator *arg1 = 0 ;
    CLODSelector *result = 0 ;
    
    SWIG_check_num_args("CTerrainTesselator::TileLODSel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselator::TileLODSel",1,"CTerrainTesselator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselator,0))){
      SWIG_fail_ptr("CTerrainTesselator_TileLODSel_get",1,SWIGTYPE_p_CTerrainTesselator);
    }
    
    result = (CLODSelector *) ((arg1)->TileLODSel);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTerrainTesselator(void *obj) {
CTerrainTesselator *arg1 = (CTerrainTesselator *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTerrainTesselator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTerrainTesselator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTerrainTesselator_attributes[] = {
    { "TileLODSel", _wrap_CTerrainTesselator_TileLODSel_get, _wrap_CTerrainTesselator_TileLODSel_set },
    {0,0,0}
};
static swig_lua_method swig_CTerrainTesselator_methods[]= {
    { "Render", _wrap_CTerrainTesselator_Render},
    { "SetData", _wrap_CTerrainTesselator_SetData},
    { "SetCameraPos", _wrap_CTerrainTesselator_SetCameraPos},
    { "GetTileLODSel", _wrap_CTerrainTesselator_GetTileLODSel},
    { "SetTileLODSel", _wrap_CTerrainTesselator_SetTileLODSel},
    {0,0}
};
static swig_lua_method swig_CTerrainTesselator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTerrainTesselator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTerrainTesselator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTerrainTesselator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTerrainTesselator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTerrainTesselator_Sf_SwigStatic = {
    "CTerrainTesselator",
    swig_CTerrainTesselator_Sf_SwigStatic_methods,
    swig_CTerrainTesselator_Sf_SwigStatic_attributes,
    swig_CTerrainTesselator_Sf_SwigStatic_constants,
    swig_CTerrainTesselator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTerrainTesselator_bases[] = {0};
static const char *swig_CTerrainTesselator_base_names[] = {0};
static swig_lua_class _wrap_class_CTerrainTesselator = { "CTerrainTesselator", "CTerrainTesselator", &SWIGTYPE_p_CTerrainTesselator,_proxy__wrap_new_CTerrainTesselator, swig_delete_CTerrainTesselator, swig_CTerrainTesselator_methods, swig_CTerrainTesselator_attributes, &swig_CTerrainTesselator_Sf_SwigStatic, swig_CTerrainTesselator_meta, swig_CTerrainTesselator_bases, swig_CTerrainTesselator_base_names };

static int _wrap_new_CTerrainSector(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *result = 0 ;
    
    SWIG_check_num_args("CTerrainSector::CTerrainSector",0,0)
    result = (CTerrainSector *)new CTerrainSector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTerrainSector,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::Render",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_Render",1,SWIGTYPE_p_CTerrainSector);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_SetMaxsMins(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::SetMaxsMins",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::SetMaxsMins",1,"CTerrainSector *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CTerrainSector::SetMaxsMins",2,"CGVect3 &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CTerrainSector::SetMaxsMins",3,"CGVect3 &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_SetMaxsMins",1,SWIGTYPE_p_CTerrainSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CTerrainSector_SetMaxsMins",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CTerrainSector_SetMaxsMins",3,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->SetMaxsMins(*arg2,*arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_HF_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CHFSector *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::HF",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::HF",1,"CTerrainSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainSector::HF",2,"CHFSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_HF_set",1,SWIGTYPE_p_CTerrainSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CHFSector,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTerrainSector_HF_set",2,SWIGTYPE_p_CHFSector);
    }
    
    if (arg1) (arg1)->HF = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_HF_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CHFSector *result = 0 ;
    
    SWIG_check_num_args("CTerrainSector::HF",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::HF",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_HF_get",1,SWIGTYPE_p_CTerrainSector);
    }
    
    result = (CHFSector *) ((arg1)->HF);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHFSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_LM_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CLMSector *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::LM",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::LM",1,"CTerrainSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainSector::LM",2,"CLMSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_LM_set",1,SWIGTYPE_p_CTerrainSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CLMSector,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTerrainSector_LM_set",2,SWIGTYPE_p_CLMSector);
    }
    
    if (arg1) (arg1)->LM = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_LM_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CLMSector *result = 0 ;
    
    SWIG_check_num_args("CTerrainSector::LM",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::LM",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_LM_get",1,SWIGTYPE_p_CTerrainSector);
    }
    
    result = (CLMSector *) ((arg1)->LM);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLMSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_TM_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CTMSector *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::TM",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::TM",1,"CTerrainSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainSector::TM",2,"CTMSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_TM_set",1,SWIGTYPE_p_CTerrainSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTMSector,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTerrainSector_TM_set",2,SWIGTYPE_p_CTMSector);
    }
    
    if (arg1) (arg1)->TM = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_TM_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CTMSector *result = 0 ;
    
    SWIG_check_num_args("CTerrainSector::TM",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::TM",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_TM_get",1,SWIGTYPE_p_CTerrainSector);
    }
    
    result = (CTMSector *) ((arg1)->TM);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTMSector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_TB_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CTileBookmark *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::TB",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::TB",1,"CTerrainSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainSector::TB",2,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_TB_set",1,SWIGTYPE_p_CTerrainSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTileBookmark,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTerrainSector_TB_set",2,SWIGTYPE_p_CTileBookmark);
    }
    
    if (arg1) (arg1)->TB = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_TB_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CTileBookmark *result = 0 ;
    
    SWIG_check_num_args("CTerrainSector::TB",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::TB",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_TB_get",1,SWIGTYPE_p_CTerrainSector);
    }
    
    result = (CTileBookmark *) ((arg1)->TB);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTileBookmark,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_Tess_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CTerrainTesselator *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::Tess",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::Tess",1,"CTerrainSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainSector::Tess",2,"CTerrainTesselator *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_Tess_set",1,SWIGTYPE_p_CTerrainSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTerrainTesselator,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CTerrainSector_Tess_set",2,SWIGTYPE_p_CTerrainTesselator);
    }
    
    if (arg1) (arg1)->Tess = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_Tess_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CTerrainTesselator *result = 0 ;
    
    SWIG_check_num_args("CTerrainSector::Tess",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::Tess",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_Tess_get",1,SWIGTYPE_p_CTerrainSector);
    }
    
    result = (CTerrainTesselator *) ((arg1)->Tess);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTerrainTesselator,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_fXYScale_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CTerrainSector::fXYScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::fXYScale",1,"CTerrainSector *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainSector::fXYScale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_fXYScale_set",1,SWIGTYPE_p_CTerrainSector);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fXYScale = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_fXYScale_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CTerrainSector::fXYScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::fXYScale",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_fXYScale_get",1,SWIGTYPE_p_CTerrainSector);
    }
    
    result = (float) ((arg1)->fXYScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_poGetBV(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CGGraphBV *result = 0 ;
    
    SWIG_check_num_args("CTerrainSector::poGetBV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::poGetBV",1,"CTerrainSector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_poGetBV",1,SWIGTYPE_p_CTerrainSector);
    }
    
    result = (CGGraphBV *)(arg1)->poGetBV();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGraphBV,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainSector_Accept(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainSector *arg1 = 0 ;
    CGSceneVisitor *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainSector::Accept",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainSector::Accept",1,"CTerrainSector *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CTerrainSector::Accept",2,"CGSceneVisitor *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainSector,0))){
      SWIG_fail_ptr("CTerrainSector_Accept",1,SWIGTYPE_p_CTerrainSector);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneVisitor,0))){
      SWIG_fail_ptr("CTerrainSector_Accept",2,SWIGTYPE_p_CGSceneVisitor);
    }
    
    (arg1)->Accept(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTerrainSector(void *obj) {
CTerrainSector *arg1 = (CTerrainSector *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTerrainSector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTerrainSector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTerrainSector_attributes[] = {
    { "HF", _wrap_CTerrainSector_HF_get, _wrap_CTerrainSector_HF_set },
    { "LM", _wrap_CTerrainSector_LM_get, _wrap_CTerrainSector_LM_set },
    { "TM", _wrap_CTerrainSector_TM_get, _wrap_CTerrainSector_TM_set },
    { "TB", _wrap_CTerrainSector_TB_get, _wrap_CTerrainSector_TB_set },
    { "Tess", _wrap_CTerrainSector_Tess_get, _wrap_CTerrainSector_Tess_set },
    { "fXYScale", _wrap_CTerrainSector_fXYScale_get, _wrap_CTerrainSector_fXYScale_set },
    {0,0,0}
};
static swig_lua_method swig_CTerrainSector_methods[]= {
    { "Render", _wrap_CTerrainSector_Render},
    { "SetMaxsMins", _wrap_CTerrainSector_SetMaxsMins},
    { "poGetBV", _wrap_CTerrainSector_poGetBV},
    { "Accept", _wrap_CTerrainSector_Accept},
    {0,0}
};
static swig_lua_method swig_CTerrainSector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTerrainSector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTerrainSector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTerrainSector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTerrainSector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTerrainSector_Sf_SwigStatic = {
    "CTerrainSector",
    swig_CTerrainSector_Sf_SwigStatic_methods,
    swig_CTerrainSector_Sf_SwigStatic_attributes,
    swig_CTerrainSector_Sf_SwigStatic_constants,
    swig_CTerrainSector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTerrainSector_bases[] = {0,0};
static const char *swig_CTerrainSector_base_names[] = {"CGSceneNode *",0};
static swig_lua_class _wrap_class_CTerrainSector = { "CTerrainSector", "CTerrainSector", &SWIGTYPE_p_CTerrainSector,_proxy__wrap_new_CTerrainSector, swig_delete_CTerrainSector, swig_CTerrainSector_methods, swig_CTerrainSector_attributes, &swig_CTerrainSector_Sf_SwigStatic, swig_CTerrainSector_meta, swig_CTerrainSector_bases, swig_CTerrainSector_base_names };

static int _wrap_TEnvironmentPars_iFogType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::iFogType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iFogType",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::iFogType",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iFogType_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iFogType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_iFogType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::iFogType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iFogType",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iFogType_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->iFogType);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogColor_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("TEnvironmentPars::fFogColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogColor",1,"TEnvironmentPars *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TEnvironmentPars::fFogColor",2,"float [4]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogColor_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogColor_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->fFogColor;
      for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogColor_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("TEnvironmentPars::fFogColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogColor",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogColor_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float *)(float *) ((arg1)->fFogColor);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogDens_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fFogDens",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogDens",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fFogDens",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogDens_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fFogDens = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogDens_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fFogDens",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogDens",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogDens_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fFogDens);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogNear_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fFogNear",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogNear",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fFogNear",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogNear_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fFogNear = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogNear_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fFogNear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogNear",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogNear_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fFogNear);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogFar_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fFogFar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogFar",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fFogFar",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogFar_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fFogFar = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fFogFar_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fFogFar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fFogFar",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fFogFar_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fFogFar);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_iFogAffEv_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::iFogAffEv",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iFogAffEv",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::iFogAffEv",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iFogAffEv_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iFogAffEv = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_iFogAffEv_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::iFogAffEv",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iFogAffEv",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iFogAffEv_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->iFogAffEv);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fCamFOV_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fCamFOV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fCamFOV",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fCamFOV",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fCamFOV_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fCamFOV = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fCamFOV_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fCamFOV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fCamFOV",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fCamFOV_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fCamFOV);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fCamNear_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fCamNear",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fCamNear",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fCamNear",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fCamNear_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fCamNear = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fCamNear_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fCamNear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fCamNear",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fCamNear_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fCamNear);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fCamFar_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fCamFar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fCamFar",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fCamFar",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fCamFar_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fCamFar = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fCamFar_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fCamFar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fCamFar",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fCamFar_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fCamFar);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_iUseTileLODFunc_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::iUseTileLODFunc",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iUseTileLODFunc",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::iUseTileLODFunc",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iUseTileLODFunc_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iUseTileLODFunc = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_iUseTileLODFunc_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::iUseTileLODFunc",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iUseTileLODFunc",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iUseTileLODFunc_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->iUseTileLODFunc);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fTileLODParam_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fTileLODParam",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fTileLODParam",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fTileLODParam",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fTileLODParam_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fTileLODParam = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fTileLODParam_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fTileLODParam",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fTileLODParam",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fTileLODParam_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fTileLODParam);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fTerrLODParam_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fTerrLODParam",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fTerrLODParam",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fTerrLODParam",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fTerrLODParam_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fTerrLODParam = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fTerrLODParam_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fTerrLODParam",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fTerrLODParam",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fTerrLODParam_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fTerrLODParam);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fXYScale_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fXYScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fXYScale",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fXYScale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fXYScale_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fXYScale = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fXYScale_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fXYScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fXYScale",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fXYScale_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fXYScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fZScale_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fZScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fZScale",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fZScale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fZScale_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fZScale = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fZScale_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fZScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fZScale",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fZScale_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fZScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fZTranslation_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fZTranslation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fZTranslation",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fZTranslation",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fZTranslation_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fZTranslation = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fZTranslation_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fZTranslation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fZTranslation",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fZTranslation_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fZTranslation);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fXOfs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fXOfs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fXOfs",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fXOfs",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fXOfs_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fXOfs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fXOfs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fXOfs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fXOfs",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fXOfs_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fXOfs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fYOfs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fYOfs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fYOfs",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fYOfs",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fYOfs_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fYOfs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fYOfs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fYOfs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fYOfs",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fYOfs_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fYOfs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fBKDiameter_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fBKDiameter",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fBKDiameter",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fBKDiameter",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fBKDiameter_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fBKDiameter = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fBKDiameter_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::fBKDiameter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fBKDiameter",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fBKDiameter_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->fBKDiameter);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fBKRollRotation_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fBKRollRotation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fBKRollRotation",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fBKRollRotation",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fBKRollRotation_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fBKRollRotation = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fBKRollRotation_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::fBKRollRotation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fBKRollRotation",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fBKRollRotation_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->fBKRollRotation);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fBKZTranslation_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fBKZTranslation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fBKZTranslation",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fBKZTranslation",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fBKZTranslation_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fBKZTranslation = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fBKZTranslation_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::fBKZTranslation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fBKZTranslation",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fBKZTranslation_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->fBKZTranslation);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fSDDiameter_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fSDDiameter",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fSDDiameter",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fSDDiameter",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fSDDiameter_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fSDDiameter = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fSDDiameter_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::fSDDiameter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fSDDiameter",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fSDDiameter_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->fSDDiameter);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fSDRollRotation_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fSDRollRotation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fSDRollRotation",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fSDRollRotation",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fSDRollRotation_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fSDRollRotation = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fSDRollRotation_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::fSDRollRotation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fSDRollRotation",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fSDRollRotation_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->fSDRollRotation);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fSDZTranslation_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fSDZTranslation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fSDZTranslation",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fSDZTranslation",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fSDZTranslation_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fSDZTranslation = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fSDZTranslation_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::fSDZTranslation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fSDZTranslation",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fSDZTranslation_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->fSDZTranslation);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightAmbColor_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("TEnvironmentPars::fLightAmbColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightAmbColor",1,"TEnvironmentPars *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TEnvironmentPars::fLightAmbColor",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightAmbColor_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightAmbColor_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->fLightAmbColor;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightAmbColor_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("TEnvironmentPars::fLightAmbColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightAmbColor",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightAmbColor_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float *)(float *) ((arg1)->fLightAmbColor);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightDiffColor_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float *arg2 = (float *)0 ;
    
    SWIG_check_num_args("TEnvironmentPars::fLightDiffColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightDiffColor",1,"TEnvironmentPars *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TEnvironmentPars::fLightDiffColor",2,"float [3]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightDiffColor_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightDiffColor_set",2,SWIGTYPE_p_float);
    }
    
    {
      size_t ii;
      float *b = (float *) arg1->fLightDiffColor;
      for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightDiffColor_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("TEnvironmentPars::fLightDiffColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightDiffColor",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightDiffColor_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float *)(float *) ((arg1)->fLightDiffColor);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightRhoAngle_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fLightRhoAngle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightRhoAngle",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fLightRhoAngle",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightRhoAngle_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fLightRhoAngle = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightRhoAngle_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fLightRhoAngle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightRhoAngle",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightRhoAngle_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fLightRhoAngle);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightPhiAngle_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::fLightPhiAngle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightPhiAngle",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::fLightPhiAngle",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightPhiAngle_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fLightPhiAngle = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_fLightPhiAngle_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TEnvironmentPars::fLightPhiAngle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::fLightPhiAngle",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_fLightPhiAngle_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (float) ((arg1)->fLightPhiAngle);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_iEnvType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TEnvironmentPars::iEnvType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iEnvType",1,"TEnvironmentPars *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TEnvironmentPars::iEnvType",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iEnvType_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iEnvType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_iEnvType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TEnvironmentPars::iEnvType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::iEnvType",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_iEnvType_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (int) ((arg1)->iEnvType);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_cPad_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    char *arg2 = (char *)0 ;
    
    SWIG_check_num_args("TEnvironmentPars::cPad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::cPad",1,"TEnvironmentPars *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TEnvironmentPars::cPad",2,"char [1024-140]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_cPad_set",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    {
      if(arg2) {
        strncpy((char*)arg1->cPad, (const char *)arg2, 1024-140-1);
        arg1->cPad[1024-140-1] = 0;
      } else {
        arg1->cPad[0] = 0;
      }
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TEnvironmentPars_cPad_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *arg1 = 0 ;
    char *result = 0 ;
    
    SWIG_check_num_args("TEnvironmentPars::cPad",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TEnvironmentPars::cPad",1,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TEnvironmentPars_cPad_get",1,SWIGTYPE_p_TEnvironmentPars);
    }
    
    result = (char *)(char *) ((arg1)->cPad);
    lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_TEnvironmentPars(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEnvironmentPars *result = 0 ;
    
    SWIG_check_num_args("TEnvironmentPars::TEnvironmentPars",0,0)
    result = (TEnvironmentPars *)new TEnvironmentPars();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TEnvironmentPars,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_TEnvironmentPars(void *obj) {
TEnvironmentPars *arg1 = (TEnvironmentPars *) obj;
delete arg1;
}
static int _proxy__wrap_new_TEnvironmentPars(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TEnvironmentPars);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TEnvironmentPars_attributes[] = {
    { "iFogType", _wrap_TEnvironmentPars_iFogType_get, _wrap_TEnvironmentPars_iFogType_set },
    { "fFogColor", _wrap_TEnvironmentPars_fFogColor_get, _wrap_TEnvironmentPars_fFogColor_set },
    { "fFogDens", _wrap_TEnvironmentPars_fFogDens_get, _wrap_TEnvironmentPars_fFogDens_set },
    { "fFogNear", _wrap_TEnvironmentPars_fFogNear_get, _wrap_TEnvironmentPars_fFogNear_set },
    { "fFogFar", _wrap_TEnvironmentPars_fFogFar_get, _wrap_TEnvironmentPars_fFogFar_set },
    { "iFogAffEv", _wrap_TEnvironmentPars_iFogAffEv_get, _wrap_TEnvironmentPars_iFogAffEv_set },
    { "fCamFOV", _wrap_TEnvironmentPars_fCamFOV_get, _wrap_TEnvironmentPars_fCamFOV_set },
    { "fCamNear", _wrap_TEnvironmentPars_fCamNear_get, _wrap_TEnvironmentPars_fCamNear_set },
    { "fCamFar", _wrap_TEnvironmentPars_fCamFar_get, _wrap_TEnvironmentPars_fCamFar_set },
    { "iUseTileLODFunc", _wrap_TEnvironmentPars_iUseTileLODFunc_get, _wrap_TEnvironmentPars_iUseTileLODFunc_set },
    { "fTileLODParam", _wrap_TEnvironmentPars_fTileLODParam_get, _wrap_TEnvironmentPars_fTileLODParam_set },
    { "fTerrLODParam", _wrap_TEnvironmentPars_fTerrLODParam_get, _wrap_TEnvironmentPars_fTerrLODParam_set },
    { "fXYScale", _wrap_TEnvironmentPars_fXYScale_get, _wrap_TEnvironmentPars_fXYScale_set },
    { "fZScale", _wrap_TEnvironmentPars_fZScale_get, _wrap_TEnvironmentPars_fZScale_set },
    { "fZTranslation", _wrap_TEnvironmentPars_fZTranslation_get, _wrap_TEnvironmentPars_fZTranslation_set },
    { "fXOfs", _wrap_TEnvironmentPars_fXOfs_get, _wrap_TEnvironmentPars_fXOfs_set },
    { "fYOfs", _wrap_TEnvironmentPars_fYOfs_get, _wrap_TEnvironmentPars_fYOfs_set },
    { "fBKDiameter", _wrap_TEnvironmentPars_fBKDiameter_get, _wrap_TEnvironmentPars_fBKDiameter_set },
    { "fBKRollRotation", _wrap_TEnvironmentPars_fBKRollRotation_get, _wrap_TEnvironmentPars_fBKRollRotation_set },
    { "fBKZTranslation", _wrap_TEnvironmentPars_fBKZTranslation_get, _wrap_TEnvironmentPars_fBKZTranslation_set },
    { "fSDDiameter", _wrap_TEnvironmentPars_fSDDiameter_get, _wrap_TEnvironmentPars_fSDDiameter_set },
    { "fSDRollRotation", _wrap_TEnvironmentPars_fSDRollRotation_get, _wrap_TEnvironmentPars_fSDRollRotation_set },
    { "fSDZTranslation", _wrap_TEnvironmentPars_fSDZTranslation_get, _wrap_TEnvironmentPars_fSDZTranslation_set },
    { "fLightAmbColor", _wrap_TEnvironmentPars_fLightAmbColor_get, _wrap_TEnvironmentPars_fLightAmbColor_set },
    { "fLightDiffColor", _wrap_TEnvironmentPars_fLightDiffColor_get, _wrap_TEnvironmentPars_fLightDiffColor_set },
    { "fLightRhoAngle", _wrap_TEnvironmentPars_fLightRhoAngle_get, _wrap_TEnvironmentPars_fLightRhoAngle_set },
    { "fLightPhiAngle", _wrap_TEnvironmentPars_fLightPhiAngle_get, _wrap_TEnvironmentPars_fLightPhiAngle_set },
    { "iEnvType", _wrap_TEnvironmentPars_iEnvType_get, _wrap_TEnvironmentPars_iEnvType_set },
    { "cPad", _wrap_TEnvironmentPars_cPad_get, _wrap_TEnvironmentPars_cPad_set },
    {0,0,0}
};
static swig_lua_method swig_TEnvironmentPars_methods[]= {
    {0,0}
};
static swig_lua_method swig_TEnvironmentPars_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TEnvironmentPars_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TEnvironmentPars_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TEnvironmentPars_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TEnvironmentPars_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TEnvironmentPars_Sf_SwigStatic = {
    "TEnvironmentPars",
    swig_TEnvironmentPars_Sf_SwigStatic_methods,
    swig_TEnvironmentPars_Sf_SwigStatic_attributes,
    swig_TEnvironmentPars_Sf_SwigStatic_constants,
    swig_TEnvironmentPars_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TEnvironmentPars_bases[] = {0};
static const char *swig_TEnvironmentPars_base_names[] = {0};
static swig_lua_class _wrap_class_TEnvironmentPars = { "TEnvironmentPars", "TEnvironmentPars", &SWIGTYPE_p_TEnvironmentPars,_proxy__wrap_new_TEnvironmentPars, swig_delete_TEnvironmentPars, swig_TEnvironmentPars_methods, swig_TEnvironmentPars_attributes, &swig_TEnvironmentPars_Sf_SwigStatic, swig_TEnvironmentPars_meta, swig_TEnvironmentPars_bases, swig_TEnvironmentPars_base_names };

static int _wrap_new_CLODSelector_Array(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLODSelector_Array *result = 0 ;
    
    SWIG_check_num_args("CLODSelector_Array::CLODSelector_Array",0,0)
    result = (CLODSelector_Array *)new CLODSelector_Array();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector_Array,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLODSelector_Array_GetLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLODSelector_Array *arg1 = 0 ;
    float arg2 ;
    float result;
    
    SWIG_check_num_args("CLODSelector_Array::GetLOD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLODSelector_Array::GetLOD",1,"CLODSelector_Array *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLODSelector_Array::GetLOD",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLODSelector_Array,0))){
      SWIG_fail_ptr("CLODSelector_Array_GetLOD",1,SWIGTYPE_p_CLODSelector_Array);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (float)(arg1)->GetLOD(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLODSelector_Array_AddLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLODSelector_Array *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CLODSelector_Array::AddLOD",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLODSelector_Array::AddLOD",1,"CLODSelector_Array *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLODSelector_Array::AddLOD",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLODSelector_Array,0))){
      SWIG_fail_ptr("CLODSelector_Array_AddLOD",1,SWIGTYPE_p_CLODSelector_Array);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->AddLOD(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CLODSelector_Array_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CLODSelector_Array *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CLODSelector_Array::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CLODSelector_Array::Init",1,"CLODSelector_Array *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CLODSelector_Array::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLODSelector_Array,0))){
      SWIG_fail_ptr("CLODSelector_Array_Init",1,SWIGTYPE_p_CLODSelector_Array);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CLODSelector_Array(void *obj) {
CLODSelector_Array *arg1 = (CLODSelector_Array *) obj;
delete arg1;
}
static int _proxy__wrap_new_CLODSelector_Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CLODSelector_Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CLODSelector_Array_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CLODSelector_Array_methods[]= {
    { "GetLOD", _wrap_CLODSelector_Array_GetLOD},
    { "AddLOD", _wrap_CLODSelector_Array_AddLOD},
    { "Init", _wrap_CLODSelector_Array_Init},
    {0,0}
};
static swig_lua_method swig_CLODSelector_Array_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CLODSelector_Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CLODSelector_Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CLODSelector_Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CLODSelector_Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CLODSelector_Array_Sf_SwigStatic = {
    "CLODSelector_Array",
    swig_CLODSelector_Array_Sf_SwigStatic_methods,
    swig_CLODSelector_Array_Sf_SwigStatic_attributes,
    swig_CLODSelector_Array_Sf_SwigStatic_constants,
    swig_CLODSelector_Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CLODSelector_Array_bases[] = {0,0};
static const char *swig_CLODSelector_Array_base_names[] = {"CLODSelector *",0};
static swig_lua_class _wrap_class_CLODSelector_Array = { "CLODSelector_Array", "CLODSelector_Array", &SWIGTYPE_p_CLODSelector_Array,_proxy__wrap_new_CLODSelector_Array, swig_delete_CLODSelector_Array, swig_CLODSelector_Array_methods, swig_CLODSelector_Array_attributes, &swig_CLODSelector_Array_Sf_SwigStatic, swig_CLODSelector_Array_meta, swig_CLODSelector_Array_bases, swig_CLODSelector_Array_base_names };

static int _wrap_new_CTerrainTesselatorGM(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *result = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::CTerrainTesselatorGM",0,0)
    result = (CTerrainTesselatorGM *)new CTerrainTesselatorGM();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTerrainTesselatorGM,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::Init",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_Init",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_Invalidate(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::Invalidate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::Invalidate",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_Invalidate",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->Invalidate();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateVertexData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateVertexData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateVertexData",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateVertexData",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->GenerateVertexData();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateVertexColorData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateVertexColorData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateVertexColorData",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateVertexColorData",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->GenerateVertexColorData();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateLightData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateLightData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateLightData",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateLightData",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->GenerateLightData();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateGlobalCoordData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateGlobalCoordData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateGlobalCoordData",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateGlobalCoordData",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->GenerateGlobalCoordData();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GetTileLOD(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    float arg2 ;
    int arg3 ;
    int result;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GetTileLOD",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GetTileLOD",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GetTileLOD",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainTesselatorGM::GetTileLOD",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GetTileLOD",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (int)(arg1)->GetTileLOD(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_TesselateGrid(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::TesselateGrid",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::TesselateGrid",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_TesselateGrid",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->TesselateGrid();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_Render(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::Render",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::Render",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_Render",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->Render();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_SetupRenderVariables(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::SetupRenderVariables",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::SetupRenderVariables",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_SetupRenderVariables",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->SetupRenderVariables();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->GenerateHeightData();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData_Inner(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData_Inner",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Inner",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Inner",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData_Inner",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->GenerateHeightData_Inner(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData_Horizontal_3pN(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData_Horizontal_3pN",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal_3pN",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal_3pN",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal_3pN",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData_Horizontal_3pN",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->GenerateHeightData_Horizontal_3pN(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData_Vertical_3pN(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData_Vertical_3pN",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical_3pN",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical_3pN",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical_3pN",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData_Vertical_3pN",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->GenerateHeightData_Vertical_3pN(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData_Horizontal_N(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData_Horizontal_N",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal_N",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal_N",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal_N",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData_Horizontal_N",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->GenerateHeightData_Horizontal_N(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData_Vertical_N(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData_Vertical_N",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical_N",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical_N",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical_N",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData_Vertical_N",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->GenerateHeightData_Vertical_N(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData_Horizontal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData_Horizontal",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Horizontal",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData_Horizontal",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->GenerateHeightData_Horizontal(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_GenerateHeightData_Vertical(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::GenerateHeightData_Vertical",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CTerrainTesselatorGM::GenerateHeightData_Vertical",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_GenerateHeightData_Vertical",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->GenerateHeightData_Vertical(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_SetupTileMaterial(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::SetupTileMaterial",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::SetupTileMaterial",1,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_SetupTileMaterial",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    (arg1)->SetupTileMaterial();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_SetTileLODPar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::SetTileLODPar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::SetTileLODPar",1,"CTerrainTesselatorGM *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::SetTileLODPar",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_SetTileLODPar",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->SetTileLODPar(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CTerrainTesselatorGM_SetBoundVol(lua_State* L) {
  {
    int SWIG_arg = 0;
    CTerrainTesselatorGM *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    
    SWIG_check_num_args("CTerrainTesselatorGM::SetBoundVol",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CTerrainTesselatorGM::SetBoundVol",1,"CTerrainTesselatorGM *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CTerrainTesselatorGM::SetBoundVol",2,"CGGraphBV const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CTerrainTesselatorGM,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_SetBoundVol",1,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CTerrainTesselatorGM_SetBoundVol",2,SWIGTYPE_p_CGGraphBV);
    }
    
    (arg1)->SetBoundVol((CGGraphBV const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CTerrainTesselatorGM(void *obj) {
CTerrainTesselatorGM *arg1 = (CTerrainTesselatorGM *) obj;
delete arg1;
}
static int _proxy__wrap_new_CTerrainTesselatorGM(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CTerrainTesselatorGM);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CTerrainTesselatorGM_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CTerrainTesselatorGM_methods[]= {
    { "Init", _wrap_CTerrainTesselatorGM_Init},
    { "Invalidate", _wrap_CTerrainTesselatorGM_Invalidate},
    { "GenerateVertexData", _wrap_CTerrainTesselatorGM_GenerateVertexData},
    { "GenerateVertexColorData", _wrap_CTerrainTesselatorGM_GenerateVertexColorData},
    { "GenerateLightData", _wrap_CTerrainTesselatorGM_GenerateLightData},
    { "GenerateGlobalCoordData", _wrap_CTerrainTesselatorGM_GenerateGlobalCoordData},
    { "GetTileLOD", _wrap_CTerrainTesselatorGM_GetTileLOD},
    { "TesselateGrid", _wrap_CTerrainTesselatorGM_TesselateGrid},
    { "Render", _wrap_CTerrainTesselatorGM_Render},
    { "SetupRenderVariables", _wrap_CTerrainTesselatorGM_SetupRenderVariables},
    { "GenerateHeightData", _wrap_CTerrainTesselatorGM_GenerateHeightData},
    { "GenerateHeightData_Inner", _wrap_CTerrainTesselatorGM_GenerateHeightData_Inner},
    { "GenerateHeightData_Horizontal_3pN", _wrap_CTerrainTesselatorGM_GenerateHeightData_Horizontal_3pN},
    { "GenerateHeightData_Vertical_3pN", _wrap_CTerrainTesselatorGM_GenerateHeightData_Vertical_3pN},
    { "GenerateHeightData_Horizontal_N", _wrap_CTerrainTesselatorGM_GenerateHeightData_Horizontal_N},
    { "GenerateHeightData_Vertical_N", _wrap_CTerrainTesselatorGM_GenerateHeightData_Vertical_N},
    { "GenerateHeightData_Horizontal", _wrap_CTerrainTesselatorGM_GenerateHeightData_Horizontal},
    { "GenerateHeightData_Vertical", _wrap_CTerrainTesselatorGM_GenerateHeightData_Vertical},
    { "SetupTileMaterial", _wrap_CTerrainTesselatorGM_SetupTileMaterial},
    { "SetTileLODPar", _wrap_CTerrainTesselatorGM_SetTileLODPar},
    { "SetBoundVol", _wrap_CTerrainTesselatorGM_SetBoundVol},
    {0,0}
};
static swig_lua_method swig_CTerrainTesselatorGM_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CTerrainTesselatorGM_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CTerrainTesselatorGM_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CTerrainTesselatorGM_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CTerrainTesselatorGM_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CTerrainTesselatorGM_Sf_SwigStatic = {
    "CTerrainTesselatorGM",
    swig_CTerrainTesselatorGM_Sf_SwigStatic_methods,
    swig_CTerrainTesselatorGM_Sf_SwigStatic_attributes,
    swig_CTerrainTesselatorGM_Sf_SwigStatic_constants,
    swig_CTerrainTesselatorGM_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CTerrainTesselatorGM_bases[] = {0,0};
static const char *swig_CTerrainTesselatorGM_base_names[] = {"CTerrainTesselator *",0};
static swig_lua_class _wrap_class_CTerrainTesselatorGM = { "CTerrainTesselatorGM", "CTerrainTesselatorGM", &SWIGTYPE_p_CTerrainTesselatorGM,_proxy__wrap_new_CTerrainTesselatorGM, swig_delete_CTerrainTesselatorGM, swig_CTerrainTesselatorGM_methods, swig_CTerrainTesselatorGM_attributes, &swig_CTerrainTesselatorGM_Sf_SwigStatic, swig_CTerrainTesselatorGM_meta, swig_CTerrainTesselatorGM_bases, swig_CTerrainTesselatorGM_base_names };

static int _wrap_new_TERSceneLoader(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::TERSceneLoader",0,0)
    result = (TERSceneLoader *)new TERSceneLoader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TERSceneLoader,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poLoad(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    char *arg2 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poLoad",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poLoad",1,"TERSceneLoader *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TERSceneLoader::poLoad",2,"char *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poLoad",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (char *)lua_tostring(L, 2);
    result = (CGSceneNode *)(arg1)->poLoad(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_LoadData(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    FILE *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::LoadData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::LoadData",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::LoadData",2,"FILE *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_LoadData",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("TERSceneLoader_LoadData",2,SWIGTYPE_p_FILE);
    }
    
    (arg1)->LoadData(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_CreateSharedObjects(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::CreateSharedObjects",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::CreateSharedObjects",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_CreateSharedObjects",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    (arg1)->CreateSharedObjects();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poCreateTileBookmark(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CTileBookmark *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poCreateTileBookmark",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poCreateTileBookmark",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poCreateTileBookmark",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CTileBookmark *)(arg1)->poCreateTileBookmark();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTileBookmark,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poCreateLODSelector(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CLODSelector *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poCreateLODSelector",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poCreateLODSelector",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poCreateLODSelector",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CLODSelector *)(arg1)->poCreateLODSelector();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poCreateSkyBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CSkyBox *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poCreateSkyBox",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poCreateSkyBox",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poCreateSkyBox",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CSkyBox *)(arg1)->poCreateSkyBox();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSkyBox,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poCreateSkyDome(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CSkyDome *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poCreateSkyDome",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poCreateSkyDome",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poCreateSkyDome",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CSkyDome *)(arg1)->poCreateSkyDome();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSkyDome,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poGenerateScene(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poGenerateScene",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poGenerateScene",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poGenerateScene",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CGSceneNode *)(arg1)->poGenerateScene();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_HF_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CHeightField *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::HF",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::HF",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::HF",2,"CHeightField *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_HF_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CHeightField,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_HF_set",2,SWIGTYPE_p_CHeightField);
    }
    
    if (arg1) (arg1)->HF = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_HF_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CHeightField *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::HF",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::HF",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_HF_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CHeightField *) ((arg1)->HF);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHeightField,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_TM_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CTexMap *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::TM",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::TM",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::TM",2,"CTexMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_TM_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTexMap,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_TM_set",2,SWIGTYPE_p_CTexMap);
    }
    
    if (arg1) (arg1)->TM = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_TM_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CTexMap *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::TM",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::TM",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_TM_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CTexMap *) ((arg1)->TM);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTexMap,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_LM_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CLightMap *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::LM",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::LM",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::LM",2,"CLightMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_LM_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CLightMap,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_LM_set",2,SWIGTYPE_p_CLightMap);
    }
    
    if (arg1) (arg1)->LM = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_LM_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CLightMap *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::LM",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::LM",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_LM_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CLightMap *) ((arg1)->LM);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLightMap,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_TS_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    TTexSet *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::TS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::TS",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::TS",2,"TTexSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_TS_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TTexSet,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_TS_set",2,SWIGTYPE_p_TTexSet);
    }
    
    if (arg1) (arg1)->TS = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_TS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    TTexSet *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::TS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::TS",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_TS_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (TTexSet *) ((arg1)->TS);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TTexSet,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_ATS_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    TTexSet *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::ATS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::ATS",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::ATS",2,"TTexSet *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_ATS_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TTexSet,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_ATS_set",2,SWIGTYPE_p_TTexSet);
    }
    
    if (arg1) (arg1)->ATS = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_ATS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    TTexSet *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::ATS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::ATS",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_ATS_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (TTexSet *) ((arg1)->ATS);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TTexSet,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_iSectorRes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::iSectorRes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::iSectorRes",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::iSectorRes",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_iSectorRes_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iSectorRes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_iSectorRes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TERSceneLoader::iSectorRes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::iSectorRes",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_iSectorRes_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (int) ((arg1)->iSectorRes);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fSectorSize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::fSectorSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fSectorSize",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::fSectorSize",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fSectorSize_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fSectorSize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fSectorSize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TERSceneLoader::fSectorSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fSectorSize",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fSectorSize_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (float) ((arg1)->fSectorSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fXYScale_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::fXYScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fXYScale",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::fXYScale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fXYScale_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fXYScale = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fXYScale_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TERSceneLoader::fXYScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fXYScale",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fXYScale_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (float) ((arg1)->fXYScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fIScale_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::fIScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fIScale",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::fIScale",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fIScale_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fIScale = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fIScale_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TERSceneLoader::fIScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fIScale",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fIScale_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (float) ((arg1)->fIScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_iCircXRes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::iCircXRes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::iCircXRes",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::iCircXRes",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_iCircXRes_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iCircXRes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_iCircXRes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TERSceneLoader::iCircXRes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::iCircXRes",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_iCircXRes_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (int) ((arg1)->iCircXRes);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_iCircYRes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::iCircYRes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::iCircYRes",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::iCircYRes",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_iCircYRes_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iCircYRes = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_iCircYRes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TERSceneLoader::iCircYRes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::iCircYRes",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_iCircYRes_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (int) ((arg1)->iCircYRes);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fCircXSize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::fCircXSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fCircXSize",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::fCircXSize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fCircXSize_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fCircXSize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fCircXSize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TERSceneLoader::fCircXSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fCircXSize",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fCircXSize_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (int) ((arg1)->fCircXSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fCircYSize_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("TERSceneLoader::fCircYSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fCircYSize",1,"TERSceneLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TERSceneLoader::fCircYSize",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fCircYSize_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->fCircYSize = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_fCircYSize_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("TERSceneLoader::fCircYSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::fCircYSize",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_fCircYSize_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (int) ((arg1)->fCircYSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poTB_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CTileBookmark *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poTB",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poTB",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::poTB",2,"CTileBookmark *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poTB_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTileBookmark,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_poTB_set",2,SWIGTYPE_p_CTileBookmark);
    }
    
    if (arg1) (arg1)->poTB = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poTB_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CTileBookmark *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poTB",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poTB",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poTB_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CTileBookmark *) ((arg1)->poTB);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTileBookmark,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poTT_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CTerrainTesselatorGM *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poTT",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poTT",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::poTT",2,"CTerrainTesselatorGM *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poTT_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTerrainTesselatorGM,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_poTT_set",2,SWIGTYPE_p_CTerrainTesselatorGM);
    }
    
    if (arg1) (arg1)->poTT = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poTT_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CTerrainTesselatorGM *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poTT",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poTT",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poTT_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CTerrainTesselatorGM *) ((arg1)->poTT);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTerrainTesselatorGM,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poLS_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CLODSelector *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poLS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poLS",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::poLS",2,"CLODSelector *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poLS_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CLODSelector,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("TERSceneLoader_poLS_set",2,SWIGTYPE_p_CLODSelector);
    }
    
    if (arg1) (arg1)->poLS = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_poLS_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    CLODSelector *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::poLS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::poLS",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_poLS_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (CLODSelector *) ((arg1)->poLS);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLODSelector,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_EnvPars_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    TEnvironmentPars *arg2 = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::EnvPars",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::EnvPars",1,"TERSceneLoader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TERSceneLoader::EnvPars",2,"TEnvironmentPars *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_EnvPars_set",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TEnvironmentPars,0))){
      SWIG_fail_ptr("TERSceneLoader_EnvPars_set",2,SWIGTYPE_p_TEnvironmentPars);
    }
    
    if (arg1) (arg1)->EnvPars = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TERSceneLoader_EnvPars_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TERSceneLoader *arg1 = 0 ;
    TEnvironmentPars *result = 0 ;
    
    SWIG_check_num_args("TERSceneLoader::EnvPars",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TERSceneLoader::EnvPars",1,"TERSceneLoader *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TERSceneLoader,0))){
      SWIG_fail_ptr("TERSceneLoader_EnvPars_get",1,SWIGTYPE_p_TERSceneLoader);
    }
    
    result = (TEnvironmentPars *)& ((arg1)->EnvPars);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TEnvironmentPars,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_TERSceneLoader(void *obj) {
TERSceneLoader *arg1 = (TERSceneLoader *) obj;
delete arg1;
}
static int _proxy__wrap_new_TERSceneLoader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TERSceneLoader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TERSceneLoader_attributes[] = {
    { "HF", _wrap_TERSceneLoader_HF_get, _wrap_TERSceneLoader_HF_set },
    { "TM", _wrap_TERSceneLoader_TM_get, _wrap_TERSceneLoader_TM_set },
    { "LM", _wrap_TERSceneLoader_LM_get, _wrap_TERSceneLoader_LM_set },
    { "TS", _wrap_TERSceneLoader_TS_get, _wrap_TERSceneLoader_TS_set },
    { "ATS", _wrap_TERSceneLoader_ATS_get, _wrap_TERSceneLoader_ATS_set },
    { "iSectorRes", _wrap_TERSceneLoader_iSectorRes_get, _wrap_TERSceneLoader_iSectorRes_set },
    { "fSectorSize", _wrap_TERSceneLoader_fSectorSize_get, _wrap_TERSceneLoader_fSectorSize_set },
    { "fXYScale", _wrap_TERSceneLoader_fXYScale_get, _wrap_TERSceneLoader_fXYScale_set },
    { "fIScale", _wrap_TERSceneLoader_fIScale_get, _wrap_TERSceneLoader_fIScale_set },
    { "iCircXRes", _wrap_TERSceneLoader_iCircXRes_get, _wrap_TERSceneLoader_iCircXRes_set },
    { "iCircYRes", _wrap_TERSceneLoader_iCircYRes_get, _wrap_TERSceneLoader_iCircYRes_set },
    { "fCircXSize", _wrap_TERSceneLoader_fCircXSize_get, _wrap_TERSceneLoader_fCircXSize_set },
    { "fCircYSize", _wrap_TERSceneLoader_fCircYSize_get, _wrap_TERSceneLoader_fCircYSize_set },
    { "poTB", _wrap_TERSceneLoader_poTB_get, _wrap_TERSceneLoader_poTB_set },
    { "poTT", _wrap_TERSceneLoader_poTT_get, _wrap_TERSceneLoader_poTT_set },
    { "poLS", _wrap_TERSceneLoader_poLS_get, _wrap_TERSceneLoader_poLS_set },
    { "EnvPars", _wrap_TERSceneLoader_EnvPars_get, _wrap_TERSceneLoader_EnvPars_set },
    {0,0,0}
};
static swig_lua_method swig_TERSceneLoader_methods[]= {
    { "poLoad", _wrap_TERSceneLoader_poLoad},
    { "LoadData", _wrap_TERSceneLoader_LoadData},
    { "CreateSharedObjects", _wrap_TERSceneLoader_CreateSharedObjects},
    { "poCreateTileBookmark", _wrap_TERSceneLoader_poCreateTileBookmark},
    { "poCreateLODSelector", _wrap_TERSceneLoader_poCreateLODSelector},
    { "poCreateSkyBox", _wrap_TERSceneLoader_poCreateSkyBox},
    { "poCreateSkyDome", _wrap_TERSceneLoader_poCreateSkyDome},
    { "poGenerateScene", _wrap_TERSceneLoader_poGenerateScene},
    {0,0}
};
static swig_lua_method swig_TERSceneLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TERSceneLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TERSceneLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TERSceneLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TERSceneLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TERSceneLoader_Sf_SwigStatic = {
    "TERSceneLoader",
    swig_TERSceneLoader_Sf_SwigStatic_methods,
    swig_TERSceneLoader_Sf_SwigStatic_attributes,
    swig_TERSceneLoader_Sf_SwigStatic_constants,
    swig_TERSceneLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TERSceneLoader_bases[] = {0};
static const char *swig_TERSceneLoader_base_names[] = {0};
static swig_lua_class _wrap_class_TERSceneLoader = { "TERSceneLoader", "TERSceneLoader", &SWIGTYPE_p_TERSceneLoader,_proxy__wrap_new_TERSceneLoader, swig_delete_TERSceneLoader, swig_TERSceneLoader_methods, swig_TERSceneLoader_attributes, &swig_TERSceneLoader_Sf_SwigStatic, swig_TERSceneLoader_meta, swig_TERSceneLoader_bases, swig_TERSceneLoader_base_names };

static int _wrap_CCOL_StackCollisionElem_m_fFrameFact_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_StackCollisionElem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CCOL_StackCollisionElem::m_fFrameFact",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_StackCollisionElem::m_fFrameFact",1,"CCOL_StackCollisionElem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_StackCollisionElem::m_fFrameFact",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_StackCollisionElem,0))){
      SWIG_fail_ptr("CCOL_StackCollisionElem_m_fFrameFact_set",1,SWIGTYPE_p_CCOL_StackCollisionElem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fFrameFact = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_StackCollisionElem_m_fFrameFact_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_StackCollisionElem *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_StackCollisionElem::m_fFrameFact",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_StackCollisionElem::m_fFrameFact",1,"CCOL_StackCollisionElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_StackCollisionElem,0))){
      SWIG_fail_ptr("CCOL_StackCollisionElem_m_fFrameFact_get",1,SWIGTYPE_p_CCOL_StackCollisionElem);
    }
    
    result = (float) ((arg1)->m_fFrameFact);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_StackCollisionElem_m_poCObj_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_StackCollisionElem *arg1 = 0 ;
    void *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_StackCollisionElem::m_poCObj",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_StackCollisionElem::m_poCObj",1,"CCOL_StackCollisionElem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_StackCollisionElem::m_poCObj",2,"void *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_StackCollisionElem,0))){
      SWIG_fail_ptr("CCOL_StackCollisionElem_m_poCObj_set",1,SWIGTYPE_p_CCOL_StackCollisionElem);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CCOL_StackCollisionElem_m_poCObj_set");
    if (arg1) (arg1)->m_poCObj = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_StackCollisionElem_m_poCObj_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_StackCollisionElem *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CCOL_StackCollisionElem::m_poCObj",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_StackCollisionElem::m_poCObj",1,"CCOL_StackCollisionElem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_StackCollisionElem,0))){
      SWIG_fail_ptr("CCOL_StackCollisionElem_m_poCObj_get",1,SWIGTYPE_p_CCOL_StackCollisionElem);
    }
    
    result = (void *) ((arg1)->m_poCObj);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_StackCollisionElem(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_StackCollisionElem *result = 0 ;
    
    SWIG_check_num_args("CCOL_StackCollisionElem::CCOL_StackCollisionElem",0,0)
    result = (CCOL_StackCollisionElem *)new CCOL_StackCollisionElem();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_StackCollisionElem,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_StackCollisionElem(void *obj) {
CCOL_StackCollisionElem *arg1 = (CCOL_StackCollisionElem *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_StackCollisionElem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_StackCollisionElem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_StackCollisionElem_attributes[] = {
    { "m_fFrameFact", _wrap_CCOL_StackCollisionElem_m_fFrameFact_get, _wrap_CCOL_StackCollisionElem_m_fFrameFact_set },
    { "m_poCObj", _wrap_CCOL_StackCollisionElem_m_poCObj_get, _wrap_CCOL_StackCollisionElem_m_poCObj_set },
    {0,0,0}
};
static swig_lua_method swig_CCOL_StackCollisionElem_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_StackCollisionElem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_StackCollisionElem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_StackCollisionElem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_StackCollisionElem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_StackCollisionElem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_StackCollisionElem_Sf_SwigStatic = {
    "CCOL_StackCollisionElem",
    swig_CCOL_StackCollisionElem_Sf_SwigStatic_methods,
    swig_CCOL_StackCollisionElem_Sf_SwigStatic_attributes,
    swig_CCOL_StackCollisionElem_Sf_SwigStatic_constants,
    swig_CCOL_StackCollisionElem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_StackCollisionElem_bases[] = {0};
static const char *swig_CCOL_StackCollisionElem_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_StackCollisionElem = { "CCOL_StackCollisionElem", "CCOL_StackCollisionElem", &SWIGTYPE_p_CCOL_StackCollisionElem,_proxy__wrap_new_CCOL_StackCollisionElem, swig_delete_CCOL_StackCollisionElem, swig_CCOL_StackCollisionElem_methods, swig_CCOL_StackCollisionElem_attributes, &swig_CCOL_StackCollisionElem_Sf_SwigStatic, swig_CCOL_StackCollisionElem_meta, swig_CCOL_StackCollisionElem_bases, swig_CCOL_StackCollisionElem_base_names };

static int _wrap_CCOL_Stack_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Stack *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CCOL_Stack::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Stack::Init",1,"CCOL_Stack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Stack::Init",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Stack,0))){
      SWIG_fail_ptr("CCOL_Stack_Init",1,SWIGTYPE_p_CCOL_Stack);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Stack_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Stack *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_Stack::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Stack::Reset",1,"CCOL_Stack *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Stack,0))){
      SWIG_fail_ptr("CCOL_Stack_Reset",1,SWIGTYPE_p_CCOL_Stack);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Stack_AddCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Stack *arg1 = 0 ;
    void *arg2 = 0 ;
    float arg3 ;
    
    SWIG_check_num_args("CCOL_Stack::AddCollision",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Stack::AddCollision",1,"CCOL_Stack *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Stack::AddCollision",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_Stack::AddCollision",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Stack,0))){
      SWIG_fail_ptr("CCOL_Stack_AddCollision",1,SWIGTYPE_p_CCOL_Stack);
    }
    
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CCOL_Stack_AddCollision");
    arg3 = (float)lua_tonumber(L, 3);
    (arg1)->AddCollision(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Stack_uiGetNumCollisions(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Stack *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CCOL_Stack::uiGetNumCollisions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Stack::uiGetNumCollisions",1,"CCOL_Stack *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Stack,0))){
      SWIG_fail_ptr("CCOL_Stack_uiGetNumCollisions",1,SWIGTYPE_p_CCOL_Stack);
    }
    
    result = (uint)(arg1)->uiGetNumCollisions();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Stack_poGetCollided(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Stack *arg1 = 0 ;
    CCOL_StackCollisionElem *result = 0 ;
    
    SWIG_check_num_args("CCOL_Stack::poGetCollided",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Stack::poGetCollided",1,"CCOL_Stack *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Stack,0))){
      SWIG_fail_ptr("CCOL_Stack_poGetCollided",1,SWIGTYPE_p_CCOL_Stack);
    }
    
    result = (CCOL_StackCollisionElem *)(arg1)->poGetCollided();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_StackCollisionElem,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_Stack(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Stack *result = 0 ;
    
    SWIG_check_num_args("CCOL_Stack::CCOL_Stack",0,0)
    result = (CCOL_Stack *)new CCOL_Stack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Stack,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_Stack(void *obj) {
CCOL_Stack *arg1 = (CCOL_Stack *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_Stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_Stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_Stack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_Stack_methods[]= {
    { "Init", _wrap_CCOL_Stack_Init},
    { "Reset", _wrap_CCOL_Stack_Reset},
    { "AddCollision", _wrap_CCOL_Stack_AddCollision},
    { "uiGetNumCollisions", _wrap_CCOL_Stack_uiGetNumCollisions},
    { "poGetCollided", _wrap_CCOL_Stack_poGetCollided},
    {0,0}
};
static swig_lua_method swig_CCOL_Stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_Stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_Stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_Stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_Stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_Stack_Sf_SwigStatic = {
    "CCOL_Stack",
    swig_CCOL_Stack_Sf_SwigStatic_methods,
    swig_CCOL_Stack_Sf_SwigStatic_attributes,
    swig_CCOL_Stack_Sf_SwigStatic_constants,
    swig_CCOL_Stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_Stack_bases[] = {0};
static const char *swig_CCOL_Stack_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_Stack = { "CCOL_Stack", "CCOL_Stack", &SWIGTYPE_p_CCOL_Stack,_proxy__wrap_new_CCOL_Stack, swig_delete_CCOL_Stack, swig_CCOL_Stack_methods, swig_CCOL_Stack_attributes, &swig_CCOL_Stack_Sf_SwigStatic, swig_CCOL_Stack_meta, swig_CCOL_Stack_bases, swig_CCOL_Stack_base_names };

static int _wrap_new_CCOL_TriList(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *result = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::CCOL_TriList",0,0)
    result = (CCOL_TriList *)new CCOL_TriList();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TriList,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CCOL_TriList::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::Init",1,"CCOL_TriList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_TriList::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_Init",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::Reset",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_Reset",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_iFreeTris(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_TriList::iFreeTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::iFreeTris",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_iFreeTris",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (int)(arg1)->iFreeTris();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_iAddTri__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int arg4 ;
    float arg5 ;
    int result;
    
    SWIG_check_num_args("CCOL_TriList::iAddTri",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::iAddTri",1,"CCOL_TriList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_TriList::iAddTri",2,"CGVect3 *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_TriList::iAddTri",3,"CGVect3 &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_TriList::iAddTri",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CCOL_TriList::iAddTri",5,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5);
    result = (int)(arg1)->iAddTri(arg2,*arg3,arg4,arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_iAddTri__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    CGVect3 *arg5 = 0 ;
    int arg6 ;
    float arg7 ;
    int result;
    
    SWIG_check_num_args("CCOL_TriList::iAddTri",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::iAddTri",1,"CCOL_TriList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_TriList::iAddTri",2,"CGVect3 &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_TriList::iAddTri",3,"CGVect3 &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CCOL_TriList::iAddTri",4,"CGVect3 &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_TriList::iAddTri",5,"CGVect3 &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CCOL_TriList::iAddTri",6,"int");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("CCOL_TriList::iAddTri",7,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",4,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriList_iAddTri",5,SWIGTYPE_p_CGVect3);
    }
    
    arg6 = (int)lua_tonumber(L, 6);
    arg7 = (float)lua_tonumber(L, 7);
    result = (int)(arg1)->iAddTri(*arg2,*arg3,*arg4,*arg5,arg6,arg7);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_iAddTri(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCOL_TriList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CCOL_TriList_iAddTri__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCOL_TriList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CGVect3, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_CCOL_TriList_iAddTri__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CCOL_TriList_iAddTri'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCOL_TriList::iAddTri(CGVect3 *,CGVect3 &,int,float)\n"
    "    CCOL_TriList::iAddTri(CGVect3 &,CGVect3 &,CGVect3 &,CGVect3 &,int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_CCOL_TriList_iMaxTris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CCOL_TriList::iMaxTris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::iMaxTris",1,"CCOL_TriList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_TriList::iMaxTris",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_iMaxTris_set",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iMaxTris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_iMaxTris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_TriList::iMaxTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::iMaxTris",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_iMaxTris_get",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (int) ((arg1)->iMaxTris);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_iNumTris_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CCOL_TriList::iNumTris",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::iNumTris",1,"CCOL_TriList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_TriList::iNumTris",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_iNumTris_set",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iNumTris = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_iNumTris_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_TriList::iNumTris",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::iNumTris",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_iNumTris_get",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (int) ((arg1)->iNumTris);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_poVXs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::poVXs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::poVXs",1,"CCOL_TriList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_TriList::poVXs",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_poVXs_set",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_TriList_poVXs_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->poVXs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_poVXs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::poVXs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::poVXs",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_poVXs_get",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (CGVect3 *) ((arg1)->poVXs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_poVNs_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::poVNs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::poVNs",1,"CCOL_TriList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_TriList::poVNs",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_poVNs_set",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_TriList_poVNs_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->poVNs = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_poVNs_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::poVNs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::poVNs",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_poVNs_get",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (CGVect3 *) ((arg1)->poVNs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_piMats_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::piMats",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::piMats",1,"CCOL_TriList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_TriList::piMats",2,"int *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_piMats_set",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_TriList_piMats_set",2,SWIGTYPE_p_int);
    }
    
    if (arg1) (arg1)->piMats = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_piMats_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    int *result = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::piMats",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::piMats",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_piMats_get",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (int *) ((arg1)->piMats);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_pfFrameFacts_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    float *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::pfFrameFacts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::pfFrameFacts",1,"CCOL_TriList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_TriList::pfFrameFacts",2,"float *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_pfFrameFacts_set",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_TriList_pfFrameFacts_set",2,SWIGTYPE_p_float);
    }
    
    if (arg1) (arg1)->pfFrameFacts = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_pfFrameFacts_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList *arg1 = 0 ;
    float *result = 0 ;
    
    SWIG_check_num_args("CCOL_TriList::pfFrameFacts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriList::pfFrameFacts",1,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_pfFrameFacts_get",1,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (float *) ((arg1)->pfFrameFacts);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_TriList(void *obj) {
CCOL_TriList *arg1 = (CCOL_TriList *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_TriList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_TriList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_TriList_attributes[] = {
    { "iMaxTris", _wrap_CCOL_TriList_iMaxTris_get, _wrap_CCOL_TriList_iMaxTris_set },
    { "iNumTris", _wrap_CCOL_TriList_iNumTris_get, _wrap_CCOL_TriList_iNumTris_set },
    { "poVXs", _wrap_CCOL_TriList_poVXs_get, _wrap_CCOL_TriList_poVXs_set },
    { "poVNs", _wrap_CCOL_TriList_poVNs_get, _wrap_CCOL_TriList_poVNs_set },
    { "piMats", _wrap_CCOL_TriList_piMats_get, _wrap_CCOL_TriList_piMats_set },
    { "pfFrameFacts", _wrap_CCOL_TriList_pfFrameFacts_get, _wrap_CCOL_TriList_pfFrameFacts_set },
    {0,0,0}
};
static swig_lua_method swig_CCOL_TriList_methods[]= {
    { "Init", _wrap_CCOL_TriList_Init},
    { "Reset", _wrap_CCOL_TriList_Reset},
    { "iFreeTris", _wrap_CCOL_TriList_iFreeTris},
    { "iAddTri", _wrap_CCOL_TriList_iAddTri},
    {0,0}
};
static swig_lua_method swig_CCOL_TriList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_TriList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_TriList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_TriList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_TriList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_TriList_Sf_SwigStatic = {
    "CCOL_TriList",
    swig_CCOL_TriList_Sf_SwigStatic_methods,
    swig_CCOL_TriList_Sf_SwigStatic_attributes,
    swig_CCOL_TriList_Sf_SwigStatic_constants,
    swig_CCOL_TriList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_TriList_bases[] = {0};
static const char *swig_CCOL_TriList_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_TriList = { "CCOL_TriList", "CCOL_TriList", &SWIGTYPE_p_CCOL_TriList,_proxy__wrap_new_CCOL_TriList, swig_delete_CCOL_TriList, swig_CCOL_TriList_methods, swig_CCOL_TriList_attributes, &swig_CCOL_TriList_Sf_SwigStatic, swig_CCOL_TriList_meta, swig_CCOL_TriList_bases, swig_CCOL_TriList_base_names };

static int _wrap_new_CCOL_TriListGen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriListGen *result = 0 ;
    
    SWIG_check_num_args("CCOL_TriListGen::CCOL_TriListGen",0,0)
    result = (CCOL_TriListGen *)new CCOL_TriListGen();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TriListGen,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriListGen_GetTriList(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriListGen *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    int result;
    
    SWIG_check_num_args("CCOL_TriListGen::GetTriList",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriListGen::GetTriList",1,"CCOL_TriListGen *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_TriListGen::GetTriList",2,"CCOL_TriList &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_TriListGen::GetTriList",3,"CGVect3 &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_TriListGen::GetTriList",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriListGen,0))){
      SWIG_fail_ptr("CCOL_TriListGen_GetTriList",1,SWIGTYPE_p_CCOL_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriListGen_GetTriList",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriListGen_GetTriList",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (int)(arg1)->GetTriList(*arg2,*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriListGen_SetMeshes(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriListGen *arg1 = 0 ;
    CGMesh **arg2 = 0 ;
    int *arg3 = 0 ;
    int arg4 ;
    
    SWIG_check_num_args("CCOL_TriListGen::SetMeshes",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriListGen::SetMeshes",1,"CCOL_TriListGen *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_TriListGen::SetMeshes",2,"CGMesh **");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CCOL_TriListGen::SetMeshes",3,"int *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_TriListGen::SetMeshes",4,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriListGen,0))){
      SWIG_fail_ptr("CCOL_TriListGen_SetMeshes",1,SWIGTYPE_p_CCOL_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_CGMesh,0))){
      SWIG_fail_ptr("CCOL_TriListGen_SetMeshes",2,SWIGTYPE_p_p_CGMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("CCOL_TriListGen_SetMeshes",3,SWIGTYPE_p_int);
    }
    
    arg4 = (int)lua_tonumber(L, 4);
    (arg1)->SetMeshes(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriListGen_GetTrisFromMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriListGen *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    CGMesh *arg3 = 0 ;
    int arg4 ;
    CGVect3 *arg5 = 0 ;
    float arg6 ;
    int result;
    
    SWIG_check_num_args("CCOL_TriListGen::GetTrisFromMesh",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TriListGen::GetTrisFromMesh",1,"CCOL_TriListGen *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_TriListGen::GetTrisFromMesh",2,"CCOL_TriList &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CCOL_TriListGen::GetTrisFromMesh",3,"CGMesh *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_TriListGen::GetTrisFromMesh",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_TriListGen::GetTrisFromMesh",5,"CGVect3 &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CCOL_TriListGen::GetTrisFromMesh",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TriListGen,0))){
      SWIG_fail_ptr("CCOL_TriListGen_GetTrisFromMesh",1,SWIGTYPE_p_CCOL_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriListGen_GetTrisFromMesh",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CCOL_TriListGen_GetTrisFromMesh",3,SWIGTYPE_p_CGMesh);
    }
    
    arg4 = (int)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriListGen_GetTrisFromMesh",5,SWIGTYPE_p_CGVect3);
    }
    
    arg6 = (float)lua_tonumber(L, 6);
    result = (int)(arg1)->GetTrisFromMesh(*arg2,arg3,arg4,*arg5,arg6);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_TriListGen(void *obj) {
CCOL_TriListGen *arg1 = (CCOL_TriListGen *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_TriListGen(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_TriListGen);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_TriListGen_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_TriListGen_methods[]= {
    { "GetTriList", _wrap_CCOL_TriListGen_GetTriList},
    { "SetMeshes", _wrap_CCOL_TriListGen_SetMeshes},
    { "GetTrisFromMesh", _wrap_CCOL_TriListGen_GetTrisFromMesh},
    {0,0}
};
static swig_lua_method swig_CCOL_TriListGen_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_TriListGen_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_TriListGen_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_TriListGen_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_TriListGen_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_TriListGen_Sf_SwigStatic = {
    "CCOL_TriListGen",
    swig_CCOL_TriListGen_Sf_SwigStatic_methods,
    swig_CCOL_TriListGen_Sf_SwigStatic_attributes,
    swig_CCOL_TriListGen_Sf_SwigStatic_constants,
    swig_CCOL_TriListGen_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_TriListGen_bases[] = {0};
static const char *swig_CCOL_TriListGen_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_TriListGen = { "CCOL_TriListGen", "CCOL_TriListGen", &SWIGTYPE_p_CCOL_TriListGen,_proxy__wrap_new_CCOL_TriListGen, swig_delete_CCOL_TriListGen, swig_CCOL_TriListGen_methods, swig_CCOL_TriListGen_attributes, &swig_CCOL_TriListGen_Sf_SwigStatic, swig_CCOL_TriListGen_meta, swig_CCOL_TriListGen_bases, swig_CCOL_TriListGen_base_names };

static int _wrap_CCOL_MeshTester_iTestCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MeshTester *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    int arg3 ;
    CGGraphBV *arg4 = 0 ;
    CCOL_TriList *arg5 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_MeshTester::iTestCollision",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_MeshTester::iTestCollision",1,"CCOL_MeshTester *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_MeshTester::iTestCollision",2,"CGBaseMesh *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_MeshTester::iTestCollision",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CCOL_MeshTester::iTestCollision",4,"CGGraphBV *");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_MeshTester::iTestCollision",5,"CCOL_TriList &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_MeshTester,0))){
      SWIG_fail_ptr("CCOL_MeshTester_iTestCollision",1,SWIGTYPE_p_CCOL_MeshTester);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CCOL_MeshTester_iTestCollision",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_MeshTester_iTestCollision",4,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_MeshTester_iTestCollision",5,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (int)(arg1)->iTestCollision(arg2,arg3,arg4,*arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_MeshTester(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MeshTester *result = 0 ;
    
    SWIG_check_num_args("CCOL_MeshTester::CCOL_MeshTester",0,0)
    result = (CCOL_MeshTester *)new CCOL_MeshTester();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_MeshTester,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_MeshTester(void *obj) {
CCOL_MeshTester *arg1 = (CCOL_MeshTester *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_MeshTester(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_MeshTester);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_MeshTester_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_MeshTester_methods[]= {
    { "iTestCollision", _wrap_CCOL_MeshTester_iTestCollision},
    {0,0}
};
static swig_lua_method swig_CCOL_MeshTester_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_MeshTester_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_MeshTester_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_MeshTester_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_MeshTester_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_MeshTester_Sf_SwigStatic = {
    "CCOL_MeshTester",
    swig_CCOL_MeshTester_Sf_SwigStatic_methods,
    swig_CCOL_MeshTester_Sf_SwigStatic_attributes,
    swig_CCOL_MeshTester_Sf_SwigStatic_constants,
    swig_CCOL_MeshTester_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_MeshTester_bases[] = {0};
static const char *swig_CCOL_MeshTester_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_MeshTester = { "CCOL_MeshTester", "CCOL_MeshTester", &SWIGTYPE_p_CCOL_MeshTester,_proxy__wrap_new_CCOL_MeshTester, swig_delete_CCOL_MeshTester, swig_CCOL_MeshTester_methods, swig_CCOL_MeshTester_attributes, &swig_CCOL_MeshTester_Sf_SwigStatic, swig_CCOL_MeshTester_meta, swig_CCOL_MeshTester_bases, swig_CCOL_MeshTester_base_names };

static int _wrap_new_CCOL_Collider(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::CCOL_Collider",0,0)
    result = (CCOL_Collider *)new CCOL_Collider();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Collider,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    int arg2 ;
    CCOL_TriListGen *arg3 = 0 ;
    CCOL_MeshTester *arg4 = 0 ;
    ECOL_ColliderType arg5 ;
    ECOL_TestType arg6 ;
    ECOL_TestType arg7 ;
    CGSceneNode *arg8 = 0 ;
    int arg9 ;
    int arg10 ;
    
    SWIG_check_num_args("CCOL_Collider::Init",10,10)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::Init",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::Init",2,"int");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CCOL_Collider::Init",3,"CCOL_TriListGen *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CCOL_Collider::Init",4,"CCOL_MeshTester *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CCOL_Collider::Init",5,"ECOL_ColliderType");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CCOL_Collider::Init",6,"ECOL_TestType");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("CCOL_Collider::Init",7,"ECOL_TestType");
    if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("CCOL_Collider::Init",8,"CGSceneNode *");
    if(!lua_isnumber(L,9)) SWIG_fail_arg("CCOL_Collider::Init",9,"int");
    if(!lua_isnumber(L,10)) SWIG_fail_arg("CCOL_Collider::Init",10,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_Init",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CCOL_TriListGen,0))){
      SWIG_fail_ptr("CCOL_Collider_Init",3,SWIGTYPE_p_CCOL_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CCOL_MeshTester,0))){
      SWIG_fail_ptr("CCOL_Collider_Init",4,SWIGTYPE_p_CCOL_MeshTester);
    }
    
    arg5 = (ECOL_ColliderType)(int)lua_tonumber(L, 5);
    arg6 = (ECOL_TestType)(int)lua_tonumber(L, 6);
    arg7 = (ECOL_TestType)(int)lua_tonumber(L, 7);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CCOL_Collider_Init",8,SWIGTYPE_p_CGSceneNode);
    }
    
    arg9 = (int)lua_tonumber(L, 9);
    arg10 = (int)lua_tonumber(L, 10);
    (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::Reset",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_Reset",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_poGetColStack(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_Stack *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::poGetColStack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::poGetColStack",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_poGetColStack",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_Stack *)(arg1)->poGetColStack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Stack,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_eGetColType(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_ColliderType result;
    
    SWIG_check_num_args("CCOL_Collider::eGetColType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::eGetColType",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_eGetColType",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (ECOL_ColliderType)(arg1)->eGetColType();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_eGetStTest(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_TestType result;
    
    SWIG_check_num_args("CCOL_Collider::eGetStTest",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::eGetStTest",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_eGetStTest",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (ECOL_TestType)(arg1)->eGetStTest();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_eGetDynTest(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_TestType result;
    
    SWIG_check_num_args("CCOL_Collider::eGetDynTest",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::eGetDynTest",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_eGetDynTest",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (ECOL_TestType)(arg1)->eGetDynTest();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_GetMeshTester(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_MeshTester *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::GetMeshTester",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::GetMeshTester",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_GetMeshTester",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_MeshTester *)(arg1)->GetMeshTester();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_MeshTester,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_GetTriList(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_TriList *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::GetTriList",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::GetTriList",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_GetTriList",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_TriList *) &(arg1)->GetTriList();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TriList,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_GetTriListGen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_TriListGen *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::GetTriListGen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::GetTriListGen",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_GetTriListGen",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_TriListGen *)(arg1)->GetTriListGen();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TriListGen,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_OldPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::OldPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::OldPos",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::OldPos",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_OldPos_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_Collider_OldPos_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->OldPos = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_OldPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::OldPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::OldPos",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_OldPos_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CGVect3 *)& ((arg1)->OldPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_Pos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::Pos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::Pos",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::Pos",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_Pos_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_Collider_Pos_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->Pos = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_Pos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::Pos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::Pos",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_Pos_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CGVect3 *)& ((arg1)->Pos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_Speed_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::Speed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::Speed",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::Speed",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_Speed_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_Collider_Speed_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->Speed = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_Speed_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::Speed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::Speed",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_Speed_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CGVect3 *)& ((arg1)->Speed);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_UserID_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CCOL_Collider::UserID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::UserID",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::UserID",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_UserID_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->UserID = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_UserID_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Collider::UserID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::UserID",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_UserID_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (int) ((arg1)->UserID);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_ColID_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CCOL_Collider::ColID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::ColID",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::ColID",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_ColID_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->ColID = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_ColID_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Collider::ColID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::ColID",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_ColID_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (int) ((arg1)->ColID);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_GrObj_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGSceneNode *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::GrObj",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::GrObj",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::GrObj",2,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_GrObj_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGSceneNode,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_Collider_GrObj_set",2,SWIGTYPE_p_CGSceneNode);
    }
    
    if (arg1) (arg1)->GrObj = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_GrObj_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::GrObj",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::GrObj",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_GrObj_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CGSceneNode *) ((arg1)->GrObj);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_ColStack_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_Stack *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::ColStack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::ColStack",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::ColStack",2,"CCOL_Stack *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_ColStack_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_Stack,0))){
      SWIG_fail_ptr("CCOL_Collider_ColStack_set",2,SWIGTYPE_p_CCOL_Stack);
    }
    
    if (arg1) (arg1)->ColStack = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_ColStack_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_Stack *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::ColStack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::ColStack",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_ColStack_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_Stack *)& ((arg1)->ColStack);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Stack,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_ColType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_ColliderType arg2 ;
    
    SWIG_check_num_args("CCOL_Collider::ColType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::ColType",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::ColType",2,"ECOL_ColliderType");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_ColType_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    arg2 = (ECOL_ColliderType)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->ColType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_ColType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_ColliderType result;
    
    SWIG_check_num_args("CCOL_Collider::ColType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::ColType",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_ColType_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (ECOL_ColliderType) ((arg1)->ColType);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_StTest_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_TestType arg2 ;
    
    SWIG_check_num_args("CCOL_Collider::StTest",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::StTest",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::StTest",2,"ECOL_TestType");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_StTest_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    arg2 = (ECOL_TestType)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->StTest = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_StTest_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_TestType result;
    
    SWIG_check_num_args("CCOL_Collider::StTest",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::StTest",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_StTest_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (ECOL_TestType) ((arg1)->StTest);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_MeshTester_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_MeshTester *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::MeshTester",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::MeshTester",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::MeshTester",2,"CCOL_MeshTester *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_MeshTester_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_MeshTester,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_Collider_MeshTester_set",2,SWIGTYPE_p_CCOL_MeshTester);
    }
    
    if (arg1) (arg1)->MeshTester = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_MeshTester_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_MeshTester *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::MeshTester",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::MeshTester",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_MeshTester_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_MeshTester *) ((arg1)->MeshTester);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_MeshTester,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_DynTest_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_TestType arg2 ;
    
    SWIG_check_num_args("CCOL_Collider::DynTest",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::DynTest",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::DynTest",2,"ECOL_TestType");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_DynTest_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    arg2 = (ECOL_TestType)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->DynTest = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_DynTest_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    ECOL_TestType result;
    
    SWIG_check_num_args("CCOL_Collider::DynTest",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::DynTest",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_DynTest_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (ECOL_TestType) ((arg1)->DynTest);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_TriList_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::TriList",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::TriList",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::TriList",2,"CCOL_TriList *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_TriList_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_Collider_TriList_set",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    if (arg1) (arg1)->TriList = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_TriList_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_TriList *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::TriList",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::TriList",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_TriList_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_TriList *)& ((arg1)->TriList);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TriList,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_TriListGen_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_TriListGen *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::TriListGen",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::TriListGen",1,"CCOL_Collider *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Collider::TriListGen",2,"CCOL_TriListGen *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_TriListGen_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriListGen,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_Collider_TriListGen_set",2,SWIGTYPE_p_CCOL_TriListGen);
    }
    
    if (arg1) (arg1)->TriListGen = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_TriListGen_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    CCOL_TriListGen *result = 0 ;
    
    SWIG_check_num_args("CCOL_Collider::TriListGen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::TriListGen",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_TriListGen_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (CCOL_TriListGen *) ((arg1)->TriListGen);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TriListGen,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_m_uiTestFlags_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CCOL_Collider::m_uiTestFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::m_uiTestFlags",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::m_uiTestFlags",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_m_uiTestFlags_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiTestFlags = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_m_uiTestFlags_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CCOL_Collider::m_uiTestFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::m_uiTestFlags",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_m_uiTestFlags_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (uint) ((arg1)->m_uiTestFlags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_m_uiColliderType_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    uint arg2 ;
    
    SWIG_check_num_args("CCOL_Collider::m_uiColliderType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::m_uiColliderType",1,"CCOL_Collider *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Collider::m_uiColliderType",2,"uint");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_m_uiColliderType_set",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (uint)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_uiColliderType = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Collider_m_uiColliderType_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Collider *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CCOL_Collider::m_uiColliderType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Collider::m_uiColliderType",1,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_Collider_m_uiColliderType_get",1,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (uint) ((arg1)->m_uiColliderType);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_Collider(void *obj) {
CCOL_Collider *arg1 = (CCOL_Collider *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_Collider(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_Collider);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_Collider_attributes[] = {
    { "OldPos", _wrap_CCOL_Collider_OldPos_get, _wrap_CCOL_Collider_OldPos_set },
    { "Pos", _wrap_CCOL_Collider_Pos_get, _wrap_CCOL_Collider_Pos_set },
    { "Speed", _wrap_CCOL_Collider_Speed_get, _wrap_CCOL_Collider_Speed_set },
    { "UserID", _wrap_CCOL_Collider_UserID_get, _wrap_CCOL_Collider_UserID_set },
    { "ColID", _wrap_CCOL_Collider_ColID_get, _wrap_CCOL_Collider_ColID_set },
    { "GrObj", _wrap_CCOL_Collider_GrObj_get, _wrap_CCOL_Collider_GrObj_set },
    { "ColStack", _wrap_CCOL_Collider_ColStack_get, _wrap_CCOL_Collider_ColStack_set },
    { "ColType", _wrap_CCOL_Collider_ColType_get, _wrap_CCOL_Collider_ColType_set },
    { "StTest", _wrap_CCOL_Collider_StTest_get, _wrap_CCOL_Collider_StTest_set },
    { "MeshTester", _wrap_CCOL_Collider_MeshTester_get, _wrap_CCOL_Collider_MeshTester_set },
    { "DynTest", _wrap_CCOL_Collider_DynTest_get, _wrap_CCOL_Collider_DynTest_set },
    { "TriList", _wrap_CCOL_Collider_TriList_get, _wrap_CCOL_Collider_TriList_set },
    { "TriListGen", _wrap_CCOL_Collider_TriListGen_get, _wrap_CCOL_Collider_TriListGen_set },
    { "m_uiTestFlags", _wrap_CCOL_Collider_m_uiTestFlags_get, _wrap_CCOL_Collider_m_uiTestFlags_set },
    { "m_uiColliderType", _wrap_CCOL_Collider_m_uiColliderType_get, _wrap_CCOL_Collider_m_uiColliderType_set },
    {0,0,0}
};
static swig_lua_method swig_CCOL_Collider_methods[]= {
    { "Init", _wrap_CCOL_Collider_Init},
    { "Reset", _wrap_CCOL_Collider_Reset},
    { "poGetColStack", _wrap_CCOL_Collider_poGetColStack},
    { "eGetColType", _wrap_CCOL_Collider_eGetColType},
    { "eGetStTest", _wrap_CCOL_Collider_eGetStTest},
    { "eGetDynTest", _wrap_CCOL_Collider_eGetDynTest},
    { "GetMeshTester", _wrap_CCOL_Collider_GetMeshTester},
    { "GetTriList", _wrap_CCOL_Collider_GetTriList},
    { "GetTriListGen", _wrap_CCOL_Collider_GetTriListGen},
    {0,0}
};
static swig_lua_method swig_CCOL_Collider_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_Collider_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_Collider_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_Collider_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_Collider_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_Collider_Sf_SwigStatic = {
    "CCOL_Collider",
    swig_CCOL_Collider_Sf_SwigStatic_methods,
    swig_CCOL_Collider_Sf_SwigStatic_attributes,
    swig_CCOL_Collider_Sf_SwigStatic_constants,
    swig_CCOL_Collider_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_Collider_bases[] = {0};
static const char *swig_CCOL_Collider_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_Collider = { "CCOL_Collider", "CCOL_Collider", &SWIGTYPE_p_CCOL_Collider,_proxy__wrap_new_CCOL_Collider, swig_delete_CCOL_Collider, swig_CCOL_Collider_methods, swig_CCOL_Collider_attributes, &swig_CCOL_Collider_Sf_SwigStatic, swig_CCOL_Collider_meta, swig_CCOL_Collider_bases, swig_CCOL_Collider_base_names };

static int _wrap_CCOL_ColState_SrcIPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::SrcIPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ColState::SrcIPos",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ColState_SrcIPos_set",1,SWIGTYPE_p_CGVect3);
    }
    
    CCOL_ColState::SrcIPos = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_SrcIPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::SrcIPos",0,0)
    result = (CGVect3 *)&CCOL_ColState::SrcIPos;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_SrcFPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::SrcFPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ColState::SrcFPos",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ColState_SrcFPos_set",1,SWIGTYPE_p_CGVect3);
    }
    
    CCOL_ColState::SrcFPos = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_SrcFPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::SrcFPos",0,0)
    result = (CGVect3 *)&CCOL_ColState::SrcFPos;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DstIPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DstIPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ColState::DstIPos",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ColState_DstIPos_set",1,SWIGTYPE_p_CGVect3);
    }
    
    CCOL_ColState::DstIPos = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DstIPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DstIPos",0,0)
    result = (CGVect3 *)&CCOL_ColState::DstIPos;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DstFPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DstFPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ColState::DstFPos",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ColState_DstFPos_set",1,SWIGTYPE_p_CGVect3);
    }
    
    CCOL_ColState::DstFPos = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DstFPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DstFPos",0,0)
    result = (CGVect3 *)&CCOL_ColState::DstFPos;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_SrcSp_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::SrcSp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ColState::SrcSp",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ColState_SrcSp_set",1,SWIGTYPE_p_CGVect3);
    }
    
    CCOL_ColState::SrcSp = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_SrcSp_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::SrcSp",0,0)
    result = (CGVect3 *)&CCOL_ColState::SrcSp;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DstSp_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DstSp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ColState::DstSp",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ColState_DstSp_set",1,SWIGTYPE_p_CGVect3);
    }
    
    CCOL_ColState::DstSp = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DstSp_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DstSp",0,0)
    result = (CGVect3 *)&CCOL_ColState::DstSp;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DSSp_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DSSp",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ColState::DSSp",1,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ColState_DSSp_set",1,SWIGTYPE_p_CGVect3);
    }
    
    CCOL_ColState::DSSp = *arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_DSSp_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::DSSp",0,0)
    result = (CGVect3 *)&CCOL_ColState::DSSp;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_fDeltaT_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    
    SWIG_check_num_args("CCOL_ColState::fDeltaT",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_ColState::fDeltaT",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    CCOL_ColState::fDeltaT = arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_fDeltaT_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    float result;
    
    SWIG_check_num_args("CCOL_ColState::fDeltaT",0,0)
    result = (float)CCOL_ColState::fDeltaT;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_fMinColTime_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    
    SWIG_check_num_args("CCOL_ColState::fMinColTime",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_ColState::fMinColTime",1,"float");
    arg1 = (float)lua_tonumber(L, 1);
    CCOL_ColState::fMinColTime = arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ColState_fMinColTime_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    float result;
    
    SWIG_check_num_args("CCOL_ColState::fMinColTime",0,0)
    result = (float)CCOL_ColState::fMinColTime;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_ColState(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_ColState *result = 0 ;
    
    SWIG_check_num_args("CCOL_ColState::CCOL_ColState",0,0)
    result = (CCOL_ColState *)new CCOL_ColState();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_ColState,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_ColState(void *obj) {
CCOL_ColState *arg1 = (CCOL_ColState *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_ColState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_ColState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_ColState_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_ColState_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_ColState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_ColState_Sf_SwigStatic_attributes[] = {
    { "SrcIPos", _wrap_CCOL_ColState_SrcIPos_get, _wrap_CCOL_ColState_SrcIPos_set },
    { "SrcFPos", _wrap_CCOL_ColState_SrcFPos_get, _wrap_CCOL_ColState_SrcFPos_set },
    { "DstIPos", _wrap_CCOL_ColState_DstIPos_get, _wrap_CCOL_ColState_DstIPos_set },
    { "DstFPos", _wrap_CCOL_ColState_DstFPos_get, _wrap_CCOL_ColState_DstFPos_set },
    { "SrcSp", _wrap_CCOL_ColState_SrcSp_get, _wrap_CCOL_ColState_SrcSp_set },
    { "DstSp", _wrap_CCOL_ColState_DstSp_get, _wrap_CCOL_ColState_DstSp_set },
    { "DSSp", _wrap_CCOL_ColState_DSSp_get, _wrap_CCOL_ColState_DSSp_set },
    { "fDeltaT", _wrap_CCOL_ColState_fDeltaT_get, _wrap_CCOL_ColState_fDeltaT_set },
    { "fMinColTime", _wrap_CCOL_ColState_fMinColTime_get, _wrap_CCOL_ColState_fMinColTime_set },
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_ColState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_ColState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_ColState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_ColState_Sf_SwigStatic = {
    "CCOL_ColState",
    swig_CCOL_ColState_Sf_SwigStatic_methods,
    swig_CCOL_ColState_Sf_SwigStatic_attributes,
    swig_CCOL_ColState_Sf_SwigStatic_constants,
    swig_CCOL_ColState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_ColState_bases[] = {0};
static const char *swig_CCOL_ColState_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_ColState = { "CCOL_ColState", "CCOL_ColState", &SWIGTYPE_p_CCOL_ColState,_proxy__wrap_new_CCOL_ColState, swig_delete_CCOL_ColState, swig_CCOL_ColState_methods, swig_CCOL_ColState_attributes, &swig_CCOL_ColState_Sf_SwigStatic, swig_CCOL_ColState_meta, swig_CCOL_ColState_bases, swig_CCOL_ColState_base_names };

static int _wrap_new_CCOL_DT_Tri(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_DT_Tri *result = 0 ;
    
    SWIG_check_num_args("CCOL_DT_Tri::CCOL_DT_Tri",0,0)
    result = (CCOL_DT_Tri *)new CCOL_DT_Tri();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_DT_Tri,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Tri_fTestSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVSphere *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Tri::fTestSphere",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Tri::fTestSphere",1,"CGGraphBVSphere const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Tri::fTestSphere",2,"CGTriangle const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVSphere,0))){
      SWIG_fail_ptr("CCOL_DT_Tri_fTestSphere",1,SWIGTYPE_p_CGGraphBVSphere);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CCOL_DT_Tri_fTestSphere",2,SWIGTYPE_p_CGTriangle);
    }
    
    result = (float)CCOL_DT_Tri::fTestSphere((CGGraphBVSphere const &)*arg1,(CGTriangle const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Tri_fTestBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBVAABB *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Tri::fTestBox",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Tri::fTestBox",1,"CGGraphBVAABB const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Tri::fTestBox",2,"CGTriangle const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBVAABB,0))){
      SWIG_fail_ptr("CCOL_DT_Tri_fTestBox",1,SWIGTYPE_p_CGGraphBVAABB);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CCOL_DT_Tri_fTestBox",2,SWIGTYPE_p_CGTriangle);
    }
    
    result = (float)CCOL_DT_Tri::fTestBox((CGGraphBVAABB const &)*arg1,(CGTriangle const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Tri_fTestPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Tri::fTestPoint",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Tri::fTestPoint",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Tri::fTestPoint",2,"CGTriangle const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Tri_fTestPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CCOL_DT_Tri_fTestPoint",2,SWIGTYPE_p_CGTriangle);
    }
    
    result = (float)CCOL_DT_Tri::fTestPoint((CGVect3 const &)*arg1,(CGTriangle const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_DT_Tri(void *obj) {
CCOL_DT_Tri *arg1 = (CCOL_DT_Tri *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_DT_Tri(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_DT_Tri);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_DT_Tri_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_DT_Tri_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_DT_Tri_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_DT_Tri_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_DT_Tri_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_DT_Tri_Sf_SwigStatic_methods[]= {
    { "fTestSphere", _wrap_CCOL_DT_Tri_fTestSphere},
    { "fTestBox", _wrap_CCOL_DT_Tri_fTestBox},
    { "fTestPoint", _wrap_CCOL_DT_Tri_fTestPoint},
    {0,0}
};
static swig_lua_class* swig_CCOL_DT_Tri_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_DT_Tri_Sf_SwigStatic = {
    "CCOL_DT_Tri",
    swig_CCOL_DT_Tri_Sf_SwigStatic_methods,
    swig_CCOL_DT_Tri_Sf_SwigStatic_attributes,
    swig_CCOL_DT_Tri_Sf_SwigStatic_constants,
    swig_CCOL_DT_Tri_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_DT_Tri_bases[] = {0};
static const char *swig_CCOL_DT_Tri_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_DT_Tri = { "CCOL_DT_Tri", "CCOL_DT_Tri", &SWIGTYPE_p_CCOL_DT_Tri,_proxy__wrap_new_CCOL_DT_Tri, swig_delete_CCOL_DT_Tri, swig_CCOL_DT_Tri_methods, swig_CCOL_DT_Tri_attributes, &swig_CCOL_DT_Tri_Sf_SwigStatic, swig_CCOL_DT_Tri_meta, swig_CCOL_DT_Tri_bases, swig_CCOL_DT_Tri_base_names };

static int _wrap_CCOL_DT_ColTester_fTestCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_ColTester::fTestCollision",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_DT_ColTester::fTestCollision",1,"CGGraphBV *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_DT_ColTester::fTestCollision",2,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_DT_ColTester_fTestCollision",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_DT_ColTester_fTestCollision",2,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (float)CCOL_DT_ColTester::fTestCollision(arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_ColTester_fTestPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_ColTester::fTestPlane",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_DT_ColTester::fTestPlane",1,"CGGraphBV *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_ColTester::fTestPlane",2,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_DT_ColTester_fTestPlane",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CCOL_DT_ColTester_fTestPlane",2,SWIGTYPE_p_CGPlane);
    }
    
    result = (float)CCOL_DT_ColTester::fTestPlane(arg1,(CGPlane const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_ColTester_fTestTriangle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGTriangle *arg2 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_ColTester::fTestTriangle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_DT_ColTester::fTestTriangle",1,"CGGraphBV *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_ColTester::fTestTriangle",2,"CGTriangle const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_DT_ColTester_fTestTriangle",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGTriangle,0))){
      SWIG_fail_ptr("CCOL_DT_ColTester_fTestTriangle",2,SWIGTYPE_p_CGTriangle);
    }
    
    result = (float)CCOL_DT_ColTester::fTestTriangle(arg1,(CGTriangle const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_DT_ColTester(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_DT_ColTester *result = 0 ;
    
    SWIG_check_num_args("CCOL_DT_ColTester::CCOL_DT_ColTester",0,0)
    result = (CCOL_DT_ColTester *)new CCOL_DT_ColTester();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_DT_ColTester,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_DT_ColTester(void *obj) {
CCOL_DT_ColTester *arg1 = (CCOL_DT_ColTester *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_DT_ColTester(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_DT_ColTester);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_DT_ColTester_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_DT_ColTester_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_DT_ColTester_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_DT_ColTester_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_DT_ColTester_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_DT_ColTester_Sf_SwigStatic_methods[]= {
    { "fTestCollision", _wrap_CCOL_DT_ColTester_fTestCollision},
    { "fTestPlane", _wrap_CCOL_DT_ColTester_fTestPlane},
    { "fTestTriangle", _wrap_CCOL_DT_ColTester_fTestTriangle},
    {0,0}
};
static swig_lua_class* swig_CCOL_DT_ColTester_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_DT_ColTester_Sf_SwigStatic = {
    "CCOL_DT_ColTester",
    swig_CCOL_DT_ColTester_Sf_SwigStatic_methods,
    swig_CCOL_DT_ColTester_Sf_SwigStatic_attributes,
    swig_CCOL_DT_ColTester_Sf_SwigStatic_constants,
    swig_CCOL_DT_ColTester_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_DT_ColTester_bases[] = {0};
static const char *swig_CCOL_DT_ColTester_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_DT_ColTester = { "CCOL_DT_ColTester", "CCOL_DT_ColTester", &SWIGTYPE_p_CCOL_DT_ColTester,_proxy__wrap_new_CCOL_DT_ColTester, swig_delete_CCOL_DT_ColTester, swig_CCOL_DT_ColTester_methods, swig_CCOL_DT_ColTester_attributes, &swig_CCOL_DT_ColTester_Sf_SwigStatic, swig_CCOL_DT_ColTester_meta, swig_CCOL_DT_ColTester_bases, swig_CCOL_DT_ColTester_base_names };

static int _wrap_CCOL_MT_CommonMesh_iTestCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_CommonMesh *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    int arg3 ;
    CGGraphBV *arg4 = 0 ;
    CCOL_TriList *arg5 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_MT_CommonMesh::iTestCollision",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_MT_CommonMesh::iTestCollision",1,"CCOL_MT_CommonMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_MT_CommonMesh::iTestCollision",2,"CGMesh *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_MT_CommonMesh::iTestCollision",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CCOL_MT_CommonMesh::iTestCollision",4,"CGGraphBV *");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_MT_CommonMesh::iTestCollision",5,"CCOL_TriList &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_MT_CommonMesh,0))){
      SWIG_fail_ptr("CCOL_MT_CommonMesh_iTestCollision",1,SWIGTYPE_p_CCOL_MT_CommonMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CCOL_MT_CommonMesh_iTestCollision",2,SWIGTYPE_p_CGMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_MT_CommonMesh_iTestCollision",4,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_MT_CommonMesh_iTestCollision",5,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (int)(arg1)->iTestCollision(arg2,arg3,arg4,*arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_MT_CommonMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_CommonMesh *result = 0 ;
    
    SWIG_check_num_args("CCOL_MT_CommonMesh::CCOL_MT_CommonMesh",0,0)
    result = (CCOL_MT_CommonMesh *)new CCOL_MT_CommonMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_MT_CommonMesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_MT_CommonMesh(void *obj) {
CCOL_MT_CommonMesh *arg1 = (CCOL_MT_CommonMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_MT_CommonMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_MT_CommonMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_MT_CommonMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_MT_CommonMesh_methods[]= {
    { "iTestCollision", _wrap_CCOL_MT_CommonMesh_iTestCollision},
    {0,0}
};
static swig_lua_method swig_CCOL_MT_CommonMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_MT_CommonMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_MT_CommonMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_MT_CommonMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_MT_CommonMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_MT_CommonMesh_Sf_SwigStatic = {
    "CCOL_MT_CommonMesh",
    swig_CCOL_MT_CommonMesh_Sf_SwigStatic_methods,
    swig_CCOL_MT_CommonMesh_Sf_SwigStatic_attributes,
    swig_CCOL_MT_CommonMesh_Sf_SwigStatic_constants,
    swig_CCOL_MT_CommonMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_MT_CommonMesh_bases[] = {0,0};
static const char *swig_CCOL_MT_CommonMesh_base_names[] = {"CCOL_MeshTester *",0};
static swig_lua_class _wrap_class_CCOL_MT_CommonMesh = { "CCOL_MT_CommonMesh", "CCOL_MT_CommonMesh", &SWIGTYPE_p_CCOL_MT_CommonMesh,_proxy__wrap_new_CCOL_MT_CommonMesh, swig_delete_CCOL_MT_CommonMesh, swig_CCOL_MT_CommonMesh_methods, swig_CCOL_MT_CommonMesh_attributes, &swig_CCOL_MT_CommonMesh_Sf_SwigStatic, swig_CCOL_MT_CommonMesh_meta, swig_CCOL_MT_CommonMesh_bases, swig_CCOL_MT_CommonMesh_base_names };

static int _wrap_new_CCOL_CollisionSystem(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *result = 0 ;
    
    SWIG_check_num_args("CCOL_CollisionSystem::CCOL_CollisionSystem",0,0)
    result = (CCOL_CollisionSystem *)new CCOL_CollisionSystem();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_CollisionSystem,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_CollisionSystem_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CCOL_CollisionSystem::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_CollisionSystem::Init",1,"CCOL_CollisionSystem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_CollisionSystem::Init",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_CollisionSystem,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_Init",1,SWIGTYPE_p_CCOL_CollisionSystem);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_CollisionSystem_Reset(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_CollisionSystem::Reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_CollisionSystem::Reset",1,"CCOL_CollisionSystem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_CollisionSystem,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_Reset",1,SWIGTYPE_p_CCOL_CollisionSystem);
    }
    
    (arg1)->Reset();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_CollisionSystem_iAddObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *arg1 = 0 ;
    CCOL_Collider *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_CollisionSystem::iAddObject",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_CollisionSystem::iAddObject",1,"CCOL_CollisionSystem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_CollisionSystem::iAddObject",2,"CCOL_Collider *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_CollisionSystem,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_iAddObject",1,SWIGTYPE_p_CCOL_CollisionSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_iAddObject",2,SWIGTYPE_p_CCOL_Collider);
    }
    
    result = (int)(arg1)->iAddObject(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_CollisionSystem_CheckCollisions(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CCOL_CollisionSystem::CheckCollisions",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_CollisionSystem::CheckCollisions",1,"CCOL_CollisionSystem *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_CollisionSystem::CheckCollisions",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_CollisionSystem,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_CheckCollisions",1,SWIGTYPE_p_CCOL_CollisionSystem);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    (arg1)->CheckCollisions(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_CollisionSystem_bCheckCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *arg1 = 0 ;
    CCOL_Collider *arg2 = 0 ;
    float arg3 ;
    bool result;
    
    SWIG_check_num_args("CCOL_CollisionSystem::bCheckCollision",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_CollisionSystem::bCheckCollision",1,"CCOL_CollisionSystem *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_CollisionSystem::bCheckCollision",2,"CCOL_Collider &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_CollisionSystem::bCheckCollision",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_CollisionSystem,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_bCheckCollision",1,SWIGTYPE_p_CCOL_CollisionSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_bCheckCollision",2,SWIGTYPE_p_CCOL_Collider);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    result = (bool)(arg1)->bCheckCollision(*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_CollisionSystem_poColliders_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *arg1 = 0 ;
    CCOL_Collider **arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_CollisionSystem::poColliders",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_CollisionSystem::poColliders",1,"CCOL_CollisionSystem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_CollisionSystem::poColliders",2,"CCOL_Collider **");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_CollisionSystem,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_poColliders_set",1,SWIGTYPE_p_CCOL_CollisionSystem);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_CCOL_Collider,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_poColliders_set",2,SWIGTYPE_p_p_CCOL_Collider);
    }
    
    if (arg1) (arg1)->poColliders = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_CollisionSystem_poColliders_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_CollisionSystem *arg1 = 0 ;
    CCOL_Collider **result = 0 ;
    
    SWIG_check_num_args("CCOL_CollisionSystem::poColliders",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_CollisionSystem::poColliders",1,"CCOL_CollisionSystem *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_CollisionSystem,0))){
      SWIG_fail_ptr("CCOL_CollisionSystem_poColliders_get",1,SWIGTYPE_p_CCOL_CollisionSystem);
    }
    
    result = (CCOL_Collider **) ((arg1)->poColliders);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_CCOL_Collider,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_CollisionSystem(void *obj) {
CCOL_CollisionSystem *arg1 = (CCOL_CollisionSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_CollisionSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_CollisionSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_CollisionSystem_attributes[] = {
    { "poColliders", _wrap_CCOL_CollisionSystem_poColliders_get, _wrap_CCOL_CollisionSystem_poColliders_set },
    {0,0,0}
};
static swig_lua_method swig_CCOL_CollisionSystem_methods[]= {
    { "Init", _wrap_CCOL_CollisionSystem_Init},
    { "Reset", _wrap_CCOL_CollisionSystem_Reset},
    { "iAddObject", _wrap_CCOL_CollisionSystem_iAddObject},
    { "CheckCollisions", _wrap_CCOL_CollisionSystem_CheckCollisions},
    { "bCheckCollision", _wrap_CCOL_CollisionSystem_bCheckCollision},
    {0,0}
};
static swig_lua_method swig_CCOL_CollisionSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_CollisionSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_CollisionSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_CollisionSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_CollisionSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_CollisionSystem_Sf_SwigStatic = {
    "CCOL_CollisionSystem",
    swig_CCOL_CollisionSystem_Sf_SwigStatic_methods,
    swig_CCOL_CollisionSystem_Sf_SwigStatic_attributes,
    swig_CCOL_CollisionSystem_Sf_SwigStatic_constants,
    swig_CCOL_CollisionSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_CollisionSystem_bases[] = {0};
static const char *swig_CCOL_CollisionSystem_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_CollisionSystem = { "CCOL_CollisionSystem", "CCOL_CollisionSystem", &SWIGTYPE_p_CCOL_CollisionSystem,_proxy__wrap_new_CCOL_CollisionSystem, swig_delete_CCOL_CollisionSystem, swig_CCOL_CollisionSystem_methods, swig_CCOL_CollisionSystem_attributes, &swig_CCOL_CollisionSystem_Sf_SwigStatic, swig_CCOL_CollisionSystem_meta, swig_CCOL_CollisionSystem_bases, swig_CCOL_CollisionSystem_base_names };

static int _wrap_new_CCOL_TriList_BVRayTest(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TriList_BVRayTest *result = 0 ;
    
    SWIG_check_num_args("CCOL_TriList_BVRayTest::CCOL_TriList_BVRayTest",0,0)
    result = (CCOL_TriList_BVRayTest *)new CCOL_TriList_BVRayTest();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TriList_BVRayTest,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TriList_BVRayTest_Test(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    int arg3 ;
    float *arg4 = 0 ;
    int *arg5 = 0 ;
    
    SWIG_check_num_args("CCOL_TriList_BVRayTest::Test",5,5)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_TriList_BVRayTest::Test",1,"CGVect3 &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_TriList_BVRayTest::Test",2,"CCOL_TriList &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_TriList_BVRayTest::Test",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CCOL_TriList_BVRayTest::Test",4,"float *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("CCOL_TriList_BVRayTest::Test",5,"int *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TriList_BVRayTest_Test",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TriList_BVRayTest_Test",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("CCOL_TriList_BVRayTest_Test",4,SWIGTYPE_p_float);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("CCOL_TriList_BVRayTest_Test",5,SWIGTYPE_p_int);
    }
    
    CCOL_TriList_BVRayTest::Test(*arg1,*arg2,arg3,arg4,arg5);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_TriList_BVRayTest(void *obj) {
CCOL_TriList_BVRayTest *arg1 = (CCOL_TriList_BVRayTest *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_TriList_BVRayTest(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_TriList_BVRayTest);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_TriList_BVRayTest_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_TriList_BVRayTest_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_TriList_BVRayTest_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_methods[]= {
    { "Test", _wrap_CCOL_TriList_BVRayTest_Test},
    {0,0}
};
static swig_lua_class* swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_TriList_BVRayTest_Sf_SwigStatic = {
    "CCOL_TriList_BVRayTest",
    swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_methods,
    swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_attributes,
    swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_constants,
    swig_CCOL_TriList_BVRayTest_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_TriList_BVRayTest_bases[] = {0};
static const char *swig_CCOL_TriList_BVRayTest_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_TriList_BVRayTest = { "CCOL_TriList_BVRayTest", "CCOL_TriList_BVRayTest", &SWIGTYPE_p_CCOL_TriList_BVRayTest,_proxy__wrap_new_CCOL_TriList_BVRayTest, swig_delete_CCOL_TriList_BVRayTest, swig_CCOL_TriList_BVRayTest_methods, swig_CCOL_TriList_BVRayTest_attributes, &swig_CCOL_TriList_BVRayTest_Sf_SwigStatic, swig_CCOL_TriList_BVRayTest_meta, swig_CCOL_TriList_BVRayTest_bases, swig_CCOL_TriList_BVRayTest_base_names };

static int _wrap_CCOL_Scn_TriListGen_GetTriList(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Scn_TriListGen *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_TriListGen::GetTriList",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTriList",1,"CCOL_Scn_TriListGen *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTriList",2,"CCOL_TriList &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTriList",3,"CGVect3 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTriList",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Scn_TriListGen,0))){
      SWIG_fail_ptr("CCOL_Scn_TriListGen_GetTriList",1,SWIGTYPE_p_CCOL_Scn_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_Scn_TriListGen_GetTriList",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_Scn_TriListGen_GetTriList",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (int)(arg1)->GetTriList(*arg2,(CGVect3 const &)*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_TriListGen_GetTrisFromMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Scn_TriListGen *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    CGMesh *arg3 = 0 ;
    int arg4 ;
    CGVect3 *arg5 = 0 ;
    float arg6 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_TriListGen::GetTrisFromMesh",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTrisFromMesh",1,"CCOL_Scn_TriListGen *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTrisFromMesh",2,"CCOL_TriList &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTrisFromMesh",3,"CGMesh *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTrisFromMesh",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTrisFromMesh",5,"CGVect3 const &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CCOL_Scn_TriListGen::GetTrisFromMesh",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Scn_TriListGen,0))){
      SWIG_fail_ptr("CCOL_Scn_TriListGen_GetTrisFromMesh",1,SWIGTYPE_p_CCOL_Scn_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_Scn_TriListGen_GetTrisFromMesh",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CCOL_Scn_TriListGen_GetTrisFromMesh",3,SWIGTYPE_p_CGMesh);
    }
    
    arg4 = (int)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_Scn_TriListGen_GetTrisFromMesh",5,SWIGTYPE_p_CGVect3);
    }
    
    arg6 = (float)lua_tonumber(L, 6);
    result = (int)(arg1)->GetTrisFromMesh(*arg2,arg3,arg4,(CGVect3 const &)*arg5,arg6);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_Scn_TriListGen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Scn_TriListGen *result = 0 ;
    
    SWIG_check_num_args("CCOL_Scn_TriListGen::CCOL_Scn_TriListGen",0,0)
    result = (CCOL_Scn_TriListGen *)new CCOL_Scn_TriListGen();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Scn_TriListGen,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_Scn_TriListGen(void *obj) {
CCOL_Scn_TriListGen *arg1 = (CCOL_Scn_TriListGen *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_Scn_TriListGen(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_Scn_TriListGen);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_Scn_TriListGen_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_Scn_TriListGen_methods[]= {
    { "GetTriList", _wrap_CCOL_Scn_TriListGen_GetTriList},
    { "GetTrisFromMesh", _wrap_CCOL_Scn_TriListGen_GetTrisFromMesh},
    {0,0}
};
static swig_lua_method swig_CCOL_Scn_TriListGen_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_Scn_TriListGen_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_Scn_TriListGen_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_Scn_TriListGen_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_Scn_TriListGen_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_Scn_TriListGen_Sf_SwigStatic = {
    "CCOL_Scn_TriListGen",
    swig_CCOL_Scn_TriListGen_Sf_SwigStatic_methods,
    swig_CCOL_Scn_TriListGen_Sf_SwigStatic_attributes,
    swig_CCOL_Scn_TriListGen_Sf_SwigStatic_constants,
    swig_CCOL_Scn_TriListGen_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_Scn_TriListGen_bases[] = {0,0};
static const char *swig_CCOL_Scn_TriListGen_base_names[] = {"CCOL_TriListGen *",0};
static swig_lua_class _wrap_class_CCOL_Scn_TriListGen = { "CCOL_Scn_TriListGen", "CCOL_Scn_TriListGen", &SWIGTYPE_p_CCOL_Scn_TriListGen,_proxy__wrap_new_CCOL_Scn_TriListGen, swig_delete_CCOL_Scn_TriListGen, swig_CCOL_Scn_TriListGen_methods, swig_CCOL_Scn_TriListGen_attributes, &swig_CCOL_Scn_TriListGen_Sf_SwigStatic, swig_CCOL_Scn_TriListGen_meta, swig_CCOL_Scn_TriListGen_bases, swig_CCOL_Scn_TriListGen_base_names };

static int _wrap_new_CCOL_TRN_TriListGen(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TRN_TriListGen *result = 0 ;
    
    SWIG_check_num_args("CCOL_TRN_TriListGen::CCOL_TRN_TriListGen",0,0)
    result = (CCOL_TRN_TriListGen *)new CCOL_TRN_TriListGen();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_TRN_TriListGen,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TRN_TriListGen_GetHeight__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    float arg2 ;
    float result;
    
    SWIG_check_num_args("CCOL_TRN_TriListGen::GetHeight",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetHeight",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetHeight",2,"float");
    arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2);
    result = (float)CCOL_TRN_TriListGen::GetHeight(arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TRN_TriListGen_GetHeight__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    int arg2 ;
    float result;
    
    SWIG_check_num_args("CCOL_TRN_TriListGen::GetHeight",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetHeight",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetHeight",2,"int");
    arg1 = (int)lua_tonumber(L, 1);
    arg2 = (int)lua_tonumber(L, 2);
    result = (float)CCOL_TRN_TriListGen::GetHeight(arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TRN_TriListGen_GetHeight(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCOL_TRN_TriListGen_GetHeight__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCOL_TRN_TriListGen_GetHeight__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CCOL_TRN_TriListGen_GetHeight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCOL_TRN_TriListGen::GetHeight(float,float)\n"
    "    CCOL_TRN_TriListGen::GetHeight(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_CCOL_TRN_TriListGen_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CCOL_TRN_TriListGen::Init",4,4)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_TRN_TriListGen::Init",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_TRN_TriListGen::Init",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_TRN_TriListGen::Init",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_TRN_TriListGen::Init",4,"float");
    arg1 = (int)lua_tonumber(L, 1);
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    CCOL_TRN_TriListGen::Init(arg1,arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TRN_TriListGen_SetSector(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    CHFSector *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_TRN_TriListGen::SetSector",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_TRN_TriListGen::SetSector",1,"int");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_TRN_TriListGen::SetSector",2,"CHFSector *");
    arg1 = (int)lua_tonumber(L, 1);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CHFSector,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_SetSector",2,SWIGTYPE_p_CHFSector);
    }
    
    CCOL_TRN_TriListGen::SetSector(arg1,arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TRN_TriListGen_GetTriList(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TRN_TriListGen *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    int result;
    
    SWIG_check_num_args("CCOL_TRN_TriListGen::GetTriList",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTriList",1,"CCOL_TRN_TriListGen *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTriList",2,"CCOL_TriList &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTriList",3,"CGVect3 &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTriList",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TRN_TriListGen,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_GetTriList",1,SWIGTYPE_p_CCOL_TRN_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_GetTriList",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_GetTriList",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (int)(arg1)->GetTriList(*arg2,*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_TRN_TriListGen_GetTrisFromMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_TRN_TriListGen *arg1 = 0 ;
    CCOL_TriList *arg2 = 0 ;
    CGMesh *arg3 = 0 ;
    int arg4 ;
    CGVect3 *arg5 = 0 ;
    float arg6 ;
    int result;
    
    SWIG_check_num_args("CCOL_TRN_TriListGen::GetTrisFromMesh",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTrisFromMesh",1,"CCOL_TRN_TriListGen *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTrisFromMesh",2,"CCOL_TriList &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTrisFromMesh",3,"CGMesh *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTrisFromMesh",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTrisFromMesh",5,"CGVect3 &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("CCOL_TRN_TriListGen::GetTrisFromMesh",6,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_TRN_TriListGen,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_GetTrisFromMesh",1,SWIGTYPE_p_CCOL_TRN_TriListGen);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_GetTrisFromMesh",2,SWIGTYPE_p_CCOL_TriList);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_GetTrisFromMesh",3,SWIGTYPE_p_CGMesh);
    }
    
    arg4 = (int)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_TRN_TriListGen_GetTrisFromMesh",5,SWIGTYPE_p_CGVect3);
    }
    
    arg6 = (float)lua_tonumber(L, 6);
    result = (int)(arg1)->GetTrisFromMesh(*arg2,arg3,arg4,*arg5,arg6);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_TRN_TriListGen(void *obj) {
CCOL_TRN_TriListGen *arg1 = (CCOL_TRN_TriListGen *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_TRN_TriListGen(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_TRN_TriListGen);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_TRN_TriListGen_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_TRN_TriListGen_methods[]= {
    { "GetTriList", _wrap_CCOL_TRN_TriListGen_GetTriList},
    { "GetTrisFromMesh", _wrap_CCOL_TRN_TriListGen_GetTrisFromMesh},
    {0,0}
};
static swig_lua_method swig_CCOL_TRN_TriListGen_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_TRN_TriListGen_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_TRN_TriListGen_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_TRN_TriListGen_Sf_SwigStatic_methods[]= {
    { "GetHeight", _wrap_CCOL_TRN_TriListGen_GetHeight},
    { "Init", _wrap_CCOL_TRN_TriListGen_Init},
    { "SetSector", _wrap_CCOL_TRN_TriListGen_SetSector},
    {0,0}
};
static swig_lua_class* swig_CCOL_TRN_TriListGen_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_TRN_TriListGen_Sf_SwigStatic = {
    "CCOL_TRN_TriListGen",
    swig_CCOL_TRN_TriListGen_Sf_SwigStatic_methods,
    swig_CCOL_TRN_TriListGen_Sf_SwigStatic_attributes,
    swig_CCOL_TRN_TriListGen_Sf_SwigStatic_constants,
    swig_CCOL_TRN_TriListGen_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_TRN_TriListGen_bases[] = {0,0};
static const char *swig_CCOL_TRN_TriListGen_base_names[] = {"CCOL_TriListGen *",0};
static swig_lua_class _wrap_class_CCOL_TRN_TriListGen = { "CCOL_TRN_TriListGen", "CCOL_TRN_TriListGen", &SWIGTYPE_p_CCOL_TRN_TriListGen,_proxy__wrap_new_CCOL_TRN_TriListGen, swig_delete_CCOL_TRN_TriListGen, swig_CCOL_TRN_TriListGen_methods, swig_CCOL_TRN_TriListGen_attributes, &swig_CCOL_TRN_TriListGen_Sf_SwigStatic, swig_CCOL_TRN_TriListGen_meta, swig_CCOL_TRN_TriListGen_bases, swig_CCOL_TRN_TriListGen_base_names };

static int _wrap_new_CCOL_MT_TerrainMesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_TerrainMesh *result = 0 ;
    
    SWIG_check_num_args("CCOL_MT_TerrainMesh::CCOL_MT_TerrainMesh",0,0)
    result = (CCOL_MT_TerrainMesh *)new CCOL_MT_TerrainMesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_MT_TerrainMesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_MT_TerrainMesh_iTestCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_TerrainMesh *arg1 = 0 ;
    CGMesh *arg2 = 0 ;
    int arg3 ;
    CGGraphBV *arg4 = 0 ;
    CCOL_TriList *arg5 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_MT_TerrainMesh::iTestCollision",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iTestCollision",1,"CCOL_MT_TerrainMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iTestCollision",2,"CGMesh *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iTestCollision",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iTestCollision",4,"CGGraphBV *");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iTestCollision",5,"CCOL_TriList &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_MT_TerrainMesh,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_iTestCollision",1,SWIGTYPE_p_CCOL_MT_TerrainMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGMesh,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_iTestCollision",2,SWIGTYPE_p_CGMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_iTestCollision",4,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CCOL_TriList,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_iTestCollision",5,SWIGTYPE_p_CCOL_TriList);
    }
    
    result = (int)(arg1)->iTestCollision(arg2,arg3,arg4,*arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_MT_TerrainMesh_iGetTriangles(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_TerrainMesh *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CGVect3 *arg5 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_MT_TerrainMesh::iGetTriangles",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iGetTriangles",1,"CCOL_MT_TerrainMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iGetTriangles",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iGetTriangles",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iGetTriangles",4,"int");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("CCOL_MT_TerrainMesh::iGetTriangles",5,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_MT_TerrainMesh,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_iGetTriangles",1,SWIGTYPE_p_CCOL_MT_TerrainMesh);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_iGetTriangles",5,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)(arg1)->iGetTriangles(arg2,arg3,arg4,arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_MT_TerrainMesh_GetTriangle(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_TerrainMesh *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    CGVect3 *arg4 = 0 ;
    
    SWIG_check_num_args("CCOL_MT_TerrainMesh::GetTriangle",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_MT_TerrainMesh::GetTriangle",1,"CCOL_MT_TerrainMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_MT_TerrainMesh::GetTriangle",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_MT_TerrainMesh::GetTriangle",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CCOL_MT_TerrainMesh::GetTriangle",4,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_MT_TerrainMesh,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_GetTriangle",1,SWIGTYPE_p_CCOL_MT_TerrainMesh);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_GetTriangle",4,SWIGTYPE_p_CGVect3);
    }
    
    (arg1)->GetTriangle(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_MT_TerrainMesh_GetHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_TerrainMesh *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    SWIG_check_num_args("CCOL_MT_TerrainMesh::GetHeight",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_MT_TerrainMesh::GetHeight",1,"CCOL_MT_TerrainMesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_MT_TerrainMesh::GetHeight",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_MT_TerrainMesh::GetHeight",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_MT_TerrainMesh,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_GetHeight",1,SWIGTYPE_p_CCOL_MT_TerrainMesh);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (float)(arg1)->GetHeight(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_MT_TerrainMesh_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_MT_TerrainMesh *arg1 = 0 ;
    CHeightField *arg2 = 0 ;
    int arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CCOL_MT_TerrainMesh::Init",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_MT_TerrainMesh::Init",1,"CCOL_MT_TerrainMesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_MT_TerrainMesh::Init",2,"CHeightField *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_MT_TerrainMesh::Init",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_MT_TerrainMesh::Init",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_MT_TerrainMesh,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_Init",1,SWIGTYPE_p_CCOL_MT_TerrainMesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CHeightField,0))){
      SWIG_fail_ptr("CCOL_MT_TerrainMesh_Init",2,SWIGTYPE_p_CHeightField);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Init(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_MT_TerrainMesh(void *obj) {
CCOL_MT_TerrainMesh *arg1 = (CCOL_MT_TerrainMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_MT_TerrainMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_MT_TerrainMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_MT_TerrainMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_MT_TerrainMesh_methods[]= {
    { "iTestCollision", _wrap_CCOL_MT_TerrainMesh_iTestCollision},
    { "iGetTriangles", _wrap_CCOL_MT_TerrainMesh_iGetTriangles},
    { "GetTriangle", _wrap_CCOL_MT_TerrainMesh_GetTriangle},
    { "GetHeight", _wrap_CCOL_MT_TerrainMesh_GetHeight},
    { "Init", _wrap_CCOL_MT_TerrainMesh_Init},
    {0,0}
};
static swig_lua_method swig_CCOL_MT_TerrainMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_MT_TerrainMesh_Sf_SwigStatic = {
    "CCOL_MT_TerrainMesh",
    swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_methods,
    swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_attributes,
    swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_constants,
    swig_CCOL_MT_TerrainMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_MT_TerrainMesh_bases[] = {0,0};
static const char *swig_CCOL_MT_TerrainMesh_base_names[] = {"CCOL_MeshTester *",0};
static swig_lua_class _wrap_class_CCOL_MT_TerrainMesh = { "CCOL_MT_TerrainMesh", "CCOL_MT_TerrainMesh", &SWIGTYPE_p_CCOL_MT_TerrainMesh,_proxy__wrap_new_CCOL_MT_TerrainMesh, swig_delete_CCOL_MT_TerrainMesh, swig_CCOL_MT_TerrainMesh_methods, swig_CCOL_MT_TerrainMesh_attributes, &swig_CCOL_MT_TerrainMesh_Sf_SwigStatic, swig_CCOL_MT_TerrainMesh_meta, swig_CCOL_MT_TerrainMesh_bases, swig_CCOL_MT_TerrainMesh_base_names };

static int _wrap_new_CCOL_ST_Point(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_ST_Point *result = 0 ;
    
    SWIG_check_num_args("CCOL_ST_Point::CCOL_ST_Point",0,0)
    result = (CCOL_ST_Point *)new CCOL_ST_Point();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_ST_Point,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Point_iTestSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Point::iTestSphere",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Point::iTestSphere",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Point::iTestSphere",2,"CGVect3 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_ST_Point::iTestSphere",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Point_iTestSphere",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Point_iTestSphere",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    result = (int)CCOL_ST_Point::iTestSphere((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Point_iTestBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Point::iTestBox",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Point::iTestBox",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Point::iTestBox",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Point::iTestBox",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Point_iTestBox",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Point_iTestBox",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Point_iTestBox",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Point::iTestBox((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Point_iTestPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Point::iTestPoint",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Point::iTestPoint",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Point::iTestPoint",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Point_iTestPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Point_iTestPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Point::iTestPoint((CGVect3 const &)*arg1,(CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_ST_Point(void *obj) {
CCOL_ST_Point *arg1 = (CCOL_ST_Point *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_ST_Point(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_ST_Point);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_ST_Point_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_ST_Point_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_ST_Point_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_ST_Point_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_ST_Point_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_ST_Point_Sf_SwigStatic_methods[]= {
    { "iTestSphere", _wrap_CCOL_ST_Point_iTestSphere},
    { "iTestBox", _wrap_CCOL_ST_Point_iTestBox},
    { "iTestPoint", _wrap_CCOL_ST_Point_iTestPoint},
    {0,0}
};
static swig_lua_class* swig_CCOL_ST_Point_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_ST_Point_Sf_SwigStatic = {
    "CCOL_ST_Point",
    swig_CCOL_ST_Point_Sf_SwigStatic_methods,
    swig_CCOL_ST_Point_Sf_SwigStatic_attributes,
    swig_CCOL_ST_Point_Sf_SwigStatic_constants,
    swig_CCOL_ST_Point_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_ST_Point_bases[] = {0};
static const char *swig_CCOL_ST_Point_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_ST_Point = { "CCOL_ST_Point", "CCOL_ST_Point", &SWIGTYPE_p_CCOL_ST_Point,_proxy__wrap_new_CCOL_ST_Point, swig_delete_CCOL_ST_Point, swig_CCOL_ST_Point_methods, swig_CCOL_ST_Point_attributes, &swig_CCOL_ST_Point_Sf_SwigStatic, swig_CCOL_ST_Point_meta, swig_CCOL_ST_Point_bases, swig_CCOL_ST_Point_base_names };

static int _wrap_CCOL_ST_Box_iTestSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Box::iTestSphere",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Box::iTestSphere",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Box::iTestSphere",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Box::iTestSphere",3,"CGVect3 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_ST_Box::iTestSphere",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestSphere",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestSphere",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestSphere",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (int)CCOL_ST_Box::iTestSphere((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Box_iTestBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Box::iTestBox",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Box::iTestBox",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Box::iTestBox",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Box::iTestBox",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CCOL_ST_Box::iTestBox",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestBox",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestBox",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestBox",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestBox",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Box::iTestBox((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Box_iTestPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Box::iTestPoint",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Box::iTestPoint",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Box::iTestPoint",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Box::iTestPoint",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Box_iTestPoint",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Box::iTestPoint((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_ST_Box(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_ST_Box *result = 0 ;
    
    SWIG_check_num_args("CCOL_ST_Box::CCOL_ST_Box",0,0)
    result = (CCOL_ST_Box *)new CCOL_ST_Box();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_ST_Box,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_ST_Box(void *obj) {
CCOL_ST_Box *arg1 = (CCOL_ST_Box *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_ST_Box(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_ST_Box);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_ST_Box_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_ST_Box_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_ST_Box_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_ST_Box_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_ST_Box_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_ST_Box_Sf_SwigStatic_methods[]= {
    { "iTestSphere", _wrap_CCOL_ST_Box_iTestSphere},
    { "iTestBox", _wrap_CCOL_ST_Box_iTestBox},
    { "iTestPoint", _wrap_CCOL_ST_Box_iTestPoint},
    {0,0}
};
static swig_lua_class* swig_CCOL_ST_Box_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_ST_Box_Sf_SwigStatic = {
    "CCOL_ST_Box",
    swig_CCOL_ST_Box_Sf_SwigStatic_methods,
    swig_CCOL_ST_Box_Sf_SwigStatic_attributes,
    swig_CCOL_ST_Box_Sf_SwigStatic_constants,
    swig_CCOL_ST_Box_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_ST_Box_bases[] = {0};
static const char *swig_CCOL_ST_Box_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_ST_Box = { "CCOL_ST_Box", "CCOL_ST_Box", &SWIGTYPE_p_CCOL_ST_Box,_proxy__wrap_new_CCOL_ST_Box, swig_delete_CCOL_ST_Box, swig_CCOL_ST_Box_methods, swig_CCOL_ST_Box_attributes, &swig_CCOL_ST_Box_Sf_SwigStatic, swig_CCOL_ST_Box_meta, swig_CCOL_ST_Box_bases, swig_CCOL_ST_Box_base_names };

static int _wrap_CCOL_ST_Sphere_iTestSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Sphere::iTestSphere",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Sphere::iTestSphere",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_ST_Sphere::iTestSphere",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Sphere::iTestSphere",3,"CGVect3 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_ST_Sphere::iTestSphere",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Sphere_iTestSphere",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Sphere_iTestSphere",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (int)CCOL_ST_Sphere::iTestSphere((CGVect3 const &)*arg1,arg2,(CGVect3 const &)*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Sphere_iTestBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Sphere::iTestBox",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Sphere::iTestBox",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_ST_Sphere::iTestBox",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Sphere::iTestBox",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CCOL_ST_Sphere::iTestBox",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Sphere_iTestBox",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Sphere_iTestBox",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Sphere_iTestBox",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Sphere::iTestBox((CGVect3 const &)*arg1,arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Sphere_iTestPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Sphere::iTestPoint",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Sphere::iTestPoint",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_ST_Sphere::iTestPoint",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Sphere::iTestPoint",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Sphere_iTestPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Sphere_iTestPoint",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Sphere::iTestPoint((CGVect3 const &)*arg1,arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_ST_Sphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_ST_Sphere *result = 0 ;
    
    SWIG_check_num_args("CCOL_ST_Sphere::CCOL_ST_Sphere",0,0)
    result = (CCOL_ST_Sphere *)new CCOL_ST_Sphere();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_ST_Sphere,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_ST_Sphere(void *obj) {
CCOL_ST_Sphere *arg1 = (CCOL_ST_Sphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_ST_Sphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_ST_Sphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_ST_Sphere_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_ST_Sphere_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_ST_Sphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_ST_Sphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_ST_Sphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_ST_Sphere_Sf_SwigStatic_methods[]= {
    { "iTestSphere", _wrap_CCOL_ST_Sphere_iTestSphere},
    { "iTestBox", _wrap_CCOL_ST_Sphere_iTestBox},
    { "iTestPoint", _wrap_CCOL_ST_Sphere_iTestPoint},
    {0,0}
};
static swig_lua_class* swig_CCOL_ST_Sphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_ST_Sphere_Sf_SwigStatic = {
    "CCOL_ST_Sphere",
    swig_CCOL_ST_Sphere_Sf_SwigStatic_methods,
    swig_CCOL_ST_Sphere_Sf_SwigStatic_attributes,
    swig_CCOL_ST_Sphere_Sf_SwigStatic_constants,
    swig_CCOL_ST_Sphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_ST_Sphere_bases[] = {0};
static const char *swig_CCOL_ST_Sphere_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_ST_Sphere = { "CCOL_ST_Sphere", "CCOL_ST_Sphere", &SWIGTYPE_p_CCOL_ST_Sphere,_proxy__wrap_new_CCOL_ST_Sphere, swig_delete_CCOL_ST_Sphere, swig_CCOL_ST_Sphere_methods, swig_CCOL_ST_Sphere_attributes, &swig_CCOL_ST_Sphere_Sf_SwigStatic, swig_CCOL_ST_Sphere_meta, swig_CCOL_ST_Sphere_bases, swig_CCOL_ST_Sphere_base_names };

static int _wrap_CCOL_ST_ColTester_iTestCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGGraphBV *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_ColTester::iTestCollision",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ST_ColTester::iTestCollision",1,"CGGraphBV *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_ST_ColTester::iTestCollision",2,"CGGraphBV *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_ST_ColTester_iTestCollision",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_ST_ColTester_iTestCollision",2,SWIGTYPE_p_CGGraphBV);
    }
    
    result = (int)CCOL_ST_ColTester::iTestCollision(arg1,arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_ColTester_iTestPlane(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGraphBV *arg1 = 0 ;
    CGPlane *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_ColTester::iTestPlane",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ST_ColTester::iTestPlane",1,"CGGraphBV *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_ColTester::iTestPlane",2,"CGPlane const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_ST_ColTester_iTestPlane",1,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPlane,0))){
      SWIG_fail_ptr("CCOL_ST_ColTester_iTestPlane",2,SWIGTYPE_p_CGPlane);
    }
    
    result = (int)CCOL_ST_ColTester::iTestPlane(arg1,(CGPlane const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_ST_ColTester(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_ST_ColTester *result = 0 ;
    
    SWIG_check_num_args("CCOL_ST_ColTester::CCOL_ST_ColTester",0,0)
    result = (CCOL_ST_ColTester *)new CCOL_ST_ColTester();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_ST_ColTester,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_ST_ColTester(void *obj) {
CCOL_ST_ColTester *arg1 = (CCOL_ST_ColTester *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_ST_ColTester(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_ST_ColTester);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_ST_ColTester_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_ST_ColTester_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_ST_ColTester_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_ST_ColTester_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_ST_ColTester_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_ST_ColTester_Sf_SwigStatic_methods[]= {
    { "iTestCollision", _wrap_CCOL_ST_ColTester_iTestCollision},
    { "iTestPlane", _wrap_CCOL_ST_ColTester_iTestPlane},
    {0,0}
};
static swig_lua_class* swig_CCOL_ST_ColTester_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_ST_ColTester_Sf_SwigStatic = {
    "CCOL_ST_ColTester",
    swig_CCOL_ST_ColTester_Sf_SwigStatic_methods,
    swig_CCOL_ST_ColTester_Sf_SwigStatic_attributes,
    swig_CCOL_ST_ColTester_Sf_SwigStatic_constants,
    swig_CCOL_ST_ColTester_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_ST_ColTester_bases[] = {0};
static const char *swig_CCOL_ST_ColTester_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_ST_ColTester = { "CCOL_ST_ColTester", "CCOL_ST_ColTester", &SWIGTYPE_p_CCOL_ST_ColTester,_proxy__wrap_new_CCOL_ST_ColTester, swig_delete_CCOL_ST_ColTester, swig_CCOL_ST_ColTester_methods, swig_CCOL_ST_ColTester_attributes, &swig_CCOL_ST_ColTester_Sf_SwigStatic, swig_CCOL_ST_ColTester_meta, swig_CCOL_ST_ColTester_bases, swig_CCOL_ST_ColTester_base_names };

static int _wrap_new_CCOL_Mesh(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *result = 0 ;
    
    SWIG_check_num_args("CCOL_Mesh::CCOL_Mesh",0,0)
    result = (CCOL_Mesh *)new CCOL_Mesh();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Mesh,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Mesh_Set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    int arg3 ;
    float arg4 ;
    
    SWIG_check_num_args("CCOL_Mesh::Set",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Mesh::Set",1,"CCOL_Mesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Mesh::Set",2,"CGBaseMesh *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_Mesh::Set",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_Mesh::Set",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_Set",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_Set",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4);
    (arg1)->Set(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Mesh_m_poMesh_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = 0 ;
    CGBaseMesh *arg2 = 0 ;
    
    SWIG_check_num_args("CCOL_Mesh::m_poMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Mesh::m_poMesh",1,"CCOL_Mesh *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_Mesh::m_poMesh",2,"CGBaseMesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_m_poMesh_set",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGBaseMesh,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CCOL_Mesh_m_poMesh_set",2,SWIGTYPE_p_CGBaseMesh);
    }
    
    if (arg1) (arg1)->m_poMesh = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Mesh_m_poMesh_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = 0 ;
    CGBaseMesh *result = 0 ;
    
    SWIG_check_num_args("CCOL_Mesh::m_poMesh",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Mesh::m_poMesh",1,"CCOL_Mesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_m_poMesh_get",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    result = (CGBaseMesh *) ((arg1)->m_poMesh);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGBaseMesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Mesh_fFrameFact_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("CCOL_Mesh::fFrameFact",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Mesh::fFrameFact",1,"CCOL_Mesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Mesh::fFrameFact",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_fFrameFact_set",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->fFrameFact = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Mesh_fFrameFact_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_Mesh::fFrameFact",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Mesh::fFrameFact",1,"CCOL_Mesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_fFrameFact_get",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    result = (float) ((arg1)->fFrameFact);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Mesh_iMat_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = 0 ;
    int arg2 ;
    
    SWIG_check_num_args("CCOL_Mesh::iMat",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Mesh::iMat",1,"CCOL_Mesh *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_Mesh::iMat",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_iMat_set",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->iMat = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Mesh_iMat_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Mesh::iMat",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Mesh::iMat",1,"CCOL_Mesh *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Mesh_iMat_get",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    result = (int) ((arg1)->iMat);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_Mesh(void *obj) {
CCOL_Mesh *arg1 = (CCOL_Mesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_Mesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_Mesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_Mesh_attributes[] = {
    { "m_poMesh", _wrap_CCOL_Mesh_m_poMesh_get, _wrap_CCOL_Mesh_m_poMesh_set },
    { "fFrameFact", _wrap_CCOL_Mesh_fFrameFact_get, _wrap_CCOL_Mesh_fFrameFact_set },
    { "iMat", _wrap_CCOL_Mesh_iMat_get, _wrap_CCOL_Mesh_iMat_set },
    {0,0,0}
};
static swig_lua_method swig_CCOL_Mesh_methods[]= {
    { "Set", _wrap_CCOL_Mesh_Set},
    {0,0}
};
static swig_lua_method swig_CCOL_Mesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_Mesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_Mesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_Mesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CCOL_Mesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_Mesh_Sf_SwigStatic = {
    "CCOL_Mesh",
    swig_CCOL_Mesh_Sf_SwigStatic_methods,
    swig_CCOL_Mesh_Sf_SwigStatic_attributes,
    swig_CCOL_Mesh_Sf_SwigStatic_constants,
    swig_CCOL_Mesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_Mesh_bases[] = {0};
static const char *swig_CCOL_Mesh_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_Mesh = { "CCOL_Mesh", "CCOL_Mesh", &SWIGTYPE_p_CCOL_Mesh,_proxy__wrap_new_CCOL_Mesh, swig_delete_CCOL_Mesh, swig_CCOL_Mesh_methods, swig_CCOL_Mesh_attributes, &swig_CCOL_Mesh_Sf_SwigStatic, swig_CCOL_Mesh_meta, swig_CCOL_Mesh_bases, swig_CCOL_Mesh_base_names };

static int _wrap_CCOL_Scn_ColTester_iTestObjects(lua_State* L) {
  {
    int SWIG_arg = 0;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iTestObjects",0,0)
    result = (int)CCOL_Scn_ColTester::iTestObjects();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iTest3DObj_Rec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iTest3DObj_Rec",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::iTest3DObj_Rec",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_iTest3DObj_Rec",1,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (int)CCOL_Scn_ColTester::iTest3DObj_Rec(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iTest3DObj(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iTest3DObj",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::iTest3DObj",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_iTest3DObj",1,SWIGTYPE_p_CGSceneNode);
    }
    
    result = (int)CCOL_Scn_ColTester::iTest3DObj(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iTest3DObj_Node(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneGroup *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iTest3DObj_Node",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::iTest3DObj_Node",1,"CGSceneGroup *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneGroup,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_iTest3DObj_Node",1,SWIGTYPE_p_CGSceneGroup);
    }
    
    result = (int)CCOL_Scn_ColTester::iTest3DObj_Node(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iTest3DObj_Transf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneTransf *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iTest3DObj_Transf",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::iTest3DObj_Transf",1,"CGSceneTransf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneTransf,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_iTest3DObj_Transf",1,SWIGTYPE_p_CGSceneTransf);
    }
    
    result = (int)CCOL_Scn_ColTester::iTest3DObj_Transf(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iTest3DObj_Leaf(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneLeaf *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iTest3DObj_Leaf",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::iTest3DObj_Leaf",1,"CGSceneLeaf *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneLeaf,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_iTest3DObj_Leaf",1,SWIGTYPE_p_CGSceneLeaf);
    }
    
    result = (int)CCOL_Scn_ColTester::iTest3DObj_Leaf(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iTest3DObj_BSPNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneBSPNode *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iTest3DObj_BSPNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::iTest3DObj_BSPNode",1,"CGSceneBSPNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneBSPNode,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_iTest3DObj_BSPNode",1,SWIGTYPE_p_CGSceneBSPNode);
    }
    
    result = (int)CCOL_Scn_ColTester::iTest3DObj_BSPNode(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_SGrObj_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::SGrObj",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::SGrObj",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_SGrObj_set",1,SWIGTYPE_p_CGSceneNode);
    }
    
    CCOL_Scn_ColTester::SGrObj = arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_SGrObj_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::SGrObj",0,0)
    result = (CGSceneNode *)CCOL_Scn_ColTester::SGrObj;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_DGrObj_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *arg1 = 0 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::DGrObj",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::DGrObj",1,"CGSceneNode *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSceneNode,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_DGrObj_set",1,SWIGTYPE_p_CGSceneNode);
    }
    
    CCOL_Scn_ColTester::DGrObj = arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_DGrObj_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSceneNode *result = 0 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::DGrObj",0,0)
    result = (CGSceneNode *)CCOL_Scn_ColTester::DGrObj;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSceneNode,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iNumColMeshes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iNumColMeshes",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::iNumColMeshes",1,"int");
    arg1 = (int)lua_tonumber(L, 1);
    CCOL_Scn_ColTester::iNumColMeshes = arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_iNumColMeshes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    int result;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::iNumColMeshes",0,0)
    result = (int)CCOL_Scn_ColTester::iNumColMeshes;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_ColMeshes_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *arg1 = (CCOL_Mesh *)0 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::ColMeshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_Scn_ColTester::ColMeshes",1,"CCOL_Mesh [64]");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCOL_Mesh,0))){
      SWIG_fail_ptr("CCOL_Scn_ColTester_ColMeshes_set",1,SWIGTYPE_p_CCOL_Mesh);
    }
    
    {
      size_t ii;
      CCOL_Mesh *b = (CCOL_Mesh *) CCOL_Scn_ColTester::ColMeshes;
      for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((CCOL_Mesh *) arg1 + ii);
    }
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_Scn_ColTester_ColMeshes_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Mesh *result = 0 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::ColMeshes",0,0)
    result = (CCOL_Mesh *)(CCOL_Mesh *)CCOL_Scn_ColTester::ColMeshes;
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Mesh,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_Scn_ColTester(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_Scn_ColTester *result = 0 ;
    
    SWIG_check_num_args("CCOL_Scn_ColTester::CCOL_Scn_ColTester",0,0)
    result = (CCOL_Scn_ColTester *)new CCOL_Scn_ColTester();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_Scn_ColTester,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_Scn_ColTester(void *obj) {
CCOL_Scn_ColTester *arg1 = (CCOL_Scn_ColTester *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_Scn_ColTester(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_Scn_ColTester);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_Scn_ColTester_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_Scn_ColTester_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_Scn_ColTester_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_Scn_ColTester_Sf_SwigStatic_attributes[] = {
    { "SGrObj", _wrap_CCOL_Scn_ColTester_SGrObj_get, _wrap_CCOL_Scn_ColTester_SGrObj_set },
    { "DGrObj", _wrap_CCOL_Scn_ColTester_DGrObj_get, _wrap_CCOL_Scn_ColTester_DGrObj_set },
    { "iNumColMeshes", _wrap_CCOL_Scn_ColTester_iNumColMeshes_get, _wrap_CCOL_Scn_ColTester_iNumColMeshes_set },
    { "ColMeshes", _wrap_CCOL_Scn_ColTester_ColMeshes_get, _wrap_CCOL_Scn_ColTester_ColMeshes_set },
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_Scn_ColTester_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_Scn_ColTester_Sf_SwigStatic_methods[]= {
    { "iTestObjects", _wrap_CCOL_Scn_ColTester_iTestObjects},
    { "iTest3DObj_Rec", _wrap_CCOL_Scn_ColTester_iTest3DObj_Rec},
    { "iTest3DObj", _wrap_CCOL_Scn_ColTester_iTest3DObj},
    { "iTest3DObj_Node", _wrap_CCOL_Scn_ColTester_iTest3DObj_Node},
    { "iTest3DObj_Transf", _wrap_CCOL_Scn_ColTester_iTest3DObj_Transf},
    { "iTest3DObj_Leaf", _wrap_CCOL_Scn_ColTester_iTest3DObj_Leaf},
    { "iTest3DObj_BSPNode", _wrap_CCOL_Scn_ColTester_iTest3DObj_BSPNode},
    {0,0}
};
static swig_lua_class* swig_CCOL_Scn_ColTester_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_Scn_ColTester_Sf_SwigStatic = {
    "CCOL_Scn_ColTester",
    swig_CCOL_Scn_ColTester_Sf_SwigStatic_methods,
    swig_CCOL_Scn_ColTester_Sf_SwigStatic_attributes,
    swig_CCOL_Scn_ColTester_Sf_SwigStatic_constants,
    swig_CCOL_Scn_ColTester_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_Scn_ColTester_bases[] = {0};
static const char *swig_CCOL_Scn_ColTester_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_Scn_ColTester = { "CCOL_Scn_ColTester", "CCOL_Scn_ColTester", &SWIGTYPE_p_CCOL_Scn_ColTester,_proxy__wrap_new_CCOL_Scn_ColTester, swig_delete_CCOL_Scn_ColTester, swig_CCOL_Scn_ColTester_methods, swig_CCOL_Scn_ColTester_attributes, &swig_CCOL_Scn_ColTester_Sf_SwigStatic, swig_CCOL_Scn_ColTester_meta, swig_CCOL_Scn_ColTester_bases, swig_CCOL_Scn_ColTester_base_names };

static int _wrap_new_CCOL_ST_Tris(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_ST_Tris *result = 0 ;
    
    SWIG_check_num_args("CCOL_ST_Tris::CCOL_ST_Tris",0,0)
    result = (CCOL_ST_Tris *)new CCOL_ST_Tris();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_ST_Tris,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_iTestCollision(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int arg3 ;
    CGGraphBV *arg4 = 0 ;
    CGVect3 *arg5 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::iTestCollision",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollision",1,"CGVect3 *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollision",2,"CGVect3 *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollision",3,"int");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollision",4,"CGGraphBV *");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollision",5,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollision",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollision",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGGraphBV,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollision",4,SWIGTYPE_p_CGGraphBV);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollision",5,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Tris::iTestCollision(arg1,arg2,arg3,arg4,(CGVect3 const &)*arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_iTestCollisionSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    float arg1 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::iTestCollisionSphere",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollisionSphere",1,"float");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollisionSphere",2,"CGVect3 const &");
    arg1 = (float)lua_tonumber(L, 1);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollisionSphere",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Tris::iTestCollisionSphere(arg1,(CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_iTestCollisionBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::iTestCollisionBox",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollisionBox",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollisionBox",2,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollisionBox",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollisionBox",2,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Tris::iTestCollisionBox((CGVect3 const &)*arg1,(CGVect3 const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_iTestCollisionRay(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGRay *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::iTestCollisionRay",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_ST_Tris::iTestCollisionRay",1,"CGRay const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestCollisionRay",1,SWIGTYPE_p_CGRay);
    }
    
    result = (int)CCOL_ST_Tris::iTestCollisionRay((CGRay const &)*arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_iTestTriangleSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::iTestTriangleSphere",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleSphere",1,"CGVect3 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleSphere",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleSphere",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestTriangleSphere",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestTriangleSphere",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Tris::iTestTriangleSphere(arg1,arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_iTestTriangleBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::iTestTriangleBox",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleBox",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleBox",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleBox",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestTriangleBox",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestTriangleBox",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestTriangleBox",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (int)CCOL_ST_Tris::iTestTriangleBox(arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_iTestTriangleRay(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGRay *arg2 = 0 ;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::iTestTriangleRay",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleRay",1,"CGVect3 *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_ST_Tris::iTestTriangleRay",2,"CGRay const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestTriangleRay",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGRay,0))){
      SWIG_fail_ptr("CCOL_ST_Tris_iTestTriangleRay",2,SWIGTYPE_p_CGRay);
    }
    
    result = (int)CCOL_ST_Tris::iTestTriangleRay(arg1,(CGRay const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_Tri_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    int arg1 ;
    
    SWIG_check_num_args("CCOL_ST_Tris::Tri",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("CCOL_ST_Tris::Tri",1,"int");
    arg1 = (int)lua_tonumber(L, 1);
    CCOL_ST_Tris::Tri = arg1;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_ST_Tris_Tri_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    int result;
    
    SWIG_check_num_args("CCOL_ST_Tris::Tri",0,0)
    result = (int)CCOL_ST_Tris::Tri;
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_ST_Tris(void *obj) {
CCOL_ST_Tris *arg1 = (CCOL_ST_Tris *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_ST_Tris(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_ST_Tris);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_ST_Tris_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_ST_Tris_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_ST_Tris_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_ST_Tris_Sf_SwigStatic_attributes[] = {
    { "Tri", _wrap_CCOL_ST_Tris_Tri_get, _wrap_CCOL_ST_Tris_Tri_set },
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_ST_Tris_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_ST_Tris_Sf_SwigStatic_methods[]= {
    { "iTestCollision", _wrap_CCOL_ST_Tris_iTestCollision},
    { "iTestCollisionSphere", _wrap_CCOL_ST_Tris_iTestCollisionSphere},
    { "iTestCollisionBox", _wrap_CCOL_ST_Tris_iTestCollisionBox},
    { "iTestCollisionRay", _wrap_CCOL_ST_Tris_iTestCollisionRay},
    { "iTestTriangleSphere", _wrap_CCOL_ST_Tris_iTestTriangleSphere},
    { "iTestTriangleBox", _wrap_CCOL_ST_Tris_iTestTriangleBox},
    { "iTestTriangleRay", _wrap_CCOL_ST_Tris_iTestTriangleRay},
    {0,0}
};
static swig_lua_class* swig_CCOL_ST_Tris_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_ST_Tris_Sf_SwigStatic = {
    "CCOL_ST_Tris",
    swig_CCOL_ST_Tris_Sf_SwigStatic_methods,
    swig_CCOL_ST_Tris_Sf_SwigStatic_attributes,
    swig_CCOL_ST_Tris_Sf_SwigStatic_constants,
    swig_CCOL_ST_Tris_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_ST_Tris_bases[] = {0};
static const char *swig_CCOL_ST_Tris_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_ST_Tris = { "CCOL_ST_Tris", "CCOL_ST_Tris", &SWIGTYPE_p_CCOL_ST_Tris,_proxy__wrap_new_CCOL_ST_Tris, swig_delete_CCOL_ST_Tris, swig_CCOL_ST_Tris_methods, swig_CCOL_ST_Tris_attributes, &swig_CCOL_ST_Tris_Sf_SwigStatic, swig_CCOL_ST_Tris_meta, swig_CCOL_ST_Tris_bases, swig_CCOL_ST_Tris_base_names };

static int _wrap_CCOL_DT_Box_fTestSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Box::fTestSphere",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Box::fTestSphere",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Box::fTestSphere",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Box::fTestSphere",3,"CGVect3 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_DT_Box::fTestSphere",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestSphere",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestSphere",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestSphere",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (float)CCOL_DT_Box::fTestSphere((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Box_fTestBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Box::fTestBox",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Box::fTestBox",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Box::fTestBox",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Box::fTestBox",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CCOL_DT_Box::fTestBox",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestBox",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestBox",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestBox",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestBox",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)CCOL_DT_Box::fTestBox((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Box_fTestPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Box::fTestPoint",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Box::fTestPoint",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Box::fTestPoint",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Box::fTestPoint",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestPoint",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Box_fTestPoint",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)CCOL_DT_Box::fTestPoint((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Box_iGetCollisionAxis(lua_State* L) {
  {
    int SWIG_arg = 0;
    int result;
    
    SWIG_check_num_args("CCOL_DT_Box::iGetCollisionAxis",0,0)
    result = (int)CCOL_DT_Box::iGetCollisionAxis();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_DT_Box(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_DT_Box *result = 0 ;
    
    SWIG_check_num_args("CCOL_DT_Box::CCOL_DT_Box",0,0)
    result = (CCOL_DT_Box *)new CCOL_DT_Box();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_DT_Box,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_DT_Box(void *obj) {
CCOL_DT_Box *arg1 = (CCOL_DT_Box *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_DT_Box(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_DT_Box);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_DT_Box_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_DT_Box_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_DT_Box_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_DT_Box_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_DT_Box_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_DT_Box_Sf_SwigStatic_methods[]= {
    { "fTestSphere", _wrap_CCOL_DT_Box_fTestSphere},
    { "fTestBox", _wrap_CCOL_DT_Box_fTestBox},
    { "fTestPoint", _wrap_CCOL_DT_Box_fTestPoint},
    { "iGetCollisionAxis", _wrap_CCOL_DT_Box_iGetCollisionAxis},
    {0,0}
};
static swig_lua_class* swig_CCOL_DT_Box_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_DT_Box_Sf_SwigStatic = {
    "CCOL_DT_Box",
    swig_CCOL_DT_Box_Sf_SwigStatic_methods,
    swig_CCOL_DT_Box_Sf_SwigStatic_attributes,
    swig_CCOL_DT_Box_Sf_SwigStatic_constants,
    swig_CCOL_DT_Box_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_DT_Box_bases[] = {0};
static const char *swig_CCOL_DT_Box_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_DT_Box = { "CCOL_DT_Box", "CCOL_DT_Box", &SWIGTYPE_p_CCOL_DT_Box,_proxy__wrap_new_CCOL_DT_Box, swig_delete_CCOL_DT_Box, swig_CCOL_DT_Box_methods, swig_CCOL_DT_Box_attributes, &swig_CCOL_DT_Box_Sf_SwigStatic, swig_CCOL_DT_Box_meta, swig_CCOL_DT_Box_bases, swig_CCOL_DT_Box_base_names };

static int _wrap_CCOL_DT_Sphere_fTestSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    float arg4 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Sphere::fTestSphere",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Sphere::fTestSphere",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_DT_Sphere::fTestSphere",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Sphere::fTestSphere",3,"CGVect3 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CCOL_DT_Sphere::fTestSphere",4,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Sphere_fTestSphere",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Sphere_fTestSphere",3,SWIGTYPE_p_CGVect3);
    }
    
    arg4 = (float)lua_tonumber(L, 4);
    result = (float)CCOL_DT_Sphere::fTestSphere((CGVect3 const &)*arg1,arg2,(CGVect3 const &)*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Sphere_fTestBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    CGVect3 *arg4 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Sphere::fTestBox",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Sphere::fTestBox",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_DT_Sphere::fTestBox",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Sphere::fTestBox",3,"CGVect3 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("CCOL_DT_Sphere::fTestBox",4,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Sphere_fTestBox",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Sphere_fTestBox",3,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Sphere_fTestBox",4,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)CCOL_DT_Sphere::fTestBox((CGVect3 const &)*arg1,arg2,(CGVect3 const &)*arg3,(CGVect3 const &)*arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Sphere_fTestPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Sphere::fTestPoint",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Sphere::fTestPoint",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_DT_Sphere::fTestPoint",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Sphere::fTestPoint",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Sphere_fTestPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Sphere_fTestPoint",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)CCOL_DT_Sphere::fTestPoint((CGVect3 const &)*arg1,arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_DT_Sphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_DT_Sphere *result = 0 ;
    
    SWIG_check_num_args("CCOL_DT_Sphere::CCOL_DT_Sphere",0,0)
    result = (CCOL_DT_Sphere *)new CCOL_DT_Sphere();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_DT_Sphere,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_DT_Sphere(void *obj) {
CCOL_DT_Sphere *arg1 = (CCOL_DT_Sphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_DT_Sphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_DT_Sphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_DT_Sphere_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_DT_Sphere_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_DT_Sphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_DT_Sphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_DT_Sphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_DT_Sphere_Sf_SwigStatic_methods[]= {
    { "fTestSphere", _wrap_CCOL_DT_Sphere_fTestSphere},
    { "fTestBox", _wrap_CCOL_DT_Sphere_fTestBox},
    { "fTestPoint", _wrap_CCOL_DT_Sphere_fTestPoint},
    {0,0}
};
static swig_lua_class* swig_CCOL_DT_Sphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_DT_Sphere_Sf_SwigStatic = {
    "CCOL_DT_Sphere",
    swig_CCOL_DT_Sphere_Sf_SwigStatic_methods,
    swig_CCOL_DT_Sphere_Sf_SwigStatic_attributes,
    swig_CCOL_DT_Sphere_Sf_SwigStatic_constants,
    swig_CCOL_DT_Sphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_DT_Sphere_bases[] = {0};
static const char *swig_CCOL_DT_Sphere_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_DT_Sphere = { "CCOL_DT_Sphere", "CCOL_DT_Sphere", &SWIGTYPE_p_CCOL_DT_Sphere,_proxy__wrap_new_CCOL_DT_Sphere, swig_delete_CCOL_DT_Sphere, swig_CCOL_DT_Sphere_methods, swig_CCOL_DT_Sphere_attributes, &swig_CCOL_DT_Sphere_Sf_SwigStatic, swig_CCOL_DT_Sphere_meta, swig_CCOL_DT_Sphere_bases, swig_CCOL_DT_Sphere_base_names };

static int _wrap_CCOL_DT_Point_fTestSphere(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    float arg3 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Point::fTestSphere",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Point::fTestSphere",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Point::fTestSphere",2,"CGVect3 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CCOL_DT_Point::fTestSphere",3,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Point_fTestSphere",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Point_fTestSphere",2,SWIGTYPE_p_CGVect3);
    }
    
    arg3 = (float)lua_tonumber(L, 3);
    result = (float)CCOL_DT_Point::fTestSphere((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Point_fTestBox(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    CGVect3 *arg3 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Point::fTestBox",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Point::fTestBox",1,"CGVect3 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCOL_DT_Point::fTestBox",2,"CGVect3 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Point::fTestBox",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Point_fTestBox",1,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Point_fTestBox",2,SWIGTYPE_p_CGVect3);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Point_fTestBox",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)CCOL_DT_Point::fTestBox((CGVect3 const &)*arg1,(CGVect3 const &)*arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CCOL_DT_Point_fTestPoint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGVect3 *arg1 = 0 ;
    float arg2 ;
    CGVect3 *arg3 = 0 ;
    float result;
    
    SWIG_check_num_args("CCOL_DT_Point::fTestPoint",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("CCOL_DT_Point::fTestPoint",1,"CGVect3 const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CCOL_DT_Point::fTestPoint",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCOL_DT_Point::fTestPoint",3,"CGVect3 const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Point_fTestPoint",1,SWIGTYPE_p_CGVect3);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("CCOL_DT_Point_fTestPoint",3,SWIGTYPE_p_CGVect3);
    }
    
    result = (float)CCOL_DT_Point::fTestPoint((CGVect3 const &)*arg1,arg2,(CGVect3 const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CCOL_DT_Point(lua_State* L) {
  {
    int SWIG_arg = 0;
    CCOL_DT_Point *result = 0 ;
    
    SWIG_check_num_args("CCOL_DT_Point::CCOL_DT_Point",0,0)
    result = (CCOL_DT_Point *)new CCOL_DT_Point();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCOL_DT_Point,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CCOL_DT_Point(void *obj) {
CCOL_DT_Point *arg1 = (CCOL_DT_Point *) obj;
delete arg1;
}
static int _proxy__wrap_new_CCOL_DT_Point(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CCOL_DT_Point);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CCOL_DT_Point_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CCOL_DT_Point_methods[]= {
    {0,0}
};
static swig_lua_method swig_CCOL_DT_Point_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CCOL_DT_Point_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CCOL_DT_Point_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CCOL_DT_Point_Sf_SwigStatic_methods[]= {
    { "fTestSphere", _wrap_CCOL_DT_Point_fTestSphere},
    { "fTestBox", _wrap_CCOL_DT_Point_fTestBox},
    { "fTestPoint", _wrap_CCOL_DT_Point_fTestPoint},
    {0,0}
};
static swig_lua_class* swig_CCOL_DT_Point_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CCOL_DT_Point_Sf_SwigStatic = {
    "CCOL_DT_Point",
    swig_CCOL_DT_Point_Sf_SwigStatic_methods,
    swig_CCOL_DT_Point_Sf_SwigStatic_attributes,
    swig_CCOL_DT_Point_Sf_SwigStatic_constants,
    swig_CCOL_DT_Point_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CCOL_DT_Point_bases[] = {0};
static const char *swig_CCOL_DT_Point_base_names[] = {0};
static swig_lua_class _wrap_class_CCOL_DT_Point = { "CCOL_DT_Point", "CCOL_DT_Point", &SWIGTYPE_p_CCOL_DT_Point,_proxy__wrap_new_CCOL_DT_Point, swig_delete_CCOL_DT_Point, swig_CCOL_DT_Point_methods, swig_CCOL_DT_Point_attributes, &swig_CCOL_DT_Point_Sf_SwigStatic, swig_CCOL_DT_Point_meta, swig_CCOL_DT_Point_bases, swig_CCOL_DT_Point_base_names };

static int _wrap_CGAIMathFuncs_GetRotatedY(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long arg4 ;
    long result;
    
    SWIG_check_num_args("CGAIMathFuncs::GetRotatedY",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedY",1,"CGAIMathFuncs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedY",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedY",3,"long");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedY",4,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMathFuncs,0))){
      SWIG_fail_ptr("CGAIMathFuncs_GetRotatedY",1,SWIGTYPE_p_CGAIMathFuncs);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    arg4 = (long)lua_tonumber(L, 4);
    result = (long)(arg1)->GetRotatedY(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMathFuncs_GetRotatedX(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long arg4 ;
    long result;
    
    SWIG_check_num_args("CGAIMathFuncs::GetRotatedX",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedX",1,"CGAIMathFuncs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedX",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedX",3,"long");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIMathFuncs::GetRotatedX",4,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMathFuncs,0))){
      SWIG_fail_ptr("CGAIMathFuncs_GetRotatedX",1,SWIGTYPE_p_CGAIMathFuncs);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    arg4 = (long)lua_tonumber(L, 4);
    result = (long)(arg1)->GetRotatedX(arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMathFuncs_AngleDec(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long result;
    
    SWIG_check_num_args("CGAIMathFuncs::AngleDec",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMathFuncs::AngleDec",1,"CGAIMathFuncs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMathFuncs::AngleDec",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMathFuncs::AngleDec",3,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMathFuncs,0))){
      SWIG_fail_ptr("CGAIMathFuncs_AngleDec",1,SWIGTYPE_p_CGAIMathFuncs);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    result = (long)(arg1)->AngleDec(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMathFuncs_AngleAdd(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long result;
    
    SWIG_check_num_args("CGAIMathFuncs::AngleAdd",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMathFuncs::AngleAdd",1,"CGAIMathFuncs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMathFuncs::AngleAdd",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMathFuncs::AngleAdd",3,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMathFuncs,0))){
      SWIG_fail_ptr("CGAIMathFuncs_AngleAdd",1,SWIGTYPE_p_CGAIMathFuncs);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    result = (long)(arg1)->AngleAdd(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMathFuncs_Distance2D(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long arg4 ;
    long arg5 ;
    long result;
    
    SWIG_check_num_args("CGAIMathFuncs::Distance2D",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMathFuncs::Distance2D",1,"CGAIMathFuncs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMathFuncs::Distance2D",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMathFuncs::Distance2D",3,"long");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIMathFuncs::Distance2D",4,"long");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGAIMathFuncs::Distance2D",5,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMathFuncs,0))){
      SWIG_fail_ptr("CGAIMathFuncs_Distance2D",1,SWIGTYPE_p_CGAIMathFuncs);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    arg4 = (long)lua_tonumber(L, 4);
    arg5 = (long)lua_tonumber(L, 5);
    result = (long)(arg1)->Distance2D(arg2,arg3,arg4,arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMathFuncs_AbsAngleDiff(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long result;
    
    SWIG_check_num_args("CGAIMathFuncs::AbsAngleDiff",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMathFuncs::AbsAngleDiff",1,"CGAIMathFuncs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMathFuncs::AbsAngleDiff",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMathFuncs::AbsAngleDiff",3,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMathFuncs,0))){
      SWIG_fail_ptr("CGAIMathFuncs_AbsAngleDiff",1,SWIGTYPE_p_CGAIMathFuncs);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    result = (long)(arg1)->AbsAngleDiff(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMathFuncs_Angle2D(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long arg4 ;
    long arg5 ;
    long result;
    
    SWIG_check_num_args("CGAIMathFuncs::Angle2D",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMathFuncs::Angle2D",1,"CGAIMathFuncs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMathFuncs::Angle2D",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMathFuncs::Angle2D",3,"long");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIMathFuncs::Angle2D",4,"long");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGAIMathFuncs::Angle2D",5,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMathFuncs,0))){
      SWIG_fail_ptr("CGAIMathFuncs_Angle2D",1,SWIGTYPE_p_CGAIMathFuncs);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    arg4 = (long)lua_tonumber(L, 4);
    arg5 = (long)lua_tonumber(L, 5);
    result = (long)(arg1)->Angle2D(arg2,arg3,arg4,arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGAIMathFuncs(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMathFuncs *result = 0 ;
    
    SWIG_check_num_args("CGAIMathFuncs::CGAIMathFuncs",0,0)
    result = (CGAIMathFuncs *)new CGAIMathFuncs();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGAIMathFuncs,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGAIMathFuncs(void *obj) {
CGAIMathFuncs *arg1 = (CGAIMathFuncs *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGAIMathFuncs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGAIMathFuncs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGAIMathFuncs_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGAIMathFuncs_methods[]= {
    { "GetRotatedY", _wrap_CGAIMathFuncs_GetRotatedY},
    { "GetRotatedX", _wrap_CGAIMathFuncs_GetRotatedX},
    { "AngleDec", _wrap_CGAIMathFuncs_AngleDec},
    { "AngleAdd", _wrap_CGAIMathFuncs_AngleAdd},
    { "Distance2D", _wrap_CGAIMathFuncs_Distance2D},
    { "AbsAngleDiff", _wrap_CGAIMathFuncs_AbsAngleDiff},
    { "Angle2D", _wrap_CGAIMathFuncs_Angle2D},
    {0,0}
};
static swig_lua_method swig_CGAIMathFuncs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGAIMathFuncs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGAIMathFuncs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGAIMathFuncs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGAIMathFuncs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGAIMathFuncs_Sf_SwigStatic = {
    "CGAIMathFuncs",
    swig_CGAIMathFuncs_Sf_SwigStatic_methods,
    swig_CGAIMathFuncs_Sf_SwigStatic_attributes,
    swig_CGAIMathFuncs_Sf_SwigStatic_constants,
    swig_CGAIMathFuncs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGAIMathFuncs_bases[] = {0};
static const char *swig_CGAIMathFuncs_base_names[] = {0};
static swig_lua_class _wrap_class_CGAIMathFuncs = { "CGAIMathFuncs", "CGAIMathFuncs", &SWIGTYPE_p_CGAIMathFuncs,_proxy__wrap_new_CGAIMathFuncs, swig_delete_CGAIMathFuncs, swig_CGAIMathFuncs_methods, swig_CGAIMathFuncs_attributes, &swig_CGAIMathFuncs_Sf_SwigStatic, swig_CGAIMathFuncs_meta, swig_CGAIMathFuncs_bases, swig_CGAIMathFuncs_base_names };

static int _wrap_CGAIMap_NewMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    
    SWIG_check_num_args("CGAIMap::NewMap",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::NewMap",1,"CGAIMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMap::NewMap",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMap::NewMap",3,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_NewMap",1,SWIGTYPE_p_CGAIMap);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    (arg1)->NewMap(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_SetTile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long arg4 ;
    
    SWIG_check_num_args("CGAIMap::SetTile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::SetTile",1,"CGAIMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMap::SetTile",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMap::SetTile",3,"long");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIMap::SetTile",4,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_SetTile",1,SWIGTYPE_p_CGAIMap);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    arg4 = (long)lua_tonumber(L, 4);
    (arg1)->SetTile(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_GetTile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long result;
    
    SWIG_check_num_args("CGAIMap::GetTile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::GetTile",1,"CGAIMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMap::GetTile",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIMap::GetTile",3,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_GetTile",1,SWIGTYPE_p_CGAIMap);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    result = (long)(arg1)->GetTile(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_m_Height_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIMap::m_Height",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::m_Height",1,"CGAIMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMap::m_Height",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_m_Height_set",1,SWIGTYPE_p_CGAIMap);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_Height = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_m_Height_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIMap::m_Height",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::m_Height",1,"CGAIMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_m_Height_get",1,SWIGTYPE_p_CGAIMap);
    }
    
    result = (long) ((arg1)->m_Height);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_m_Width_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIMap::m_Width",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::m_Width",1,"CGAIMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIMap::m_Width",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_m_Width_set",1,SWIGTYPE_p_CGAIMap);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_Width = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_m_Width_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIMap::m_Width",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::m_Width",1,"CGAIMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_m_Width_get",1,SWIGTYPE_p_CGAIMap);
    }
    
    result = (long) ((arg1)->m_Width);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGAIMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *result = 0 ;
    
    SWIG_check_num_args("CGAIMap::CGAIMap",0,0)
    result = (CGAIMap *)new CGAIMap();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGAIMap,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_lTiles_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long *arg2 = 0 ;
    
    SWIG_check_num_args("CGAIMap::lTiles",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::lTiles",1,"CGAIMap *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGAIMap::lTiles",2,"long *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_lTiles_set",1,SWIGTYPE_p_CGAIMap);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGAIMap_lTiles_set",2,SWIGTYPE_p_long);
    }
    
    if (arg1) (arg1)->lTiles = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIMap_lTiles_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    long *result = 0 ;
    
    SWIG_check_num_args("CGAIMap::lTiles",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIMap::lTiles",1,"CGAIMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIMap_lTiles_get",1,SWIGTYPE_p_CGAIMap);
    }
    
    result = (long *) ((arg1)->lTiles);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGAIMap(void *obj) {
CGAIMap *arg1 = (CGAIMap *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGAIMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGAIMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGAIMap_attributes[] = {
    { "m_Height", _wrap_CGAIMap_m_Height_get, _wrap_CGAIMap_m_Height_set },
    { "m_Width", _wrap_CGAIMap_m_Width_get, _wrap_CGAIMap_m_Width_set },
    { "lTiles", _wrap_CGAIMap_lTiles_get, _wrap_CGAIMap_lTiles_set },
    {0,0,0}
};
static swig_lua_method swig_CGAIMap_methods[]= {
    { "NewMap", _wrap_CGAIMap_NewMap},
    { "SetTile", _wrap_CGAIMap_SetTile},
    { "GetTile", _wrap_CGAIMap_GetTile},
    {0,0}
};
static swig_lua_method swig_CGAIMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGAIMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGAIMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGAIMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGAIMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGAIMap_SwigStatic = {
    "CGAIMap",
    swig_CGAIMap_SwigStatic_methods,
    swig_CGAIMap_SwigStatic_attributes,
    swig_CGAIMap_SwigStatic_constants,
    swig_CGAIMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGAIMap_bases[] = {0};
static const char *swig_CGAIMap_base_names[] = {0};
static swig_lua_class _wrap_class_CGAIMap = { "CGAIMap", "CGAIMap", &SWIGTYPE_p_CGAIMap,_proxy__wrap_new_CGAIMap, swig_delete_CGAIMap, swig_CGAIMap_methods, swig_CGAIMap_attributes, &swig_CGAIMap_SwigStatic, swig_CGAIMap_meta, swig_CGAIMap_bases, swig_CGAIMap_base_names };

static int _wrap_new_CGAIDXAStar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIMap *arg1 = 0 ;
    int arg2 ;
    CGAIDXAStar *result = 0 ;
    
    SWIG_check_num_args("CGAIDXAStar::CGAIDXAStar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::CGAIDXAStar",1,"CGAIMap *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIDXAStar::CGAIDXAStar",2,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("new_CGAIDXAStar",1,SWIGTYPE_p_CGAIMap);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    result = (CGAIDXAStar *)new CGAIDXAStar(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGAIDXAStar,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_InitAstarTileMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    CGAIMap *arg2 = 0 ;
    int arg3 ;
    
    SWIG_check_num_args("CGAIDXAStar::InitAstarTileMap",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::InitAstarTileMap",1,"CGAIDXAStar *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGAIDXAStar::InitAstarTileMap",2,"CGAIMap *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIDXAStar::InitAstarTileMap",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_InitAstarTileMap",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIDXAStar_InitAstarTileMap",2,SWIGTYPE_p_CGAIMap);
    }
    
    arg3 = (int)lua_tonumber(L, 3);
    (arg1)->InitAstarTileMap(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_NewPath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    
    SWIG_check_num_args("CGAIDXAStar::NewPath",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::NewPath",1,"CGAIDXAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIDXAStar::NewPath",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIDXAStar::NewPath",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIDXAStar::NewPath",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGAIDXAStar::NewPath",5,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_NewPath",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5);
    result = (bool)(arg1)->NewPath(arg2,arg3,arg4,arg5);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_ReachedGoal(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGAIDXAStar::ReachedGoal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::ReachedGoal",1,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_ReachedGoal",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    result = (bool)(arg1)->ReachedGoal();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_PathNextNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    
    SWIG_check_num_args("CGAIDXAStar::PathNextNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::PathNextNode",1,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_PathNextNode",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    (arg1)->PathNextNode();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_NodeGetX(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CGAIDXAStar::NodeGetX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::NodeGetX",1,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_NodeGetX",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    result = (int)(arg1)->NodeGetX();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_NodeGetY(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    int result;
    
    SWIG_check_num_args("CGAIDXAStar::NodeGetY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::NodeGetY",1,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_NodeGetY",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    result = (int)(arg1)->NodeGetY();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_TileNum(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    SWIG_check_num_args("CGAIDXAStar::TileNum",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::TileNum",1,"CGAIDXAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIDXAStar::TileNum",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIDXAStar::TileNum",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_TileNum",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (int)(arg1)->TileNum(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_FreeTile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    SWIG_check_num_args("CGAIDXAStar::FreeTile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::FreeTile",1,"CGAIDXAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIDXAStar::FreeTile",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIDXAStar::FreeTile",3,"int");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_FreeTile",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3);
    result = (int)(arg1)->FreeTile(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_is8Directions_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGAIDXAStar::is8Directions",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::is8Directions",1,"CGAIDXAStar *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGAIDXAStar::is8Directions",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_is8Directions_set",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->is8Directions = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_is8Directions_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGAIDXAStar::is8Directions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::is8Directions",1,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_is8Directions_get",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    result = (bool) ((arg1)->is8Directions);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_Width_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIDXAStar::Width",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::Width",1,"CGAIDXAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIDXAStar::Width",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_Width_set",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->Width = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_Width_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIDXAStar::Width",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::Width",1,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_Width_get",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    result = (long) ((arg1)->Width);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_Height_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIDXAStar::Height",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::Height",1,"CGAIDXAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIDXAStar::Height",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_Height_set",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->Height = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIDXAStar_Height_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIDXAStar *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIDXAStar::Height",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIDXAStar::Height",1,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIDXAStar,0))){
      SWIG_fail_ptr("CGAIDXAStar_Height_get",1,SWIGTYPE_p_CGAIDXAStar);
    }
    
    result = (long) ((arg1)->Height);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGAIDXAStar(void *obj) {
CGAIDXAStar *arg1 = (CGAIDXAStar *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGAIDXAStar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGAIDXAStar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGAIDXAStar_attributes[] = {
    { "is8Directions", _wrap_CGAIDXAStar_is8Directions_get, _wrap_CGAIDXAStar_is8Directions_set },
    { "Width", _wrap_CGAIDXAStar_Width_get, _wrap_CGAIDXAStar_Width_set },
    { "Height", _wrap_CGAIDXAStar_Height_get, _wrap_CGAIDXAStar_Height_set },
    {0,0,0}
};
static swig_lua_method swig_CGAIDXAStar_methods[]= {
    { "InitAstarTileMap", _wrap_CGAIDXAStar_InitAstarTileMap},
    { "NewPath", _wrap_CGAIDXAStar_NewPath},
    { "ReachedGoal", _wrap_CGAIDXAStar_ReachedGoal},
    { "PathNextNode", _wrap_CGAIDXAStar_PathNextNode},
    { "NodeGetX", _wrap_CGAIDXAStar_NodeGetX},
    { "NodeGetY", _wrap_CGAIDXAStar_NodeGetY},
    { "TileNum", _wrap_CGAIDXAStar_TileNum},
    { "FreeTile", _wrap_CGAIDXAStar_FreeTile},
    {0,0}
};
static swig_lua_method swig_CGAIDXAStar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGAIDXAStar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGAIDXAStar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGAIDXAStar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGAIDXAStar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGAIDXAStar_Sf_SwigStatic = {
    "CGAIDXAStar",
    swig_CGAIDXAStar_Sf_SwigStatic_methods,
    swig_CGAIDXAStar_Sf_SwigStatic_attributes,
    swig_CGAIDXAStar_Sf_SwigStatic_constants,
    swig_CGAIDXAStar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGAIDXAStar_bases[] = {0};
static const char *swig_CGAIDXAStar_base_names[] = {0};
static swig_lua_class _wrap_class_CGAIDXAStar = { "CGAIDXAStar", "CGAIDXAStar", &SWIGTYPE_p_CGAIDXAStar,_proxy__wrap_new_CGAIDXAStar, swig_delete_CGAIDXAStar, swig_CGAIDXAStar_methods, swig_CGAIDXAStar_attributes, &swig_CGAIDXAStar_Sf_SwigStatic, swig_CGAIDXAStar_meta, swig_CGAIDXAStar_bases, swig_CGAIDXAStar_base_names };

static int _wrap_new_CGAIAStar(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *result = 0 ;
    
    SWIG_check_num_args("CGAIAStar::CGAIAStar",0,0)
    result = (CGAIAStar *)new CGAIAStar();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGAIAStar,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_Height_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIAStar::Height",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::Height",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::Height",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_Height_set",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->Height = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_Height_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIAStar::Height",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::Height",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_Height_get",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (long) ((arg1)->Height);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_Width_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIAStar::Width",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::Width",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::Width",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_Width_set",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->Width = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_Width_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIAStar::Width",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::Width",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_Width_get",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (long) ((arg1)->Width);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_SetHeight(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIAStar::SetHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::SetHeight",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::SetHeight",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_SetHeight",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    (arg1)->SetHeight(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_SetWidth(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    
    SWIG_check_num_args("CGAIAStar::SetWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::SetWidth",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::SetWidth",2,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_SetWidth",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    (arg1)->SetWidth(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_NewMap(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    
    SWIG_check_num_args("CGAIAStar::NewMap",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::NewMap",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::NewMap",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIAStar::NewMap",3,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_NewMap",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    (arg1)->NewMap(arg2,arg3);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_SetTile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long arg4 ;
    
    SWIG_check_num_args("CGAIAStar::SetTile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::SetTile",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::SetTile",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIAStar::SetTile",3,"long");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIAStar::SetTile",4,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_SetTile",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    arg4 = (long)lua_tonumber(L, 4);
    (arg1)->SetTile(arg2,arg3,arg4);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_lGetTile(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long result;
    
    SWIG_check_num_args("CGAIAStar::lGetTile",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::lGetTile",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::lGetTile",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIAStar::lGetTile",3,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_lGetTile",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    result = (long)(arg1)->lGetTile(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_bFindAPath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long arg2 ;
    long arg3 ;
    long arg4 ;
    long arg5 ;
    bool result;
    
    SWIG_check_num_args("CGAIAStar::bFindAPath",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::bFindAPath",1,"CGAIAStar *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGAIAStar::bFindAPath",2,"long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("CGAIAStar::bFindAPath",3,"long");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("CGAIAStar::bFindAPath",4,"long");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("CGAIAStar::bFindAPath",5,"long");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_bFindAPath",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (long)lua_tonumber(L, 2);
    arg3 = (long)lua_tonumber(L, 3);
    arg4 = (long)lua_tonumber(L, 4);
    arg5 = (long)lua_tonumber(L, 5);
    result = (bool)(arg1)->bFindAPath(arg2,arg3,arg4,arg5);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_bGoalReached(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGAIAStar::bGoalReached",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::bGoalReached",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_bGoalReached",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (bool)(arg1)->bGoalReached();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_NextPathNode(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    
    SWIG_check_num_args("CGAIAStar::NextPathNode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::NextPathNode",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_NextPathNode",1,SWIGTYPE_p_CGAIAStar);
    }
    
    (arg1)->NextPathNode();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_lNodeGetX(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIAStar::lNodeGetX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::lNodeGetX",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_lNodeGetX",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (long)(arg1)->lNodeGetX();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_lNodeGetY(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    long result;
    
    SWIG_check_num_args("CGAIAStar::lNodeGetY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::lNodeGetY",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_lNodeGetY",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (long)(arg1)->lNodeGetY();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_Allow8Directions(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGAIAStar::Allow8Directions",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::Allow8Directions",1,"CGAIAStar *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGAIAStar::Allow8Directions",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_Allow8Directions",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->Allow8Directions(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_map_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    CGAIMap *arg2 = 0 ;
    
    SWIG_check_num_args("CGAIAStar::map",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::map",1,"CGAIAStar *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGAIAStar::map",2,"CGAIMap *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_map_set",1,SWIGTYPE_p_CGAIAStar);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGAIMap,0))){
      SWIG_fail_ptr("CGAIAStar_map_set",2,SWIGTYPE_p_CGAIMap);
    }
    
    if (arg1) (arg1)->map = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_map_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    CGAIMap *result = 0 ;
    
    SWIG_check_num_args("CGAIAStar::map",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::map",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_map_get",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (CGAIMap *)& ((arg1)->map);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGAIMap,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_pAStar_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    CGAIDXAStar *arg2 = 0 ;
    
    SWIG_check_num_args("CGAIAStar::pAStar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::pAStar",1,"CGAIAStar *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGAIAStar::pAStar",2,"CGAIDXAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_pAStar_set",1,SWIGTYPE_p_CGAIAStar);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGAIDXAStar,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("CGAIAStar_pAStar_set",2,SWIGTYPE_p_CGAIDXAStar);
    }
    
    if (arg1) (arg1)->pAStar = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_pAStar_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    CGAIDXAStar *result = 0 ;
    
    SWIG_check_num_args("CGAIAStar::pAStar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::pAStar",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_pAStar_get",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (CGAIDXAStar *) ((arg1)->pAStar);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGAIDXAStar,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_bAllow8Directions_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    bool arg2 ;
    
    SWIG_check_num_args("CGAIAStar::bAllow8Directions",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::bAllow8Directions",1,"CGAIAStar *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("CGAIAStar::bAllow8Directions",2,"bool");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_bAllow8Directions_set",1,SWIGTYPE_p_CGAIAStar);
    }
    
    arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->bAllow8Directions = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGAIAStar_bAllow8Directions_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGAIAStar *arg1 = 0 ;
    bool result;
    
    SWIG_check_num_args("CGAIAStar::bAllow8Directions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGAIAStar::bAllow8Directions",1,"CGAIAStar *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGAIAStar,0))){
      SWIG_fail_ptr("CGAIAStar_bAllow8Directions_get",1,SWIGTYPE_p_CGAIAStar);
    }
    
    result = (bool) ((arg1)->bAllow8Directions);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGAIAStar(void *obj) {
CGAIAStar *arg1 = (CGAIAStar *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGAIAStar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGAIAStar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGAIAStar_attributes[] = {
    { "Height", _wrap_CGAIAStar_Height_get, _wrap_CGAIAStar_Height_set },
    { "Width", _wrap_CGAIAStar_Width_get, _wrap_CGAIAStar_Width_set },
    { "map", _wrap_CGAIAStar_map_get, _wrap_CGAIAStar_map_set },
    { "pAStar", _wrap_CGAIAStar_pAStar_get, _wrap_CGAIAStar_pAStar_set },
    { "bAllow8Directions", _wrap_CGAIAStar_bAllow8Directions_get, _wrap_CGAIAStar_bAllow8Directions_set },
    {0,0,0}
};
static swig_lua_method swig_CGAIAStar_methods[]= {
    { "SetHeight", _wrap_CGAIAStar_SetHeight},
    { "SetWidth", _wrap_CGAIAStar_SetWidth},
    { "NewMap", _wrap_CGAIAStar_NewMap},
    { "SetTile", _wrap_CGAIAStar_SetTile},
    { "lGetTile", _wrap_CGAIAStar_lGetTile},
    { "bFindAPath", _wrap_CGAIAStar_bFindAPath},
    { "bGoalReached", _wrap_CGAIAStar_bGoalReached},
    { "NextPathNode", _wrap_CGAIAStar_NextPathNode},
    { "lNodeGetX", _wrap_CGAIAStar_lNodeGetX},
    { "lNodeGetY", _wrap_CGAIAStar_lNodeGetY},
    { "Allow8Directions", _wrap_CGAIAStar_Allow8Directions},
    {0,0}
};
static swig_lua_method swig_CGAIAStar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGAIAStar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGAIAStar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGAIAStar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGAIAStar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGAIAStar_Sf_SwigStatic = {
    "CGAIAStar",
    swig_CGAIAStar_Sf_SwigStatic_methods,
    swig_CGAIAStar_Sf_SwigStatic_attributes,
    swig_CGAIAStar_Sf_SwigStatic_constants,
    swig_CGAIAStar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGAIAStar_bases[] = {0};
static const char *swig_CGAIAStar_base_names[] = {0};
static swig_lua_class _wrap_class_CGAIAStar = { "CGAIAStar", "CGAIAStar", &SWIGTYPE_p_CGAIAStar,_proxy__wrap_new_CGAIAStar, swig_delete_CGAIAStar, swig_CGAIAStar_methods, swig_CGAIAStar_attributes, &swig_CGAIAStar_Sf_SwigStatic, swig_CGAIAStar_meta, swig_CGAIAStar_bases, swig_CGAIAStar_base_names };

static int _wrap_TSpiralPathParams_m_oInitialPos_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oInitialPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oInitialPos",1,"TSpiralPathParams *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TSpiralPathParams::m_oInitialPos",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialPos_set",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialPos_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oInitialPos = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oInitialPos_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oInitialPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oInitialPos",1,"TSpiralPathParams *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialPos_get",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oInitialPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oSpeed_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oSpeed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oSpeed",1,"TSpiralPathParams *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TSpiralPathParams::m_oSpeed",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oSpeed_set",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oSpeed_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oSpeed = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oSpeed_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oSpeed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oSpeed",1,"TSpiralPathParams *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oSpeed_get",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oSpeed);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oInitialRadius_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oInitialRadius",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oInitialRadius",1,"TSpiralPathParams *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TSpiralPathParams::m_oInitialRadius",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialRadius_set",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialRadius_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oInitialRadius = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oInitialRadius_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oInitialRadius",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oInitialRadius",1,"TSpiralPathParams *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialRadius_get",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oInitialRadius);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oRadiusSpeed_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oRadiusSpeed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oRadiusSpeed",1,"TSpiralPathParams *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TSpiralPathParams::m_oRadiusSpeed",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oRadiusSpeed_set",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oRadiusSpeed_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oRadiusSpeed = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oRadiusSpeed_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oRadiusSpeed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oRadiusSpeed",1,"TSpiralPathParams *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oRadiusSpeed_get",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oRadiusSpeed);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oInitialPhase_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oInitialPhase",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oInitialPhase",1,"TSpiralPathParams *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TSpiralPathParams::m_oInitialPhase",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialPhase_set",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialPhase_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oInitialPhase = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oInitialPhase_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oInitialPhase",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oInitialPhase",1,"TSpiralPathParams *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oInitialPhase_get",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oInitialPhase);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oAngularSpeed_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *arg2 = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oAngularSpeed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oAngularSpeed",1,"TSpiralPathParams *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TSpiralPathParams::m_oAngularSpeed",2,"CGVect3 *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oAngularSpeed_set",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGVect3,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oAngularSpeed_set",2,SWIGTYPE_p_CGVect3);
    }
    
    if (arg1) (arg1)->m_oAngularSpeed = *arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_oAngularSpeed_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_oAngularSpeed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_oAngularSpeed",1,"TSpiralPathParams *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_oAngularSpeed_get",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    result = (CGVect3 *)& ((arg1)->m_oAngularSpeed);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_fPathTime_set(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("TSpiralPathParams::m_fPathTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_fPathTime",1,"TSpiralPathParams *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("TSpiralPathParams::m_fPathTime",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_fPathTime_set",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->m_fPathTime = arg2;
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_TSpiralPathParams_m_fPathTime_get(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("TSpiralPathParams::m_fPathTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TSpiralPathParams::m_fPathTime",1,"TSpiralPathParams *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("TSpiralPathParams_m_fPathTime_get",1,SWIGTYPE_p_TSpiralPathParams);
    }
    
    result = (float) ((arg1)->m_fPathTime);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_TSpiralPathParams(lua_State* L) {
  {
    int SWIG_arg = 0;
    TSpiralPathParams *result = 0 ;
    
    SWIG_check_num_args("TSpiralPathParams::TSpiralPathParams",0,0)
    result = (TSpiralPathParams *)new TSpiralPathParams();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_TSpiralPathParams,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_TSpiralPathParams(void *obj) {
TSpiralPathParams *arg1 = (TSpiralPathParams *) obj;
delete arg1;
}
static int _proxy__wrap_new_TSpiralPathParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TSpiralPathParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TSpiralPathParams_attributes[] = {
    { "m_oInitialPos", _wrap_TSpiralPathParams_m_oInitialPos_get, _wrap_TSpiralPathParams_m_oInitialPos_set },
    { "m_oSpeed", _wrap_TSpiralPathParams_m_oSpeed_get, _wrap_TSpiralPathParams_m_oSpeed_set },
    { "m_oInitialRadius", _wrap_TSpiralPathParams_m_oInitialRadius_get, _wrap_TSpiralPathParams_m_oInitialRadius_set },
    { "m_oRadiusSpeed", _wrap_TSpiralPathParams_m_oRadiusSpeed_get, _wrap_TSpiralPathParams_m_oRadiusSpeed_set },
    { "m_oInitialPhase", _wrap_TSpiralPathParams_m_oInitialPhase_get, _wrap_TSpiralPathParams_m_oInitialPhase_set },
    { "m_oAngularSpeed", _wrap_TSpiralPathParams_m_oAngularSpeed_get, _wrap_TSpiralPathParams_m_oAngularSpeed_set },
    { "m_fPathTime", _wrap_TSpiralPathParams_m_fPathTime_get, _wrap_TSpiralPathParams_m_fPathTime_set },
    {0,0,0}
};
static swig_lua_method swig_TSpiralPathParams_methods[]= {
    {0,0}
};
static swig_lua_method swig_TSpiralPathParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TSpiralPathParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TSpiralPathParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TSpiralPathParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TSpiralPathParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TSpiralPathParams_Sf_SwigStatic = {
    "TSpiralPathParams",
    swig_TSpiralPathParams_Sf_SwigStatic_methods,
    swig_TSpiralPathParams_Sf_SwigStatic_attributes,
    swig_TSpiralPathParams_Sf_SwigStatic_constants,
    swig_TSpiralPathParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TSpiralPathParams_bases[] = {0};
static const char *swig_TSpiralPathParams_base_names[] = {0};
static swig_lua_class _wrap_class_TSpiralPathParams = { "TSpiralPathParams", "TSpiralPathParams", &SWIGTYPE_p_TSpiralPathParams,_proxy__wrap_new_TSpiralPathParams, swig_delete_TSpiralPathParams, swig_TSpiralPathParams_methods, swig_TSpiralPathParams_attributes, &swig_TSpiralPathParams_Sf_SwigStatic, swig_TSpiralPathParams_meta, swig_TSpiralPathParams_bases, swig_TSpiralPathParams_base_names };

static int _wrap_CGSpiralPath_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSpiralPath *arg1 = 0 ;
    TSpiralPathParams *arg2 = 0 ;
    
    SWIG_check_num_args("CGSpiralPath::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSpiralPath::Init",1,"CGSpiralPath *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGSpiralPath::Init",2,"TSpiralPathParams const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSpiralPath,0))){
      SWIG_fail_ptr("CGSpiralPath_Init",1,SWIGTYPE_p_CGSpiralPath);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TSpiralPathParams,0))){
      SWIG_fail_ptr("CGSpiralPath_Init",2,SWIGTYPE_p_TSpiralPathParams);
    }
    
    (arg1)->Init((TSpiralPathParams const &)*arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSpiralPath_oPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSpiralPath *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGSpiralPath::oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSpiralPath::oPos",1,"CGSpiralPath *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGSpiralPath::oPos",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSpiralPath,0))){
      SWIG_fail_ptr("CGSpiralPath_oPos",1,SWIGTYPE_p_CGSpiralPath);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &(arg1)->oPos(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGSpiralPath_fTime(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSpiralPath *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGSpiralPath::fTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGSpiralPath::fTime",1,"CGSpiralPath *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGSpiralPath,0))){
      SWIG_fail_ptr("CGSpiralPath_fTime",1,SWIGTYPE_p_CGSpiralPath);
    }
    
    result = (float)(arg1)->fTime();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGSpiralPath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGSpiralPath *result = 0 ;
    
    SWIG_check_num_args("CGSpiralPath::CGSpiralPath",0,0)
    result = (CGSpiralPath *)new CGSpiralPath();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSpiralPath,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGSpiralPath(void *obj) {
CGSpiralPath *arg1 = (CGSpiralPath *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGSpiralPath(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGSpiralPath);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGSpiralPath_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGSpiralPath_methods[]= {
    { "Init", _wrap_CGSpiralPath_Init},
    { "oPos", _wrap_CGSpiralPath_oPos},
    { "fTime", _wrap_CGSpiralPath_fTime},
    {0,0}
};
static swig_lua_method swig_CGSpiralPath_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGSpiralPath_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGSpiralPath_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGSpiralPath_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGSpiralPath_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGSpiralPath_Sf_SwigStatic = {
    "CGSpiralPath",
    swig_CGSpiralPath_Sf_SwigStatic_methods,
    swig_CGSpiralPath_Sf_SwigStatic_attributes,
    swig_CGSpiralPath_Sf_SwigStatic_constants,
    swig_CGSpiralPath_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGSpiralPath_bases[] = {0,0};
static const char *swig_CGSpiralPath_base_names[] = {"CGPath *",0};
static swig_lua_class _wrap_class_CGSpiralPath = { "CGSpiralPath", "CGSpiralPath", &SWIGTYPE_p_CGSpiralPath,_proxy__wrap_new_CGSpiralPath, swig_delete_CGSpiralPath, swig_CGSpiralPath_methods, swig_CGSpiralPath_attributes, &swig_CGSpiralPath_Sf_SwigStatic, swig_CGSpiralPath_meta, swig_CGSpiralPath_bases, swig_CGSpiralPath_base_names };

static int _wrap_CGCurvePath_oPos(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurvePath *arg1 = 0 ;
    float arg2 ;
    CGVect3 *result = 0 ;
    
    SWIG_check_num_args("CGCurvePath::oPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurvePath::oPos",1,"CGCurvePath *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CGCurvePath::oPos",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurvePath,0))){
      SWIG_fail_ptr("CGCurvePath_oPos",1,SWIGTYPE_p_CGCurvePath);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    result = (CGVect3 *) &(arg1)->oPos(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGVect3,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurvePath_Init(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurvePath *arg1 = 0 ;
    CGCurve *arg2 = 0 ;
    
    SWIG_check_num_args("CGCurvePath::Init",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurvePath::Init",1,"CGCurvePath *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGCurvePath::Init",2,"CGCurve *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurvePath,0))){
      SWIG_fail_ptr("CGCurvePath_Init",1,SWIGTYPE_p_CGCurvePath);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGCurve,0))){
      SWIG_fail_ptr("CGCurvePath_Init",2,SWIGTYPE_p_CGCurve);
    }
    
    (arg1)->Init(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGCurvePath_fTime(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurvePath *arg1 = 0 ;
    float result;
    
    SWIG_check_num_args("CGCurvePath::fTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGCurvePath::fTime",1,"CGCurvePath *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGCurvePath,0))){
      SWIG_fail_ptr("CGCurvePath_fTime",1,SWIGTYPE_p_CGCurvePath);
    }
    
    result = (float)(arg1)->fTime();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGCurvePath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGCurvePath *result = 0 ;
    
    SWIG_check_num_args("CGCurvePath::CGCurvePath",0,0)
    result = (CGCurvePath *)new CGCurvePath();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGCurvePath,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGCurvePath(void *obj) {
CGCurvePath *arg1 = (CGCurvePath *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGCurvePath(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGCurvePath);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGCurvePath_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGCurvePath_methods[]= {
    { "oPos", _wrap_CGCurvePath_oPos},
    { "Init", _wrap_CGCurvePath_Init},
    { "fTime", _wrap_CGCurvePath_fTime},
    {0,0}
};
static swig_lua_method swig_CGCurvePath_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGCurvePath_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGCurvePath_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGCurvePath_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGCurvePath_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGCurvePath_Sf_SwigStatic = {
    "CGCurvePath",
    swig_CGCurvePath_Sf_SwigStatic_methods,
    swig_CGCurvePath_Sf_SwigStatic_attributes,
    swig_CGCurvePath_Sf_SwigStatic_constants,
    swig_CGCurvePath_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGCurvePath_bases[] = {0,0};
static const char *swig_CGCurvePath_base_names[] = {"CGPath *",0};
static swig_lua_class _wrap_class_CGCurvePath = { "CGCurvePath", "CGCurvePath", &SWIGTYPE_p_CGCurvePath,_proxy__wrap_new_CGCurvePath, swig_delete_CGCurvePath, swig_CGCurvePath_methods, swig_CGCurvePath_attributes, &swig_CGCurvePath_Sf_SwigStatic, swig_CGCurvePath_meta, swig_CGCurvePath_bases, swig_CGCurvePath_base_names };

static int _wrap_CGPathResource_SetPath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPathResource *arg1 = 0 ;
    CGPath *arg2 = 0 ;
    
    SWIG_check_num_args("CGPathResource::SetPath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPathResource::SetPath",1,"CGPathResource *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CGPathResource::SetPath",2,"CGPath *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPathResource,0))){
      SWIG_fail_ptr("CGPathResource_SetPath",1,SWIGTYPE_p_CGPathResource);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGPath,0))){
      SWIG_fail_ptr("CGPathResource_SetPath",2,SWIGTYPE_p_CGPath);
    }
    
    (arg1)->SetPath(arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGPathResource_poGetPath(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPathResource *arg1 = 0 ;
    CGPath *result = 0 ;
    
    SWIG_check_num_args("CGPathResource::poGetPath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPathResource::poGetPath",1,"CGPathResource *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPathResource,0))){
      SWIG_fail_ptr("CGPathResource_poGetPath",1,SWIGTYPE_p_CGPathResource);
    }
    
    result = (CGPath *)(arg1)->poGetPath();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPath,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGPathResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPathResource *result = 0 ;
    
    SWIG_check_num_args("CGPathResource::CGPathResource",0,0)
    result = (CGPathResource *)new CGPathResource();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPathResource,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPathResource(void *obj) {
CGPathResource *arg1 = (CGPathResource *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPathResource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPathResource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPathResource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPathResource_methods[]= {
    { "SetPath", _wrap_CGPathResource_SetPath},
    { "poGetPath", _wrap_CGPathResource_poGetPath},
    {0,0}
};
static swig_lua_method swig_CGPathResource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPathResource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPathResource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPathResource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPathResource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPathResource_Sf_SwigStatic = {
    "CGPathResource",
    swig_CGPathResource_Sf_SwigStatic_methods,
    swig_CGPathResource_Sf_SwigStatic_attributes,
    swig_CGPathResource_Sf_SwigStatic_constants,
    swig_CGPathResource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPathResource_bases[] = {0,0};
static const char *swig_CGPathResource_base_names[] = {"CGResource *",0};
static swig_lua_class _wrap_class_CGPathResource = { "CGPathResource", "CGPathResource", &SWIGTYPE_p_CGPathResource,_proxy__wrap_new_CGPathResource, swig_delete_CGPathResource, swig_CGPathResource_methods, swig_CGPathResource_attributes, &swig_CGPathResource_Sf_SwigStatic, swig_CGPathResource_meta, swig_CGPathResource_bases, swig_CGPathResource_base_names };

static int _wrap_new_CGPathResourceWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPathResourceWH *result = 0 ;
    
    SWIG_check_num_args("CGPathResourceWH::CGPathResourceWH",0,0)
    result = (CGPathResourceWH *)new CGPathResourceWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPathResourceWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPathResourceWH(void *obj) {
CGPathResourceWH *arg1 = (CGPathResourceWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPathResourceWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPathResourceWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPathResourceWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPathResourceWH_methods[]= {
    {0,0}
};
static swig_lua_method swig_CGPathResourceWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPathResourceWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPathResourceWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPathResourceWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPathResourceWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPathResourceWH_Sf_SwigStatic = {
    "CGPathResourceWH",
    swig_CGPathResourceWH_Sf_SwigStatic_methods,
    swig_CGPathResourceWH_Sf_SwigStatic_attributes,
    swig_CGPathResourceWH_Sf_SwigStatic_constants,
    swig_CGPathResourceWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPathResourceWH_bases[] = {0};
static const char *swig_CGPathResourceWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGPathResourceWH = { "CGPathResourceWH", "CGPathResourceWH", &SWIGTYPE_p_CGPathResourceWH,_proxy__wrap_new_CGPathResourceWH, swig_delete_CGPathResourceWH, swig_CGPathResourceWH_methods, swig_CGPathResourceWH_attributes, &swig_CGPathResourceWH_Sf_SwigStatic, swig_CGPathResourceWH_meta, swig_CGPathResourceWH_bases, swig_CGPathResourceWH_base_names };

static int _wrap_CGPathDefinitionFileWH_poLoadResource(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPathDefinitionFileWH *arg1 = 0 ;
    CGString *arg2 = 0 ;
    CGTextResource *result = 0 ;
    
    SWIG_check_num_args("CGPathDefinitionFileWH::poLoadResource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGPathDefinitionFileWH::poLoadResource",1,"CGPathDefinitionFileWH *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("CGPathDefinitionFileWH::poLoadResource",2,"CGString const &");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGPathDefinitionFileWH,0))){
      SWIG_fail_ptr("CGPathDefinitionFileWH_poLoadResource",1,SWIGTYPE_p_CGPathDefinitionFileWH);
    }
    
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CGString,0))){
      SWIG_fail_ptr("CGPathDefinitionFileWH_poLoadResource",2,SWIGTYPE_p_CGString);
    }
    
    result = (CGTextResource *)(arg1)->poLoadResource((CGString const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGTextResource,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGPathDefinitionFileWH(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGPathDefinitionFileWH *result = 0 ;
    
    SWIG_check_num_args("CGPathDefinitionFileWH::CGPathDefinitionFileWH",0,0)
    result = (CGPathDefinitionFileWH *)new CGPathDefinitionFileWH();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGPathDefinitionFileWH,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGPathDefinitionFileWH(void *obj) {
CGPathDefinitionFileWH *arg1 = (CGPathDefinitionFileWH *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGPathDefinitionFileWH(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGPathDefinitionFileWH);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGPathDefinitionFileWH_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGPathDefinitionFileWH_methods[]= {
    { "poLoadResource", _wrap_CGPathDefinitionFileWH_poLoadResource},
    {0,0}
};
static swig_lua_method swig_CGPathDefinitionFileWH_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGPathDefinitionFileWH_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGPathDefinitionFileWH_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGPathDefinitionFileWH_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGPathDefinitionFileWH_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGPathDefinitionFileWH_Sf_SwigStatic = {
    "CGPathDefinitionFileWH",
    swig_CGPathDefinitionFileWH_Sf_SwigStatic_methods,
    swig_CGPathDefinitionFileWH_Sf_SwigStatic_attributes,
    swig_CGPathDefinitionFileWH_Sf_SwigStatic_constants,
    swig_CGPathDefinitionFileWH_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGPathDefinitionFileWH_bases[] = {0};
static const char *swig_CGPathDefinitionFileWH_base_names[] = {0};
static swig_lua_class _wrap_class_CGPathDefinitionFileWH = { "CGPathDefinitionFileWH", "CGPathDefinitionFileWH", &SWIGTYPE_p_CGPathDefinitionFileWH,_proxy__wrap_new_CGPathDefinitionFileWH, swig_delete_CGPathDefinitionFileWH, swig_CGPathDefinitionFileWH_methods, swig_CGPathDefinitionFileWH_attributes, &swig_CGPathDefinitionFileWH_Sf_SwigStatic, swig_CGPathDefinitionFileWH_meta, swig_CGPathDefinitionFileWH_bases, swig_CGPathDefinitionFileWH_base_names };

static int _wrap_DebugPrint(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    
    SWIG_check_num_args("DebugPrint",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DebugPrint",1,"char *");
    arg1 = (char *)lua_tostring(L, 1);
    DebugPrint(arg1);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_DebugClear(lua_State* L) {
  {
    int SWIG_arg = 0;
    
    SWIG_check_num_args("DebugClear",0,0)
    DebugClear();
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CallExtension__SWIG_0(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CallExtension",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CallExtension",1,"char *");
    arg1 = (char *)lua_tostring(L, 1);
    result = (void *)CallExtension(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CallExtension__SWIG_1(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    char *arg2 = 0 ;
    void *result = 0 ;
    
    SWIG_check_num_args("CallExtension",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CallExtension",1,"char *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CallExtension",2,"char *");
    arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2);
    result = (void *)CallExtension(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CallExtension(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_CallExtension__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CallExtension__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CallExtension'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CallExtension(char *)\n"
    "    CallExtension(char *,char *)\n");
  lua_error(L);return 0;
}


static int _wrap_CGGameRegistry_oGetVar(lua_State* L) {
  {
    int SWIG_arg = 0;
    char *arg1 = 0 ;
    uobject result;
    
    SWIG_check_num_args("CGGameRegistry_oGetVar",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CGGameRegistry_oGetVar",1,"char *");
    arg1 = (char *)lua_tostring(L, 1);
    result = (uobject)CGGameRegistry_oGetVar(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_SpawnEntity(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *arg1 = 0 ;
    float arg2 ;
    
    SWIG_check_num_args("SpawnEntity",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpawnEntity",1,"CGGameEntity *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("SpawnEntity",2,"float");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGGameEntity,0))){
      SWIG_fail_ptr("SpawnEntity",1,SWIGTYPE_p_CGGameEntity);
    }
    
    arg2 = (float)lua_tonumber(L, 2);
    SpawnEntity(arg1,arg2);
    
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_castto_uint(lua_State* L) {
  {
    int SWIG_arg = 0;
    TEntityState arg1 ;
    uint result;
    
    SWIG_check_num_args("castto_uint",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("castto_uint",1,"TEntityState");
    arg1 = (TEntityState)(int)lua_tonumber(L, 1);
    result = (uint)castto_uint(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_castto_CSmoother(lua_State* L) {
  {
    int SWIG_arg = 0;
    uobject arg1 = 0 ;
    CGSmoother *result = 0 ;
    
    SWIG_check_num_args("castto_CSmoother",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("castto_CSmoother",1,"uobject");
    arg1=(uobject)SWIG_MustGetPtr(L,1,0,0,1,"castto_CSmoother");
    result = (CGSmoother *)castto_CSmoother(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSmoother,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_castto_CHUDLabel(lua_State* L) {
  {
    int SWIG_arg = 0;
    uobject arg1 = 0 ;
    CHUDLabel *result = 0 ;
    
    SWIG_check_num_args("castto_CHUDLabel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("castto_CHUDLabel",1,"uobject");
    arg1=(uobject)SWIG_MustGetPtr(L,1,0,0,1,"castto_CHUDLabel");
    result = (CHUDLabel *)castto_CHUDLabel(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDLabel,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_castto_CGGameEntity(lua_State* L) {
  {
    int SWIG_arg = 0;
    uobject arg1 = 0 ;
    CGGameEntity *result = 0 ;
    
    SWIG_check_num_args("castto_CGGameEntity",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("castto_CGGameEntity",1,"uobject");
    arg1=(uobject)SWIG_MustGetPtr(L,1,0,0,1,"castto_CGGameEntity");
    result = (CGGameEntity *)castto_CGGameEntity(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntity,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_new_CGUObject(lua_State* L) {
  {
    int SWIG_arg = 0;
    uobject arg1 = 0 ;
    CGUObject *result = 0 ;
    
    SWIG_check_num_args("CGUObject::CGUObject",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUObject::CGUObject",1,"uobject");
    arg1=(uobject)SWIG_MustGetPtr(L,1,0,0,1,"new_CGUObject");
    result = (CGUObject *)new CGUObject(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGUObject,1); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGUObject_toSmoother(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUObject *arg1 = 0 ;
    CGSmoother *result = 0 ;
    
    SWIG_check_num_args("CGUObject::toSmoother",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUObject::toSmoother",1,"CGUObject *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUObject,0))){
      SWIG_fail_ptr("CGUObject_toSmoother",1,SWIGTYPE_p_CGUObject);
    }
    
    result = (CGSmoother *)(arg1)->toSmoother();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGSmoother,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGUObject_toCHUDLabel(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUObject *arg1 = 0 ;
    CHUDLabel *result = 0 ;
    
    SWIG_check_num_args("CGUObject::toCHUDLabel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUObject::toCHUDLabel",1,"CGUObject *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUObject,0))){
      SWIG_fail_ptr("CGUObject_toCHUDLabel",1,SWIGTYPE_p_CGUObject);
    }
    
    result = (CHUDLabel *)(arg1)->toCHUDLabel();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CHUDLabel,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGUObject_toCGGameEntity(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUObject *arg1 = 0 ;
    CGGameEntity *result = 0 ;
    
    SWIG_check_num_args("CGUObject::toCGGameEntity",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUObject::toCGGameEntity",1,"CGUObject *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUObject,0))){
      SWIG_fail_ptr("CGUObject_toCGGameEntity",1,SWIGTYPE_p_CGUObject);
    }
    
    result = (CGGameEntity *)(arg1)->toCGGameEntity();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntity,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static int _wrap_CGUObject_toUint(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGUObject *arg1 = 0 ;
    uint result;
    
    SWIG_check_num_args("CGUObject::toUint",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGUObject::toUint",1,"CGUObject *");
    
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGUObject,0))){
      SWIG_fail_ptr("CGUObject_toUint",1,SWIGTYPE_p_CGUObject);
    }
    
    result = (uint)(arg1)->toUint();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static void swig_delete_CGUObject(void *obj) {
CGUObject *arg1 = (CGUObject *) obj;
delete arg1;
}
static int _proxy__wrap_new_CGUObject(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CGUObject);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CGUObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CGUObject_methods[]= {
    { "toSmoother", _wrap_CGUObject_toSmoother},
    { "toCHUDLabel", _wrap_CGUObject_toCHUDLabel},
    { "toCGGameEntity", _wrap_CGUObject_toCGGameEntity},
    { "toUint", _wrap_CGUObject_toUint},
    {0,0}
};
static swig_lua_method swig_CGUObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CGUObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CGUObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CGUObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CGUObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CGUObject_Sf_SwigStatic = {
    "CGUObject",
    swig_CGUObject_Sf_SwigStatic_methods,
    swig_CGUObject_Sf_SwigStatic_attributes,
    swig_CGUObject_Sf_SwigStatic_constants,
    swig_CGUObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CGUObject_bases[] = {0};
static const char *swig_CGUObject_base_names[] = {0};
static swig_lua_class _wrap_class_CGUObject = { "CGUObject", "CGUObject", &SWIGTYPE_p_CGUObject,_proxy__wrap_new_CGUObject, swig_delete_CGUObject, swig_CGUObject_methods, swig_CGUObject_attributes, &swig_CGUObject_Sf_SwigStatic, swig_CGUObject_meta, swig_CGUObject_bases, swig_CGUObject_base_names };

static int _wrap_poThis(lua_State* L) {
  {
    int SWIG_arg = 0;
    CGGameEntity *result = 0 ;
    
    SWIG_check_num_args("poThis",0,0)
    result = (CGGameEntity *)poThis();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGGameEntity,0); SWIG_arg++; 
    return SWIG_arg;
    
    fail: SWIGUNUSED;
  }
  lua_error(L);
  return 0;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "MAX_CHARS", _wrap_MAX_CHARS_get, SWIG_Lua_set_immutable },
    { "glbAnimMesh_NormalGenerator", _wrap_glbAnimMesh_NormalGenerator_get, _wrap_glbAnimMesh_NormalGenerator_set },
    { "GEM_FILE_IDENTIFIER", _wrap_GEM_FILE_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_NULL_IDENTIFIER", _wrap_GEM_NULL_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_LEAF_IDENTIFIER", _wrap_GEM_LEAF_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_NODE_IDENTIFIER", _wrap_GEM_NODE_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_GROUP_IDENTIFIER", _wrap_GEM_GROUP_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_TRANSF_IDENTIFIER", _wrap_GEM_TRANSF_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_ANIMNODE_IDENTIFIER", _wrap_GEM_ANIMNODE_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_ANIMGROUP_IDENTIFIER", _wrap_GEM_ANIMGROUP_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_ANIMMESH_IDENTIFIER", _wrap_GEM_ANIMMESH_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_ANIMTRANSF_IDENTIFIER", _wrap_GEM_ANIMTRANSF_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_ANIMACTIONSET_IDENTIFIER", _wrap_GEM_ANIMACTIONSET_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_CAMERA_IDENTIFIER", _wrap_GEM_CAMERA_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_BSPNODE_IDENTIFIER", _wrap_GEM_BSPNODE_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_MUX_IDENTIFIER", _wrap_GEM_MUX_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "GEM_MESH_IDENTIFIER", _wrap_GEM_MESH_IDENTIFIER_get, SWIG_Lua_set_immutable },
    { "CMDBINDER_MAX_BINDABLE_KEYS", _wrap_CMDBINDER_MAX_BINDABLE_KEYS_get, SWIG_Lua_set_immutable },
    { "CCOL_ColState_SrcIPos", _wrap_CCOL_ColState_SrcIPos_get, _wrap_CCOL_ColState_SrcIPos_set },
    { "CCOL_ColState_SrcFPos", _wrap_CCOL_ColState_SrcFPos_get, _wrap_CCOL_ColState_SrcFPos_set },
    { "CCOL_ColState_DstIPos", _wrap_CCOL_ColState_DstIPos_get, _wrap_CCOL_ColState_DstIPos_set },
    { "CCOL_ColState_DstFPos", _wrap_CCOL_ColState_DstFPos_get, _wrap_CCOL_ColState_DstFPos_set },
    { "CCOL_ColState_SrcSp", _wrap_CCOL_ColState_SrcSp_get, _wrap_CCOL_ColState_SrcSp_set },
    { "CCOL_ColState_DstSp", _wrap_CCOL_ColState_DstSp_get, _wrap_CCOL_ColState_DstSp_set },
    { "CCOL_ColState_DSSp", _wrap_CCOL_ColState_DSSp_get, _wrap_CCOL_ColState_DSSp_set },
    { "CCOL_ColState_fDeltaT", _wrap_CCOL_ColState_fDeltaT_get, _wrap_CCOL_ColState_fDeltaT_set },
    { "CCOL_ColState_fMinColTime", _wrap_CCOL_ColState_fMinColTime_get, _wrap_CCOL_ColState_fMinColTime_set },
    { "CCOL_Scn_ColTester_SGrObj", _wrap_CCOL_Scn_ColTester_SGrObj_get, _wrap_CCOL_Scn_ColTester_SGrObj_set },
    { "CCOL_Scn_ColTester_DGrObj", _wrap_CCOL_Scn_ColTester_DGrObj_get, _wrap_CCOL_Scn_ColTester_DGrObj_set },
    { "CCOL_Scn_ColTester_iNumColMeshes", _wrap_CCOL_Scn_ColTester_iNumColMeshes_get, _wrap_CCOL_Scn_ColTester_iNumColMeshes_set },
    { "CCOL_Scn_ColTester_ColMeshes", _wrap_CCOL_Scn_ColTester_ColMeshes_get, _wrap_CCOL_Scn_ColTester_ColMeshes_set },
    { "CCOL_ST_Tris_Tri", _wrap_CCOL_ST_Tris_Tri_get, _wrap_CCOL_ST_Tris_Tri_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("NULL", (0))},
    {SWIG_LUA_CONSTTAB_FLOAT("_PI_", 3.1415926535897932384626433832795f)},
    {SWIG_LUA_CONSTTAB_FLOAT("_2PI_", 6.283185307179586476925286766558f)},
    {SWIG_LUA_CONSTTAB_FLOAT("_PI2_", 1.5707963267948966192313216916395f)},
    {SWIG_LUA_CONSTTAB_FLOAT("_PI_OVER_180_", 0.0174532925199432957692369076848833f)},
    {SWIG_LUA_CONSTTAB_FLOAT("_180_OVER_PI_", 57.2957795130823208767981548141052f)},
    {SWIG_LUA_CONSTTAB_FLOAT("_EPSILON_", 1e-5f)},
    {SWIG_LUA_CONSTTAB_FLOAT("_INFINITE_", 1e12f)},
    {SWIG_LUA_CONSTTAB_INT("BVT_NONE", (BVT_NONE))},
    {SWIG_LUA_CONSTTAB_INT("BVT_POINT", (BVT_POINT))},
    {SWIG_LUA_CONSTTAB_INT("BVT_SPHERE", (BVT_SPHERE))},
    {SWIG_LUA_CONSTTAB_INT("BVT_AABB", (BVT_AABB))},
    {SWIG_LUA_CONSTTAB_INT("BVT_CYLINDER", (BVT_CYLINDER))},
    {SWIG_LUA_CONSTTAB_INT("BVT_FRUSTUM", (BVT_FRUSTUM))},
    {SWIG_LUA_CONSTTAB_INT("BVT_NUMBVTs", (BVT_NUMBVTs))},
    {SWIG_LUA_CONSTTAB_INT("E3D_CM_Enable", (E3D_CM_Enable))},
    {SWIG_LUA_CONSTTAB_INT("E3D_CM_Disable", (E3D_CM_Disable))},
    {SWIG_LUA_CONSTTAB_INT("E3D_CM_Current", (E3D_CM_Current))},
    {SWIG_LUA_CONSTTAB_INT("E3D_CM_Last", (E3D_CM_Last))},
    {SWIG_LUA_CONSTTAB_INT("E3D_CM_NumCMs", (E3D_CM_NumCMs))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_None", (E3D_FM_None))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_Linear", (E3D_FM_Linear))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_Exp", (E3D_FM_Exp))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_Exp2", (E3D_FM_Exp2))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_Current", (E3D_FM_Current))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_Last", (E3D_FM_Last))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_NumFMs", (E3D_FM_NumFMs))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RB_None", (E3D_RB_None))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RB_Front", (E3D_RB_Front))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RB_Back", (E3D_RB_Back))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RB_Z", (E3D_RB_Z))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RB_Stencil", (E3D_RB_Stencil))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RB_NumTypes", (E3D_RB_NumTypes))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_None", (E3D_SA_None))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_Keep", (E3D_SA_Keep))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_Zero", (E3D_SA_Zero))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_Inc", (E3D_SA_Inc))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_Dec", (E3D_SA_Dec))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_Inv", (E3D_SA_Inv))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_Replace", (E3D_SA_Replace))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SA_NumSAs", (E3D_SA_NumSAs))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_None", (E3D_SF_None))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_Never", (E3D_SF_Never))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_Less", (E3D_SF_Less))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_LEqual", (E3D_SF_LEqual))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_Greater", (E3D_SF_Greater))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_GEqual", (E3D_SF_GEqual))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_Equal", (E3D_SF_Equal))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_NotEqual", (E3D_SF_NotEqual))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_Always", (E3D_SF_Always))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_Current", (E3D_SF_Current))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_Last", (E3D_SF_Last))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SF_NumSFs", (E3D_SF_NumSFs))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_None", (E3D_ZTF_None))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_Never", (E3D_ZTF_Never))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_Less", (E3D_ZTF_Less))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_LEqual", (E3D_ZTF_LEqual))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_Greater", (E3D_ZTF_Greater))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_GEqual", (E3D_ZTF_GEqual))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_Equal", (E3D_ZTF_Equal))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_NotEqual", (E3D_ZTF_NotEqual))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_Always", (E3D_ZTF_Always))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_Current", (E3D_ZTF_Current))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_Last", (E3D_ZTF_Last))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZTF_NumZTFs", (E3D_ZTF_NumZTFs))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZW_Enable", (E3D_ZW_Enable))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZW_Disable", (E3D_ZW_Disable))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZW_Current", (E3D_ZW_Current))},
    {SWIG_LUA_CONSTTAB_INT("E3D_ZW_Last", (E3D_ZW_Last))},
    {SWIG_LUA_CONSTTAB_INT("E3D_FM_NumZWs", (E3D_FM_NumZWs))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_NULL", (E3D_BM_NULL))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_Copy", (E3D_BM_Copy))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_Mult", (E3D_BM_Mult))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_Mult2x", (E3D_BM_Mult2x))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_Add", (E3D_BM_Add))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_AddAndMult", (E3D_BM_AddAndMult))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_MultAndAdd", (E3D_BM_MultAndAdd))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_Alpha", (E3D_BM_Alpha))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_AlphaAdd", (E3D_BM_AlphaAdd))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_AlphaInv", (E3D_BM_AlphaInv))},
    {SWIG_LUA_CONSTTAB_INT("E3D_BM_AlphaThrough", (E3D_BM_AlphaThrough))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_Perspective", (E3D_PT_Perspective))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_Orthogonal", (E3D_PT_Orthogonal))},
    {SWIG_LUA_CONSTTAB_INT("E3D_MT_None", (E3D_MT_None))},
    {SWIG_LUA_CONSTTAB_INT("E3D_MT_Mesh", (E3D_MT_Mesh))},
    {SWIG_LUA_CONSTTAB_INT("E3D_MT_CompiledMesh", (E3D_MT_CompiledMesh))},
    {SWIG_LUA_CONSTTAB_INT("E3D_MT_NumTypes", (E3D_MT_NumTypes))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_NONE", (E3D_PT_NONE))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_TRIS", (E3D_PT_TRIS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_QUADS", (E3D_PT_QUADS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_TRIFANS", (E3D_PT_TRIFANS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_TRISTRIPS", (E3D_PT_TRISTRIPS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_QUADSTRIPS", (E3D_PT_QUADSTRIPS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_NITRIS", (E3D_PT_NITRIS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_NIQUADS", (E3D_PT_NIQUADS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_NITRISTRIP", (E3D_PT_NITRISTRIP))},
    {SWIG_LUA_CONSTTAB_INT("E3D_PT_NUM_MESHTYPES", (E3D_PT_NUM_MESHTYPES))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RENDERER_OP_DBUFFER", (0x00000001))},
    {SWIG_LUA_CONSTTAB_INT("E3D_RENDERER_OP_STEREO", (0x00000004))},
    {SWIG_LUA_CONSTTAB_INT("CGGraphBV_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_VERTEXS", (0x00000001))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_UVCOORDS", (0x00000002))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_VNORMALS", (0x00000004))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_COLORS", (0x00000010))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_INDEXES", (0x00000020))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_TNORMALS", (0x00000040))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_UVCOORD2", (0x00000080))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_ALL", (0x0000003f))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_MULTITEX", (0x000000bf))},
    {SWIG_LUA_CONSTTAB_INT("MESH_FIELD_COMPLETE", (0x000000ff))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_NULL", (E3D_SHI_NULL))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_Texture", (E3D_SHI_Texture))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_Color", (E3D_SHI_Color))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_Wireframe", (E3D_SHI_Wireframe))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_Extension", (E3D_SHI_Extension))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_GeoOp", (E3D_SHI_GeoOp))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_TexOp", (E3D_SHI_TexOp))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_BlendOp", (E3D_SHI_BlendOp))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_SetTMU", (E3D_SHI_SetTMU))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_Program", (E3D_SHI_Program))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_ZOp", (E3D_SHI_ZOp))},
    {SWIG_LUA_CONSTTAB_INT("E3D_SHI_NumInsts", (E3D_SHI_NumInsts))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpNULL", (ESITexOpNULL))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpRotate", (ESITexOpRotate))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpScale", (ESITexOpScale))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpScaleU", (ESITexOpScaleU))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpScaleV", (ESITexOpScaleV))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpTransU", (ESITexOpTransU))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpTransV", (ESITexOpTransV))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpReflectMap", (ESITexOpReflectMap))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpEnvMap", (ESITexOpEnvMap))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpMatrix", (ESITexOpMatrix))},
    {SWIG_LUA_CONSTTAB_INT("ESITexOpFrameSet", (ESITexOpFrameSet))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpNULL", (ESIGeoOpNULL))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpRotateX", (ESIGeoOpRotateX))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpRotateY", (ESIGeoOpRotateY))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpRotateZ", (ESIGeoOpRotateZ))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpScale", (ESIGeoOpScale))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpScaleX", (ESIGeoOpScaleX))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpScaleY", (ESIGeoOpScaleY))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpScaleZ", (ESIGeoOpScaleZ))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpTransX", (ESIGeoOpTransX))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpTransY", (ESIGeoOpTransY))},
    {SWIG_LUA_CONSTTAB_INT("ESIGeoOpTransZ", (ESIGeoOpTransZ))},
    {SWIG_LUA_CONSTTAB_INT("IF_NONE", (IF_NONE))},
    {SWIG_LUA_CONSTTAB_INT("IF_PALETTE", (IF_PALETTE))},
    {SWIG_LUA_CONSTTAB_INT("IF_RGB16", (IF_RGB16))},
    {SWIG_LUA_CONSTTAB_INT("IF_RGBA16", (IF_RGBA16))},
    {SWIG_LUA_CONSTTAB_INT("IF_RGB", (IF_RGB))},
    {SWIG_LUA_CONSTTAB_INT("IF_RGBA", (IF_RGBA))},
    {SWIG_LUA_CONSTTAB_INT("IF_S3TC", (IF_S3TC))},
    {SWIG_LUA_CONSTTAB_INT("IF_JPEG", (IF_JPEG))},
    {SWIG_LUA_CONSTTAB_INT("IF_NUMFORMATS", (IF_NUMFORMATS))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_WRAP_CLAMP", (0x00))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_WRAP_REPEAT", (0x01))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MIN_FILTER_NEAREST", (0x01))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MIN_FILTER_LINEAR", (0x02))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MIN_FILTER_NEAREST_MIPMAP_NEAREST", (0x03))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MIN_FILTER_NEAREST_MIPMAP_LINEAR", (0x04))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MIN_FILTER_LINEAR_MIPMAP_NEAREST", (0x05))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MIN_FILTER_LINEAR_MIPMAP_LINEAR", (0x06))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MAX_FILTER_NEAREST", (0x01))},
    {SWIG_LUA_CONSTTAB_INT("E3D_TEX_MAX_FILTER_LINEAR", (0x02))},
    {SWIG_LUA_CONSTTAB_INT("SHFLAG_UNDEFINEDFLAGS", (0x80000000))},
    {SWIG_LUA_CONSTTAB_INT("SHFLAG_TRANSPARENT", (0x00000001))},
    {SWIG_LUA_CONSTTAB_INT("LT_None", (LT_None))},
    {SWIG_LUA_CONSTTAB_INT("LT_Point", (LT_Point))},
    {SWIG_LUA_CONSTTAB_INT("LT_Directional", (LT_Directional))},
    {SWIG_LUA_CONSTTAB_INT("LT_Spot", (LT_Spot))},
    {SWIG_LUA_CONSTTAB_INT("CGGraphBVSphereh", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGraphBVCylinderH", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGraphBVPointH", (1))},
    {SWIG_LUA_CONSTTAB_INT("GScene_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SNT_NULL", (SNT_NULL))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Node", (SNT_Node))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Leaf", (SNT_Leaf))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Group", (SNT_Group))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Transf", (SNT_Transf))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Anim_Begin", (SNT_Anim_Begin))},
    {SWIG_LUA_CONSTTAB_INT("SNT_AnimNode", (SNT_AnimNode))},
    {SWIG_LUA_CONSTTAB_INT("SNT_AnimGroup", (SNT_AnimGroup))},
    {SWIG_LUA_CONSTTAB_INT("SNT_AnimMesh", (SNT_AnimMesh))},
    {SWIG_LUA_CONSTTAB_INT("SNT_AnimTransf", (SNT_AnimTransf))},
    {SWIG_LUA_CONSTTAB_INT("SNT_AnimActionSet", (SNT_AnimActionSet))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Anim_End", (SNT_Anim_End))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Camera", (SNT_Camera))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Mux", (SNT_Mux))},
    {SWIG_LUA_CONSTTAB_INT("SNT_BSPNode", (SNT_BSPNode))},
    {SWIG_LUA_CONSTTAB_INT("SNT_ScreenRect", (SNT_ScreenRect))},
    {SWIG_LUA_CONSTTAB_INT("SNT_Switch", (SNT_Switch))},
    {SWIG_LUA_CONSTTAB_INT("MAX_TRIMESHOBJS", (4096))},
    {SWIG_LUA_CONSTTAB_INT("GSceneUtils_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriScene_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_Triangle_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_ePolyState_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_NONE", (POLYSTATE_NONE))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_FRONT", (POLYSTATE_FRONT))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_BACK", (POLYSTATE_BACK))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_OVER", (POLYSTATE_OVER))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_ONEOVER", (POLYSTATE_ONEOVER))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_TWOOVER", (POLYSTATE_TWOOVER))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_CROSS1", (POLYSTATE_CROSS1))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_CROSS2", (POLYSTATE_CROSS2))},
    {SWIG_LUA_CONSTTAB_INT("POLYSTATE_NUMSTATES", (POLYSTATE_NUMSTATES))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriSceneAccumulator_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_MaterialTable_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriSceneLoader_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriSceneSaver_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriSceneSeparator_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_MeshCompacter_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriSceneClassifier_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriSceneSplitter_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TriUtils_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_MeshGenerator_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_AnimMesh_NormalComputer_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_ShaderAssigner_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_PlanarMapper_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_TransformTriScene_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_ComputeBoundingBox_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_BSPBuilder_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_OctreeBuilder_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_SceneBuilder_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_Mesh2TriScene_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_Scn2TriScnBuilder_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_Stripifier_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_AdjTriListBuilder_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_AdjTriList_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_AdjTri_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_EdgeBuilder_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_EdgeList_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_Edge_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_SceneCompiler_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_CoplanarRemover_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_VisibilityTester_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SCNUt_AnimSceneLoader_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("BOTH_DEATH1", (BOTH_DEATH1))},
    {SWIG_LUA_CONSTTAB_INT("BOTH_DEAD1", (BOTH_DEAD1))},
    {SWIG_LUA_CONSTTAB_INT("BOTH_DEATH2", (BOTH_DEATH2))},
    {SWIG_LUA_CONSTTAB_INT("BOTH_DEAD2", (BOTH_DEAD2))},
    {SWIG_LUA_CONSTTAB_INT("BOTH_DEATH3", (BOTH_DEATH3))},
    {SWIG_LUA_CONSTTAB_INT("BOTH_DEAD3", (BOTH_DEAD3))},
    {SWIG_LUA_CONSTTAB_INT("TORSO_GESTURE", (TORSO_GESTURE))},
    {SWIG_LUA_CONSTTAB_INT("TORSO_ATTACK", (TORSO_ATTACK))},
    {SWIG_LUA_CONSTTAB_INT("TORSO_ATTACK2", (TORSO_ATTACK2))},
    {SWIG_LUA_CONSTTAB_INT("TORSO_DROP", (TORSO_DROP))},
    {SWIG_LUA_CONSTTAB_INT("TORSO_RAISE", (TORSO_RAISE))},
    {SWIG_LUA_CONSTTAB_INT("TORSO_STAND", (TORSO_STAND))},
    {SWIG_LUA_CONSTTAB_INT("TORSO_STAND2", (TORSO_STAND2))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_WALKCR", (LEGS_WALKCR))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_WALK", (LEGS_WALK))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_RUN", (LEGS_RUN))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_BACK", (LEGS_BACK))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_SWIM", (LEGS_SWIM))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_JUMP", (LEGS_JUMP))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_LAND", (LEGS_LAND))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_JUMPB", (LEGS_JUMPB))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_LANDB", (LEGS_LANDB))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_IDLE", (LEGS_IDLE))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_IDLECR", (LEGS_IDLECR))},
    {SWIG_LUA_CONSTTAB_INT("LEGS_TURN", (LEGS_TURN))},
    {SWIG_LUA_CONSTTAB_INT("MAX_ANIMATIONS", (MAX_ANIMATIONS))},
    {SWIG_LUA_CONSTTAB_INT("CLoaderBSP2H", (1))},
    {SWIG_LUA_CONSTTAB_INT("BSP_ENTITITES_LUMP", (0))},
    {SWIG_LUA_CONSTTAB_INT("BSP_PLANES_LUMP", (1))},
    {SWIG_LUA_CONSTTAB_INT("BSP_VERTEXS_LUMP", (2))},
    {SWIG_LUA_CONSTTAB_INT("BSP_VIS_LUMP", (3))},
    {SWIG_LUA_CONSTTAB_INT("BSP_NODES_LUMP", (4))},
    {SWIG_LUA_CONSTTAB_INT("BSP_TEXINFO_LUMP", (5))},
    {SWIG_LUA_CONSTTAB_INT("BSP_FACES_LUMP", (6))},
    {SWIG_LUA_CONSTTAB_INT("BSP_LMAPS_LUMP", (7))},
    {SWIG_LUA_CONSTTAB_INT("BSP_LEAVES_LUMP", (8))},
    {SWIG_LUA_CONSTTAB_INT("BSP_LFT_LUMP", (9))},
    {SWIG_LUA_CONSTTAB_INT("BSP_LBT_LUMP", (10))},
    {SWIG_LUA_CONSTTAB_INT("BSP_EDGES_LUMP", (11))},
    {SWIG_LUA_CONSTTAB_INT("BSP_FET_LUMP", (12))},
    {SWIG_LUA_CONSTTAB_INT("BSP_MODELS_LUMP", (13))},
    {SWIG_LUA_CONSTTAB_INT("BSP_BRUSHES_LUMP", (14))},
    {SWIG_LUA_CONSTTAB_INT("BSP_BSIDES_LUMP", (15))},
    {SWIG_LUA_CONSTTAB_INT("BSP_POP_LUMP", (16))},
    {SWIG_LUA_CONSTTAB_INT("BSP_AREAS_LUMP", (17))},
    {SWIG_LUA_CONSTTAB_INT("BSP_APORTALS_LUMP", (18))},
    {SWIG_LUA_CONSTTAB_INT("FOM_NONE", (FOM_NONE))},
    {SWIG_LUA_CONSTTAB_INT("FOM_READ", (FOM_READ))},
    {SWIG_LUA_CONSTTAB_INT("FOM_WRITE", (FOM_WRITE))},
    {SWIG_LUA_CONSTTAB_INT("FOM_NUM", (FOM_NUM))},
    {SWIG_LUA_CONSTTAB_INT("FSM_NONE", (FSM_NONE))},
    {SWIG_LUA_CONSTTAB_INT("FSM_SET", (FSM_SET))},
    {SWIG_LUA_CONSTTAB_INT("FSM_CUR", (FSM_CUR))},
    {SWIG_LUA_CONSTTAB_INT("FSM_END", (FSM_END))},
    {SWIG_LUA_CONSTTAB_INT("FSM_NUM", (FSM_NUM))},
    {SWIG_LUA_CONSTTAB_INT("RES_OP_OK", (RES_OP_OK))},
    {SWIG_LUA_CONSTTAB_INT("RES_OP_ERROR", (RES_OP_ERROR))},
    {SWIG_LUA_CONSTTAB_INT("RES_OP_WARNING", (RES_OP_WARNING))},
    {SWIG_LUA_CONSTTAB_INT("GEM_MAJOR_VERSION", (1))},
    {SWIG_LUA_CONSTTAB_INT("GEM_MINOR_VERSION", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGraphBVFileIOH", (1))},
    {SWIG_LUA_CONSTTAB_INT("CConsole_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CHUD_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSkyDome_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSkyBox_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLensFlare_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLensFlare_Elem_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGSceneReflector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CDetailer_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTexProjector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CShadowCaster_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("MAX_LINE_CHARS", (64))},
    {SWIG_LUA_CONSTTAB_INT("MAX_MSG_LINES", (128))},
    {SWIG_LUA_CONSTTAB_INT("ENTSTATE_NONE", (ENTSTATE_NONE))},
    {SWIG_LUA_CONSTTAB_INT("ENTSTATE_IDLE", (ENTSTATE_IDLE))},
    {SWIG_LUA_CONSTTAB_INT("ENTSTATE_INIT", (ENTSTATE_INIT))},
    {SWIG_LUA_CONSTTAB_INT("ENTSTATE_DEAD", (ENTSTATE_DEAD))},
    {SWIG_LUA_CONSTTAB_INT("ENTSTATE_ALIVE", (ENTSTATE_ALIVE))},
    {SWIG_LUA_CONSTTAB_INT("ENTSTATE_UNUSED", (ENTSTATE_UNUSED))},
    {SWIG_LUA_CONSTTAB_INT("ENTSTATE_LASTSTATE", (ENTSTATE_LASTSTATE))},
    {SWIG_LUA_CONSTTAB_INT("CGGameEntityMgr_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGGameApplication_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("GAPPST_INIT", (GAPPST_INIT))},
    {SWIG_LUA_CONSTTAB_INT("GAPPST_OPENING", (GAPPST_OPENING))},
    {SWIG_LUA_CONSTTAB_INT("GAPPST_OPEN", (GAPPST_OPEN))},
    {SWIG_LUA_CONSTTAB_INT("GAPPST_CLOSING", (GAPPST_CLOSING))},
    {SWIG_LUA_CONSTTAB_INT("GAPPST_CLOSED", (GAPPST_CLOSED))},
    {SWIG_LUA_CONSTTAB_INT("CGameConsoleApp_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGGameCommandInterpreter_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("ECIState_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CIS_None", (CIS_None))},
    {SWIG_LUA_CONSTTAB_INT("CIS_Delay", (CIS_Delay))},
    {SWIG_LUA_CONSTTAB_INT("CIS_Running", (CIS_Running))},
    {SWIG_LUA_CONSTTAB_INT("CIS_Ready", (CIS_Ready))},
    {SWIG_LUA_CONSTTAB_INT("CIS_NumStates", (CIS_NumStates))},
    {SWIG_LUA_CONSTTAB_INT("CGGCICommands_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGGameExtendedCI_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGGCIExtendedCommands_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("GM_SKILLHARD", (20))},
    {SWIG_LUA_CONSTTAB_INT("GM_SKILLMEDIUM", (10))},
    {SWIG_LUA_CONSTTAB_INT("GM_SKILLEASY", (0))},
    {SWIG_LUA_CONSTTAB_INT("GM_STATE_NONE", (GM_STATE_NONE))},
    {SWIG_LUA_CONSTTAB_INT("GM_STATE_INIT", (GM_STATE_INIT))},
    {SWIG_LUA_CONSTTAB_INT("GM_STATE_FINISH", (GM_STATE_FINISH))},
    {SWIG_LUA_CONSTTAB_INT("GM_STATE_RUN", (GM_STATE_RUN))},
    {SWIG_LUA_CONSTTAB_INT("GM_STATE_PAUSED", (GM_STATE_PAUSED))},
    {SWIG_LUA_CONSTTAB_INT("GM_STATE_NUMGMSTATES", (GM_STATE_NUMGMSTATES))},
    {SWIG_LUA_CONSTTAB_INT("CGScriptingSystem_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("GSfx_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGBillboardRenderer_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGBillboard_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGBillboard_AxisAlign_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGBillboard_ScrAlign_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGBillboard_WorldAlign_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGParticleSystemInstance_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGParticleSystemGenerator_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGParticle_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGPSGGeneric_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGPSGGenericQuad_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGPSGGenericQuadOrbit_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGTrailInstance_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGTrail_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGTrailGenerator_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGTrailGenStd_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGTrailManager_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGCoronaInstance_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGCorona_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGCoronaGenerator_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CGCoronaGenStd_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CF_None", (CF_None))},
    {SWIG_LUA_CONSTTAB_INT("CF_Sin", (CF_Sin))},
    {SWIG_LUA_CONSTTAB_INT("CF_NumFuncs", (CF_NumFuncs))},
    {SWIG_LUA_CONSTTAB_INT("CGCoronaManager_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTileBookmark_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTerrainCircuit_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLODSelector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTerrainSector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTerrainTesselator_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSectElem_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CColor_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CHeight_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLightElem_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTile_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("eGM_Nearest", (eGM_Nearest))},
    {SWIG_LUA_CONSTTAB_INT("eGM_Linear", (eGM_Linear))},
    {SWIG_LUA_CONSTTAB_INT("eGM_CosLinear", (eGM_CosLinear))},
    {SWIG_LUA_CONSTTAB_INT("eGM_NumGenMethods", (eGM_NumGenMethods))},
    {SWIG_LUA_CONSTTAB_INT("CTexSector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTMSector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CHFSector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLMSector_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CHFSector_FN_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLMSector_Gray_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLMSector_Pal_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLMSector_RGB24_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTMSector_8_16_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSectorMatrix_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSectorLoaderManager_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CHeightField_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSLM_HFieldSect_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLightMap_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSLM_LMapSect_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTexMap_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CSLM_TMapSect_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("TEXSET_MAJOR_VERSION", (1))},
    {SWIG_LUA_CONSTTAB_INT("TEXSET_MINOR_VERSION", (0))},
    {SWIG_LUA_CONSTTAB_INT("TEXSET_OBJ_IDENTIFIER", ((('T')|('S' << 8)|('E' << 16)|('T' << 24))))},
    {SWIG_LUA_CONSTTAB_INT("TEXSET_MAX_TEXTURES", (256))},
    {SWIG_LUA_CONSTTAB_INT("MAX_CARS", (256))},
    {SWIG_LUA_CONSTTAB_INT("MAX_CARS_TEXSET_NAME", (80))},
    {SWIG_LUA_CONSTTAB_STRING("TEXSET_DEFAULT_TEXSET_NAME", "Unnamed TexSet")},
    {SWIG_LUA_CONSTTAB_INT("TERSceneLoader_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CLODSelector_Array_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CTerrainTesselatorGM_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("GCollision_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_CollisionSystem_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_Collider_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("ECOL_TestType_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("COL_TT_None", (COL_TT_None))},
    {SWIG_LUA_CONSTTAB_INT("COL_TT_BV", (COL_TT_BV))},
    {SWIG_LUA_CONSTTAB_INT("COL_TT_Tris", (COL_TT_Tris))},
    {SWIG_LUA_CONSTTAB_INT("COL_TT_NumTestTypes", (COL_TT_NumTestTypes))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_Stack_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("ECOL_ColliderType_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("COL_CT_None", (COL_CT_None))},
    {SWIG_LUA_CONSTTAB_INT("COL_CT_Dynamic", (COL_CT_Dynamic))},
    {SWIG_LUA_CONSTTAB_INT("COL_CT_Static", (COL_CT_Static))},
    {SWIG_LUA_CONSTTAB_INT("COL_CT_NumColliderTypes", (COL_CT_NumColliderTypes))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_TriListGen_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_TriList_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_MeshTester_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_ColState_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_DT_Tri_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_DT_ColTester_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_MT_CommonMesh_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_TriList_BVRayTest_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_Scn_TriListGen_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_TRN_TriListGen_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_MT_TerrainMesh_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_Scn_ColTester_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_ST_ColTester_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_ST_Point_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_ST_Sphere_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_ST_Box_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_Mesh_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_ST_Tris_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_DT_Box_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_DT_Sphere_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("CCOL_DT_Point_h", (1))},
    {SWIG_LUA_CONSTTAB_INT("SHIFT", (0))},
    {SWIG_LUA_CONSTTAB_INT("TILESIZE", (1))},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "uiCRCGenerate", _wrap_uiCRCGenerate},
    { "CreateString", _wrap_CreateString},
    { "ReadFile", _wrap_ReadFile},
    { "SkipLine", _wrap_SkipLine},
    { "ParseToken", _wrap_ParseToken},
    { "ParseLine", _wrap_ParseLine},
    { "PreprocessString", _wrap_PreprocessString},
    { "NextToken", _wrap_NextToken},
    { "NextQuotedToken", _wrap_NextQuotedToken},
    { "NextLine", _wrap_NextLine},
    { "ParseSentence", _wrap_ParseSentence},
    { "ParseParameters", _wrap_ParseParameters},
    { "ExtractFileDir", _wrap_ExtractFileDir},
    { "ExtractFileName", _wrap_ExtractFileName},
    { "ExtractShortFileName", _wrap_ExtractShortFileName},
    { "fRand", _wrap_fRand},
    { "fSRand", _wrap_fSRand},
    { "fSqrt", _wrap_fSqrt},
    { "fSin", _wrap_fSin},
    { "fCos", _wrap_fCos},
    { "fTan", _wrap_fTan},
    { "fArcTan", _wrap_fArcTan},
    { "fAbs", _wrap_fAbs},
    { "fSign", _wrap_fSign},
    { "bInRange", _wrap_bInRange},
    { "bEqual", _wrap_bEqual},
    { "fClamp", _wrap_fClamp},
    { "fMin", _wrap_fMin},
    { "fMax", _wrap_fMax},
    { "fMod", _wrap_fMod},
    { "fFloor", _wrap_fFloor},
    { "fCeil", _wrap_fCeil},
    { "fLerp", _wrap_fLerp},
    { "CGVect3_oZero", _wrap_CGVect3_oZero},
    { "CGVect3_oX", _wrap_CGVect3_oX},
    { "CGVect3_oY", _wrap_CGVect3_oY},
    { "CGVect3_oZ", _wrap_CGVect3_oZ},
    { "GetPNVertexs", _wrap_GetPNVertexs},
    { "iTestBoxPlane", _wrap_iTestBoxPlane},
    { "iTestSpherePlane", _wrap_iTestSpherePlane},
    { "iTestPointPlane", _wrap_iTestPointPlane},
    { "fTriPointDistance", _wrap_fTriPointDistance},
    { "fTriPointSqDistance", _wrap_fTriPointSqDistance},
    { "oNearestTriPoint", _wrap_oNearestTriPoint},
    { "GetMaxMins", _wrap_GetMaxMins},
    { "iTestRayTriIntersection", _wrap_iTestRayTriIntersection},
    { "iTestSegTriIntersection", _wrap_iTestSegTriIntersection},
    { "fGetT", _wrap_fGetT},
    { "iPointInsideTriangle", _wrap_iPointInsideTriangle},
    { "iTest3PlaneIntersection", _wrap_iTest3PlaneIntersection},
    { "iTest2PlaneIntersection", _wrap_iTest2PlaneIntersection},
    { "iTestRayAABBIntersection", _wrap_iTestRayAABBIntersection},
    { "bBVsIntersect", _wrap_bBVsIntersect},
    { "bBVIntersectFrustum", _wrap_bBVIntersectFrustum},
    { "CGRenderer_I", _wrap_CGRenderer_I},
    { "ComputePrimitiveNormals", _wrap_ComputePrimitiveNormals},
    { "ComputeVertexNormals", _wrap_ComputeVertexNormals},
    { "ComputeUVOrthoMapping", _wrap_ComputeUVOrthoMapping},
    { "TranslateMesh", _wrap_TranslateMesh},
    { "ScaleMesh", _wrap_ScaleMesh},
    { "RotateMesh", _wrap_RotateMesh},
    { "TransformMesh", _wrap_TransformMesh},
    { "poComputeBV", _wrap_poComputeBV},
    { "poComputeBVAABB", _wrap_poComputeBVAABB},
    { "poComputeBVSphere", _wrap_poComputeBVSphere},
    { "CGShaderExtDB_AddExtension", _wrap_CGShaderExtDB_AddExtension},
    { "CGShaderExtDB_pGetExtension", _wrap_CGShaderExtDB_pGetExtension},
    { "CGShaderExtDB_Invalidate", _wrap_CGShaderExtDB_Invalidate},
    { "CGShaderParser_poCreateShaderFromTexture", _wrap_CGShaderParser_poCreateShaderFromTexture},
    { "CGShaderParser_poParseShader", _wrap_CGShaderParser_poParseShader},
    { "CGShaderUtils_poGenerateShaderFromMipMap", _wrap_CGShaderUtils_poGenerateShaderFromMipMap},
    { "CGShaderUtils_poGenerateShaderFromColor", _wrap_CGShaderUtils_poGenerateShaderFromColor},
    { "CGShaderUtils_SetupTilingFlags", _wrap_CGShaderUtils_SetupTilingFlags},
    { "CGShaderUtils_SetupFilterFlags", _wrap_CGShaderUtils_SetupFilterFlags},
    { "CGGraphBVFactory_poCreate", _wrap_CGGraphBVFactory_poCreate},
    { "CGGraphBVFactory_SetBVMode", _wrap_CGGraphBVFactory_SetBVMode},
    { "CGGraphBVFactory_eGetBVMode", _wrap_CGGraphBVFactory_eGetBVMode},
    { "SCNUt_TriUtils_MinimizeMappingOffset", _wrap_SCNUt_TriUtils_MinimizeMappingOffset},
    { "SCNUt_TriUtils_ChangeWinding", _wrap_SCNUt_TriUtils_ChangeWinding},
    { "SCNUt_TriUtils_GetQ2UVCoords", _wrap_SCNUt_TriUtils_GetQ2UVCoords},
    { "CGFileUtils_BeginRIFFBlock", _wrap_CGFileUtils_BeginRIFFBlock},
    { "CGFileUtils_EndRIFFBlock", _wrap_CGFileUtils_EndRIFFBlock},
    { "GEMFile_Translate_TypeID2FileID", _wrap_GEMFile_Translate_TypeID2FileID},
    { "GEMFile_Translate_FileID2TypeID2", _wrap_GEMFile_Translate_FileID2TypeID2},
    { "CGGraphBVFileIO_pLoadGraphBV", _wrap_CGGraphBVFileIO_pLoadGraphBV},
    { "CGGraphBVFileIO_iSaveGraphBV", _wrap_CGGraphBVFileIO_iSaveGraphBV},
    { "CCOL_DT_Tri_fTestSphere", _wrap_CCOL_DT_Tri_fTestSphere},
    { "CCOL_DT_Tri_fTestBox", _wrap_CCOL_DT_Tri_fTestBox},
    { "CCOL_DT_Tri_fTestPoint", _wrap_CCOL_DT_Tri_fTestPoint},
    { "CCOL_DT_ColTester_fTestCollision", _wrap_CCOL_DT_ColTester_fTestCollision},
    { "CCOL_DT_ColTester_fTestPlane", _wrap_CCOL_DT_ColTester_fTestPlane},
    { "CCOL_DT_ColTester_fTestTriangle", _wrap_CCOL_DT_ColTester_fTestTriangle},
    { "CCOL_TriList_BVRayTest_Test", _wrap_CCOL_TriList_BVRayTest_Test},
    { "CCOL_TRN_TriListGen_GetHeight", _wrap_CCOL_TRN_TriListGen_GetHeight},
    { "CCOL_TRN_TriListGen_Init", _wrap_CCOL_TRN_TriListGen_Init},
    { "CCOL_TRN_TriListGen_SetSector", _wrap_CCOL_TRN_TriListGen_SetSector},
    { "CCOL_ST_Point_iTestSphere", _wrap_CCOL_ST_Point_iTestSphere},
    { "CCOL_ST_Point_iTestBox", _wrap_CCOL_ST_Point_iTestBox},
    { "CCOL_ST_Point_iTestPoint", _wrap_CCOL_ST_Point_iTestPoint},
    { "CCOL_ST_Box_iTestSphere", _wrap_CCOL_ST_Box_iTestSphere},
    { "CCOL_ST_Box_iTestBox", _wrap_CCOL_ST_Box_iTestBox},
    { "CCOL_ST_Box_iTestPoint", _wrap_CCOL_ST_Box_iTestPoint},
    { "CCOL_ST_Sphere_iTestSphere", _wrap_CCOL_ST_Sphere_iTestSphere},
    { "CCOL_ST_Sphere_iTestBox", _wrap_CCOL_ST_Sphere_iTestBox},
    { "CCOL_ST_Sphere_iTestPoint", _wrap_CCOL_ST_Sphere_iTestPoint},
    { "CCOL_ST_ColTester_iTestCollision", _wrap_CCOL_ST_ColTester_iTestCollision},
    { "CCOL_ST_ColTester_iTestPlane", _wrap_CCOL_ST_ColTester_iTestPlane},
    { "CCOL_Scn_ColTester_iTestObjects", _wrap_CCOL_Scn_ColTester_iTestObjects},
    { "CCOL_Scn_ColTester_iTest3DObj_Rec", _wrap_CCOL_Scn_ColTester_iTest3DObj_Rec},
    { "CCOL_Scn_ColTester_iTest3DObj", _wrap_CCOL_Scn_ColTester_iTest3DObj},
    { "CCOL_Scn_ColTester_iTest3DObj_Node", _wrap_CCOL_Scn_ColTester_iTest3DObj_Node},
    { "CCOL_Scn_ColTester_iTest3DObj_Transf", _wrap_CCOL_Scn_ColTester_iTest3DObj_Transf},
    { "CCOL_Scn_ColTester_iTest3DObj_Leaf", _wrap_CCOL_Scn_ColTester_iTest3DObj_Leaf},
    { "CCOL_Scn_ColTester_iTest3DObj_BSPNode", _wrap_CCOL_Scn_ColTester_iTest3DObj_BSPNode},
    { "CCOL_ST_Tris_iTestCollision", _wrap_CCOL_ST_Tris_iTestCollision},
    { "CCOL_ST_Tris_iTestCollisionSphere", _wrap_CCOL_ST_Tris_iTestCollisionSphere},
    { "CCOL_ST_Tris_iTestCollisionBox", _wrap_CCOL_ST_Tris_iTestCollisionBox},
    { "CCOL_ST_Tris_iTestCollisionRay", _wrap_CCOL_ST_Tris_iTestCollisionRay},
    { "CCOL_ST_Tris_iTestTriangleSphere", _wrap_CCOL_ST_Tris_iTestTriangleSphere},
    { "CCOL_ST_Tris_iTestTriangleBox", _wrap_CCOL_ST_Tris_iTestTriangleBox},
    { "CCOL_ST_Tris_iTestTriangleRay", _wrap_CCOL_ST_Tris_iTestTriangleRay},
    { "CCOL_DT_Box_fTestSphere", _wrap_CCOL_DT_Box_fTestSphere},
    { "CCOL_DT_Box_fTestBox", _wrap_CCOL_DT_Box_fTestBox},
    { "CCOL_DT_Box_fTestPoint", _wrap_CCOL_DT_Box_fTestPoint},
    { "CCOL_DT_Box_iGetCollisionAxis", _wrap_CCOL_DT_Box_iGetCollisionAxis},
    { "CCOL_DT_Sphere_fTestSphere", _wrap_CCOL_DT_Sphere_fTestSphere},
    { "CCOL_DT_Sphere_fTestBox", _wrap_CCOL_DT_Sphere_fTestBox},
    { "CCOL_DT_Sphere_fTestPoint", _wrap_CCOL_DT_Sphere_fTestPoint},
    { "CCOL_DT_Point_fTestSphere", _wrap_CCOL_DT_Point_fTestSphere},
    { "CCOL_DT_Point_fTestBox", _wrap_CCOL_DT_Point_fTestBox},
    { "CCOL_DT_Point_fTestPoint", _wrap_CCOL_DT_Point_fTestPoint},
    { "DebugPrint", _wrap_DebugPrint},
    { "DebugClear", _wrap_DebugClear},
    { "CallExtension", _wrap_CallExtension},
    { "CGGameRegistry_oGetVar", _wrap_CGGameRegistry_oGetVar},
    { "SpawnEntity", _wrap_SpawnEntity},
    { "castto_uint", _wrap_castto_uint},
    { "castto_CSmoother", _wrap_castto_CSmoother},
    { "castto_CHUDLabel", _wrap_castto_CHUDLabel},
    { "castto_CGGameEntity", _wrap_castto_CGGameEntity},
    { "poThis", _wrap_poThis},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_CGString,
&_wrap_class_CGLogger,
&_wrap_class_CGLogChannel,
&_wrap_class_CGWarningLC,
&_wrap_class_CGReferenceCounter,
&_wrap_class_CGResource,
&_wrap_class_CGTextResource,
&_wrap_class_CGConfigFile,
&_wrap_class_CGChrono,
&_wrap_class_CGErrorLC,
&_wrap_class_CGStandardLC,
&_wrap_class_CGSystemLC,
&_wrap_class_CGEvaluator,
&_wrap_class_CGEvalPeriodic,
&_wrap_class_CGEvalTriangle,
&_wrap_class_CGEvalBinary,
&_wrap_class_CGEvalSum,
&_wrap_class_CGEvalMult,
&_wrap_class_CGEvalSin,
&_wrap_class_CGEvalSawTooth,
&_wrap_class_CGEvalSquare,
&_wrap_class_CGEvalCos,
&_wrap_class_CGEvalTime,
&_wrap_class_CGEvalConst,
&_wrap_class_CGBoundingVolume,
&_wrap_class_CGVect3,
&_wrap_class_CGBVAABB,
&_wrap_class_CGBVSphere,
&_wrap_class_CGBVPoint,
&_wrap_class_CGBVCylinder,
&_wrap_class_CGMatrix4x4,
&_wrap_class_CGPlane,
&_wrap_class_CGBVFrustum,
&_wrap_class_CGRay,
&_wrap_class_CGTriangle,
&_wrap_class_CGQuaternion,
&_wrap_class_CGSegment,
&_wrap_class_CGSmoother,
&_wrap_class_CG4PCurve,
&_wrap_class_CGCurve,
&_wrap_class_CGCurveDynamic,
&_wrap_class_CGRenderState,
&_wrap_class_CGRenderStats,
&_wrap_class_CGDefferredMeshEntry,
&_wrap_class_CGDefferredMeshDB,
&_wrap_class_CGColor,
&_wrap_class_CGE3DRenderer,
&_wrap_class_CGRenderer,
&_wrap_class_CGRenderVars,
&_wrap_class_CGViewport,
&_wrap_class_CGCamera,
&_wrap_class_CGProjector,
&_wrap_class_CGGraphBV,
&_wrap_class_CGBaseMesh,
&_wrap_class_CGMesh,
&_wrap_class_CGMeshBox,
&_wrap_class_CGMeshSphere,
&_wrap_class_CGMeshRect,
&_wrap_class_CGMeshCross,
&_wrap_class_CGCompiledMesh,
&_wrap_class_CGUnmanagedMesh,
&_wrap_class_CGShaderExtDB,
&_wrap_class_CGShaderInstruction,
&_wrap_class_CGShInsBlendOp,
&_wrap_class_CGShInsSetTMU,
&_wrap_class_CGShInsTexOp,
&_wrap_class_CGShInsGeoOp,
&_wrap_class_CGShInsWireframe,
&_wrap_class_CGShInsExtension,
&_wrap_class_CGShInsColor,
&_wrap_class_CGMipMap,
&_wrap_class_CGTextureObj,
&_wrap_class_CGShInsTexture,
&_wrap_class_CGProgram,
&_wrap_class_CGShInsProgram,
&_wrap_class_CGShInsZOp,
&_wrap_class_CGShaderDefWH,
&_wrap_class_CGShaderDefFileWH,
&_wrap_class_CGShader,
&_wrap_class_CGShaderWH,
&_wrap_class_CGShaderParser,
&_wrap_class_CGShaderUtils,
&_wrap_class_CGMipMapWH,
&_wrap_class_CGTexObjWH,
&_wrap_class_CGProgramWH,
&_wrap_class_CGLight,
&_wrap_class_CGGraphBVAABB,
&_wrap_class_CGGraphBVSphere,
&_wrap_class_CGGraphBVCylinder,
&_wrap_class_CGGraphBVPoint,
&_wrap_class_CGGraphBVFactory,
&_wrap_class_CGSceneVisitor,
&_wrap_class_CGSceneNode,
&_wrap_class_CGSceneBSPNode,
&_wrap_class_CGSceneGroup,
&_wrap_class_CGSceneCamera,
&_wrap_class_CGSceneTransf,
&_wrap_class_CGSceneInstance,
&_wrap_class_CGSceneLeaf,
&_wrap_class_CGSceneMux,
&_wrap_class_CGSceneScreenRect,
&_wrap_class_CGSceneSwitch,
&_wrap_class_CGSceneAnimNode,
&_wrap_class_CAnimAction,
&_wrap_class_CGSceneAnimActionSet,
&_wrap_class_CGSceneAnimGroup,
&_wrap_class_CGSceneAnimMesh,
&_wrap_class_CGSceneAnimTransf,
&_wrap_class_C3DLoader,
&_wrap_class_T3DS_Chunk,
&_wrap_class_CLoader3DS,
&_wrap_class_SCNUt_Triangle,
&_wrap_class_SCNUt_TriScene,
&_wrap_class_SCNUt_TriSceneAccumulator,
&_wrap_class_SCNUt_MaterialTable,
&_wrap_class_SCNUt_TriSceneLoader,
&_wrap_class_SCNUt_TriSceneSaver,
&_wrap_class_TVertexRef,
&_wrap_class_CCompactMeshData,
&_wrap_class_SCNUt_MeshCompacter,
&_wrap_class_SCNUt_TriSceneSeparator,
&_wrap_class_SCNUt_TriSceneClassifier,
&_wrap_class_SCNUt_TriUtils,
&_wrap_class_SCNUt_TriSceneSplitter,
&_wrap_class_SCNUt_MeshGenerator,
&_wrap_class_SCNUt_AnimMesh_NormalComputer,
&_wrap_class_SCNUt_ShaderAssigner,
&_wrap_class_SCNUt_TransformTriScene,
&_wrap_class_SCNUt_ComputeBoundingBox,
&_wrap_class_SCNUt_PlanarMapper,
&_wrap_class_SCNUt_BSPBuilder,
&_wrap_class_SCNUt_SceneBuilder,
&_wrap_class_SCNUt_OctreeBuilder,
&_wrap_class_SCNUt_Mesh2TriScene,
&_wrap_class_SCNUt_Scn2TriScnBuilder,
&_wrap_class_SCNUt_AdjTri,
&_wrap_class_SCNUt_AdjTriList,
&_wrap_class_SCNUt_AdjTriListBuilder,
&_wrap_class_SCNUt_Edge,
&_wrap_class_SCNUt_EdgeList,
&_wrap_class_SCNUt_EdgeBuilder,
&_wrap_class_SCNUt_Stripifier,
&_wrap_class_SCNUt_SceneCompiler,
&_wrap_class_SCNUt_CoplanarRemover,
&_wrap_class_SCNUt_VisibilityTester,
&_wrap_class_SCNUt_AnimSceneLoader,
&_wrap_class_model_t,
&_wrap_class_triangleVertex_t,
&_wrap_class_frame_t,
&_wrap_class_triangle_t,
&_wrap_class_textureCoordinate_t,
&_wrap_class_CLoaderMD2,
&_wrap_class_md3_header_t,
&_wrap_class_boneframe_t,
&_wrap_class_tag_t,
&_wrap_class_mesh_header_t,
&_wrap_class_skin_t,
&_wrap_class_skin_tag_entry_t,
&_wrap_class_skin_mesh_entry_t,
&_wrap_class_skin_file_t,
&_wrap_class_Q3triangle_t,
&_wrap_class_tex_coord_t,
&_wrap_class_vertice_t,
&_wrap_class_mesh_t,
&_wrap_class_anim_t,
&_wrap_class_CLoaderMD3,
&_wrap_class_bsp_point3f,
&_wrap_class_bsp_point3s,
&_wrap_class_bsp_lump,
&_wrap_class_bsp_header,
&_wrap_class_bsp_edge,
&_wrap_class_bsp_face,
&_wrap_class_bsp_face_edge,
&_wrap_class_bsp_plane,
&_wrap_class_bsp_node,
&_wrap_class_bsp_leaf,
&_wrap_class_bsp_leaf_face,
&_wrap_class_bsp_texinfo,
&_wrap_class_bsp_vis_offset,
&_wrap_class_bsp_vis,
&_wrap_class_ext_texinfo,
&_wrap_class_CLoaderBSP2,
&_wrap_class_CGFileSysManager,
&_wrap_class_CGFile,
&_wrap_class_CGOSFile,
&_wrap_class_CGFileSysMgrPAK,
&_wrap_class_CGFileSysMgrMultiPAK,
&_wrap_class_CGFileSysMgrZIP,
&_wrap_class_CGFileSysMgrMultiZIP,
&_wrap_class_CGFileUtils,
&_wrap_class_CLoaderGEM,
&_wrap_class_C3DSaver,
&_wrap_class_CSaverGEM,
&_wrap_class_CGSCNVBoundVolBuilder,
&_wrap_class_CGSCNVRenderer,
&_wrap_class_CGSCNVVisibilityChecker,
&_wrap_class_CGSCNVAnimUpdater,
&_wrap_class_CGGraphBVFileIO,
&_wrap_class_CHUDElem,
&_wrap_class_CHUD,
&_wrap_class_CConsole,
&_wrap_class_CSkyDome,
&_wrap_class_CSkyBox,
&_wrap_class_CLensFlare_Elem,
&_wrap_class_CLensFlare,
&_wrap_class_CGSceneReflector,
&_wrap_class_CDetailer,
&_wrap_class_CTexProjector,
&_wrap_class_CShadowCaster,
&_wrap_class_CHUDObject,
&_wrap_class_CHUDIcon,
&_wrap_class_CHUDFont,
&_wrap_class_CHUDLabel,
&_wrap_class_CHUDProgressBar,
&_wrap_class_CHUDFontWH,
&_wrap_class_CMenuTextGrid,
&_wrap_class_TMsgLine,
&_wrap_class_CHUDMsgBox,
&_wrap_class_CHUDFile,
&_wrap_class_CGGameEntity,
&_wrap_class_CGGameEntityMgr,
&_wrap_class_CGLiveGameEntity,
&_wrap_class_CGGEntityRenderMgr,
&_wrap_class_CGGameApplication,
&_wrap_class_CGGameConsoleApp,
&_wrap_class_CGGameCommandInterpreter,
&_wrap_class_CGGCICommand,
&_wrap_class_CGGEntityStateRegistry,
&_wrap_class_CGGameExtendedCI,
&_wrap_class_CGGCICommandSystemLog,
&_wrap_class_CGGCICommandErrorLog,
&_wrap_class_CGGCICommandListEntities,
&_wrap_class_CGGCICommandSwitchEntityState,
&_wrap_class_CGGCICommandClearErrorLog,
&_wrap_class_CGGCICommandClearSysLog,
&_wrap_class_CGGameEntitySpawner,
&_wrap_class_CGGameMessage,
&_wrap_class_CGGameMessageMgr,
&_wrap_class_CGGameMode,
&_wrap_class_CGGameBase,
&_wrap_class_CGControlPoint,
&_wrap_class_CGGraphicResource,
&_wrap_class_CGGraphicInstance,
&_wrap_class_CGGraphicResourceWH,
&_wrap_class_CGScriptResource,
&_wrap_class_CGScriptResourceWH,
&_wrap_class_CGScriptingSystem,
&_wrap_class_CGScriptInstance,
&_wrap_class_CGInputHandler,
&_wrap_class_CGGameRegistry,
&_wrap_class_CGPath,
&_wrap_class_CGInputRegistry,
&_wrap_class_CGCommandRegistry,
&_wrap_class_CGCommandBinder,
&_wrap_class_CGCommandBindingLoader,
&_wrap_class_CGBillboardRenderer,
&_wrap_class_CGBillboard,
&_wrap_class_CGBillboard_AxisAlign,
&_wrap_class_CGBillboard_ScrAlign,
&_wrap_class_CGBillboard_WorldAlign,
&_wrap_class_CGParticle,
&_wrap_class_CGParticleSystemGenerator,
&_wrap_class_CGParticleSystemInstance,
&_wrap_class_CGPSGGeneric,
&_wrap_class_CGPSGGenericQuadParticle,
&_wrap_class_CGPSGGenericQuad,
&_wrap_class_CGPSGGenericQuadOrbit,
&_wrap_class_CGPSIManager,
&_wrap_class_CGPSGDefFileWH,
&_wrap_class_CGPSysGenWH,
&_wrap_class_CGTrail,
&_wrap_class_CGTrailGenerator,
&_wrap_class_CGTrailInstance,
&_wrap_class_CGTrailGenStd,
&_wrap_class_CGTrailManager,
&_wrap_class_CGTrailGenWH,
&_wrap_class_CGTrailGenDefFileWH,
&_wrap_class_CGCorona,
&_wrap_class_CGCoronaGenerator,
&_wrap_class_CGCoronaInstance,
&_wrap_class_CGCoronaGenStd,
&_wrap_class_CGCoronaGenWH,
&_wrap_class_CSFXObjectInstance,
&_wrap_class_CGCoronaManager,
&_wrap_class_CGCoronaGenDefFileWH,
&_wrap_class_CTileBookmark,
&_wrap_class_CLODSelector,
&_wrap_class_CTerrainCircuit,
&_wrap_class_CSectElem,
&_wrap_class_CColor,
&_wrap_class_CHeight,
&_wrap_class_CLightElem,
&_wrap_class_CTile,
&_wrap_class_CSector,
&_wrap_class_CTexSector,
&_wrap_class_CTMSector,
&_wrap_class_CHFSector,
&_wrap_class_CLMSector,
&_wrap_class_CHFSector_FN,
&_wrap_class_CLMSector_Gray,
&_wrap_class_CLMSector_Pal,
&_wrap_class_CLMSector_RGB24,
&_wrap_class_CTMSector_8_16,
&_wrap_class_CSectorLoaderManager,
&_wrap_class_CSectorMatrix,
&_wrap_class_CSLM_HFieldSect,
&_wrap_class_THeightFieldData,
&_wrap_class_CHeightField,
&_wrap_class_CSLM_LMapSect,
&_wrap_class_CLightMap,
&_wrap_class_CSLM_TMapSect,
&_wrap_class_CTexMap,
&_wrap_class_TTextureEntry,
&_wrap_class_TTexSet,
&_wrap_class_CTerrainTesselator,
&_wrap_class_CTerrainSector,
&_wrap_class_TEnvironmentPars,
&_wrap_class_CLODSelector_Array,
&_wrap_class_CTerrainTesselatorGM,
&_wrap_class_TERSceneLoader,
&_wrap_class_CCOL_StackCollisionElem,
&_wrap_class_CCOL_Stack,
&_wrap_class_CCOL_TriList,
&_wrap_class_CCOL_TriListGen,
&_wrap_class_CCOL_MeshTester,
&_wrap_class_CCOL_Collider,
&_wrap_class_CCOL_ColState,
&_wrap_class_CCOL_DT_Tri,
&_wrap_class_CCOL_DT_ColTester,
&_wrap_class_CCOL_MT_CommonMesh,
&_wrap_class_CCOL_CollisionSystem,
&_wrap_class_CCOL_TriList_BVRayTest,
&_wrap_class_CCOL_Scn_TriListGen,
&_wrap_class_CCOL_TRN_TriListGen,
&_wrap_class_CCOL_MT_TerrainMesh,
&_wrap_class_CCOL_ST_Point,
&_wrap_class_CCOL_ST_Box,
&_wrap_class_CCOL_ST_Sphere,
&_wrap_class_CCOL_ST_ColTester,
&_wrap_class_CCOL_Mesh,
&_wrap_class_CCOL_Scn_ColTester,
&_wrap_class_CCOL_ST_Tris,
&_wrap_class_CCOL_DT_Box,
&_wrap_class_CCOL_DT_Sphere,
&_wrap_class_CCOL_DT_Point,
&_wrap_class_CGAIMathFuncs,
&_wrap_class_CGAIMap,
&_wrap_class_CGAIDXAStar,
&_wrap_class_CGAIAStar,
&_wrap_class_TSpiralPathParams,
&_wrap_class_CGSpiralPath,
&_wrap_class_CGCurvePath,
&_wrap_class_CGPathResource,
&_wrap_class_CGPathResourceWH,
&_wrap_class_CGPathDefinitionFileWH,
&_wrap_class_CGUObject,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "GammaE",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CLoader3DSTo_p_C3DLoader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((C3DLoader *)  ((CLoader3DS *) x));
}
static void *_p_CLoaderBSP2To_p_C3DLoader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((C3DLoader *)  ((CLoaderBSP2 *) x));
}
static void *_p_CLoaderGEMTo_p_C3DLoader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((C3DLoader *)  ((CLoaderGEM *) x));
}
static void *_p_CLoaderMD2To_p_C3DLoader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((C3DLoader *)  ((CLoaderMD2 *) x));
}
static void *_p_CLoaderMD3To_p_C3DLoader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((C3DLoader *)  ((CLoaderMD3 *) x));
}
static void *_p_CSaverGEMTo_p_C3DSaver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((C3DSaver *)  ((CSaverGEM *) x));
}
static void *_p_CCOL_MT_CommonMeshTo_p_CCOL_MeshTester(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CCOL_MeshTester *)  ((CCOL_MT_CommonMesh *) x));
}
static void *_p_CCOL_MT_TerrainMeshTo_p_CCOL_MeshTester(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CCOL_MeshTester *)  ((CCOL_MT_TerrainMesh *) x));
}
static void *_p_CCOL_Scn_TriListGenTo_p_CCOL_TriListGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CCOL_TriListGen *)  ((CCOL_Scn_TriListGen *) x));
}
static void *_p_CCOL_TRN_TriListGenTo_p_CCOL_TriListGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CCOL_TriListGen *)  ((CCOL_TRN_TriListGen *) x));
}
static void *_p_CGCompiledMeshTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *)  ((CGCompiledMesh *) x));
}
static void *_p_CGMeshTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *)  ((CGMesh *) x));
}
static void *_p_CGMeshBoxTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *) (CGMesh *) ((CGMeshBox *) x));
}
static void *_p_CGMeshCrossTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *) (CGMesh *) ((CGMeshCross *) x));
}
static void *_p_CGMeshRectTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *) (CGMesh *) ((CGMeshRect *) x));
}
static void *_p_CGMeshSphereTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *) (CGMesh *) ((CGMeshSphere *) x));
}
static void *_p_CGUnmanagedMeshTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *) (CGMesh *) ((CGUnmanagedMesh *) x));
}
static void *_p_CMenuTextGridTo_p_CGBaseMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBaseMesh *) (CGMesh *) ((CMenuTextGrid *) x));
}
static void *_p_CGBillboard_AxisAlignTo_p_CGBillboard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBillboard *)  ((CGBillboard_AxisAlign *) x));
}
static void *_p_CGBillboard_ScrAlignTo_p_CGBillboard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBillboard *)  ((CGBillboard_ScrAlign *) x));
}
static void *_p_CGBillboard_WorldAlignTo_p_CGBillboard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBillboard *)  ((CGBillboard_WorldAlign *) x));
}
static void *_p_CGBVAABBTo_p_CGBoundingVolume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBoundingVolume *)  ((CGBVAABB *) x));
}
static void *_p_CGBVCylinderTo_p_CGBoundingVolume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBoundingVolume *)  ((CGBVCylinder *) x));
}
static void *_p_CGBVFrustumTo_p_CGBoundingVolume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBoundingVolume *)  ((CGBVFrustum *) x));
}
static void *_p_CGBVPointTo_p_CGBoundingVolume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBoundingVolume *)  ((CGBVPoint *) x));
}
static void *_p_CGBVSphereTo_p_CGBoundingVolume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGBoundingVolume *)  ((CGBVSphere *) x));
}
static void *_p_CGCoronaGenStdTo_p_CGCoronaGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGCoronaGenerator *)  ((CGCoronaGenStd *) x));
}
static void *_p_CGCurveDynamicTo_p_CGCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGCurve *)  ((CGCurveDynamic *) x));
}
static void *_p_CGRendererTo_p_CGE3DRenderer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGE3DRenderer *)  ((CGRenderer *) x));
}
static void *_p_CGEvalMultTo_p_CGEvalBinary(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvalBinary *)  ((CGEvalMult *) x));
}
static void *_p_CGEvalSumTo_p_CGEvalBinary(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvalBinary *)  ((CGEvalSum *) x));
}
static void *_p_CGEvalCosTo_p_CGEvalPeriodic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvalPeriodic *)  ((CGEvalCos *) x));
}
static void *_p_CGEvalSawToothTo_p_CGEvalPeriodic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvalPeriodic *)  ((CGEvalSawTooth *) x));
}
static void *_p_CGEvalSinTo_p_CGEvalPeriodic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvalPeriodic *)  ((CGEvalSin *) x));
}
static void *_p_CGEvalSquareTo_p_CGEvalPeriodic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvalPeriodic *)  ((CGEvalSquare *) x));
}
static void *_p_CGEvalTriangleTo_p_CGEvalPeriodic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvalPeriodic *)  ((CGEvalTriangle *) x));
}
static void *_p_CGEvalBinaryTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *)  ((CGEvalBinary *) x));
}
static void *_p_CGEvalConstTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *)  ((CGEvalConst *) x));
}
static void *_p_CGEvalCosTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *) (CGEvalPeriodic *) ((CGEvalCos *) x));
}
static void *_p_CGEvalMultTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *) (CGEvalBinary *) ((CGEvalMult *) x));
}
static void *_p_CGEvalPeriodicTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *)  ((CGEvalPeriodic *) x));
}
static void *_p_CGEvalSawToothTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *) (CGEvalPeriodic *) ((CGEvalSawTooth *) x));
}
static void *_p_CGEvalSinTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *) (CGEvalPeriodic *) ((CGEvalSin *) x));
}
static void *_p_CGEvalSquareTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *) (CGEvalPeriodic *) ((CGEvalSquare *) x));
}
static void *_p_CGEvalSumTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *) (CGEvalBinary *) ((CGEvalSum *) x));
}
static void *_p_CGEvalTimeTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *)  ((CGEvalTime *) x));
}
static void *_p_CGEvalTriangleTo_p_CGEvaluator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGEvaluator *) (CGEvalPeriodic *) ((CGEvalTriangle *) x));
}
static void *_p_CGFileSysMgrMultiPAKTo_p_CGFileSysManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGFileSysManager *)  ((CGFileSysMgrMultiPAK *) x));
}
static void *_p_CGFileSysMgrMultiZIPTo_p_CGFileSysManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGFileSysManager *)  ((CGFileSysMgrMultiZIP *) x));
}
static void *_p_CGFileSysMgrPAKTo_p_CGFileSysManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGFileSysManager *)  ((CGFileSysMgrPAK *) x));
}
static void *_p_CGFileSysMgrZIPTo_p_CGFileSysManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGFileSysManager *)  ((CGFileSysMgrZIP *) x));
}
static void *_p_CGGCICommandClearErrorLogTo_p_CGGCICommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGCICommand *)  ((CGGCICommandClearErrorLog *) x));
}
static void *_p_CGGCICommandClearSysLogTo_p_CGGCICommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGCICommand *)  ((CGGCICommandClearSysLog *) x));
}
static void *_p_CGGCICommandErrorLogTo_p_CGGCICommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGCICommand *)  ((CGGCICommandErrorLog *) x));
}
static void *_p_CGGCICommandListEntitiesTo_p_CGGCICommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGCICommand *)  ((CGGCICommandListEntities *) x));
}
static void *_p_CGGCICommandSwitchEntityStateTo_p_CGGCICommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGCICommand *)  ((CGGCICommandSwitchEntityState *) x));
}
static void *_p_CGGCICommandSystemLogTo_p_CGGCICommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGCICommand *)  ((CGGCICommandSystemLog *) x));
}
static void *_p_CGGameCommandInterpreterTo_p_CGGameApplication(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameApplication *) (CGGameConsoleApp *) ((CGGameCommandInterpreter *) x));
}
static void *_p_CGGameConsoleAppTo_p_CGGameApplication(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameApplication *)  ((CGGameConsoleApp *) x));
}
static void *_p_CGGameExtendedCITo_p_CGGameApplication(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameApplication *) (CGGameConsoleApp *)(CGGameCommandInterpreter *) ((CGGameExtendedCI *) x));
}
static void *_p_CGGameExtendedCITo_p_CGGameCommandInterpreter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameCommandInterpreter *)  ((CGGameExtendedCI *) x));
}
static void *_p_CGGameCommandInterpreterTo_p_CGGameConsoleApp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameConsoleApp *)  ((CGGameCommandInterpreter *) x));
}
static void *_p_CGGameExtendedCITo_p_CGGameConsoleApp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameConsoleApp *) (CGGameCommandInterpreter *) ((CGGameExtendedCI *) x));
}
static void *_p_CGGameApplicationTo_p_CGGameEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameEntity *)  ((CGGameApplication *) x));
}
static void *_p_CGGameCommandInterpreterTo_p_CGGameEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameEntity *) (CGGameApplication *)(CGGameConsoleApp *) ((CGGameCommandInterpreter *) x));
}
static void *_p_CGGameConsoleAppTo_p_CGGameEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameEntity *) (CGGameApplication *) ((CGGameConsoleApp *) x));
}
static void *_p_CGGameEntitySpawnerTo_p_CGGameEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameEntity *)  ((CGGameEntitySpawner *) x));
}
static void *_p_CGGameExtendedCITo_p_CGGameEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameEntity *) (CGGameApplication *)(CGGameConsoleApp *)(CGGameCommandInterpreter *) ((CGGameExtendedCI *) x));
}
static void *_p_CGLiveGameEntityTo_p_CGGameEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGameEntity *)  ((CGLiveGameEntity *) x));
}
static void *_p_CGGraphBVAABBTo_p_CGGraphBV(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGraphBV *)  ((CGGraphBVAABB *) x));
}
static void *_p_CGGraphBVCylinderTo_p_CGGraphBV(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGraphBV *)  ((CGGraphBVCylinder *) x));
}
static void *_p_CGGraphBVPointTo_p_CGGraphBV(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGraphBV *)  ((CGGraphBVPoint *) x));
}
static void *_p_CGGraphBVSphereTo_p_CGGraphBV(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGGraphBV *)  ((CGGraphBVSphere *) x));
}
static void *_p_CGErrorLCTo_p_CGLogChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGLogChannel *)  ((CGErrorLC *) x));
}
static void *_p_CGStandardLCTo_p_CGLogChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGLogChannel *)  ((CGStandardLC *) x));
}
static void *_p_CGSystemLCTo_p_CGLogChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGLogChannel *)  ((CGSystemLC *) x));
}
static void *_p_CGWarningLCTo_p_CGLogChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGLogChannel *)  ((CGWarningLC *) x));
}
static void *_p_CGMeshBoxTo_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh *)  ((CGMeshBox *) x));
}
static void *_p_CGMeshCrossTo_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh *)  ((CGMeshCross *) x));
}
static void *_p_CGMeshRectTo_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh *)  ((CGMeshRect *) x));
}
static void *_p_CGMeshSphereTo_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh *)  ((CGMeshSphere *) x));
}
static void *_p_CGUnmanagedMeshTo_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh *)  ((CGUnmanagedMesh *) x));
}
static void *_p_CMenuTextGridTo_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh *)  ((CMenuTextGrid *) x));
}
static void *_p_CGPSGGenericQuadTo_p_CGPSGGeneric(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGPSGGeneric *)  ((CGPSGGenericQuad *) x));
}
static void *_p_CGPSGGenericQuadOrbitTo_p_CGPSGGeneric(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGPSGGeneric *) (CGPSGGenericQuad *) ((CGPSGGenericQuadOrbit *) x));
}
static void *_p_CGPSGGenericQuadOrbitTo_p_CGPSGGenericQuad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGPSGGenericQuad *)  ((CGPSGGenericQuadOrbit *) x));
}
static void *_p_CGPSGGenericQuadParticleTo_p_CGParticle(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGParticle *)  ((CGPSGGenericQuadParticle *) x));
}
static void *_p_CGPSGGenericTo_p_CGParticleSystemGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGParticleSystemGenerator *)  ((CGPSGGeneric *) x));
}
static void *_p_CGPSGGenericQuadTo_p_CGParticleSystemGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGParticleSystemGenerator *) (CGPSGGeneric *) ((CGPSGGenericQuad *) x));
}
static void *_p_CGPSGGenericQuadOrbitTo_p_CGParticleSystemGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGParticleSystemGenerator *) (CGPSGGeneric *)(CGPSGGenericQuad *) ((CGPSGGenericQuadOrbit *) x));
}
static void *_p_CGCurvePathTo_p_CGPath(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGPath *)  ((CGCurvePath *) x));
}
static void *_p_CGSpiralPathTo_p_CGPath(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGPath *)  ((CGSpiralPath *) x));
}
static void *_p_CConsoleTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CHUD *) ((CConsole *) x));
}
static void *_p_CDetailerTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneLeaf *) ((CDetailer *) x));
}
static void *_p_CGBillboardTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *) ((CGBillboard *) x));
}
static void *_p_CGBillboardRendererTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneLeaf *) ((CGBillboardRenderer *) x));
}
static void *_p_CGBillboard_AxisAlignTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *)(CGBillboard *) ((CGBillboard_AxisAlign *) x));
}
static void *_p_CGBillboard_ScrAlignTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *)(CGBillboard *) ((CGBillboard_ScrAlign *) x));
}
static void *_p_CGBillboard_WorldAlignTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *)(CGBillboard *) ((CGBillboard_WorldAlign *) x));
}
static void *_p_CGCoronaGenStdTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *)(CGCoronaGenerator *) ((CGCoronaGenStd *) x));
}
static void *_p_CGCoronaGeneratorTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGCoronaGenerator *) x));
}
static void *_p_CGCoronaInstanceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneTransf *) ((CGCoronaInstance *) x));
}
static void *_p_CGGraphicResourceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGGraphicResource *) x));
}
static void *_p_CGMipMapTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGMipMap *) x));
}
static void *_p_CGPSGGenericTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *)(CGParticleSystemGenerator *) ((CGPSGGeneric *) x));
}
static void *_p_CGPSGGenericQuadTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *)(CGParticleSystemGenerator *)(CGPSGGeneric *) ((CGPSGGenericQuad *) x));
}
static void *_p_CGPSGGenericQuadOrbitTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *)(CGParticleSystemGenerator *)(CGPSGGeneric *)(CGPSGGenericQuad *) ((CGPSGGenericQuadOrbit *) x));
}
static void *_p_CGParticleSystemGeneratorTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGParticleSystemGenerator *) x));
}
static void *_p_CGParticleSystemInstanceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneSwitch *) ((CGParticleSystemInstance *) x));
}
static void *_p_CGPathResourceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGPathResource *) x));
}
static void *_p_CGProgramTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGProgram *) x));
}
static void *_p_CGResourceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *)  ((CGResource *) x));
}
static void *_p_CGSceneAnimActionSetTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneAnimActionSet *) x));
}
static void *_p_CGSceneAnimGroupTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneAnimNode *) ((CGSceneAnimGroup *) x));
}
static void *_p_CGSceneAnimMeshTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneAnimNode *) ((CGSceneAnimMesh *) x));
}
static void *_p_CGSceneAnimNodeTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneAnimNode *) x));
}
static void *_p_CGSceneAnimTransfTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneAnimNode *) ((CGSceneAnimTransf *) x));
}
static void *_p_CGSceneBSPNodeTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneBSPNode *) x));
}
static void *_p_CGSceneCameraTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *) ((CGSceneCamera *) x));
}
static void *_p_CGSceneGroupTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneGroup *) x));
}
static void *_p_CGSceneInstanceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneTransf *) ((CGSceneInstance *) x));
}
static void *_p_CGSceneLeafTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneLeaf *) x));
}
static void *_p_CGSceneMuxTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *) ((CGSceneMux *) x));
}
static void *_p_CGSceneNodeTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *)  ((CGSceneNode *) x));
}
static void *_p_CGSceneReflectorTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *) ((CGSceneReflector *) x));
}
static void *_p_CGSceneScreenRectTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneScreenRect *) x));
}
static void *_p_CGSceneSwitchTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneSwitch *) x));
}
static void *_p_CGSceneTransfTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CGSceneTransf *) x));
}
static void *_p_CGScriptResourceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *)(CGTextResource *) ((CGScriptResource *) x));
}
static void *_p_CGShaderTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGShader *) x));
}
static void *_p_CGTextResourceTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGTextResource *) x));
}
static void *_p_CGTextureObjTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGTextureObj *) x));
}
static void *_p_CGTrailGenStdTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *)(CGTrailGenerator *) ((CGTrailGenStd *) x));
}
static void *_p_CGTrailGeneratorTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CGTrailGenerator *) x));
}
static void *_p_CHUDTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CHUD *) x));
}
static void *_p_CHUDFontTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGResource *) ((CHUDFont *) x));
}
static void *_p_CHUDIconTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneSwitch *)(CHUDObject *) ((CHUDIcon *) x));
}
static void *_p_CHUDLabelTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneSwitch *)(CHUDObject *) ((CHUDLabel *) x));
}
static void *_p_CHUDMsgBoxTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *)(CGSceneMux *) ((CHUDMsgBox *) x));
}
static void *_p_CHUDObjectTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneSwitch *) ((CHUDObject *) x));
}
static void *_p_CHUDProgressBarTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneSwitch *)(CHUDObject *) ((CHUDProgressBar *) x));
}
static void *_p_CLensFlareTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CLensFlare *) x));
}
static void *_p_CShadowCasterTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CShadowCaster *) x));
}
static void *_p_CSkyBoxTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneTransf *) ((CSkyBox *) x));
}
static void *_p_CSkyDomeTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneLeaf *) ((CSkyDome *) x));
}
static void *_p_CTerrainCircuitTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneGroup *) ((CTerrainCircuit *) x));
}
static void *_p_CTerrainSectorTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *) ((CTerrainSector *) x));
}
static void *_p_CTexProjectorTo_p_CGReferenceCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGReferenceCounter *) (CGSceneNode *)(CGSceneLeaf *) ((CTexProjector *) x));
}
static void *_p_CGCoronaGenStdTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *) (CGCoronaGenerator *) ((CGCoronaGenStd *) x));
}
static void *_p_CGCoronaGeneratorTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGCoronaGenerator *) x));
}
static void *_p_CGGraphicResourceTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGGraphicResource *) x));
}
static void *_p_CGMipMapTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGMipMap *) x));
}
static void *_p_CGPSGGenericTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *) (CGParticleSystemGenerator *) ((CGPSGGeneric *) x));
}
static void *_p_CGPSGGenericQuadTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *) (CGParticleSystemGenerator *)(CGPSGGeneric *) ((CGPSGGenericQuad *) x));
}
static void *_p_CGPSGGenericQuadOrbitTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *) (CGParticleSystemGenerator *)(CGPSGGeneric *)(CGPSGGenericQuad *) ((CGPSGGenericQuadOrbit *) x));
}
static void *_p_CGParticleSystemGeneratorTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGParticleSystemGenerator *) x));
}
static void *_p_CGPathResourceTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGPathResource *) x));
}
static void *_p_CGProgramTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGProgram *) x));
}
static void *_p_CGScriptResourceTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *) (CGTextResource *) ((CGScriptResource *) x));
}
static void *_p_CGShaderTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGShader *) x));
}
static void *_p_CGTextResourceTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGTextResource *) x));
}
static void *_p_CGTextureObjTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGTextureObj *) x));
}
static void *_p_CGTrailGenStdTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *) (CGTrailGenerator *) ((CGTrailGenStd *) x));
}
static void *_p_CGTrailGeneratorTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CGTrailGenerator *) x));
}
static void *_p_CHUDFontTo_p_CGResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGResource *)  ((CHUDFont *) x));
}
static void *_p_CGSceneAnimGroupTo_p_CGSceneAnimNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneAnimNode *)  ((CGSceneAnimGroup *) x));
}
static void *_p_CGSceneAnimMeshTo_p_CGSceneAnimNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneAnimNode *)  ((CGSceneAnimMesh *) x));
}
static void *_p_CGSceneAnimTransfTo_p_CGSceneAnimNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneAnimNode *)  ((CGSceneAnimTransf *) x));
}
static void *_p_CGBillboardTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *)  ((CGBillboard *) x));
}
static void *_p_CGBillboard_AxisAlignTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *) (CGBillboard *) ((CGBillboard_AxisAlign *) x));
}
static void *_p_CGBillboard_ScrAlignTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *) (CGBillboard *) ((CGBillboard_ScrAlign *) x));
}
static void *_p_CGBillboard_WorldAlignTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *) (CGBillboard *) ((CGBillboard_WorldAlign *) x));
}
static void *_p_CGSceneCameraTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *)  ((CGSceneCamera *) x));
}
static void *_p_CGSceneMuxTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *)  ((CGSceneMux *) x));
}
static void *_p_CGSceneReflectorTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *)  ((CGSceneReflector *) x));
}
static void *_p_CHUDMsgBoxTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *) (CGSceneMux *) ((CHUDMsgBox *) x));
}
static void *_p_CTerrainCircuitTo_p_CGSceneGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneGroup *)  ((CTerrainCircuit *) x));
}
static void *_p_CDetailerTo_p_CGSceneLeaf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneLeaf *)  ((CDetailer *) x));
}
static void *_p_CGBillboardRendererTo_p_CGSceneLeaf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneLeaf *)  ((CGBillboardRenderer *) x));
}
static void *_p_CSkyDomeTo_p_CGSceneLeaf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneLeaf *)  ((CSkyDome *) x));
}
static void *_p_CTexProjectorTo_p_CGSceneLeaf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneLeaf *)  ((CTexProjector *) x));
}
static void *_p_CHUDMsgBoxTo_p_CGSceneMux(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneMux *)  ((CHUDMsgBox *) x));
}
static void *_p_CConsoleTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CHUD *) ((CConsole *) x));
}
static void *_p_CDetailerTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneLeaf *) ((CDetailer *) x));
}
static void *_p_CGBillboardTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *) ((CGBillboard *) x));
}
static void *_p_CGBillboardRendererTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneLeaf *) ((CGBillboardRenderer *) x));
}
static void *_p_CGBillboard_AxisAlignTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *)(CGBillboard *) ((CGBillboard_AxisAlign *) x));
}
static void *_p_CGBillboard_ScrAlignTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *)(CGBillboard *) ((CGBillboard_ScrAlign *) x));
}
static void *_p_CGBillboard_WorldAlignTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *)(CGBillboard *) ((CGBillboard_WorldAlign *) x));
}
static void *_p_CGCoronaInstanceTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneTransf *) ((CGCoronaInstance *) x));
}
static void *_p_CGParticleSystemInstanceTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneSwitch *) ((CGParticleSystemInstance *) x));
}
static void *_p_CGSceneAnimActionSetTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneAnimActionSet *) x));
}
static void *_p_CGSceneAnimGroupTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneAnimNode *) ((CGSceneAnimGroup *) x));
}
static void *_p_CGSceneAnimMeshTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneAnimNode *) ((CGSceneAnimMesh *) x));
}
static void *_p_CGSceneAnimNodeTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneAnimNode *) x));
}
static void *_p_CGSceneAnimTransfTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneAnimNode *) ((CGSceneAnimTransf *) x));
}
static void *_p_CGSceneBSPNodeTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneBSPNode *) x));
}
static void *_p_CGSceneCameraTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *) ((CGSceneCamera *) x));
}
static void *_p_CGSceneGroupTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneGroup *) x));
}
static void *_p_CGSceneInstanceTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneTransf *) ((CGSceneInstance *) x));
}
static void *_p_CGSceneLeafTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneLeaf *) x));
}
static void *_p_CGSceneMuxTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *) ((CGSceneMux *) x));
}
static void *_p_CGSceneReflectorTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *) ((CGSceneReflector *) x));
}
static void *_p_CGSceneScreenRectTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneScreenRect *) x));
}
static void *_p_CGSceneSwitchTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneSwitch *) x));
}
static void *_p_CGSceneTransfTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CGSceneTransf *) x));
}
static void *_p_CHUDTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CHUD *) x));
}
static void *_p_CHUDIconTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneSwitch *)(CHUDObject *) ((CHUDIcon *) x));
}
static void *_p_CHUDLabelTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneSwitch *)(CHUDObject *) ((CHUDLabel *) x));
}
static void *_p_CHUDMsgBoxTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *)(CGSceneMux *) ((CHUDMsgBox *) x));
}
static void *_p_CHUDObjectTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneSwitch *) ((CHUDObject *) x));
}
static void *_p_CHUDProgressBarTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneSwitch *)(CHUDObject *) ((CHUDProgressBar *) x));
}
static void *_p_CLensFlareTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CLensFlare *) x));
}
static void *_p_CShadowCasterTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CShadowCaster *) x));
}
static void *_p_CSkyBoxTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneTransf *) ((CSkyBox *) x));
}
static void *_p_CSkyDomeTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneLeaf *) ((CSkyDome *) x));
}
static void *_p_CTerrainCircuitTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneGroup *) ((CTerrainCircuit *) x));
}
static void *_p_CTerrainSectorTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *)  ((CTerrainSector *) x));
}
static void *_p_CTexProjectorTo_p_CGSceneNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneNode *) (CGSceneLeaf *) ((CTexProjector *) x));
}
static void *_p_CGParticleSystemInstanceTo_p_CGSceneSwitch(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneSwitch *)  ((CGParticleSystemInstance *) x));
}
static void *_p_CHUDIconTo_p_CGSceneSwitch(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneSwitch *) (CHUDObject *) ((CHUDIcon *) x));
}
static void *_p_CHUDLabelTo_p_CGSceneSwitch(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneSwitch *) (CHUDObject *) ((CHUDLabel *) x));
}
static void *_p_CHUDObjectTo_p_CGSceneSwitch(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneSwitch *)  ((CHUDObject *) x));
}
static void *_p_CHUDProgressBarTo_p_CGSceneSwitch(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneSwitch *) (CHUDObject *) ((CHUDProgressBar *) x));
}
static void *_p_CGCoronaInstanceTo_p_CGSceneTransf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneTransf *)  ((CGCoronaInstance *) x));
}
static void *_p_CGSceneInstanceTo_p_CGSceneTransf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneTransf *)  ((CGSceneInstance *) x));
}
static void *_p_CSkyBoxTo_p_CGSceneTransf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneTransf *)  ((CSkyBox *) x));
}
static void *_p_C3DSaverTo_p_CGSceneVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneVisitor *)  ((C3DSaver *) x));
}
static void *_p_CGSCNVAnimUpdaterTo_p_CGSceneVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneVisitor *)  ((CGSCNVAnimUpdater *) x));
}
static void *_p_CGSCNVBoundVolBuilderTo_p_CGSceneVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneVisitor *)  ((CGSCNVBoundVolBuilder *) x));
}
static void *_p_CGSCNVRendererTo_p_CGSceneVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneVisitor *)  ((CGSCNVRenderer *) x));
}
static void *_p_CGSCNVVisibilityCheckerTo_p_CGSceneVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneVisitor *)  ((CGSCNVVisibilityChecker *) x));
}
static void *_p_CSaverGEMTo_p_CGSceneVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGSceneVisitor *) (C3DSaver *) ((CSaverGEM *) x));
}
static void *_p_CGShInsBlendOpTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsBlendOp *) x));
}
static void *_p_CGShInsColorTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsColor *) x));
}
static void *_p_CGShInsExtensionTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsExtension *) x));
}
static void *_p_CGShInsGeoOpTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsGeoOp *) x));
}
static void *_p_CGShInsProgramTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsProgram *) x));
}
static void *_p_CGShInsSetTMUTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsSetTMU *) x));
}
static void *_p_CGShInsTexOpTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsTexOp *) x));
}
static void *_p_CGShInsTextureTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsTexture *) x));
}
static void *_p_CGShInsWireframeTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsWireframe *) x));
}
static void *_p_CGShInsZOpTo_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction *)  ((CGShInsZOp *) x));
}
static void *_p_CGScriptResourceTo_p_CGTextResource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGTextResource *)  ((CGScriptResource *) x));
}
static void *_p_CGTrailGenStdTo_p_CGTrailGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGTrailGenerator *)  ((CGTrailGenStd *) x));
}
static void *_p_CHFSector_FNTo_p_CHFSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CHFSector *)  ((CHFSector_FN *) x));
}
static void *_p_CConsoleTo_p_CHUD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CHUD *)  ((CConsole *) x));
}
static void *_p_CHUDIconTo_p_CHUDObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CHUDObject *)  ((CHUDIcon *) x));
}
static void *_p_CHUDLabelTo_p_CHUDObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CHUDObject *)  ((CHUDLabel *) x));
}
static void *_p_CHUDProgressBarTo_p_CHUDObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CHUDObject *)  ((CHUDProgressBar *) x));
}
static void *_p_CLMSector_GrayTo_p_CLMSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CLMSector *)  ((CLMSector_Gray *) x));
}
static void *_p_CLMSector_PalTo_p_CLMSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CLMSector *)  ((CLMSector_Pal *) x));
}
static void *_p_CLMSector_RGB24To_p_CLMSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CLMSector *)  ((CLMSector_RGB24 *) x));
}
static void *_p_CLODSelector_ArrayTo_p_CLODSelector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CLODSelector *)  ((CLODSelector_Array *) x));
}
static void *_p_CColorTo_p_CSectElem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectElem *)  ((CColor *) x));
}
static void *_p_CHeightTo_p_CSectElem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectElem *)  ((CHeight *) x));
}
static void *_p_CLightElemTo_p_CSectElem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectElem *)  ((CLightElem *) x));
}
static void *_p_CTileTo_p_CSectElem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectElem *)  ((CTile *) x));
}
static void *_p_CHFSectorTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *)  ((CHFSector *) x));
}
static void *_p_CHFSector_FNTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CHFSector *) ((CHFSector_FN *) x));
}
static void *_p_CHeightFieldTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CSectorMatrix *) ((CHeightField *) x));
}
static void *_p_CLMSectorTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *)  ((CLMSector *) x));
}
static void *_p_CLMSector_GrayTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CLMSector *) ((CLMSector_Gray *) x));
}
static void *_p_CLMSector_PalTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CLMSector *) ((CLMSector_Pal *) x));
}
static void *_p_CLMSector_RGB24To_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CLMSector *) ((CLMSector_RGB24 *) x));
}
static void *_p_CLightMapTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CSectorMatrix *) ((CLightMap *) x));
}
static void *_p_CSectorMatrixTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *)  ((CSectorMatrix *) x));
}
static void *_p_CTMSectorTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *)  ((CTMSector *) x));
}
static void *_p_CTMSector_8_16To_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CTMSector *) ((CTMSector_8_16 *) x));
}
static void *_p_CTexMapTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *) (CSectorMatrix *) ((CTexMap *) x));
}
static void *_p_CTexSectorTo_p_CSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSector *)  ((CTexSector *) x));
}
static void *_p_CSLM_HFieldSectTo_p_CSectorLoaderManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectorLoaderManager *)  ((CSLM_HFieldSect *) x));
}
static void *_p_CSLM_LMapSectTo_p_CSectorLoaderManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectorLoaderManager *)  ((CSLM_LMapSect *) x));
}
static void *_p_CSLM_TMapSectTo_p_CSectorLoaderManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectorLoaderManager *)  ((CSLM_TMapSect *) x));
}
static void *_p_CHeightFieldTo_p_CSectorMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectorMatrix *)  ((CHeightField *) x));
}
static void *_p_CLightMapTo_p_CSectorMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectorMatrix *)  ((CLightMap *) x));
}
static void *_p_CTexMapTo_p_CSectorMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CSectorMatrix *)  ((CTexMap *) x));
}
static void *_p_CTMSector_8_16To_p_CTMSector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTMSector *)  ((CTMSector_8_16 *) x));
}
static void *_p_CTerrainTesselatorGMTo_p_CTerrainTesselator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CTerrainTesselator *)  ((CTerrainTesselatorGM *) x));
}
static void *_p_SCNUt_TriSceneAccumulatorTo_p_SCNUt_TriScene(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SCNUt_TriScene *)  ((SCNUt_TriSceneAccumulator *) x));
}
static void *_p_p_CGMeshBoxTo_p_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh **)  ((CGMeshBox **) x));
}
static void *_p_p_CGMeshCrossTo_p_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh **)  ((CGMeshCross **) x));
}
static void *_p_p_CGMeshRectTo_p_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh **)  ((CGMeshRect **) x));
}
static void *_p_p_CGMeshSphereTo_p_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh **)  ((CGMeshSphere **) x));
}
static void *_p_p_CGUnmanagedMeshTo_p_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh **)  ((CGUnmanagedMesh **) x));
}
static void *_p_p_CMenuTextGridTo_p_p_CGMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGMesh **)  ((CMenuTextGrid **) x));
}
static void *_p_p_CGShInsBlendOpTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsBlendOp **) x));
}
static void *_p_p_CGShInsColorTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsColor **) x));
}
static void *_p_p_CGShInsExtensionTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsExtension **) x));
}
static void *_p_p_CGShInsGeoOpTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsGeoOp **) x));
}
static void *_p_p_CGShInsProgramTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsProgram **) x));
}
static void *_p_p_CGShInsSetTMUTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsSetTMU **) x));
}
static void *_p_p_CGShInsTexOpTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsTexOp **) x));
}
static void *_p_p_CGShInsTextureTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsTexture **) x));
}
static void *_p_p_CGShInsWireframeTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsWireframe **) x));
}
static void *_p_p_CGShInsZOpTo_p_p_CGShaderInstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CGShaderInstruction **)  ((CGShInsZOp **) x));
}
static swig_type_info _swigt__p_C3DLoader = {"_p_C3DLoader", "C3DLoader *", 0, 0, (void*)&_wrap_class_C3DLoader, 0};
static swig_type_info _swigt__p_C3DSaver = {"_p_C3DSaver", "C3DSaver *", 0, 0, (void*)&_wrap_class_C3DSaver, 0};
static swig_type_info _swigt__p_CAnimAction = {"_p_CAnimAction", "CAnimAction *", 0, 0, (void*)&_wrap_class_CAnimAction, 0};
static swig_type_info _swigt__p_CCOL_ColState = {"_p_CCOL_ColState", "CCOL_ColState *", 0, 0, (void*)&_wrap_class_CCOL_ColState, 0};
static swig_type_info _swigt__p_CCOL_Collider = {"_p_CCOL_Collider", "CCOL_Collider *", 0, 0, (void*)&_wrap_class_CCOL_Collider, 0};
static swig_type_info _swigt__p_CCOL_CollisionSystem = {"_p_CCOL_CollisionSystem", "CCOL_CollisionSystem *", 0, 0, (void*)&_wrap_class_CCOL_CollisionSystem, 0};
static swig_type_info _swigt__p_CCOL_DT_Box = {"_p_CCOL_DT_Box", "CCOL_DT_Box *", 0, 0, (void*)&_wrap_class_CCOL_DT_Box, 0};
static swig_type_info _swigt__p_CCOL_DT_ColTester = {"_p_CCOL_DT_ColTester", "CCOL_DT_ColTester *", 0, 0, (void*)&_wrap_class_CCOL_DT_ColTester, 0};
static swig_type_info _swigt__p_CCOL_DT_Point = {"_p_CCOL_DT_Point", "CCOL_DT_Point *", 0, 0, (void*)&_wrap_class_CCOL_DT_Point, 0};
static swig_type_info _swigt__p_CCOL_DT_Sphere = {"_p_CCOL_DT_Sphere", "CCOL_DT_Sphere *", 0, 0, (void*)&_wrap_class_CCOL_DT_Sphere, 0};
static swig_type_info _swigt__p_CCOL_DT_Tri = {"_p_CCOL_DT_Tri", "CCOL_DT_Tri *", 0, 0, (void*)&_wrap_class_CCOL_DT_Tri, 0};
static swig_type_info _swigt__p_CCOL_MT_CommonMesh = {"_p_CCOL_MT_CommonMesh", "CCOL_MT_CommonMesh *", 0, 0, (void*)&_wrap_class_CCOL_MT_CommonMesh, 0};
static swig_type_info _swigt__p_CCOL_MT_TerrainMesh = {"_p_CCOL_MT_TerrainMesh", "CCOL_MT_TerrainMesh *", 0, 0, (void*)&_wrap_class_CCOL_MT_TerrainMesh, 0};
static swig_type_info _swigt__p_CCOL_Mesh = {"_p_CCOL_Mesh", "CCOL_Mesh *", 0, 0, (void*)&_wrap_class_CCOL_Mesh, 0};
static swig_type_info _swigt__p_CCOL_MeshTester = {"_p_CCOL_MeshTester", "CCOL_MeshTester *", 0, 0, (void*)&_wrap_class_CCOL_MeshTester, 0};
static swig_type_info _swigt__p_CCOL_ST_Box = {"_p_CCOL_ST_Box", "CCOL_ST_Box *", 0, 0, (void*)&_wrap_class_CCOL_ST_Box, 0};
static swig_type_info _swigt__p_CCOL_ST_ColTester = {"_p_CCOL_ST_ColTester", "CCOL_ST_ColTester *", 0, 0, (void*)&_wrap_class_CCOL_ST_ColTester, 0};
static swig_type_info _swigt__p_CCOL_ST_Point = {"_p_CCOL_ST_Point", "CCOL_ST_Point *", 0, 0, (void*)&_wrap_class_CCOL_ST_Point, 0};
static swig_type_info _swigt__p_CCOL_ST_Sphere = {"_p_CCOL_ST_Sphere", "CCOL_ST_Sphere *", 0, 0, (void*)&_wrap_class_CCOL_ST_Sphere, 0};
static swig_type_info _swigt__p_CCOL_ST_Tris = {"_p_CCOL_ST_Tris", "CCOL_ST_Tris *", 0, 0, (void*)&_wrap_class_CCOL_ST_Tris, 0};
static swig_type_info _swigt__p_CCOL_Scn_ColTester = {"_p_CCOL_Scn_ColTester", "CCOL_Scn_ColTester *", 0, 0, (void*)&_wrap_class_CCOL_Scn_ColTester, 0};
static swig_type_info _swigt__p_CCOL_Scn_TriListGen = {"_p_CCOL_Scn_TriListGen", "CCOL_Scn_TriListGen *", 0, 0, (void*)&_wrap_class_CCOL_Scn_TriListGen, 0};
static swig_type_info _swigt__p_CCOL_Stack = {"_p_CCOL_Stack", "CCOL_Stack *", 0, 0, (void*)&_wrap_class_CCOL_Stack, 0};
static swig_type_info _swigt__p_CCOL_StackCollisionElem = {"_p_CCOL_StackCollisionElem", "CCOL_StackCollisionElem *", 0, 0, (void*)&_wrap_class_CCOL_StackCollisionElem, 0};
static swig_type_info _swigt__p_CCOL_TRN_TriListGen = {"_p_CCOL_TRN_TriListGen", "CCOL_TRN_TriListGen *", 0, 0, (void*)&_wrap_class_CCOL_TRN_TriListGen, 0};
static swig_type_info _swigt__p_CCOL_TriList = {"_p_CCOL_TriList", "CCOL_TriList *", 0, 0, (void*)&_wrap_class_CCOL_TriList, 0};
static swig_type_info _swigt__p_CCOL_TriListGen = {"_p_CCOL_TriListGen", "CCOL_TriListGen *", 0, 0, (void*)&_wrap_class_CCOL_TriListGen, 0};
static swig_type_info _swigt__p_CCOL_TriList_BVRayTest = {"_p_CCOL_TriList_BVRayTest", "CCOL_TriList_BVRayTest *", 0, 0, (void*)&_wrap_class_CCOL_TriList_BVRayTest, 0};
static swig_type_info _swigt__p_CColor = {"_p_CColor", "CColor *", 0, 0, (void*)&_wrap_class_CColor, 0};
static swig_type_info _swigt__p_CCompactMeshData = {"_p_CCompactMeshData", "CCompactMeshData *", 0, 0, (void*)&_wrap_class_CCompactMeshData, 0};
static swig_type_info _swigt__p_CConsole = {"_p_CConsole", "CConsole *", 0, 0, (void*)&_wrap_class_CConsole, 0};
static swig_type_info _swigt__p_CDetailer = {"_p_CDetailer", "CDetailer *", 0, 0, (void*)&_wrap_class_CDetailer, 0};
static swig_type_info _swigt__p_CG4PCurve = {"_p_CG4PCurve", "CG4PCurve *", 0, 0, (void*)&_wrap_class_CG4PCurve, 0};
static swig_type_info _swigt__p_CGAIAStar = {"_p_CGAIAStar", "CGAIAStar *", 0, 0, (void*)&_wrap_class_CGAIAStar, 0};
static swig_type_info _swigt__p_CGAIDXAStar = {"_p_CGAIDXAStar", "CGAIDXAStar *", 0, 0, (void*)&_wrap_class_CGAIDXAStar, 0};
static swig_type_info _swigt__p_CGAIMap = {"_p_CGAIMap", "CGAIMap *", 0, 0, (void*)&_wrap_class_CGAIMap, 0};
static swig_type_info _swigt__p_CGAIMathFuncs = {"_p_CGAIMathFuncs", "CGAIMathFuncs *", 0, 0, (void*)&_wrap_class_CGAIMathFuncs, 0};
static swig_type_info _swigt__p_CGBVAABB = {"_p_CGBVAABB", "CGBVAABB *", 0, 0, (void*)&_wrap_class_CGBVAABB, 0};
static swig_type_info _swigt__p_CGBVCylinder = {"_p_CGBVCylinder", "CGBVCylinder *", 0, 0, (void*)&_wrap_class_CGBVCylinder, 0};
static swig_type_info _swigt__p_CGBVFrustum = {"_p_CGBVFrustum", "CGBVFrustum *", 0, 0, (void*)&_wrap_class_CGBVFrustum, 0};
static swig_type_info _swigt__p_CGBVPoint = {"_p_CGBVPoint", "CGBVPoint *", 0, 0, (void*)&_wrap_class_CGBVPoint, 0};
static swig_type_info _swigt__p_CGBVSphere = {"_p_CGBVSphere", "CGBVSphere *", 0, 0, (void*)&_wrap_class_CGBVSphere, 0};
static swig_type_info _swigt__p_CGBaseMesh = {"_p_CGBaseMesh", "CGBaseMesh *", 0, 0, (void*)&_wrap_class_CGBaseMesh, 0};
static swig_type_info _swigt__p_CGBillboard = {"_p_CGBillboard", "CGBillboard *", 0, 0, (void*)&_wrap_class_CGBillboard, 0};
static swig_type_info _swigt__p_CGBillboardRenderer = {"_p_CGBillboardRenderer", "CGBillboardRenderer *", 0, 0, (void*)&_wrap_class_CGBillboardRenderer, 0};
static swig_type_info _swigt__p_CGBillboard_AxisAlign = {"_p_CGBillboard_AxisAlign", "CGBillboard_AxisAlign *", 0, 0, (void*)&_wrap_class_CGBillboard_AxisAlign, 0};
static swig_type_info _swigt__p_CGBillboard_ScrAlign = {"_p_CGBillboard_ScrAlign", "CGBillboard_ScrAlign *", 0, 0, (void*)&_wrap_class_CGBillboard_ScrAlign, 0};
static swig_type_info _swigt__p_CGBillboard_WorldAlign = {"_p_CGBillboard_WorldAlign", "CGBillboard_WorldAlign *", 0, 0, (void*)&_wrap_class_CGBillboard_WorldAlign, 0};
static swig_type_info _swigt__p_CGBoundingVolume = {"_p_CGBoundingVolume", "CGBoundingVolume *", 0, 0, (void*)&_wrap_class_CGBoundingVolume, 0};
static swig_type_info _swigt__p_CGCamera = {"_p_CGCamera", "CGCamera *", 0, 0, (void*)&_wrap_class_CGCamera, 0};
static swig_type_info _swigt__p_CGChrono = {"_p_CGChrono", "CGChrono *", 0, 0, (void*)&_wrap_class_CGChrono, 0};
static swig_type_info _swigt__p_CGColor = {"_p_CGColor", "CGColor *", 0, 0, (void*)&_wrap_class_CGColor, 0};
static swig_type_info _swigt__p_CGCommandBinder = {"_p_CGCommandBinder", "CGCommandBinder *", 0, 0, (void*)&_wrap_class_CGCommandBinder, 0};
static swig_type_info _swigt__p_CGCommandBindingLoader = {"_p_CGCommandBindingLoader", "CGCommandBindingLoader *", 0, 0, (void*)&_wrap_class_CGCommandBindingLoader, 0};
static swig_type_info _swigt__p_CGCommandRegistry = {"_p_CGCommandRegistry", "CGCommandRegistry *", 0, 0, (void*)&_wrap_class_CGCommandRegistry, 0};
static swig_type_info _swigt__p_CGCompiledMesh = {"_p_CGCompiledMesh", "CGCompiledMesh *", 0, 0, (void*)&_wrap_class_CGCompiledMesh, 0};
static swig_type_info _swigt__p_CGConfigFile = {"_p_CGConfigFile", "CGConfigFile *", 0, 0, (void*)&_wrap_class_CGConfigFile, 0};
static swig_type_info _swigt__p_CGControlPoint = {"_p_CGControlPoint", "CGControlPoint *", 0, 0, (void*)&_wrap_class_CGControlPoint, 0};
static swig_type_info _swigt__p_CGCorona = {"_p_CGCorona", "CGCorona *", 0, 0, (void*)&_wrap_class_CGCorona, 0};
static swig_type_info _swigt__p_CGCoronaGenDefFileWH = {"_p_CGCoronaGenDefFileWH", "CGCoronaGenDefFileWH *", 0, 0, (void*)&_wrap_class_CGCoronaGenDefFileWH, 0};
static swig_type_info _swigt__p_CGCoronaGenStd = {"_p_CGCoronaGenStd", "CGCoronaGenStd *", 0, 0, (void*)&_wrap_class_CGCoronaGenStd, 0};
static swig_type_info _swigt__p_CGCoronaGenWH = {"_p_CGCoronaGenWH", "CGCoronaGenWH *", 0, 0, (void*)&_wrap_class_CGCoronaGenWH, 0};
static swig_type_info _swigt__p_CGCoronaGenerator = {"_p_CGCoronaGenerator", "CGCoronaGenerator *", 0, 0, (void*)&_wrap_class_CGCoronaGenerator, 0};
static swig_type_info _swigt__p_CGCoronaInstance = {"_p_CGCoronaInstance", "CGCoronaInstance *", 0, 0, (void*)&_wrap_class_CGCoronaInstance, 0};
static swig_type_info _swigt__p_CGCoronaManager = {"_p_CGCoronaManager", "CGCoronaManager *", 0, 0, (void*)&_wrap_class_CGCoronaManager, 0};
static swig_type_info _swigt__p_CGCurve = {"_p_CGCurve", "CGCurve *", 0, 0, (void*)&_wrap_class_CGCurve, 0};
static swig_type_info _swigt__p_CGCurveDynamic = {"_p_CGCurveDynamic", "CGCurveDynamic *", 0, 0, (void*)&_wrap_class_CGCurveDynamic, 0};
static swig_type_info _swigt__p_CGCurvePath = {"_p_CGCurvePath", "CGCurvePath *", 0, 0, (void*)&_wrap_class_CGCurvePath, 0};
static swig_type_info _swigt__p_CGDefferredMeshDB = {"_p_CGDefferredMeshDB", "CGDefferredMeshDB *", 0, 0, (void*)&_wrap_class_CGDefferredMeshDB, 0};
static swig_type_info _swigt__p_CGDefferredMeshEntry = {"_p_CGDefferredMeshEntry", "CGDefferredMeshEntry *", 0, 0, (void*)&_wrap_class_CGDefferredMeshEntry, 0};
static swig_type_info _swigt__p_CGDynArrayT_CGControlPoint_t = {"_p_CGDynArrayT_CGControlPoint_t", "CGDynArray< CGControlPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CGDynArrayT_CGString_t = {"_p_CGDynArrayT_CGString_t", "CGDynArray< CGString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CGDynArrayT_CGVect3_t = {"_p_CGDynArrayT_CGVect3_t", "CGDynArray< CGVect3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CGDynArrayT_TVertexRef_t = {"_p_CGDynArrayT_TVertexRef_t", "CGDynArray< TVertexRef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CGE3DRenderer = {"_p_CGE3DRenderer", "CGE3DRenderer *", 0, 0, (void*)&_wrap_class_CGE3DRenderer, 0};
static swig_type_info _swigt__p_CGErrorLC = {"_p_CGErrorLC", "CGErrorLC *", 0, 0, (void*)&_wrap_class_CGErrorLC, 0};
static swig_type_info _swigt__p_CGEvalBinary = {"_p_CGEvalBinary", "CGEvalBinary *", 0, 0, (void*)&_wrap_class_CGEvalBinary, 0};
static swig_type_info _swigt__p_CGEvalConst = {"_p_CGEvalConst", "CGEvalConst *", 0, 0, (void*)&_wrap_class_CGEvalConst, 0};
static swig_type_info _swigt__p_CGEvalCos = {"_p_CGEvalCos", "CGEvalCos *", 0, 0, (void*)&_wrap_class_CGEvalCos, 0};
static swig_type_info _swigt__p_CGEvalMult = {"_p_CGEvalMult", "CGEvalMult *", 0, 0, (void*)&_wrap_class_CGEvalMult, 0};
static swig_type_info _swigt__p_CGEvalPeriodic = {"_p_CGEvalPeriodic", "CGEvalPeriodic *", 0, 0, (void*)&_wrap_class_CGEvalPeriodic, 0};
static swig_type_info _swigt__p_CGEvalSawTooth = {"_p_CGEvalSawTooth", "CGEvalSawTooth *", 0, 0, (void*)&_wrap_class_CGEvalSawTooth, 0};
static swig_type_info _swigt__p_CGEvalSin = {"_p_CGEvalSin", "CGEvalSin *", 0, 0, (void*)&_wrap_class_CGEvalSin, 0};
static swig_type_info _swigt__p_CGEvalSquare = {"_p_CGEvalSquare", "CGEvalSquare *", 0, 0, (void*)&_wrap_class_CGEvalSquare, 0};
static swig_type_info _swigt__p_CGEvalSum = {"_p_CGEvalSum", "CGEvalSum *", 0, 0, (void*)&_wrap_class_CGEvalSum, 0};
static swig_type_info _swigt__p_CGEvalTime = {"_p_CGEvalTime", "CGEvalTime *", 0, 0, (void*)&_wrap_class_CGEvalTime, 0};
static swig_type_info _swigt__p_CGEvalTriangle = {"_p_CGEvalTriangle", "CGEvalTriangle *", 0, 0, (void*)&_wrap_class_CGEvalTriangle, 0};
static swig_type_info _swigt__p_CGEvaluator = {"_p_CGEvaluator", "CGEvaluator *", 0, 0, (void*)&_wrap_class_CGEvaluator, 0};
static swig_type_info _swigt__p_CGFile = {"_p_CGFile", "CGFile *", 0, 0, (void*)&_wrap_class_CGFile, 0};
static swig_type_info _swigt__p_CGFileSysManager = {"_p_CGFileSysManager", "CGFileSysManager *", 0, 0, (void*)&_wrap_class_CGFileSysManager, 0};
static swig_type_info _swigt__p_CGFileSysMgrMultiPAK = {"_p_CGFileSysMgrMultiPAK", "CGFileSysMgrMultiPAK *", 0, 0, (void*)&_wrap_class_CGFileSysMgrMultiPAK, 0};
static swig_type_info _swigt__p_CGFileSysMgrMultiZIP = {"_p_CGFileSysMgrMultiZIP", "CGFileSysMgrMultiZIP *", 0, 0, (void*)&_wrap_class_CGFileSysMgrMultiZIP, 0};
static swig_type_info _swigt__p_CGFileSysMgrPAK = {"_p_CGFileSysMgrPAK", "CGFileSysMgrPAK *", 0, 0, (void*)&_wrap_class_CGFileSysMgrPAK, 0};
static swig_type_info _swigt__p_CGFileSysMgrZIP = {"_p_CGFileSysMgrZIP", "CGFileSysMgrZIP *", 0, 0, (void*)&_wrap_class_CGFileSysMgrZIP, 0};
static swig_type_info _swigt__p_CGFileUtils = {"_p_CGFileUtils", "CGFileUtils *", 0, 0, (void*)&_wrap_class_CGFileUtils, 0};
static swig_type_info _swigt__p_CGGCICommand = {"_p_CGGCICommand", "CGGCICommand *", 0, 0, (void*)&_wrap_class_CGGCICommand, 0};
static swig_type_info _swigt__p_CGGCICommandClearErrorLog = {"_p_CGGCICommandClearErrorLog", "CGGCICommandClearErrorLog *", 0, 0, (void*)&_wrap_class_CGGCICommandClearErrorLog, 0};
static swig_type_info _swigt__p_CGGCICommandClearSysLog = {"_p_CGGCICommandClearSysLog", "CGGCICommandClearSysLog *", 0, 0, (void*)&_wrap_class_CGGCICommandClearSysLog, 0};
static swig_type_info _swigt__p_CGGCICommandErrorLog = {"_p_CGGCICommandErrorLog", "CGGCICommandErrorLog *", 0, 0, (void*)&_wrap_class_CGGCICommandErrorLog, 0};
static swig_type_info _swigt__p_CGGCICommandListEntities = {"_p_CGGCICommandListEntities", "CGGCICommandListEntities *", 0, 0, (void*)&_wrap_class_CGGCICommandListEntities, 0};
static swig_type_info _swigt__p_CGGCICommandSwitchEntityState = {"_p_CGGCICommandSwitchEntityState", "CGGCICommandSwitchEntityState *", 0, 0, (void*)&_wrap_class_CGGCICommandSwitchEntityState, 0};
static swig_type_info _swigt__p_CGGCICommandSystemLog = {"_p_CGGCICommandSystemLog", "CGGCICommandSystemLog *", 0, 0, (void*)&_wrap_class_CGGCICommandSystemLog, 0};
static swig_type_info _swigt__p_CGGEntityRenderMgr = {"_p_CGGEntityRenderMgr", "CGGEntityRenderMgr *", 0, 0, (void*)&_wrap_class_CGGEntityRenderMgr, 0};
static swig_type_info _swigt__p_CGGEntityStateRegistry = {"_p_CGGEntityStateRegistry", "CGGEntityStateRegistry *", 0, 0, (void*)&_wrap_class_CGGEntityStateRegistry, 0};
static swig_type_info _swigt__p_CGGameApplication = {"_p_CGGameApplication", "CGGameApplication *", 0, 0, (void*)&_wrap_class_CGGameApplication, 0};
static swig_type_info _swigt__p_CGGameBase = {"_p_CGGameBase", "CGGameBase *", 0, 0, (void*)&_wrap_class_CGGameBase, 0};
static swig_type_info _swigt__p_CGGameCommandInterpreter = {"_p_CGGameCommandInterpreter", "CGGameCommandInterpreter *", 0, 0, (void*)&_wrap_class_CGGameCommandInterpreter, 0};
static swig_type_info _swigt__p_CGGameConsoleApp = {"_p_CGGameConsoleApp", "CGGameConsoleApp *", 0, 0, (void*)&_wrap_class_CGGameConsoleApp, 0};
static swig_type_info _swigt__p_CGGameEntity = {"_p_CGGameEntity", "CGGameEntity *", 0, 0, (void*)&_wrap_class_CGGameEntity, 0};
static swig_type_info _swigt__p_CGGameEntityMgr = {"_p_CGGameEntityMgr", "CGGameEntityMgr *", 0, 0, (void*)&_wrap_class_CGGameEntityMgr, 0};
static swig_type_info _swigt__p_CGGameEntitySpawner = {"_p_CGGameEntitySpawner", "CGGameEntitySpawner *", 0, 0, (void*)&_wrap_class_CGGameEntitySpawner, 0};
static swig_type_info _swigt__p_CGGameExtendedCI = {"_p_CGGameExtendedCI", "CGGameExtendedCI *", 0, 0, (void*)&_wrap_class_CGGameExtendedCI, 0};
static swig_type_info _swigt__p_CGGameMessage = {"_p_CGGameMessage", "CGGameMessage *", 0, 0, (void*)&_wrap_class_CGGameMessage, 0};
static swig_type_info _swigt__p_CGGameMessageMgr = {"_p_CGGameMessageMgr", "CGGameMessageMgr *", 0, 0, (void*)&_wrap_class_CGGameMessageMgr, 0};
static swig_type_info _swigt__p_CGGameMode = {"_p_CGGameMode", "CGGameMode *", 0, 0, (void*)&_wrap_class_CGGameMode, 0};
static swig_type_info _swigt__p_CGGameRegistry = {"_p_CGGameRegistry", "CGGameRegistry *", 0, 0, (void*)&_wrap_class_CGGameRegistry, 0};
static swig_type_info _swigt__p_CGGraphBV = {"_p_CGGraphBV", "CGGraphBV *", 0, 0, (void*)&_wrap_class_CGGraphBV, 0};
static swig_type_info _swigt__p_CGGraphBVAABB = {"_p_CGGraphBVAABB", "CGGraphBVAABB *", 0, 0, (void*)&_wrap_class_CGGraphBVAABB, 0};
static swig_type_info _swigt__p_CGGraphBVCylinder = {"_p_CGGraphBVCylinder", "CGGraphBVCylinder *", 0, 0, (void*)&_wrap_class_CGGraphBVCylinder, 0};
static swig_type_info _swigt__p_CGGraphBVFactory = {"_p_CGGraphBVFactory", "CGGraphBVFactory *", 0, 0, (void*)&_wrap_class_CGGraphBVFactory, 0};
static swig_type_info _swigt__p_CGGraphBVFileIO = {"_p_CGGraphBVFileIO", "CGGraphBVFileIO *", 0, 0, (void*)&_wrap_class_CGGraphBVFileIO, 0};
static swig_type_info _swigt__p_CGGraphBVPoint = {"_p_CGGraphBVPoint", "CGGraphBVPoint *", 0, 0, (void*)&_wrap_class_CGGraphBVPoint, 0};
static swig_type_info _swigt__p_CGGraphBVSphere = {"_p_CGGraphBVSphere", "CGGraphBVSphere *", 0, 0, (void*)&_wrap_class_CGGraphBVSphere, 0};
static swig_type_info _swigt__p_CGGraphicInstance = {"_p_CGGraphicInstance", "CGGraphicInstance *", 0, 0, (void*)&_wrap_class_CGGraphicInstance, 0};
static swig_type_info _swigt__p_CGGraphicResource = {"_p_CGGraphicResource", "CGGraphicResource *", 0, 0, (void*)&_wrap_class_CGGraphicResource, 0};
static swig_type_info _swigt__p_CGGraphicResourceWH = {"_p_CGGraphicResourceWH", "CGGraphicResourceWH *", 0, 0, (void*)&_wrap_class_CGGraphicResourceWH, 0};
static swig_type_info _swigt__p_CGInputHandler = {"_p_CGInputHandler", "CGInputHandler *", 0, 0, (void*)&_wrap_class_CGInputHandler, 0};
static swig_type_info _swigt__p_CGInputRegistry = {"_p_CGInputRegistry", "CGInputRegistry *", 0, 0, (void*)&_wrap_class_CGInputRegistry, 0};
static swig_type_info _swigt__p_CGLight = {"_p_CGLight", "CGLight *", 0, 0, (void*)&_wrap_class_CGLight, 0};
static swig_type_info _swigt__p_CGLiveGameEntity = {"_p_CGLiveGameEntity", "CGLiveGameEntity *", 0, 0, (void*)&_wrap_class_CGLiveGameEntity, 0};
static swig_type_info _swigt__p_CGLogChannel = {"_p_CGLogChannel", "CGLogChannel *", 0, 0, (void*)&_wrap_class_CGLogChannel, 0};
static swig_type_info _swigt__p_CGLogger = {"_p_CGLogger", "CGLogger *", 0, 0, (void*)&_wrap_class_CGLogger, 0};
static swig_type_info _swigt__p_CGMatrix4x4 = {"_p_CGMatrix4x4", "CGMatrix4x4 *", 0, 0, (void*)&_wrap_class_CGMatrix4x4, 0};
static swig_type_info _swigt__p_CGMesh = {"_p_CGMesh", "CGMesh *", 0, 0, (void*)&_wrap_class_CGMesh, 0};
static swig_type_info _swigt__p_CGMeshBox = {"_p_CGMeshBox", "CGMeshBox *", 0, 0, (void*)&_wrap_class_CGMeshBox, 0};
static swig_type_info _swigt__p_CGMeshCross = {"_p_CGMeshCross", "CGMeshCross *", 0, 0, (void*)&_wrap_class_CGMeshCross, 0};
static swig_type_info _swigt__p_CGMeshRect = {"_p_CGMeshRect", "CGMeshRect *", 0, 0, (void*)&_wrap_class_CGMeshRect, 0};
static swig_type_info _swigt__p_CGMeshSphere = {"_p_CGMeshSphere", "CGMeshSphere *", 0, 0, (void*)&_wrap_class_CGMeshSphere, 0};
static swig_type_info _swigt__p_CGMipMap = {"_p_CGMipMap", "CGMipMap *", 0, 0, (void*)&_wrap_class_CGMipMap, 0};
static swig_type_info _swigt__p_CGMipMapWH = {"_p_CGMipMapWH", "CGMipMapWH *", 0, 0, (void*)&_wrap_class_CGMipMapWH, 0};
static swig_type_info _swigt__p_CGOSFile = {"_p_CGOSFile", "CGOSFile *", 0, 0, (void*)&_wrap_class_CGOSFile, 0};
static swig_type_info _swigt__p_CGPSGDefFileWH = {"_p_CGPSGDefFileWH", "CGPSGDefFileWH *", 0, 0, (void*)&_wrap_class_CGPSGDefFileWH, 0};
static swig_type_info _swigt__p_CGPSGGeneric = {"_p_CGPSGGeneric", "CGPSGGeneric *", 0, 0, (void*)&_wrap_class_CGPSGGeneric, 0};
static swig_type_info _swigt__p_CGPSGGenericQuad = {"_p_CGPSGGenericQuad", "CGPSGGenericQuad *", 0, 0, (void*)&_wrap_class_CGPSGGenericQuad, 0};
static swig_type_info _swigt__p_CGPSGGenericQuadOrbit = {"_p_CGPSGGenericQuadOrbit", "CGPSGGenericQuadOrbit *", 0, 0, (void*)&_wrap_class_CGPSGGenericQuadOrbit, 0};
static swig_type_info _swigt__p_CGPSGGenericQuadParticle = {"_p_CGPSGGenericQuadParticle", "CGPSGGenericQuadParticle *", 0, 0, (void*)&_wrap_class_CGPSGGenericQuadParticle, 0};
static swig_type_info _swigt__p_CGPSIManager = {"_p_CGPSIManager", "CGPSIManager *", 0, 0, (void*)&_wrap_class_CGPSIManager, 0};
static swig_type_info _swigt__p_CGPSysGenWH = {"_p_CGPSysGenWH", "CGPSysGenWH *", 0, 0, (void*)&_wrap_class_CGPSysGenWH, 0};
static swig_type_info _swigt__p_CGParticle = {"_p_CGParticle", "CGParticle *", 0, 0, (void*)&_wrap_class_CGParticle, 0};
static swig_type_info _swigt__p_CGParticleSystemGenerator = {"_p_CGParticleSystemGenerator", "CGParticleSystemGenerator *", 0, 0, (void*)&_wrap_class_CGParticleSystemGenerator, 0};
static swig_type_info _swigt__p_CGParticleSystemInstance = {"_p_CGParticleSystemInstance", "CGParticleSystemInstance *", 0, 0, (void*)&_wrap_class_CGParticleSystemInstance, 0};
static swig_type_info _swigt__p_CGPath = {"_p_CGPath", "CGPath *", 0, 0, (void*)&_wrap_class_CGPath, 0};
static swig_type_info _swigt__p_CGPathDefinitionFileWH = {"_p_CGPathDefinitionFileWH", "CGPathDefinitionFileWH *", 0, 0, (void*)&_wrap_class_CGPathDefinitionFileWH, 0};
static swig_type_info _swigt__p_CGPathResource = {"_p_CGPathResource", "CGPathResource *", 0, 0, (void*)&_wrap_class_CGPathResource, 0};
static swig_type_info _swigt__p_CGPathResourceWH = {"_p_CGPathResourceWH", "CGPathResourceWH *", 0, 0, (void*)&_wrap_class_CGPathResourceWH, 0};
static swig_type_info _swigt__p_CGPlane = {"_p_CGPlane", "CGPlane *", 0, 0, (void*)&_wrap_class_CGPlane, 0};
static swig_type_info _swigt__p_CGProgram = {"_p_CGProgram", "CGProgram *", 0, 0, (void*)&_wrap_class_CGProgram, 0};
static swig_type_info _swigt__p_CGProgramWH = {"_p_CGProgramWH", "CGProgramWH *", 0, 0, (void*)&_wrap_class_CGProgramWH, 0};
static swig_type_info _swigt__p_CGProjector = {"_p_CGProjector", "CGProjector *", 0, 0, (void*)&_wrap_class_CGProjector, 0};
static swig_type_info _swigt__p_CGQuaternion = {"_p_CGQuaternion", "CGQuaternion *", 0, 0, (void*)&_wrap_class_CGQuaternion, 0};
static swig_type_info _swigt__p_CGRay = {"_p_CGRay", "CGRay *", 0, 0, (void*)&_wrap_class_CGRay, 0};
static swig_type_info _swigt__p_CGReferenceCounter = {"_p_CGReferenceCounter", "CGReferenceCounter *", 0, 0, (void*)&_wrap_class_CGReferenceCounter, 0};
static swig_type_info _swigt__p_CGRenderState = {"_p_CGRenderState", "CGRenderState *", 0, 0, (void*)&_wrap_class_CGRenderState, 0};
static swig_type_info _swigt__p_CGRenderStats = {"_p_CGRenderStats", "CGRenderStats *", 0, 0, (void*)&_wrap_class_CGRenderStats, 0};
static swig_type_info _swigt__p_CGRenderVars = {"_p_CGRenderVars", "CGRenderVars *", 0, 0, (void*)&_wrap_class_CGRenderVars, 0};
static swig_type_info _swigt__p_CGRenderer = {"_p_CGRenderer", "CGRenderer *", 0, 0, (void*)&_wrap_class_CGRenderer, 0};
static swig_type_info _swigt__p_CGResource = {"_p_CGResource", "CGResource *", 0, 0, (void*)&_wrap_class_CGResource, 0};
static swig_type_info _swigt__p_CGSCNVAnimUpdater = {"_p_CGSCNVAnimUpdater", "CGSCNVAnimUpdater *", 0, 0, (void*)&_wrap_class_CGSCNVAnimUpdater, 0};
static swig_type_info _swigt__p_CGSCNVBoundVolBuilder = {"_p_CGSCNVBoundVolBuilder", "CGSCNVBoundVolBuilder *", 0, 0, (void*)&_wrap_class_CGSCNVBoundVolBuilder, 0};
static swig_type_info _swigt__p_CGSCNVRenderer = {"_p_CGSCNVRenderer", "CGSCNVRenderer *", 0, 0, (void*)&_wrap_class_CGSCNVRenderer, 0};
static swig_type_info _swigt__p_CGSCNVVisibilityChecker = {"_p_CGSCNVVisibilityChecker", "CGSCNVVisibilityChecker *", 0, 0, (void*)&_wrap_class_CGSCNVVisibilityChecker, 0};
static swig_type_info _swigt__p_CGSceneAnimActionSet = {"_p_CGSceneAnimActionSet", "CGSceneAnimActionSet *", 0, 0, (void*)&_wrap_class_CGSceneAnimActionSet, 0};
static swig_type_info _swigt__p_CGSceneAnimGroup = {"_p_CGSceneAnimGroup", "CGSceneAnimGroup *", 0, 0, (void*)&_wrap_class_CGSceneAnimGroup, 0};
static swig_type_info _swigt__p_CGSceneAnimMesh = {"_p_CGSceneAnimMesh", "CGSceneAnimMesh *", 0, 0, (void*)&_wrap_class_CGSceneAnimMesh, 0};
static swig_type_info _swigt__p_CGSceneAnimNode = {"_p_CGSceneAnimNode", "CGSceneAnimNode *", 0, 0, (void*)&_wrap_class_CGSceneAnimNode, 0};
static swig_type_info _swigt__p_CGSceneAnimTransf = {"_p_CGSceneAnimTransf", "CGSceneAnimTransf *", 0, 0, (void*)&_wrap_class_CGSceneAnimTransf, 0};
static swig_type_info _swigt__p_CGSceneBSPNode = {"_p_CGSceneBSPNode", "CGSceneBSPNode *", 0, 0, (void*)&_wrap_class_CGSceneBSPNode, 0};
static swig_type_info _swigt__p_CGSceneCamera = {"_p_CGSceneCamera", "CGSceneCamera *", 0, 0, (void*)&_wrap_class_CGSceneCamera, 0};
static swig_type_info _swigt__p_CGSceneGroup = {"_p_CGSceneGroup", "CGSceneGroup *", 0, 0, (void*)&_wrap_class_CGSceneGroup, 0};
static swig_type_info _swigt__p_CGSceneInstance = {"_p_CGSceneInstance", "CGSceneInstance *", 0, 0, (void*)&_wrap_class_CGSceneInstance, 0};
static swig_type_info _swigt__p_CGSceneLeaf = {"_p_CGSceneLeaf", "CGSceneLeaf *", 0, 0, (void*)&_wrap_class_CGSceneLeaf, 0};
static swig_type_info _swigt__p_CGSceneMux = {"_p_CGSceneMux", "CGSceneMux *", 0, 0, (void*)&_wrap_class_CGSceneMux, 0};
static swig_type_info _swigt__p_CGSceneNode = {"_p_CGSceneNode", "CGSceneNode *", 0, 0, (void*)&_wrap_class_CGSceneNode, 0};
static swig_type_info _swigt__p_CGSceneReflector = {"_p_CGSceneReflector", "CGSceneReflector *", 0, 0, (void*)&_wrap_class_CGSceneReflector, 0};
static swig_type_info _swigt__p_CGSceneScreenRect = {"_p_CGSceneScreenRect", "CGSceneScreenRect *", 0, 0, (void*)&_wrap_class_CGSceneScreenRect, 0};
static swig_type_info _swigt__p_CGSceneSwitch = {"_p_CGSceneSwitch", "CGSceneSwitch *", 0, 0, (void*)&_wrap_class_CGSceneSwitch, 0};
static swig_type_info _swigt__p_CGSceneTransf = {"_p_CGSceneTransf", "CGSceneTransf *", 0, 0, (void*)&_wrap_class_CGSceneTransf, 0};
static swig_type_info _swigt__p_CGSceneVisitor = {"_p_CGSceneVisitor", "CGSceneVisitor *", 0, 0, (void*)&_wrap_class_CGSceneVisitor, 0};
static swig_type_info _swigt__p_CGScriptInstance = {"_p_CGScriptInstance", "CGScriptInstance *", 0, 0, (void*)&_wrap_class_CGScriptInstance, 0};
static swig_type_info _swigt__p_CGScriptResource = {"_p_CGScriptResource", "CGScriptResource *", 0, 0, (void*)&_wrap_class_CGScriptResource, 0};
static swig_type_info _swigt__p_CGScriptResourceWH = {"_p_CGScriptResourceWH", "CGScriptResourceWH *", 0, 0, (void*)&_wrap_class_CGScriptResourceWH, 0};
static swig_type_info _swigt__p_CGScriptingSystem = {"_p_CGScriptingSystem", "CGScriptingSystem *", 0, 0, (void*)&_wrap_class_CGScriptingSystem, 0};
static swig_type_info _swigt__p_CGSegment = {"_p_CGSegment", "CGSegment *", 0, 0, (void*)&_wrap_class_CGSegment, 0};
static swig_type_info _swigt__p_CGShInsBlendOp = {"_p_CGShInsBlendOp", "CGShInsBlendOp *", 0, 0, (void*)&_wrap_class_CGShInsBlendOp, 0};
static swig_type_info _swigt__p_CGShInsColor = {"_p_CGShInsColor", "CGShInsColor *", 0, 0, (void*)&_wrap_class_CGShInsColor, 0};
static swig_type_info _swigt__p_CGShInsExtension = {"_p_CGShInsExtension", "CGShInsExtension *", 0, 0, (void*)&_wrap_class_CGShInsExtension, 0};
static swig_type_info _swigt__p_CGShInsGeoOp = {"_p_CGShInsGeoOp", "CGShInsGeoOp *", 0, 0, (void*)&_wrap_class_CGShInsGeoOp, 0};
static swig_type_info _swigt__p_CGShInsProgram = {"_p_CGShInsProgram", "CGShInsProgram *", 0, 0, (void*)&_wrap_class_CGShInsProgram, 0};
static swig_type_info _swigt__p_CGShInsSetTMU = {"_p_CGShInsSetTMU", "CGShInsSetTMU *", 0, 0, (void*)&_wrap_class_CGShInsSetTMU, 0};
static swig_type_info _swigt__p_CGShInsTexOp = {"_p_CGShInsTexOp", "CGShInsTexOp *", 0, 0, (void*)&_wrap_class_CGShInsTexOp, 0};
static swig_type_info _swigt__p_CGShInsTexture = {"_p_CGShInsTexture", "CGShInsTexture *", 0, 0, (void*)&_wrap_class_CGShInsTexture, 0};
static swig_type_info _swigt__p_CGShInsWireframe = {"_p_CGShInsWireframe", "CGShInsWireframe *", 0, 0, (void*)&_wrap_class_CGShInsWireframe, 0};
static swig_type_info _swigt__p_CGShInsZOp = {"_p_CGShInsZOp", "CGShInsZOp *", 0, 0, (void*)&_wrap_class_CGShInsZOp, 0};
static swig_type_info _swigt__p_CGShader = {"_p_CGShader", "CGShader *", 0, 0, (void*)&_wrap_class_CGShader, 0};
static swig_type_info _swigt__p_CGShaderDefFileWH = {"_p_CGShaderDefFileWH", "CGShaderDefFileWH *", 0, 0, (void*)&_wrap_class_CGShaderDefFileWH, 0};
static swig_type_info _swigt__p_CGShaderDefWH = {"_p_CGShaderDefWH", "CGShaderDefWH *", 0, 0, (void*)&_wrap_class_CGShaderDefWH, 0};
static swig_type_info _swigt__p_CGShaderExtDB = {"_p_CGShaderExtDB", "CGShaderExtDB *", 0, 0, (void*)&_wrap_class_CGShaderExtDB, 0};
static swig_type_info _swigt__p_CGShaderInstruction = {"_p_CGShaderInstruction", "CGShaderInstruction *", 0, 0, (void*)&_wrap_class_CGShaderInstruction, 0};
static swig_type_info _swigt__p_CGShaderParser = {"_p_CGShaderParser", "CGShaderParser *", 0, 0, (void*)&_wrap_class_CGShaderParser, 0};
static swig_type_info _swigt__p_CGShaderUtils = {"_p_CGShaderUtils", "CGShaderUtils *", 0, 0, (void*)&_wrap_class_CGShaderUtils, 0};
static swig_type_info _swigt__p_CGShaderWH = {"_p_CGShaderWH", "CGShaderWH *", 0, 0, (void*)&_wrap_class_CGShaderWH, 0};
static swig_type_info _swigt__p_CGSmoother = {"_p_CGSmoother", "CGSmoother *", 0, 0, (void*)&_wrap_class_CGSmoother, 0};
static swig_type_info _swigt__p_CGSpiralPath = {"_p_CGSpiralPath", "CGSpiralPath *", 0, 0, (void*)&_wrap_class_CGSpiralPath, 0};
static swig_type_info _swigt__p_CGStandardLC = {"_p_CGStandardLC", "CGStandardLC *", 0, 0, (void*)&_wrap_class_CGStandardLC, 0};
static swig_type_info _swigt__p_CGString = {"_p_CGString", "CGString *", 0, 0, (void*)&_wrap_class_CGString, 0};
static swig_type_info _swigt__p_CGSystemLC = {"_p_CGSystemLC", "CGSystemLC *", 0, 0, (void*)&_wrap_class_CGSystemLC, 0};
static swig_type_info _swigt__p_CGTexObjWH = {"_p_CGTexObjWH", "CGTexObjWH *", 0, 0, (void*)&_wrap_class_CGTexObjWH, 0};
static swig_type_info _swigt__p_CGTextResource = {"_p_CGTextResource", "CGTextResource *", 0, 0, (void*)&_wrap_class_CGTextResource, 0};
static swig_type_info _swigt__p_CGTextureObj = {"_p_CGTextureObj", "CGTextureObj *", 0, 0, (void*)&_wrap_class_CGTextureObj, 0};
static swig_type_info _swigt__p_CGTrail = {"_p_CGTrail", "CGTrail *", 0, 0, (void*)&_wrap_class_CGTrail, 0};
static swig_type_info _swigt__p_CGTrailGenDefFileWH = {"_p_CGTrailGenDefFileWH", "CGTrailGenDefFileWH *", 0, 0, (void*)&_wrap_class_CGTrailGenDefFileWH, 0};
static swig_type_info _swigt__p_CGTrailGenStd = {"_p_CGTrailGenStd", "CGTrailGenStd *", 0, 0, (void*)&_wrap_class_CGTrailGenStd, 0};
static swig_type_info _swigt__p_CGTrailGenWH = {"_p_CGTrailGenWH", "CGTrailGenWH *", 0, 0, (void*)&_wrap_class_CGTrailGenWH, 0};
static swig_type_info _swigt__p_CGTrailGenerator = {"_p_CGTrailGenerator", "CGTrailGenerator *", 0, 0, (void*)&_wrap_class_CGTrailGenerator, 0};
static swig_type_info _swigt__p_CGTrailInstance = {"_p_CGTrailInstance", "CGTrailInstance *", 0, 0, (void*)&_wrap_class_CGTrailInstance, 0};
static swig_type_info _swigt__p_CGTrailManager = {"_p_CGTrailManager", "CGTrailManager *", 0, 0, (void*)&_wrap_class_CGTrailManager, 0};
static swig_type_info _swigt__p_CGTriangle = {"_p_CGTriangle", "CGTriangle *", 0, 0, (void*)&_wrap_class_CGTriangle, 0};
static swig_type_info _swigt__p_CGUObject = {"_p_CGUObject", "CGUObject *", 0, 0, (void*)&_wrap_class_CGUObject, 0};
static swig_type_info _swigt__p_CGUnmanagedMesh = {"_p_CGUnmanagedMesh", "CGUnmanagedMesh *", 0, 0, (void*)&_wrap_class_CGUnmanagedMesh, 0};
static swig_type_info _swigt__p_CGVect2 = {"_p_CGVect2", "CGVect2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CGVect3 = {"_p_CGVect3", "CGVect3 *", 0, 0, (void*)&_wrap_class_CGVect3, 0};
static swig_type_info _swigt__p_CGVect4 = {"_p_CGVect4", "CGVect4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CGViewport = {"_p_CGViewport", "CGViewport *", 0, 0, (void*)&_wrap_class_CGViewport, 0};
static swig_type_info _swigt__p_CGWarningLC = {"_p_CGWarningLC", "CGWarningLC *", 0, 0, (void*)&_wrap_class_CGWarningLC, 0};
static swig_type_info _swigt__p_CHFSector = {"_p_CHFSector", "CHFSector *", 0, 0, (void*)&_wrap_class_CHFSector, 0};
static swig_type_info _swigt__p_CHFSector_FN = {"_p_CHFSector_FN", "CHFSector_FN *", 0, 0, (void*)&_wrap_class_CHFSector_FN, 0};
static swig_type_info _swigt__p_CHUD = {"_p_CHUD", "CHUD *", 0, 0, (void*)&_wrap_class_CHUD, 0};
static swig_type_info _swigt__p_CHUDElem = {"_p_CHUDElem", "CHUDElem *", 0, 0, (void*)&_wrap_class_CHUDElem, 0};
static swig_type_info _swigt__p_CHUDFile = {"_p_CHUDFile", "CHUDFile *", 0, 0, (void*)&_wrap_class_CHUDFile, 0};
static swig_type_info _swigt__p_CHUDFont = {"_p_CHUDFont", "CHUDFont *", 0, 0, (void*)&_wrap_class_CHUDFont, 0};
static swig_type_info _swigt__p_CHUDFontWH = {"_p_CHUDFontWH", "CHUDFontWH *", 0, 0, (void*)&_wrap_class_CHUDFontWH, 0};
static swig_type_info _swigt__p_CHUDIcon = {"_p_CHUDIcon", "CHUDIcon *", 0, 0, (void*)&_wrap_class_CHUDIcon, 0};
static swig_type_info _swigt__p_CHUDLabel = {"_p_CHUDLabel", "CHUDLabel *", 0, 0, (void*)&_wrap_class_CHUDLabel, 0};
static swig_type_info _swigt__p_CHUDMsgBox = {"_p_CHUDMsgBox", "CHUDMsgBox *", 0, 0, (void*)&_wrap_class_CHUDMsgBox, 0};
static swig_type_info _swigt__p_CHUDObject = {"_p_CHUDObject", "CHUDObject *", 0, 0, (void*)&_wrap_class_CHUDObject, 0};
static swig_type_info _swigt__p_CHUDProgressBar = {"_p_CHUDProgressBar", "CHUDProgressBar *", 0, 0, (void*)&_wrap_class_CHUDProgressBar, 0};
static swig_type_info _swigt__p_CHeight = {"_p_CHeight", "CHeight *", 0, 0, (void*)&_wrap_class_CHeight, 0};
static swig_type_info _swigt__p_CHeightField = {"_p_CHeightField", "CHeightField *", 0, 0, (void*)&_wrap_class_CHeightField, 0};
static swig_type_info _swigt__p_CLMSector = {"_p_CLMSector", "CLMSector *", 0, 0, (void*)&_wrap_class_CLMSector, 0};
static swig_type_info _swigt__p_CLMSector_Gray = {"_p_CLMSector_Gray", "CLMSector_Gray *", 0, 0, (void*)&_wrap_class_CLMSector_Gray, 0};
static swig_type_info _swigt__p_CLMSector_Pal = {"_p_CLMSector_Pal", "CLMSector_Pal *", 0, 0, (void*)&_wrap_class_CLMSector_Pal, 0};
static swig_type_info _swigt__p_CLMSector_RGB24 = {"_p_CLMSector_RGB24", "CLMSector_RGB24 *", 0, 0, (void*)&_wrap_class_CLMSector_RGB24, 0};
static swig_type_info _swigt__p_CLODSelector = {"_p_CLODSelector", "CLODSelector *", 0, 0, (void*)&_wrap_class_CLODSelector, 0};
static swig_type_info _swigt__p_CLODSelector_Array = {"_p_CLODSelector_Array", "CLODSelector_Array *", 0, 0, (void*)&_wrap_class_CLODSelector_Array, 0};
static swig_type_info _swigt__p_CLensFlare = {"_p_CLensFlare", "CLensFlare *", 0, 0, (void*)&_wrap_class_CLensFlare, 0};
static swig_type_info _swigt__p_CLensFlare_Elem = {"_p_CLensFlare_Elem", "CLensFlare_Elem *", 0, 0, (void*)&_wrap_class_CLensFlare_Elem, 0};
static swig_type_info _swigt__p_CLightElem = {"_p_CLightElem", "CLightElem *", 0, 0, (void*)&_wrap_class_CLightElem, 0};
static swig_type_info _swigt__p_CLightMap = {"_p_CLightMap", "CLightMap *", 0, 0, (void*)&_wrap_class_CLightMap, 0};
static swig_type_info _swigt__p_CLoader3DS = {"_p_CLoader3DS", "CLoader3DS *", 0, 0, (void*)&_wrap_class_CLoader3DS, 0};
static swig_type_info _swigt__p_CLoaderBSP2 = {"_p_CLoaderBSP2", "CLoaderBSP2 *", 0, 0, (void*)&_wrap_class_CLoaderBSP2, 0};
static swig_type_info _swigt__p_CLoaderGEM = {"_p_CLoaderGEM", "CLoaderGEM *", 0, 0, (void*)&_wrap_class_CLoaderGEM, 0};
static swig_type_info _swigt__p_CLoaderMD2 = {"_p_CLoaderMD2", "CLoaderMD2 *", 0, 0, (void*)&_wrap_class_CLoaderMD2, 0};
static swig_type_info _swigt__p_CLoaderMD3 = {"_p_CLoaderMD3", "CLoaderMD3 *", 0, 0, (void*)&_wrap_class_CLoaderMD3, 0};
static swig_type_info _swigt__p_CMenuTextGrid = {"_p_CMenuTextGrid", "CMenuTextGrid *", 0, 0, (void*)&_wrap_class_CMenuTextGrid, 0};
static swig_type_info _swigt__p_CSFXObjectInstance = {"_p_CSFXObjectInstance", "CSFXObjectInstance *", 0, 0, (void*)&_wrap_class_CSFXObjectInstance, 0};
static swig_type_info _swigt__p_CSLM_HFieldSect = {"_p_CSLM_HFieldSect", "CSLM_HFieldSect *", 0, 0, (void*)&_wrap_class_CSLM_HFieldSect, 0};
static swig_type_info _swigt__p_CSLM_LMapSect = {"_p_CSLM_LMapSect", "CSLM_LMapSect *", 0, 0, (void*)&_wrap_class_CSLM_LMapSect, 0};
static swig_type_info _swigt__p_CSLM_TMapSect = {"_p_CSLM_TMapSect", "CSLM_TMapSect *", 0, 0, (void*)&_wrap_class_CSLM_TMapSect, 0};
static swig_type_info _swigt__p_CSaverGEM = {"_p_CSaverGEM", "CSaverGEM *", 0, 0, (void*)&_wrap_class_CSaverGEM, 0};
static swig_type_info _swigt__p_CSectElem = {"_p_CSectElem", "CSectElem *", 0, 0, (void*)&_wrap_class_CSectElem, 0};
static swig_type_info _swigt__p_CSector = {"_p_CSector", "CSector *", 0, 0, (void*)&_wrap_class_CSector, 0};
static swig_type_info _swigt__p_CSectorLoaderManager = {"_p_CSectorLoaderManager", "CSectorLoaderManager *", 0, 0, (void*)&_wrap_class_CSectorLoaderManager, 0};
static swig_type_info _swigt__p_CSectorMatrix = {"_p_CSectorMatrix", "CSectorMatrix *", 0, 0, (void*)&_wrap_class_CSectorMatrix, 0};
static swig_type_info _swigt__p_CShadowCaster = {"_p_CShadowCaster", "CShadowCaster *", 0, 0, (void*)&_wrap_class_CShadowCaster, 0};
static swig_type_info _swigt__p_CSkyBox = {"_p_CSkyBox", "CSkyBox *", 0, 0, (void*)&_wrap_class_CSkyBox, 0};
static swig_type_info _swigt__p_CSkyDome = {"_p_CSkyDome", "CSkyDome *", 0, 0, (void*)&_wrap_class_CSkyDome, 0};
static swig_type_info _swigt__p_CTMSector = {"_p_CTMSector", "CTMSector *", 0, 0, (void*)&_wrap_class_CTMSector, 0};
static swig_type_info _swigt__p_CTMSector_8_16 = {"_p_CTMSector_8_16", "CTMSector_8_16 *", 0, 0, (void*)&_wrap_class_CTMSector_8_16, 0};
static swig_type_info _swigt__p_CTerrainCircuit = {"_p_CTerrainCircuit", "CTerrainCircuit *", 0, 0, (void*)&_wrap_class_CTerrainCircuit, 0};
static swig_type_info _swigt__p_CTerrainSector = {"_p_CTerrainSector", "CTerrainSector *", 0, 0, (void*)&_wrap_class_CTerrainSector, 0};
static swig_type_info _swigt__p_CTerrainTesselator = {"_p_CTerrainTesselator", "CTerrainTesselator *", 0, 0, (void*)&_wrap_class_CTerrainTesselator, 0};
static swig_type_info _swigt__p_CTerrainTesselatorGM = {"_p_CTerrainTesselatorGM", "CTerrainTesselatorGM *", 0, 0, (void*)&_wrap_class_CTerrainTesselatorGM, 0};
static swig_type_info _swigt__p_CTexMap = {"_p_CTexMap", "CTexMap *", 0, 0, (void*)&_wrap_class_CTexMap, 0};
static swig_type_info _swigt__p_CTexProjector = {"_p_CTexProjector", "CTexProjector *", 0, 0, (void*)&_wrap_class_CTexProjector, 0};
static swig_type_info _swigt__p_CTexSector = {"_p_CTexSector", "CTexSector *", 0, 0, (void*)&_wrap_class_CTexSector, 0};
static swig_type_info _swigt__p_CTile = {"_p_CTile", "CTile *", 0, 0, (void*)&_wrap_class_CTile, 0};
static swig_type_info _swigt__p_CTileBookmark = {"_p_CTileBookmark", "CTileBookmark *", 0, 0, (void*)&_wrap_class_CTileBookmark, 0};
static swig_type_info _swigt__p_E3D_BlendMode = {"_p_E3D_BlendMode", "E3D_BlendMode *|enum E3D_BlendMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_ChannelMask = {"_p_E3D_ChannelMask", "E3D_ChannelMask *|enum E3D_ChannelMask *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_FogMode = {"_p_E3D_FogMode", "E3D_FogMode *|enum E3D_FogMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_MeshType = {"_p_E3D_MeshType", "E3D_MeshType *|enum E3D_MeshType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_PrimitiveType = {"_p_E3D_PrimitiveType", "E3D_PrimitiveType *|enum E3D_PrimitiveType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_ProjectorType = {"_p_E3D_ProjectorType", "E3D_ProjectorType *|enum E3D_ProjectorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_RenderBuffer_Type = {"_p_E3D_RenderBuffer_Type", "E3D_RenderBuffer_Type *|enum E3D_RenderBuffer_Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_ShaderInstructionType = {"_p_E3D_ShaderInstructionType", "E3D_ShaderInstructionType *|enum E3D_ShaderInstructionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_StencilAction = {"_p_E3D_StencilAction", "E3D_StencilAction *|enum E3D_StencilAction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_StencilFunc = {"_p_E3D_StencilFunc", "E3D_StencilFunc *|enum E3D_StencilFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_ZTestFunc = {"_p_E3D_ZTestFunc", "E3D_ZTestFunc *|enum E3D_ZTestFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_E3D_ZWrite = {"_p_E3D_ZWrite", "E3D_ZWrite *|enum E3D_ZWrite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECOL_ColliderType = {"_p_ECOL_ColliderType", "ECOL_ColliderType *|enum ECOL_ColliderType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECOL_TestType = {"_p_ECOL_TestType", "ECOL_TestType *|enum ECOL_TestType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EFileOpenMode = {"_p_EFileOpenMode", "EFileOpenMode *|enum EFileOpenMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EFileOperationResult = {"_p_EFileOperationResult", "EFileOperationResult *|enum EFileOperationResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EFileSeekMode = {"_p_EFileSeekMode", "EFileSeekMode *|enum EFileSeekMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EGenerationMethod = {"_p_EGenerationMethod", "EGenerationMethod *|enum EGenerationMethod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EImageFormat = {"_p_EImageFormat", "EImageFormat *|enum EImageFormat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ESceneNodeType = {"_p_ESceneNodeType", "ESceneNodeType *|enum ESceneNodeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EShInsGeoOp = {"_p_EShInsGeoOp", "EShInsGeoOp *|enum EShInsGeoOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EShInsTexOp = {"_p_EShInsTexOp", "EShInsTexOp *|enum EShInsTexOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Q3triangle_t = {"_p_Q3triangle_t", "Q3triangle_t *", 0, 0, (void*)&_wrap_class_Q3triangle_t, 0};
static swig_type_info _swigt__p_SCNUt_AdjTri = {"_p_SCNUt_AdjTri", "SCNUt_AdjTri *", 0, 0, (void*)&_wrap_class_SCNUt_AdjTri, 0};
static swig_type_info _swigt__p_SCNUt_AdjTriList = {"_p_SCNUt_AdjTriList", "SCNUt_AdjTriList *", 0, 0, (void*)&_wrap_class_SCNUt_AdjTriList, 0};
static swig_type_info _swigt__p_SCNUt_AdjTriListBuilder = {"_p_SCNUt_AdjTriListBuilder", "SCNUt_AdjTriListBuilder *", 0, 0, (void*)&_wrap_class_SCNUt_AdjTriListBuilder, 0};
static swig_type_info _swigt__p_SCNUt_AnimMesh_NormalComputer = {"_p_SCNUt_AnimMesh_NormalComputer", "SCNUt_AnimMesh_NormalComputer *", 0, 0, (void*)&_wrap_class_SCNUt_AnimMesh_NormalComputer, 0};
static swig_type_info _swigt__p_SCNUt_AnimSceneLoader = {"_p_SCNUt_AnimSceneLoader", "SCNUt_AnimSceneLoader *", 0, 0, (void*)&_wrap_class_SCNUt_AnimSceneLoader, 0};
static swig_type_info _swigt__p_SCNUt_BSPBuilder = {"_p_SCNUt_BSPBuilder", "SCNUt_BSPBuilder *", 0, 0, (void*)&_wrap_class_SCNUt_BSPBuilder, 0};
static swig_type_info _swigt__p_SCNUt_ComputeBoundingBox = {"_p_SCNUt_ComputeBoundingBox", "SCNUt_ComputeBoundingBox *", 0, 0, (void*)&_wrap_class_SCNUt_ComputeBoundingBox, 0};
static swig_type_info _swigt__p_SCNUt_CoplanarRemover = {"_p_SCNUt_CoplanarRemover", "SCNUt_CoplanarRemover *", 0, 0, (void*)&_wrap_class_SCNUt_CoplanarRemover, 0};
static swig_type_info _swigt__p_SCNUt_Edge = {"_p_SCNUt_Edge", "SCNUt_Edge *", 0, 0, (void*)&_wrap_class_SCNUt_Edge, 0};
static swig_type_info _swigt__p_SCNUt_EdgeBuilder = {"_p_SCNUt_EdgeBuilder", "SCNUt_EdgeBuilder *", 0, 0, (void*)&_wrap_class_SCNUt_EdgeBuilder, 0};
static swig_type_info _swigt__p_SCNUt_EdgeList = {"_p_SCNUt_EdgeList", "SCNUt_EdgeList *", 0, 0, (void*)&_wrap_class_SCNUt_EdgeList, 0};
static swig_type_info _swigt__p_SCNUt_MaterialTable = {"_p_SCNUt_MaterialTable", "SCNUt_MaterialTable *", 0, 0, (void*)&_wrap_class_SCNUt_MaterialTable, 0};
static swig_type_info _swigt__p_SCNUt_Mesh2TriScene = {"_p_SCNUt_Mesh2TriScene", "SCNUt_Mesh2TriScene *", 0, 0, (void*)&_wrap_class_SCNUt_Mesh2TriScene, 0};
static swig_type_info _swigt__p_SCNUt_MeshCompacter = {"_p_SCNUt_MeshCompacter", "SCNUt_MeshCompacter *", 0, 0, (void*)&_wrap_class_SCNUt_MeshCompacter, 0};
static swig_type_info _swigt__p_SCNUt_MeshGenerator = {"_p_SCNUt_MeshGenerator", "SCNUt_MeshGenerator *", 0, 0, (void*)&_wrap_class_SCNUt_MeshGenerator, 0};
static swig_type_info _swigt__p_SCNUt_OctreeBuilder = {"_p_SCNUt_OctreeBuilder", "SCNUt_OctreeBuilder *", 0, 0, (void*)&_wrap_class_SCNUt_OctreeBuilder, 0};
static swig_type_info _swigt__p_SCNUt_PlanarMapper = {"_p_SCNUt_PlanarMapper", "SCNUt_PlanarMapper *", 0, 0, (void*)&_wrap_class_SCNUt_PlanarMapper, 0};
static swig_type_info _swigt__p_SCNUt_SceneBuilder = {"_p_SCNUt_SceneBuilder", "SCNUt_SceneBuilder *", 0, 0, (void*)&_wrap_class_SCNUt_SceneBuilder, 0};
static swig_type_info _swigt__p_SCNUt_SceneCompiler = {"_p_SCNUt_SceneCompiler", "SCNUt_SceneCompiler *", 0, 0, (void*)&_wrap_class_SCNUt_SceneCompiler, 0};
static swig_type_info _swigt__p_SCNUt_Scn2TriScnBuilder = {"_p_SCNUt_Scn2TriScnBuilder", "SCNUt_Scn2TriScnBuilder *", 0, 0, (void*)&_wrap_class_SCNUt_Scn2TriScnBuilder, 0};
static swig_type_info _swigt__p_SCNUt_ShaderAssigner = {"_p_SCNUt_ShaderAssigner", "SCNUt_ShaderAssigner *", 0, 0, (void*)&_wrap_class_SCNUt_ShaderAssigner, 0};
static swig_type_info _swigt__p_SCNUt_Stripifier = {"_p_SCNUt_Stripifier", "SCNUt_Stripifier *", 0, 0, (void*)&_wrap_class_SCNUt_Stripifier, 0};
static swig_type_info _swigt__p_SCNUt_TransformTriScene = {"_p_SCNUt_TransformTriScene", "SCNUt_TransformTriScene *", 0, 0, (void*)&_wrap_class_SCNUt_TransformTriScene, 0};
static swig_type_info _swigt__p_SCNUt_TriScene = {"_p_SCNUt_TriScene", "SCNUt_TriScene *", 0, 0, (void*)&_wrap_class_SCNUt_TriScene, 0};
static swig_type_info _swigt__p_SCNUt_TriSceneAccumulator = {"_p_SCNUt_TriSceneAccumulator", "SCNUt_TriSceneAccumulator *", 0, 0, (void*)&_wrap_class_SCNUt_TriSceneAccumulator, 0};
static swig_type_info _swigt__p_SCNUt_TriSceneClassifier = {"_p_SCNUt_TriSceneClassifier", "SCNUt_TriSceneClassifier *", 0, 0, (void*)&_wrap_class_SCNUt_TriSceneClassifier, 0};
static swig_type_info _swigt__p_SCNUt_TriSceneLoader = {"_p_SCNUt_TriSceneLoader", "SCNUt_TriSceneLoader *", 0, 0, (void*)&_wrap_class_SCNUt_TriSceneLoader, 0};
static swig_type_info _swigt__p_SCNUt_TriSceneSaver = {"_p_SCNUt_TriSceneSaver", "SCNUt_TriSceneSaver *", 0, 0, (void*)&_wrap_class_SCNUt_TriSceneSaver, 0};
static swig_type_info _swigt__p_SCNUt_TriSceneSeparator = {"_p_SCNUt_TriSceneSeparator", "SCNUt_TriSceneSeparator *", 0, 0, (void*)&_wrap_class_SCNUt_TriSceneSeparator, 0};
static swig_type_info _swigt__p_SCNUt_TriSceneSplitter = {"_p_SCNUt_TriSceneSplitter", "SCNUt_TriSceneSplitter *", 0, 0, (void*)&_wrap_class_SCNUt_TriSceneSplitter, 0};
static swig_type_info _swigt__p_SCNUt_TriUtils = {"_p_SCNUt_TriUtils", "SCNUt_TriUtils *", 0, 0, (void*)&_wrap_class_SCNUt_TriUtils, 0};
static swig_type_info _swigt__p_SCNUt_Triangle = {"_p_SCNUt_Triangle", "SCNUt_Triangle *", 0, 0, (void*)&_wrap_class_SCNUt_Triangle, 0};
static swig_type_info _swigt__p_SCNUt_VisibilityTester = {"_p_SCNUt_VisibilityTester", "SCNUt_VisibilityTester *", 0, 0, (void*)&_wrap_class_SCNUt_VisibilityTester, 0};
static swig_type_info _swigt__p_SCNUt_ePolyState = {"_p_SCNUt_ePolyState", "SCNUt_ePolyState *|enum SCNUt_ePolyState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T3DS_Chunk = {"_p_T3DS_Chunk", "T3DS_Chunk *", 0, 0, (void*)&_wrap_class_T3DS_Chunk, 0};
static swig_type_info _swigt__p_TERSceneLoader = {"_p_TERSceneLoader", "TERSceneLoader *", 0, 0, (void*)&_wrap_class_TERSceneLoader, 0};
static swig_type_info _swigt__p_TEnvironmentPars = {"_p_TEnvironmentPars", "TEnvironmentPars *", 0, 0, (void*)&_wrap_class_TEnvironmentPars, 0};
static swig_type_info _swigt__p_TGMState = {"_p_TGMState", "TGMState *|enum TGMState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_THeightFieldData = {"_p_THeightFieldData", "THeightFieldData *", 0, 0, (void*)&_wrap_class_THeightFieldData, 0};
static swig_type_info _swigt__p_TMsgLine = {"_p_TMsgLine", "TMsgLine *", 0, 0, (void*)&_wrap_class_TMsgLine, 0};
static swig_type_info _swigt__p_TSpiralPathParams = {"_p_TSpiralPathParams", "TSpiralPathParams *", 0, 0, (void*)&_wrap_class_TSpiralPathParams, 0};
static swig_type_info _swigt__p_TTexSet = {"_p_TTexSet", "TTexSet *", 0, 0, (void*)&_wrap_class_TTexSet, 0};
static swig_type_info _swigt__p_TTextureEntry = {"_p_TTextureEntry", "TTextureEntry *", 0, 0, (void*)&_wrap_class_TTextureEntry, 0};
static swig_type_info _swigt__p_TVertexRef = {"_p_TVertexRef", "TVertexRef *", 0, 0, (void*)&_wrap_class_TVertexRef, 0};
static swig_type_info _swigt__p_a_3__float = {"_p_a_3__float", "float (*)[3]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_animNumber_t = {"_p_animNumber_t", "animNumber_t *|enum animNumber_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anim_t = {"_p_anim_t", "anim_t *", 0, 0, (void*)&_wrap_class_anim_t, 0};
static swig_type_info _swigt__p_boneframe_t = {"_p_boneframe_t", "boneframe_t *", 0, 0, (void*)&_wrap_class_boneframe_t, 0};
static swig_type_info _swigt__p_bsp_edge = {"_p_bsp_edge", "bsp_edge *", 0, 0, (void*)&_wrap_class_bsp_edge, 0};
static swig_type_info _swigt__p_bsp_face = {"_p_bsp_face", "bsp_face *", 0, 0, (void*)&_wrap_class_bsp_face, 0};
static swig_type_info _swigt__p_bsp_face_edge = {"_p_bsp_face_edge", "bsp_face_edge *", 0, 0, (void*)&_wrap_class_bsp_face_edge, 0};
static swig_type_info _swigt__p_bsp_header = {"_p_bsp_header", "bsp_header *", 0, 0, (void*)&_wrap_class_bsp_header, 0};
static swig_type_info _swigt__p_bsp_leaf = {"_p_bsp_leaf", "bsp_leaf *", 0, 0, (void*)&_wrap_class_bsp_leaf, 0};
static swig_type_info _swigt__p_bsp_leaf_face = {"_p_bsp_leaf_face", "bsp_leaf_face *", 0, 0, (void*)&_wrap_class_bsp_leaf_face, 0};
static swig_type_info _swigt__p_bsp_lump = {"_p_bsp_lump", "bsp_lump *", 0, 0, (void*)&_wrap_class_bsp_lump, 0};
static swig_type_info _swigt__p_bsp_node = {"_p_bsp_node", "bsp_node *", 0, 0, (void*)&_wrap_class_bsp_node, 0};
static swig_type_info _swigt__p_bsp_plane = {"_p_bsp_plane", "bsp_plane *", 0, 0, (void*)&_wrap_class_bsp_plane, 0};
static swig_type_info _swigt__p_bsp_point3f = {"_p_bsp_point3f", "bsp_point3f *", 0, 0, (void*)&_wrap_class_bsp_point3f, 0};
static swig_type_info _swigt__p_bsp_point3s = {"_p_bsp_point3s", "bsp_point3s *", 0, 0, (void*)&_wrap_class_bsp_point3s, 0};
static swig_type_info _swigt__p_bsp_texinfo = {"_p_bsp_texinfo", "bsp_texinfo *", 0, 0, (void*)&_wrap_class_bsp_texinfo, 0};
static swig_type_info _swigt__p_bsp_vis = {"_p_bsp_vis", "bsp_vis *", 0, 0, (void*)&_wrap_class_bsp_vis, 0};
static swig_type_info _swigt__p_bsp_vis_offset = {"_p_bsp_vis_offset", "bsp_vis_offset *", 0, 0, (void*)&_wrap_class_bsp_vis_offset, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eLightType = {"_p_eLightType", "eLightType *|enum eLightType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ext_texinfo = {"_p_ext_texinfo", "ext_texinfo *", 0, 0, (void*)&_wrap_class_ext_texinfo, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "TExtensionFunction|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void = {"_p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void", "TDispatchCommandCallback|void (*)(unsigned int,unsigned int,unsigned int,CGString const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_frame_t = {"_p_frame_t", "frame_t *", 0, 0, (void*)&_wrap_class_frame_t, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_md3_header_t = {"_p_md3_header_t", "md3_header_t *", 0, 0, (void*)&_wrap_class_md3_header_t, 0};
static swig_type_info _swigt__p_mesh_header_t = {"_p_mesh_header_t", "mesh_header_t *", 0, 0, (void*)&_wrap_class_mesh_header_t, 0};
static swig_type_info _swigt__p_mesh_t = {"_p_mesh_t", "mesh_t *", 0, 0, (void*)&_wrap_class_mesh_t, 0};
static swig_type_info _swigt__p_model_t = {"_p_model_t", "model_t *", 0, 0, (void*)&_wrap_class_model_t, 0};
static swig_type_info _swigt__p_p_CCOL_Collider = {"_p_p_CCOL_Collider", "CCOL_Collider **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_CGMesh = {"_p_p_CGMesh", "CGMesh **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_CGMeshBox = {"_p_p_CGMeshBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGMeshCross = {"_p_p_CGMeshCross", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGMeshRect = {"_p_p_CGMeshRect", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGMeshSphere = {"_p_p_CGMeshSphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGUnmanagedMesh = {"_p_p_CGUnmanagedMesh", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CMenuTextGrid = {"_p_p_CMenuTextGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShader = {"_p_p_CGShader", "CGShader **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_CGShaderInstruction = {"_p_p_CGShaderInstruction", "CGShaderInstruction **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_CGShInsBlendOp = {"_p_p_CGShInsBlendOp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsColor = {"_p_p_CGShInsColor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsExtension = {"_p_p_CGShInsExtension", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsGeoOp = {"_p_p_CGShInsGeoOp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsProgram = {"_p_p_CGShInsProgram", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsSetTMU = {"_p_p_CGShInsSetTMU", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsTexOp = {"_p_p_CGShInsTexOp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsTexture = {"_p_p_CGShInsTexture", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsWireframe = {"_p_p_CGShInsWireframe", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_CGShInsZOp = {"_p_p_CGShInsZOp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_skin_file_t = {"_p_skin_file_t", "skin_file_t *", 0, 0, (void*)&_wrap_class_skin_file_t, 0};
static swig_type_info _swigt__p_skin_mesh_entry_t = {"_p_skin_mesh_entry_t", "skin_mesh_entry_t *", 0, 0, (void*)&_wrap_class_skin_mesh_entry_t, 0};
static swig_type_info _swigt__p_skin_t = {"_p_skin_t", "skin_t *", 0, 0, (void*)&_wrap_class_skin_t, 0};
static swig_type_info _swigt__p_skin_tag_entry_t = {"_p_skin_tag_entry_t", "skin_tag_entry_t *", 0, 0, (void*)&_wrap_class_skin_tag_entry_t, 0};
static swig_type_info _swigt__p_tag_t = {"_p_tag_t", "tag_t *", 0, 0, (void*)&_wrap_class_tag_t, 0};
static swig_type_info _swigt__p_tex_coord_t = {"_p_tex_coord_t", "tex_coord_t *", 0, 0, (void*)&_wrap_class_tex_coord_t, 0};
static swig_type_info _swigt__p_textureCoordinate_t = {"_p_textureCoordinate_t", "textureCoordinate_t *", 0, 0, (void*)&_wrap_class_textureCoordinate_t, 0};
static swig_type_info _swigt__p_triangleVertex_t = {"_p_triangleVertex_t", "triangleVertex_t *", 0, 0, (void*)&_wrap_class_triangleVertex_t, 0};
static swig_type_info _swigt__p_triangle_t = {"_p_triangle_t", "triangle_t *", 0, 0, (void*)&_wrap_class_triangle_t, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "pointer|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vertice_t = {"_p_vertice_t", "vertice_t *", 0, 0, (void*)&_wrap_class_vertice_t, 0};
static swig_type_info _swigt__p_void = {"_p_void", "handler|uobject|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_C3DLoader,
  &_swigt__p_C3DSaver,
  &_swigt__p_CAnimAction,
  &_swigt__p_CCOL_ColState,
  &_swigt__p_CCOL_Collider,
  &_swigt__p_CCOL_CollisionSystem,
  &_swigt__p_CCOL_DT_Box,
  &_swigt__p_CCOL_DT_ColTester,
  &_swigt__p_CCOL_DT_Point,
  &_swigt__p_CCOL_DT_Sphere,
  &_swigt__p_CCOL_DT_Tri,
  &_swigt__p_CCOL_MT_CommonMesh,
  &_swigt__p_CCOL_MT_TerrainMesh,
  &_swigt__p_CCOL_Mesh,
  &_swigt__p_CCOL_MeshTester,
  &_swigt__p_CCOL_ST_Box,
  &_swigt__p_CCOL_ST_ColTester,
  &_swigt__p_CCOL_ST_Point,
  &_swigt__p_CCOL_ST_Sphere,
  &_swigt__p_CCOL_ST_Tris,
  &_swigt__p_CCOL_Scn_ColTester,
  &_swigt__p_CCOL_Scn_TriListGen,
  &_swigt__p_CCOL_Stack,
  &_swigt__p_CCOL_StackCollisionElem,
  &_swigt__p_CCOL_TRN_TriListGen,
  &_swigt__p_CCOL_TriList,
  &_swigt__p_CCOL_TriListGen,
  &_swigt__p_CCOL_TriList_BVRayTest,
  &_swigt__p_CColor,
  &_swigt__p_CCompactMeshData,
  &_swigt__p_CConsole,
  &_swigt__p_CDetailer,
  &_swigt__p_CG4PCurve,
  &_swigt__p_CGAIAStar,
  &_swigt__p_CGAIDXAStar,
  &_swigt__p_CGAIMap,
  &_swigt__p_CGAIMathFuncs,
  &_swigt__p_CGBVAABB,
  &_swigt__p_CGBVCylinder,
  &_swigt__p_CGBVFrustum,
  &_swigt__p_CGBVPoint,
  &_swigt__p_CGBVSphere,
  &_swigt__p_CGBaseMesh,
  &_swigt__p_CGBillboard,
  &_swigt__p_CGBillboardRenderer,
  &_swigt__p_CGBillboard_AxisAlign,
  &_swigt__p_CGBillboard_ScrAlign,
  &_swigt__p_CGBillboard_WorldAlign,
  &_swigt__p_CGBoundingVolume,
  &_swigt__p_CGCamera,
  &_swigt__p_CGChrono,
  &_swigt__p_CGColor,
  &_swigt__p_CGCommandBinder,
  &_swigt__p_CGCommandBindingLoader,
  &_swigt__p_CGCommandRegistry,
  &_swigt__p_CGCompiledMesh,
  &_swigt__p_CGConfigFile,
  &_swigt__p_CGControlPoint,
  &_swigt__p_CGCorona,
  &_swigt__p_CGCoronaGenDefFileWH,
  &_swigt__p_CGCoronaGenStd,
  &_swigt__p_CGCoronaGenWH,
  &_swigt__p_CGCoronaGenerator,
  &_swigt__p_CGCoronaInstance,
  &_swigt__p_CGCoronaManager,
  &_swigt__p_CGCurve,
  &_swigt__p_CGCurveDynamic,
  &_swigt__p_CGCurvePath,
  &_swigt__p_CGDefferredMeshDB,
  &_swigt__p_CGDefferredMeshEntry,
  &_swigt__p_CGDynArrayT_CGControlPoint_t,
  &_swigt__p_CGDynArrayT_CGString_t,
  &_swigt__p_CGDynArrayT_CGVect3_t,
  &_swigt__p_CGDynArrayT_TVertexRef_t,
  &_swigt__p_CGE3DRenderer,
  &_swigt__p_CGErrorLC,
  &_swigt__p_CGEvalBinary,
  &_swigt__p_CGEvalConst,
  &_swigt__p_CGEvalCos,
  &_swigt__p_CGEvalMult,
  &_swigt__p_CGEvalPeriodic,
  &_swigt__p_CGEvalSawTooth,
  &_swigt__p_CGEvalSin,
  &_swigt__p_CGEvalSquare,
  &_swigt__p_CGEvalSum,
  &_swigt__p_CGEvalTime,
  &_swigt__p_CGEvalTriangle,
  &_swigt__p_CGEvaluator,
  &_swigt__p_CGFile,
  &_swigt__p_CGFileSysManager,
  &_swigt__p_CGFileSysMgrMultiPAK,
  &_swigt__p_CGFileSysMgrMultiZIP,
  &_swigt__p_CGFileSysMgrPAK,
  &_swigt__p_CGFileSysMgrZIP,
  &_swigt__p_CGFileUtils,
  &_swigt__p_CGGCICommand,
  &_swigt__p_CGGCICommandClearErrorLog,
  &_swigt__p_CGGCICommandClearSysLog,
  &_swigt__p_CGGCICommandErrorLog,
  &_swigt__p_CGGCICommandListEntities,
  &_swigt__p_CGGCICommandSwitchEntityState,
  &_swigt__p_CGGCICommandSystemLog,
  &_swigt__p_CGGEntityRenderMgr,
  &_swigt__p_CGGEntityStateRegistry,
  &_swigt__p_CGGameApplication,
  &_swigt__p_CGGameBase,
  &_swigt__p_CGGameCommandInterpreter,
  &_swigt__p_CGGameConsoleApp,
  &_swigt__p_CGGameEntity,
  &_swigt__p_CGGameEntityMgr,
  &_swigt__p_CGGameEntitySpawner,
  &_swigt__p_CGGameExtendedCI,
  &_swigt__p_CGGameMessage,
  &_swigt__p_CGGameMessageMgr,
  &_swigt__p_CGGameMode,
  &_swigt__p_CGGameRegistry,
  &_swigt__p_CGGraphBV,
  &_swigt__p_CGGraphBVAABB,
  &_swigt__p_CGGraphBVCylinder,
  &_swigt__p_CGGraphBVFactory,
  &_swigt__p_CGGraphBVFileIO,
  &_swigt__p_CGGraphBVPoint,
  &_swigt__p_CGGraphBVSphere,
  &_swigt__p_CGGraphicInstance,
  &_swigt__p_CGGraphicResource,
  &_swigt__p_CGGraphicResourceWH,
  &_swigt__p_CGInputHandler,
  &_swigt__p_CGInputRegistry,
  &_swigt__p_CGLight,
  &_swigt__p_CGLiveGameEntity,
  &_swigt__p_CGLogChannel,
  &_swigt__p_CGLogger,
  &_swigt__p_CGMatrix4x4,
  &_swigt__p_CGMesh,
  &_swigt__p_CGMeshBox,
  &_swigt__p_CGMeshCross,
  &_swigt__p_CGMeshRect,
  &_swigt__p_CGMeshSphere,
  &_swigt__p_CGMipMap,
  &_swigt__p_CGMipMapWH,
  &_swigt__p_CGOSFile,
  &_swigt__p_CGPSGDefFileWH,
  &_swigt__p_CGPSGGeneric,
  &_swigt__p_CGPSGGenericQuad,
  &_swigt__p_CGPSGGenericQuadOrbit,
  &_swigt__p_CGPSGGenericQuadParticle,
  &_swigt__p_CGPSIManager,
  &_swigt__p_CGPSysGenWH,
  &_swigt__p_CGParticle,
  &_swigt__p_CGParticleSystemGenerator,
  &_swigt__p_CGParticleSystemInstance,
  &_swigt__p_CGPath,
  &_swigt__p_CGPathDefinitionFileWH,
  &_swigt__p_CGPathResource,
  &_swigt__p_CGPathResourceWH,
  &_swigt__p_CGPlane,
  &_swigt__p_CGProgram,
  &_swigt__p_CGProgramWH,
  &_swigt__p_CGProjector,
  &_swigt__p_CGQuaternion,
  &_swigt__p_CGRay,
  &_swigt__p_CGReferenceCounter,
  &_swigt__p_CGRenderState,
  &_swigt__p_CGRenderStats,
  &_swigt__p_CGRenderVars,
  &_swigt__p_CGRenderer,
  &_swigt__p_CGResource,
  &_swigt__p_CGSCNVAnimUpdater,
  &_swigt__p_CGSCNVBoundVolBuilder,
  &_swigt__p_CGSCNVRenderer,
  &_swigt__p_CGSCNVVisibilityChecker,
  &_swigt__p_CGSceneAnimActionSet,
  &_swigt__p_CGSceneAnimGroup,
  &_swigt__p_CGSceneAnimMesh,
  &_swigt__p_CGSceneAnimNode,
  &_swigt__p_CGSceneAnimTransf,
  &_swigt__p_CGSceneBSPNode,
  &_swigt__p_CGSceneCamera,
  &_swigt__p_CGSceneGroup,
  &_swigt__p_CGSceneInstance,
  &_swigt__p_CGSceneLeaf,
  &_swigt__p_CGSceneMux,
  &_swigt__p_CGSceneNode,
  &_swigt__p_CGSceneReflector,
  &_swigt__p_CGSceneScreenRect,
  &_swigt__p_CGSceneSwitch,
  &_swigt__p_CGSceneTransf,
  &_swigt__p_CGSceneVisitor,
  &_swigt__p_CGScriptInstance,
  &_swigt__p_CGScriptResource,
  &_swigt__p_CGScriptResourceWH,
  &_swigt__p_CGScriptingSystem,
  &_swigt__p_CGSegment,
  &_swigt__p_CGShInsBlendOp,
  &_swigt__p_CGShInsColor,
  &_swigt__p_CGShInsExtension,
  &_swigt__p_CGShInsGeoOp,
  &_swigt__p_CGShInsProgram,
  &_swigt__p_CGShInsSetTMU,
  &_swigt__p_CGShInsTexOp,
  &_swigt__p_CGShInsTexture,
  &_swigt__p_CGShInsWireframe,
  &_swigt__p_CGShInsZOp,
  &_swigt__p_CGShader,
  &_swigt__p_CGShaderDefFileWH,
  &_swigt__p_CGShaderDefWH,
  &_swigt__p_CGShaderExtDB,
  &_swigt__p_CGShaderInstruction,
  &_swigt__p_CGShaderParser,
  &_swigt__p_CGShaderUtils,
  &_swigt__p_CGShaderWH,
  &_swigt__p_CGSmoother,
  &_swigt__p_CGSpiralPath,
  &_swigt__p_CGStandardLC,
  &_swigt__p_CGString,
  &_swigt__p_CGSystemLC,
  &_swigt__p_CGTexObjWH,
  &_swigt__p_CGTextResource,
  &_swigt__p_CGTextureObj,
  &_swigt__p_CGTrail,
  &_swigt__p_CGTrailGenDefFileWH,
  &_swigt__p_CGTrailGenStd,
  &_swigt__p_CGTrailGenWH,
  &_swigt__p_CGTrailGenerator,
  &_swigt__p_CGTrailInstance,
  &_swigt__p_CGTrailManager,
  &_swigt__p_CGTriangle,
  &_swigt__p_CGUObject,
  &_swigt__p_CGUnmanagedMesh,
  &_swigt__p_CGVect2,
  &_swigt__p_CGVect3,
  &_swigt__p_CGVect4,
  &_swigt__p_CGViewport,
  &_swigt__p_CGWarningLC,
  &_swigt__p_CHFSector,
  &_swigt__p_CHFSector_FN,
  &_swigt__p_CHUD,
  &_swigt__p_CHUDElem,
  &_swigt__p_CHUDFile,
  &_swigt__p_CHUDFont,
  &_swigt__p_CHUDFontWH,
  &_swigt__p_CHUDIcon,
  &_swigt__p_CHUDLabel,
  &_swigt__p_CHUDMsgBox,
  &_swigt__p_CHUDObject,
  &_swigt__p_CHUDProgressBar,
  &_swigt__p_CHeight,
  &_swigt__p_CHeightField,
  &_swigt__p_CLMSector,
  &_swigt__p_CLMSector_Gray,
  &_swigt__p_CLMSector_Pal,
  &_swigt__p_CLMSector_RGB24,
  &_swigt__p_CLODSelector,
  &_swigt__p_CLODSelector_Array,
  &_swigt__p_CLensFlare,
  &_swigt__p_CLensFlare_Elem,
  &_swigt__p_CLightElem,
  &_swigt__p_CLightMap,
  &_swigt__p_CLoader3DS,
  &_swigt__p_CLoaderBSP2,
  &_swigt__p_CLoaderGEM,
  &_swigt__p_CLoaderMD2,
  &_swigt__p_CLoaderMD3,
  &_swigt__p_CMenuTextGrid,
  &_swigt__p_CSFXObjectInstance,
  &_swigt__p_CSLM_HFieldSect,
  &_swigt__p_CSLM_LMapSect,
  &_swigt__p_CSLM_TMapSect,
  &_swigt__p_CSaverGEM,
  &_swigt__p_CSectElem,
  &_swigt__p_CSector,
  &_swigt__p_CSectorLoaderManager,
  &_swigt__p_CSectorMatrix,
  &_swigt__p_CShadowCaster,
  &_swigt__p_CSkyBox,
  &_swigt__p_CSkyDome,
  &_swigt__p_CTMSector,
  &_swigt__p_CTMSector_8_16,
  &_swigt__p_CTerrainCircuit,
  &_swigt__p_CTerrainSector,
  &_swigt__p_CTerrainTesselator,
  &_swigt__p_CTerrainTesselatorGM,
  &_swigt__p_CTexMap,
  &_swigt__p_CTexProjector,
  &_swigt__p_CTexSector,
  &_swigt__p_CTile,
  &_swigt__p_CTileBookmark,
  &_swigt__p_E3D_BlendMode,
  &_swigt__p_E3D_ChannelMask,
  &_swigt__p_E3D_FogMode,
  &_swigt__p_E3D_MeshType,
  &_swigt__p_E3D_PrimitiveType,
  &_swigt__p_E3D_ProjectorType,
  &_swigt__p_E3D_RenderBuffer_Type,
  &_swigt__p_E3D_ShaderInstructionType,
  &_swigt__p_E3D_StencilAction,
  &_swigt__p_E3D_StencilFunc,
  &_swigt__p_E3D_ZTestFunc,
  &_swigt__p_E3D_ZWrite,
  &_swigt__p_ECOL_ColliderType,
  &_swigt__p_ECOL_TestType,
  &_swigt__p_EFileOpenMode,
  &_swigt__p_EFileOperationResult,
  &_swigt__p_EFileSeekMode,
  &_swigt__p_EGenerationMethod,
  &_swigt__p_EImageFormat,
  &_swigt__p_ESceneNodeType,
  &_swigt__p_EShInsGeoOp,
  &_swigt__p_EShInsTexOp,
  &_swigt__p_FILE,
  &_swigt__p_Q3triangle_t,
  &_swigt__p_SCNUt_AdjTri,
  &_swigt__p_SCNUt_AdjTriList,
  &_swigt__p_SCNUt_AdjTriListBuilder,
  &_swigt__p_SCNUt_AnimMesh_NormalComputer,
  &_swigt__p_SCNUt_AnimSceneLoader,
  &_swigt__p_SCNUt_BSPBuilder,
  &_swigt__p_SCNUt_ComputeBoundingBox,
  &_swigt__p_SCNUt_CoplanarRemover,
  &_swigt__p_SCNUt_Edge,
  &_swigt__p_SCNUt_EdgeBuilder,
  &_swigt__p_SCNUt_EdgeList,
  &_swigt__p_SCNUt_MaterialTable,
  &_swigt__p_SCNUt_Mesh2TriScene,
  &_swigt__p_SCNUt_MeshCompacter,
  &_swigt__p_SCNUt_MeshGenerator,
  &_swigt__p_SCNUt_OctreeBuilder,
  &_swigt__p_SCNUt_PlanarMapper,
  &_swigt__p_SCNUt_SceneBuilder,
  &_swigt__p_SCNUt_SceneCompiler,
  &_swigt__p_SCNUt_Scn2TriScnBuilder,
  &_swigt__p_SCNUt_ShaderAssigner,
  &_swigt__p_SCNUt_Stripifier,
  &_swigt__p_SCNUt_TransformTriScene,
  &_swigt__p_SCNUt_TriScene,
  &_swigt__p_SCNUt_TriSceneAccumulator,
  &_swigt__p_SCNUt_TriSceneClassifier,
  &_swigt__p_SCNUt_TriSceneLoader,
  &_swigt__p_SCNUt_TriSceneSaver,
  &_swigt__p_SCNUt_TriSceneSeparator,
  &_swigt__p_SCNUt_TriSceneSplitter,
  &_swigt__p_SCNUt_TriUtils,
  &_swigt__p_SCNUt_Triangle,
  &_swigt__p_SCNUt_VisibilityTester,
  &_swigt__p_SCNUt_ePolyState,
  &_swigt__p_T3DS_Chunk,
  &_swigt__p_TERSceneLoader,
  &_swigt__p_TEnvironmentPars,
  &_swigt__p_TGMState,
  &_swigt__p_THeightFieldData,
  &_swigt__p_TMsgLine,
  &_swigt__p_TSpiralPathParams,
  &_swigt__p_TTexSet,
  &_swigt__p_TTextureEntry,
  &_swigt__p_TVertexRef,
  &_swigt__p_a_3__float,
  &_swigt__p_animNumber_t,
  &_swigt__p_anim_t,
  &_swigt__p_boneframe_t,
  &_swigt__p_bsp_edge,
  &_swigt__p_bsp_face,
  &_swigt__p_bsp_face_edge,
  &_swigt__p_bsp_header,
  &_swigt__p_bsp_leaf,
  &_swigt__p_bsp_leaf_face,
  &_swigt__p_bsp_lump,
  &_swigt__p_bsp_node,
  &_swigt__p_bsp_plane,
  &_swigt__p_bsp_point3f,
  &_swigt__p_bsp_point3s,
  &_swigt__p_bsp_texinfo,
  &_swigt__p_bsp_vis,
  &_swigt__p_bsp_vis_offset,
  &_swigt__p_char,
  &_swigt__p_eLightType,
  &_swigt__p_ext_texinfo,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void,
  &_swigt__p_float,
  &_swigt__p_frame_t,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_md3_header_t,
  &_swigt__p_mesh_header_t,
  &_swigt__p_mesh_t,
  &_swigt__p_model_t,
  &_swigt__p_p_CCOL_Collider,
  &_swigt__p_p_CGMesh,
  &_swigt__p_p_CGMeshBox,
  &_swigt__p_p_CGMeshCross,
  &_swigt__p_p_CGMeshRect,
  &_swigt__p_p_CGMeshSphere,
  &_swigt__p_p_CGShInsBlendOp,
  &_swigt__p_p_CGShInsColor,
  &_swigt__p_p_CGShInsExtension,
  &_swigt__p_p_CGShInsGeoOp,
  &_swigt__p_p_CGShInsProgram,
  &_swigt__p_p_CGShInsSetTMU,
  &_swigt__p_p_CGShInsTexOp,
  &_swigt__p_p_CGShInsTexture,
  &_swigt__p_p_CGShInsWireframe,
  &_swigt__p_p_CGShInsZOp,
  &_swigt__p_p_CGShader,
  &_swigt__p_p_CGShaderInstruction,
  &_swigt__p_p_CGUnmanagedMesh,
  &_swigt__p_p_CMenuTextGrid,
  &_swigt__p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_skin_file_t,
  &_swigt__p_skin_mesh_entry_t,
  &_swigt__p_skin_t,
  &_swigt__p_skin_tag_entry_t,
  &_swigt__p_tag_t,
  &_swigt__p_tex_coord_t,
  &_swigt__p_textureCoordinate_t,
  &_swigt__p_triangleVertex_t,
  &_swigt__p_triangle_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_vertice_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_C3DLoader[] = {  {&_swigt__p_C3DLoader, 0, 0, 0},  {&_swigt__p_CLoader3DS, _p_CLoader3DSTo_p_C3DLoader, 0, 0},  {&_swigt__p_CLoaderBSP2, _p_CLoaderBSP2To_p_C3DLoader, 0, 0},  {&_swigt__p_CLoaderGEM, _p_CLoaderGEMTo_p_C3DLoader, 0, 0},  {&_swigt__p_CLoaderMD2, _p_CLoaderMD2To_p_C3DLoader, 0, 0},  {&_swigt__p_CLoaderMD3, _p_CLoaderMD3To_p_C3DLoader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_C3DSaver[] = {  {&_swigt__p_C3DSaver, 0, 0, 0},  {&_swigt__p_CSaverGEM, _p_CSaverGEMTo_p_C3DSaver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CAnimAction[] = {  {&_swigt__p_CAnimAction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_ColState[] = {  {&_swigt__p_CCOL_ColState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_Collider[] = {  {&_swigt__p_CCOL_Collider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_CollisionSystem[] = {  {&_swigt__p_CCOL_CollisionSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_DT_Box[] = {  {&_swigt__p_CCOL_DT_Box, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_DT_ColTester[] = {  {&_swigt__p_CCOL_DT_ColTester, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_DT_Point[] = {  {&_swigt__p_CCOL_DT_Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_DT_Sphere[] = {  {&_swigt__p_CCOL_DT_Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_DT_Tri[] = {  {&_swigt__p_CCOL_DT_Tri, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_MT_CommonMesh[] = {  {&_swigt__p_CCOL_MT_CommonMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_MT_TerrainMesh[] = {  {&_swigt__p_CCOL_MT_TerrainMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_Mesh[] = {  {&_swigt__p_CCOL_Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_MeshTester[] = {  {&_swigt__p_CCOL_MeshTester, 0, 0, 0},  {&_swigt__p_CCOL_MT_CommonMesh, _p_CCOL_MT_CommonMeshTo_p_CCOL_MeshTester, 0, 0},  {&_swigt__p_CCOL_MT_TerrainMesh, _p_CCOL_MT_TerrainMeshTo_p_CCOL_MeshTester, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_ST_Box[] = {  {&_swigt__p_CCOL_ST_Box, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_ST_ColTester[] = {  {&_swigt__p_CCOL_ST_ColTester, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_ST_Point[] = {  {&_swigt__p_CCOL_ST_Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_ST_Sphere[] = {  {&_swigt__p_CCOL_ST_Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_ST_Tris[] = {  {&_swigt__p_CCOL_ST_Tris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_Scn_ColTester[] = {  {&_swigt__p_CCOL_Scn_ColTester, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_Scn_TriListGen[] = {  {&_swigt__p_CCOL_Scn_TriListGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_Stack[] = {  {&_swigt__p_CCOL_Stack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_StackCollisionElem[] = {  {&_swigt__p_CCOL_StackCollisionElem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_TRN_TriListGen[] = {  {&_swigt__p_CCOL_TRN_TriListGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_TriList[] = {  {&_swigt__p_CCOL_TriList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_TriListGen[] = {  {&_swigt__p_CCOL_TriListGen, 0, 0, 0},  {&_swigt__p_CCOL_Scn_TriListGen, _p_CCOL_Scn_TriListGenTo_p_CCOL_TriListGen, 0, 0},  {&_swigt__p_CCOL_TRN_TriListGen, _p_CCOL_TRN_TriListGenTo_p_CCOL_TriListGen, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCOL_TriList_BVRayTest[] = {  {&_swigt__p_CCOL_TriList_BVRayTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CColor[] = {  {&_swigt__p_CColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCompactMeshData[] = {  {&_swigt__p_CCompactMeshData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CConsole[] = {  {&_swigt__p_CConsole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CDetailer[] = {  {&_swigt__p_CDetailer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CG4PCurve[] = {  {&_swigt__p_CG4PCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGAIAStar[] = {  {&_swigt__p_CGAIAStar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGAIDXAStar[] = {  {&_swigt__p_CGAIDXAStar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGAIMap[] = {  {&_swigt__p_CGAIMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGAIMathFuncs[] = {  {&_swigt__p_CGAIMathFuncs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBVAABB[] = {  {&_swigt__p_CGBVAABB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBVCylinder[] = {  {&_swigt__p_CGBVCylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBVFrustum[] = {  {&_swigt__p_CGBVFrustum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBVPoint[] = {  {&_swigt__p_CGBVPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBVSphere[] = {  {&_swigt__p_CGBVSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBaseMesh[] = {  {&_swigt__p_CGBaseMesh, 0, 0, 0},  {&_swigt__p_CGCompiledMesh, _p_CGCompiledMeshTo_p_CGBaseMesh, 0, 0},  {&_swigt__p_CGMesh, _p_CGMeshTo_p_CGBaseMesh, 0, 0},  {&_swigt__p_CGMeshBox, _p_CGMeshBoxTo_p_CGBaseMesh, 0, 0},  {&_swigt__p_CGMeshCross, _p_CGMeshCrossTo_p_CGBaseMesh, 0, 0},  {&_swigt__p_CGMeshRect, _p_CGMeshRectTo_p_CGBaseMesh, 0, 0},  {&_swigt__p_CGMeshSphere, _p_CGMeshSphereTo_p_CGBaseMesh, 0, 0},  {&_swigt__p_CGUnmanagedMesh, _p_CGUnmanagedMeshTo_p_CGBaseMesh, 0, 0},  {&_swigt__p_CMenuTextGrid, _p_CMenuTextGridTo_p_CGBaseMesh, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBillboard[] = {  {&_swigt__p_CGBillboard, 0, 0, 0},  {&_swigt__p_CGBillboard_AxisAlign, _p_CGBillboard_AxisAlignTo_p_CGBillboard, 0, 0},  {&_swigt__p_CGBillboard_ScrAlign, _p_CGBillboard_ScrAlignTo_p_CGBillboard, 0, 0},  {&_swigt__p_CGBillboard_WorldAlign, _p_CGBillboard_WorldAlignTo_p_CGBillboard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBillboardRenderer[] = {  {&_swigt__p_CGBillboardRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBillboard_AxisAlign[] = {  {&_swigt__p_CGBillboard_AxisAlign, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBillboard_ScrAlign[] = {  {&_swigt__p_CGBillboard_ScrAlign, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBillboard_WorldAlign[] = {  {&_swigt__p_CGBillboard_WorldAlign, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGBoundingVolume[] = {  {&_swigt__p_CGBoundingVolume, 0, 0, 0},  {&_swigt__p_CGBVAABB, _p_CGBVAABBTo_p_CGBoundingVolume, 0, 0},  {&_swigt__p_CGBVCylinder, _p_CGBVCylinderTo_p_CGBoundingVolume, 0, 0},  {&_swigt__p_CGBVFrustum, _p_CGBVFrustumTo_p_CGBoundingVolume, 0, 0},  {&_swigt__p_CGBVPoint, _p_CGBVPointTo_p_CGBoundingVolume, 0, 0},  {&_swigt__p_CGBVSphere, _p_CGBVSphereTo_p_CGBoundingVolume, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCamera[] = {  {&_swigt__p_CGCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGChrono[] = {  {&_swigt__p_CGChrono, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGColor[] = {  {&_swigt__p_CGColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCommandBinder[] = {  {&_swigt__p_CGCommandBinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCommandBindingLoader[] = {  {&_swigt__p_CGCommandBindingLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCommandRegistry[] = {  {&_swigt__p_CGCommandRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCompiledMesh[] = {  {&_swigt__p_CGCompiledMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGConfigFile[] = {  {&_swigt__p_CGConfigFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGControlPoint[] = {  {&_swigt__p_CGControlPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCorona[] = {  {&_swigt__p_CGCorona, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCoronaGenDefFileWH[] = {  {&_swigt__p_CGCoronaGenDefFileWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCoronaGenStd[] = {  {&_swigt__p_CGCoronaGenStd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCoronaGenWH[] = {  {&_swigt__p_CGCoronaGenWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCoronaGenerator[] = {  {&_swigt__p_CGCoronaGenerator, 0, 0, 0},  {&_swigt__p_CGCoronaGenStd, _p_CGCoronaGenStdTo_p_CGCoronaGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCoronaInstance[] = {  {&_swigt__p_CGCoronaInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCoronaManager[] = {  {&_swigt__p_CGCoronaManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCurve[] = {  {&_swigt__p_CGCurve, 0, 0, 0},  {&_swigt__p_CGCurveDynamic, _p_CGCurveDynamicTo_p_CGCurve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCurveDynamic[] = {  {&_swigt__p_CGCurveDynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGCurvePath[] = {  {&_swigt__p_CGCurvePath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGDefferredMeshDB[] = {  {&_swigt__p_CGDefferredMeshDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGDefferredMeshEntry[] = {  {&_swigt__p_CGDefferredMeshEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGDynArrayT_CGControlPoint_t[] = {  {&_swigt__p_CGDynArrayT_CGControlPoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGDynArrayT_CGString_t[] = {  {&_swigt__p_CGDynArrayT_CGString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGDynArrayT_CGVect3_t[] = {  {&_swigt__p_CGDynArrayT_CGVect3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGDynArrayT_TVertexRef_t[] = {  {&_swigt__p_CGDynArrayT_TVertexRef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGE3DRenderer[] = {  {&_swigt__p_CGE3DRenderer, 0, 0, 0},  {&_swigt__p_CGRenderer, _p_CGRendererTo_p_CGE3DRenderer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGErrorLC[] = {  {&_swigt__p_CGErrorLC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalBinary[] = {  {&_swigt__p_CGEvalBinary, 0, 0, 0},  {&_swigt__p_CGEvalMult, _p_CGEvalMultTo_p_CGEvalBinary, 0, 0},  {&_swigt__p_CGEvalSum, _p_CGEvalSumTo_p_CGEvalBinary, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalConst[] = {  {&_swigt__p_CGEvalConst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalCos[] = {  {&_swigt__p_CGEvalCos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalMult[] = {  {&_swigt__p_CGEvalMult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalPeriodic[] = {  {&_swigt__p_CGEvalPeriodic, 0, 0, 0},  {&_swigt__p_CGEvalCos, _p_CGEvalCosTo_p_CGEvalPeriodic, 0, 0},  {&_swigt__p_CGEvalSawTooth, _p_CGEvalSawToothTo_p_CGEvalPeriodic, 0, 0},  {&_swigt__p_CGEvalSin, _p_CGEvalSinTo_p_CGEvalPeriodic, 0, 0},  {&_swigt__p_CGEvalSquare, _p_CGEvalSquareTo_p_CGEvalPeriodic, 0, 0},  {&_swigt__p_CGEvalTriangle, _p_CGEvalTriangleTo_p_CGEvalPeriodic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalSawTooth[] = {  {&_swigt__p_CGEvalSawTooth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalSin[] = {  {&_swigt__p_CGEvalSin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalSquare[] = {  {&_swigt__p_CGEvalSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalSum[] = {  {&_swigt__p_CGEvalSum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalTime[] = {  {&_swigt__p_CGEvalTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvalTriangle[] = {  {&_swigt__p_CGEvalTriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGEvaluator[] = {  {&_swigt__p_CGEvaluator, 0, 0, 0},  {&_swigt__p_CGEvalBinary, _p_CGEvalBinaryTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalConst, _p_CGEvalConstTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalCos, _p_CGEvalCosTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalMult, _p_CGEvalMultTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalPeriodic, _p_CGEvalPeriodicTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalSawTooth, _p_CGEvalSawToothTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalSin, _p_CGEvalSinTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalSquare, _p_CGEvalSquareTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalSum, _p_CGEvalSumTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalTime, _p_CGEvalTimeTo_p_CGEvaluator, 0, 0},  {&_swigt__p_CGEvalTriangle, _p_CGEvalTriangleTo_p_CGEvaluator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGFile[] = {  {&_swigt__p_CGFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGFileSysManager[] = {  {&_swigt__p_CGFileSysManager, 0, 0, 0},  {&_swigt__p_CGFileSysMgrMultiPAK, _p_CGFileSysMgrMultiPAKTo_p_CGFileSysManager, 0, 0},  {&_swigt__p_CGFileSysMgrMultiZIP, _p_CGFileSysMgrMultiZIPTo_p_CGFileSysManager, 0, 0},  {&_swigt__p_CGFileSysMgrPAK, _p_CGFileSysMgrPAKTo_p_CGFileSysManager, 0, 0},  {&_swigt__p_CGFileSysMgrZIP, _p_CGFileSysMgrZIPTo_p_CGFileSysManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGFileSysMgrMultiPAK[] = {  {&_swigt__p_CGFileSysMgrMultiPAK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGFileSysMgrMultiZIP[] = {  {&_swigt__p_CGFileSysMgrMultiZIP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGFileSysMgrPAK[] = {  {&_swigt__p_CGFileSysMgrPAK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGFileSysMgrZIP[] = {  {&_swigt__p_CGFileSysMgrZIP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGFileUtils[] = {  {&_swigt__p_CGFileUtils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGCICommand[] = {  {&_swigt__p_CGGCICommand, 0, 0, 0},  {&_swigt__p_CGGCICommandClearErrorLog, _p_CGGCICommandClearErrorLogTo_p_CGGCICommand, 0, 0},  {&_swigt__p_CGGCICommandClearSysLog, _p_CGGCICommandClearSysLogTo_p_CGGCICommand, 0, 0},  {&_swigt__p_CGGCICommandErrorLog, _p_CGGCICommandErrorLogTo_p_CGGCICommand, 0, 0},  {&_swigt__p_CGGCICommandListEntities, _p_CGGCICommandListEntitiesTo_p_CGGCICommand, 0, 0},  {&_swigt__p_CGGCICommandSwitchEntityState, _p_CGGCICommandSwitchEntityStateTo_p_CGGCICommand, 0, 0},  {&_swigt__p_CGGCICommandSystemLog, _p_CGGCICommandSystemLogTo_p_CGGCICommand, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGCICommandClearErrorLog[] = {  {&_swigt__p_CGGCICommandClearErrorLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGCICommandClearSysLog[] = {  {&_swigt__p_CGGCICommandClearSysLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGCICommandErrorLog[] = {  {&_swigt__p_CGGCICommandErrorLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGCICommandListEntities[] = {  {&_swigt__p_CGGCICommandListEntities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGCICommandSwitchEntityState[] = {  {&_swigt__p_CGGCICommandSwitchEntityState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGCICommandSystemLog[] = {  {&_swigt__p_CGGCICommandSystemLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGEntityRenderMgr[] = {  {&_swigt__p_CGGEntityRenderMgr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGEntityStateRegistry[] = {  {&_swigt__p_CGGEntityStateRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameApplication[] = {  {&_swigt__p_CGGameApplication, 0, 0, 0},  {&_swigt__p_CGGameCommandInterpreter, _p_CGGameCommandInterpreterTo_p_CGGameApplication, 0, 0},  {&_swigt__p_CGGameConsoleApp, _p_CGGameConsoleAppTo_p_CGGameApplication, 0, 0},  {&_swigt__p_CGGameExtendedCI, _p_CGGameExtendedCITo_p_CGGameApplication, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameBase[] = {  {&_swigt__p_CGGameBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameCommandInterpreter[] = {  {&_swigt__p_CGGameCommandInterpreter, 0, 0, 0},  {&_swigt__p_CGGameExtendedCI, _p_CGGameExtendedCITo_p_CGGameCommandInterpreter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameConsoleApp[] = {  {&_swigt__p_CGGameConsoleApp, 0, 0, 0},  {&_swigt__p_CGGameCommandInterpreter, _p_CGGameCommandInterpreterTo_p_CGGameConsoleApp, 0, 0},  {&_swigt__p_CGGameExtendedCI, _p_CGGameExtendedCITo_p_CGGameConsoleApp, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameEntity[] = {  {&_swigt__p_CGGameEntity, 0, 0, 0},  {&_swigt__p_CGGameApplication, _p_CGGameApplicationTo_p_CGGameEntity, 0, 0},  {&_swigt__p_CGGameCommandInterpreter, _p_CGGameCommandInterpreterTo_p_CGGameEntity, 0, 0},  {&_swigt__p_CGGameConsoleApp, _p_CGGameConsoleAppTo_p_CGGameEntity, 0, 0},  {&_swigt__p_CGGameEntitySpawner, _p_CGGameEntitySpawnerTo_p_CGGameEntity, 0, 0},  {&_swigt__p_CGGameExtendedCI, _p_CGGameExtendedCITo_p_CGGameEntity, 0, 0},  {&_swigt__p_CGLiveGameEntity, _p_CGLiveGameEntityTo_p_CGGameEntity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameEntityMgr[] = {  {&_swigt__p_CGGameEntityMgr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameEntitySpawner[] = {  {&_swigt__p_CGGameEntitySpawner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameExtendedCI[] = {  {&_swigt__p_CGGameExtendedCI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameMessage[] = {  {&_swigt__p_CGGameMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameMessageMgr[] = {  {&_swigt__p_CGGameMessageMgr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameMode[] = {  {&_swigt__p_CGGameMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGameRegistry[] = {  {&_swigt__p_CGGameRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphBV[] = {  {&_swigt__p_CGGraphBV, 0, 0, 0},  {&_swigt__p_CGGraphBVAABB, _p_CGGraphBVAABBTo_p_CGGraphBV, 0, 0},  {&_swigt__p_CGGraphBVCylinder, _p_CGGraphBVCylinderTo_p_CGGraphBV, 0, 0},  {&_swigt__p_CGGraphBVPoint, _p_CGGraphBVPointTo_p_CGGraphBV, 0, 0},  {&_swigt__p_CGGraphBVSphere, _p_CGGraphBVSphereTo_p_CGGraphBV, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphBVAABB[] = {  {&_swigt__p_CGGraphBVAABB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphBVCylinder[] = {  {&_swigt__p_CGGraphBVCylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphBVFactory[] = {  {&_swigt__p_CGGraphBVFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphBVFileIO[] = {  {&_swigt__p_CGGraphBVFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphBVPoint[] = {  {&_swigt__p_CGGraphBVPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphBVSphere[] = {  {&_swigt__p_CGGraphBVSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphicInstance[] = {  {&_swigt__p_CGGraphicInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphicResource[] = {  {&_swigt__p_CGGraphicResource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGGraphicResourceWH[] = {  {&_swigt__p_CGGraphicResourceWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGInputHandler[] = {  {&_swigt__p_CGInputHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGInputRegistry[] = {  {&_swigt__p_CGInputRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGLight[] = {  {&_swigt__p_CGLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGLiveGameEntity[] = {  {&_swigt__p_CGLiveGameEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGLogChannel[] = {  {&_swigt__p_CGLogChannel, 0, 0, 0},  {&_swigt__p_CGErrorLC, _p_CGErrorLCTo_p_CGLogChannel, 0, 0},  {&_swigt__p_CGStandardLC, _p_CGStandardLCTo_p_CGLogChannel, 0, 0},  {&_swigt__p_CGSystemLC, _p_CGSystemLCTo_p_CGLogChannel, 0, 0},  {&_swigt__p_CGWarningLC, _p_CGWarningLCTo_p_CGLogChannel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGLogger[] = {  {&_swigt__p_CGLogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMatrix4x4[] = {  {&_swigt__p_CGMatrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMesh[] = {  {&_swigt__p_CGMesh, 0, 0, 0},  {&_swigt__p_CGMeshBox, _p_CGMeshBoxTo_p_CGMesh, 0, 0},  {&_swigt__p_CGMeshCross, _p_CGMeshCrossTo_p_CGMesh, 0, 0},  {&_swigt__p_CGMeshRect, _p_CGMeshRectTo_p_CGMesh, 0, 0},  {&_swigt__p_CGMeshSphere, _p_CGMeshSphereTo_p_CGMesh, 0, 0},  {&_swigt__p_CGUnmanagedMesh, _p_CGUnmanagedMeshTo_p_CGMesh, 0, 0},  {&_swigt__p_CMenuTextGrid, _p_CMenuTextGridTo_p_CGMesh, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMeshBox[] = {  {&_swigt__p_CGMeshBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMeshCross[] = {  {&_swigt__p_CGMeshCross, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMeshRect[] = {  {&_swigt__p_CGMeshRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMeshSphere[] = {  {&_swigt__p_CGMeshSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMipMap[] = {  {&_swigt__p_CGMipMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGMipMapWH[] = {  {&_swigt__p_CGMipMapWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGOSFile[] = {  {&_swigt__p_CGOSFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPSGDefFileWH[] = {  {&_swigt__p_CGPSGDefFileWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPSGGeneric[] = {  {&_swigt__p_CGPSGGeneric, 0, 0, 0},  {&_swigt__p_CGPSGGenericQuad, _p_CGPSGGenericQuadTo_p_CGPSGGeneric, 0, 0},  {&_swigt__p_CGPSGGenericQuadOrbit, _p_CGPSGGenericQuadOrbitTo_p_CGPSGGeneric, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPSGGenericQuad[] = {  {&_swigt__p_CGPSGGenericQuad, 0, 0, 0},  {&_swigt__p_CGPSGGenericQuadOrbit, _p_CGPSGGenericQuadOrbitTo_p_CGPSGGenericQuad, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPSGGenericQuadOrbit[] = {  {&_swigt__p_CGPSGGenericQuadOrbit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPSGGenericQuadParticle[] = {  {&_swigt__p_CGPSGGenericQuadParticle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPSIManager[] = {  {&_swigt__p_CGPSIManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPSysGenWH[] = {  {&_swigt__p_CGPSysGenWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGParticle[] = {  {&_swigt__p_CGParticle, 0, 0, 0},  {&_swigt__p_CGPSGGenericQuadParticle, _p_CGPSGGenericQuadParticleTo_p_CGParticle, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGParticleSystemGenerator[] = {  {&_swigt__p_CGParticleSystemGenerator, 0, 0, 0},  {&_swigt__p_CGPSGGeneric, _p_CGPSGGenericTo_p_CGParticleSystemGenerator, 0, 0},  {&_swigt__p_CGPSGGenericQuad, _p_CGPSGGenericQuadTo_p_CGParticleSystemGenerator, 0, 0},  {&_swigt__p_CGPSGGenericQuadOrbit, _p_CGPSGGenericQuadOrbitTo_p_CGParticleSystemGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGParticleSystemInstance[] = {  {&_swigt__p_CGParticleSystemInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPath[] = {  {&_swigt__p_CGPath, 0, 0, 0},  {&_swigt__p_CGCurvePath, _p_CGCurvePathTo_p_CGPath, 0, 0},  {&_swigt__p_CGSpiralPath, _p_CGSpiralPathTo_p_CGPath, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPathDefinitionFileWH[] = {  {&_swigt__p_CGPathDefinitionFileWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPathResource[] = {  {&_swigt__p_CGPathResource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPathResourceWH[] = {  {&_swigt__p_CGPathResourceWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGPlane[] = {  {&_swigt__p_CGPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGProgram[] = {  {&_swigt__p_CGProgram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGProgramWH[] = {  {&_swigt__p_CGProgramWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGProjector[] = {  {&_swigt__p_CGProjector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGQuaternion[] = {  {&_swigt__p_CGQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGRay[] = {  {&_swigt__p_CGRay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGReferenceCounter[] = {  {&_swigt__p_CGReferenceCounter, 0, 0, 0},  {&_swigt__p_CConsole, _p_CConsoleTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CDetailer, _p_CDetailerTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGBillboard, _p_CGBillboardTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGBillboardRenderer, _p_CGBillboardRendererTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGBillboard_AxisAlign, _p_CGBillboard_AxisAlignTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGBillboard_ScrAlign, _p_CGBillboard_ScrAlignTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGBillboard_WorldAlign, _p_CGBillboard_WorldAlignTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGCoronaGenStd, _p_CGCoronaGenStdTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGCoronaGenerator, _p_CGCoronaGeneratorTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGCoronaInstance, _p_CGCoronaInstanceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGGraphicResource, _p_CGGraphicResourceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGMipMap, _p_CGMipMapTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGPSGGeneric, _p_CGPSGGenericTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGPSGGenericQuad, _p_CGPSGGenericQuadTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGPSGGenericQuadOrbit, _p_CGPSGGenericQuadOrbitTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGParticleSystemGenerator, _p_CGParticleSystemGeneratorTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGParticleSystemInstance, _p_CGParticleSystemInstanceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGPathResource, _p_CGPathResourceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGProgram, _p_CGProgramTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGResource, _p_CGResourceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneAnimActionSet, _p_CGSceneAnimActionSetTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneAnimGroup, _p_CGSceneAnimGroupTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneAnimMesh, _p_CGSceneAnimMeshTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneAnimNode, _p_CGSceneAnimNodeTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneAnimTransf, _p_CGSceneAnimTransfTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneBSPNode, _p_CGSceneBSPNodeTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneCamera, _p_CGSceneCameraTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneGroup, _p_CGSceneGroupTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneInstance, _p_CGSceneInstanceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneLeaf, _p_CGSceneLeafTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneMux, _p_CGSceneMuxTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneNode, _p_CGSceneNodeTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneReflector, _p_CGSceneReflectorTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneScreenRect, _p_CGSceneScreenRectTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneSwitch, _p_CGSceneSwitchTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGSceneTransf, _p_CGSceneTransfTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGScriptResource, _p_CGScriptResourceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGShader, _p_CGShaderTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGTextResource, _p_CGTextResourceTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGTextureObj, _p_CGTextureObjTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGTrailGenStd, _p_CGTrailGenStdTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CGTrailGenerator, _p_CGTrailGeneratorTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CHUD, _p_CHUDTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CHUDFont, _p_CHUDFontTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CHUDIcon, _p_CHUDIconTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CHUDLabel, _p_CHUDLabelTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CHUDMsgBox, _p_CHUDMsgBoxTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CHUDObject, _p_CHUDObjectTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CHUDProgressBar, _p_CHUDProgressBarTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CLensFlare, _p_CLensFlareTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CShadowCaster, _p_CShadowCasterTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CSkyBox, _p_CSkyBoxTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CSkyDome, _p_CSkyDomeTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CTerrainCircuit, _p_CTerrainCircuitTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CTerrainSector, _p_CTerrainSectorTo_p_CGReferenceCounter, 0, 0},  {&_swigt__p_CTexProjector, _p_CTexProjectorTo_p_CGReferenceCounter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGRenderState[] = {  {&_swigt__p_CGRenderState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGRenderStats[] = {  {&_swigt__p_CGRenderStats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGRenderVars[] = {  {&_swigt__p_CGRenderVars, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGRenderer[] = {  {&_swigt__p_CGRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGResource[] = {  {&_swigt__p_CGResource, 0, 0, 0},  {&_swigt__p_CGCoronaGenStd, _p_CGCoronaGenStdTo_p_CGResource, 0, 0},  {&_swigt__p_CGCoronaGenerator, _p_CGCoronaGeneratorTo_p_CGResource, 0, 0},  {&_swigt__p_CGGraphicResource, _p_CGGraphicResourceTo_p_CGResource, 0, 0},  {&_swigt__p_CGMipMap, _p_CGMipMapTo_p_CGResource, 0, 0},  {&_swigt__p_CGPSGGeneric, _p_CGPSGGenericTo_p_CGResource, 0, 0},  {&_swigt__p_CGPSGGenericQuad, _p_CGPSGGenericQuadTo_p_CGResource, 0, 0},  {&_swigt__p_CGPSGGenericQuadOrbit, _p_CGPSGGenericQuadOrbitTo_p_CGResource, 0, 0},  {&_swigt__p_CGParticleSystemGenerator, _p_CGParticleSystemGeneratorTo_p_CGResource, 0, 0},  {&_swigt__p_CGPathResource, _p_CGPathResourceTo_p_CGResource, 0, 0},  {&_swigt__p_CGProgram, _p_CGProgramTo_p_CGResource, 0, 0},  {&_swigt__p_CGScriptResource, _p_CGScriptResourceTo_p_CGResource, 0, 0},  {&_swigt__p_CGShader, _p_CGShaderTo_p_CGResource, 0, 0},  {&_swigt__p_CGTextResource, _p_CGTextResourceTo_p_CGResource, 0, 0},  {&_swigt__p_CGTextureObj, _p_CGTextureObjTo_p_CGResource, 0, 0},  {&_swigt__p_CGTrailGenStd, _p_CGTrailGenStdTo_p_CGResource, 0, 0},  {&_swigt__p_CGTrailGenerator, _p_CGTrailGeneratorTo_p_CGResource, 0, 0},  {&_swigt__p_CHUDFont, _p_CHUDFontTo_p_CGResource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSCNVAnimUpdater[] = {  {&_swigt__p_CGSCNVAnimUpdater, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSCNVBoundVolBuilder[] = {  {&_swigt__p_CGSCNVBoundVolBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSCNVRenderer[] = {  {&_swigt__p_CGSCNVRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSCNVVisibilityChecker[] = {  {&_swigt__p_CGSCNVVisibilityChecker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneAnimActionSet[] = {  {&_swigt__p_CGSceneAnimActionSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneAnimGroup[] = {  {&_swigt__p_CGSceneAnimGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneAnimMesh[] = {  {&_swigt__p_CGSceneAnimMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneAnimNode[] = {  {&_swigt__p_CGSceneAnimNode, 0, 0, 0},  {&_swigt__p_CGSceneAnimGroup, _p_CGSceneAnimGroupTo_p_CGSceneAnimNode, 0, 0},  {&_swigt__p_CGSceneAnimMesh, _p_CGSceneAnimMeshTo_p_CGSceneAnimNode, 0, 0},  {&_swigt__p_CGSceneAnimTransf, _p_CGSceneAnimTransfTo_p_CGSceneAnimNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneAnimTransf[] = {  {&_swigt__p_CGSceneAnimTransf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneBSPNode[] = {  {&_swigt__p_CGSceneBSPNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneCamera[] = {  {&_swigt__p_CGSceneCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneGroup[] = {  {&_swigt__p_CGSceneGroup, 0, 0, 0},  {&_swigt__p_CGBillboard, _p_CGBillboardTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CGBillboard_AxisAlign, _p_CGBillboard_AxisAlignTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CGBillboard_ScrAlign, _p_CGBillboard_ScrAlignTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CGBillboard_WorldAlign, _p_CGBillboard_WorldAlignTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CGSceneCamera, _p_CGSceneCameraTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CGSceneMux, _p_CGSceneMuxTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CGSceneReflector, _p_CGSceneReflectorTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CHUDMsgBox, _p_CHUDMsgBoxTo_p_CGSceneGroup, 0, 0},  {&_swigt__p_CTerrainCircuit, _p_CTerrainCircuitTo_p_CGSceneGroup, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneInstance[] = {  {&_swigt__p_CGSceneInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneLeaf[] = {  {&_swigt__p_CGSceneLeaf, 0, 0, 0},  {&_swigt__p_CDetailer, _p_CDetailerTo_p_CGSceneLeaf, 0, 0},  {&_swigt__p_CGBillboardRenderer, _p_CGBillboardRendererTo_p_CGSceneLeaf, 0, 0},  {&_swigt__p_CSkyDome, _p_CSkyDomeTo_p_CGSceneLeaf, 0, 0},  {&_swigt__p_CTexProjector, _p_CTexProjectorTo_p_CGSceneLeaf, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneMux[] = {  {&_swigt__p_CGSceneMux, 0, 0, 0},  {&_swigt__p_CHUDMsgBox, _p_CHUDMsgBoxTo_p_CGSceneMux, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneNode[] = {  {&_swigt__p_CGSceneNode, 0, 0, 0},  {&_swigt__p_CConsole, _p_CConsoleTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CDetailer, _p_CDetailerTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGBillboard, _p_CGBillboardTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGBillboardRenderer, _p_CGBillboardRendererTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGBillboard_AxisAlign, _p_CGBillboard_AxisAlignTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGBillboard_ScrAlign, _p_CGBillboard_ScrAlignTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGBillboard_WorldAlign, _p_CGBillboard_WorldAlignTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGCoronaInstance, _p_CGCoronaInstanceTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGParticleSystemInstance, _p_CGParticleSystemInstanceTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneAnimActionSet, _p_CGSceneAnimActionSetTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneAnimGroup, _p_CGSceneAnimGroupTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneAnimMesh, _p_CGSceneAnimMeshTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneAnimNode, _p_CGSceneAnimNodeTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneAnimTransf, _p_CGSceneAnimTransfTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneBSPNode, _p_CGSceneBSPNodeTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneCamera, _p_CGSceneCameraTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneGroup, _p_CGSceneGroupTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneInstance, _p_CGSceneInstanceTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneLeaf, _p_CGSceneLeafTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneMux, _p_CGSceneMuxTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneReflector, _p_CGSceneReflectorTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneScreenRect, _p_CGSceneScreenRectTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneSwitch, _p_CGSceneSwitchTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CGSceneTransf, _p_CGSceneTransfTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CHUD, _p_CHUDTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CHUDIcon, _p_CHUDIconTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CHUDLabel, _p_CHUDLabelTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CHUDMsgBox, _p_CHUDMsgBoxTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CHUDObject, _p_CHUDObjectTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CHUDProgressBar, _p_CHUDProgressBarTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CLensFlare, _p_CLensFlareTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CShadowCaster, _p_CShadowCasterTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CSkyBox, _p_CSkyBoxTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CSkyDome, _p_CSkyDomeTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CTerrainCircuit, _p_CTerrainCircuitTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CTerrainSector, _p_CTerrainSectorTo_p_CGSceneNode, 0, 0},  {&_swigt__p_CTexProjector, _p_CTexProjectorTo_p_CGSceneNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneReflector[] = {  {&_swigt__p_CGSceneReflector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneScreenRect[] = {  {&_swigt__p_CGSceneScreenRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneSwitch[] = {  {&_swigt__p_CGSceneSwitch, 0, 0, 0},  {&_swigt__p_CGParticleSystemInstance, _p_CGParticleSystemInstanceTo_p_CGSceneSwitch, 0, 0},  {&_swigt__p_CHUDIcon, _p_CHUDIconTo_p_CGSceneSwitch, 0, 0},  {&_swigt__p_CHUDLabel, _p_CHUDLabelTo_p_CGSceneSwitch, 0, 0},  {&_swigt__p_CHUDObject, _p_CHUDObjectTo_p_CGSceneSwitch, 0, 0},  {&_swigt__p_CHUDProgressBar, _p_CHUDProgressBarTo_p_CGSceneSwitch, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneTransf[] = {  {&_swigt__p_CGSceneTransf, 0, 0, 0},  {&_swigt__p_CGCoronaInstance, _p_CGCoronaInstanceTo_p_CGSceneTransf, 0, 0},  {&_swigt__p_CGSceneInstance, _p_CGSceneInstanceTo_p_CGSceneTransf, 0, 0},  {&_swigt__p_CSkyBox, _p_CSkyBoxTo_p_CGSceneTransf, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSceneVisitor[] = {  {&_swigt__p_CGSceneVisitor, 0, 0, 0},  {&_swigt__p_C3DSaver, _p_C3DSaverTo_p_CGSceneVisitor, 0, 0},  {&_swigt__p_CGSCNVAnimUpdater, _p_CGSCNVAnimUpdaterTo_p_CGSceneVisitor, 0, 0},  {&_swigt__p_CGSCNVBoundVolBuilder, _p_CGSCNVBoundVolBuilderTo_p_CGSceneVisitor, 0, 0},  {&_swigt__p_CGSCNVRenderer, _p_CGSCNVRendererTo_p_CGSceneVisitor, 0, 0},  {&_swigt__p_CGSCNVVisibilityChecker, _p_CGSCNVVisibilityCheckerTo_p_CGSceneVisitor, 0, 0},  {&_swigt__p_CSaverGEM, _p_CSaverGEMTo_p_CGSceneVisitor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGScriptInstance[] = {  {&_swigt__p_CGScriptInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGScriptResource[] = {  {&_swigt__p_CGScriptResource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGScriptResourceWH[] = {  {&_swigt__p_CGScriptResourceWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGScriptingSystem[] = {  {&_swigt__p_CGScriptingSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSegment[] = {  {&_swigt__p_CGSegment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsBlendOp[] = {  {&_swigt__p_CGShInsBlendOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsColor[] = {  {&_swigt__p_CGShInsColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsExtension[] = {  {&_swigt__p_CGShInsExtension, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsGeoOp[] = {  {&_swigt__p_CGShInsGeoOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsProgram[] = {  {&_swigt__p_CGShInsProgram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsSetTMU[] = {  {&_swigt__p_CGShInsSetTMU, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsTexOp[] = {  {&_swigt__p_CGShInsTexOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsTexture[] = {  {&_swigt__p_CGShInsTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsWireframe[] = {  {&_swigt__p_CGShInsWireframe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShInsZOp[] = {  {&_swigt__p_CGShInsZOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShader[] = {  {&_swigt__p_CGShader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShaderDefFileWH[] = {  {&_swigt__p_CGShaderDefFileWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShaderDefWH[] = {  {&_swigt__p_CGShaderDefWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShaderExtDB[] = {  {&_swigt__p_CGShaderExtDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShaderInstruction[] = {  {&_swigt__p_CGShaderInstruction, 0, 0, 0},  {&_swigt__p_CGShInsBlendOp, _p_CGShInsBlendOpTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsColor, _p_CGShInsColorTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsExtension, _p_CGShInsExtensionTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsGeoOp, _p_CGShInsGeoOpTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsProgram, _p_CGShInsProgramTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsSetTMU, _p_CGShInsSetTMUTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsTexOp, _p_CGShInsTexOpTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsTexture, _p_CGShInsTextureTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsWireframe, _p_CGShInsWireframeTo_p_CGShaderInstruction, 0, 0},  {&_swigt__p_CGShInsZOp, _p_CGShInsZOpTo_p_CGShaderInstruction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShaderParser[] = {  {&_swigt__p_CGShaderParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShaderUtils[] = {  {&_swigt__p_CGShaderUtils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGShaderWH[] = {  {&_swigt__p_CGShaderWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSmoother[] = {  {&_swigt__p_CGSmoother, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSpiralPath[] = {  {&_swigt__p_CGSpiralPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGStandardLC[] = {  {&_swigt__p_CGStandardLC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGString[] = {  {&_swigt__p_CGString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGSystemLC[] = {  {&_swigt__p_CGSystemLC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTexObjWH[] = {  {&_swigt__p_CGTexObjWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTextResource[] = {  {&_swigt__p_CGTextResource, 0, 0, 0},  {&_swigt__p_CGScriptResource, _p_CGScriptResourceTo_p_CGTextResource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTextureObj[] = {  {&_swigt__p_CGTextureObj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTrail[] = {  {&_swigt__p_CGTrail, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTrailGenDefFileWH[] = {  {&_swigt__p_CGTrailGenDefFileWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTrailGenStd[] = {  {&_swigt__p_CGTrailGenStd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTrailGenWH[] = {  {&_swigt__p_CGTrailGenWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTrailGenerator[] = {  {&_swigt__p_CGTrailGenerator, 0, 0, 0},  {&_swigt__p_CGTrailGenStd, _p_CGTrailGenStdTo_p_CGTrailGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTrailInstance[] = {  {&_swigt__p_CGTrailInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTrailManager[] = {  {&_swigt__p_CGTrailManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGTriangle[] = {  {&_swigt__p_CGTriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGUObject[] = {  {&_swigt__p_CGUObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGUnmanagedMesh[] = {  {&_swigt__p_CGUnmanagedMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGVect2[] = {  {&_swigt__p_CGVect2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGVect3[] = {  {&_swigt__p_CGVect3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGVect4[] = {  {&_swigt__p_CGVect4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGViewport[] = {  {&_swigt__p_CGViewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGWarningLC[] = {  {&_swigt__p_CGWarningLC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHFSector[] = {  {&_swigt__p_CHFSector, 0, 0, 0},  {&_swigt__p_CHFSector_FN, _p_CHFSector_FNTo_p_CHFSector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHFSector_FN[] = {  {&_swigt__p_CHFSector_FN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUD[] = {  {&_swigt__p_CHUD, 0, 0, 0},  {&_swigt__p_CConsole, _p_CConsoleTo_p_CHUD, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDElem[] = {  {&_swigt__p_CHUDElem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDFile[] = {  {&_swigt__p_CHUDFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDFont[] = {  {&_swigt__p_CHUDFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDFontWH[] = {  {&_swigt__p_CHUDFontWH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDIcon[] = {  {&_swigt__p_CHUDIcon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDLabel[] = {  {&_swigt__p_CHUDLabel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDMsgBox[] = {  {&_swigt__p_CHUDMsgBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDObject[] = {  {&_swigt__p_CHUDObject, 0, 0, 0},  {&_swigt__p_CHUDIcon, _p_CHUDIconTo_p_CHUDObject, 0, 0},  {&_swigt__p_CHUDLabel, _p_CHUDLabelTo_p_CHUDObject, 0, 0},  {&_swigt__p_CHUDProgressBar, _p_CHUDProgressBarTo_p_CHUDObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHUDProgressBar[] = {  {&_swigt__p_CHUDProgressBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHeight[] = {  {&_swigt__p_CHeight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHeightField[] = {  {&_swigt__p_CHeightField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLMSector[] = {  {&_swigt__p_CLMSector, 0, 0, 0},  {&_swigt__p_CLMSector_Gray, _p_CLMSector_GrayTo_p_CLMSector, 0, 0},  {&_swigt__p_CLMSector_Pal, _p_CLMSector_PalTo_p_CLMSector, 0, 0},  {&_swigt__p_CLMSector_RGB24, _p_CLMSector_RGB24To_p_CLMSector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLMSector_Gray[] = {  {&_swigt__p_CLMSector_Gray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLMSector_Pal[] = {  {&_swigt__p_CLMSector_Pal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLMSector_RGB24[] = {  {&_swigt__p_CLMSector_RGB24, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLODSelector[] = {  {&_swigt__p_CLODSelector, 0, 0, 0},  {&_swigt__p_CLODSelector_Array, _p_CLODSelector_ArrayTo_p_CLODSelector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLODSelector_Array[] = {  {&_swigt__p_CLODSelector_Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLensFlare[] = {  {&_swigt__p_CLensFlare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLensFlare_Elem[] = {  {&_swigt__p_CLensFlare_Elem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLightElem[] = {  {&_swigt__p_CLightElem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLightMap[] = {  {&_swigt__p_CLightMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLoader3DS[] = {  {&_swigt__p_CLoader3DS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLoaderBSP2[] = {  {&_swigt__p_CLoaderBSP2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLoaderGEM[] = {  {&_swigt__p_CLoaderGEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLoaderMD2[] = {  {&_swigt__p_CLoaderMD2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLoaderMD3[] = {  {&_swigt__p_CLoaderMD3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CMenuTextGrid[] = {  {&_swigt__p_CMenuTextGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSFXObjectInstance[] = {  {&_swigt__p_CSFXObjectInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSLM_HFieldSect[] = {  {&_swigt__p_CSLM_HFieldSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSLM_LMapSect[] = {  {&_swigt__p_CSLM_LMapSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSLM_TMapSect[] = {  {&_swigt__p_CSLM_TMapSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSaverGEM[] = {  {&_swigt__p_CSaverGEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSectElem[] = {  {&_swigt__p_CSectElem, 0, 0, 0},  {&_swigt__p_CColor, _p_CColorTo_p_CSectElem, 0, 0},  {&_swigt__p_CHeight, _p_CHeightTo_p_CSectElem, 0, 0},  {&_swigt__p_CLightElem, _p_CLightElemTo_p_CSectElem, 0, 0},  {&_swigt__p_CTile, _p_CTileTo_p_CSectElem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSector[] = {  {&_swigt__p_CSector, 0, 0, 0},  {&_swigt__p_CHFSector, _p_CHFSectorTo_p_CSector, 0, 0},  {&_swigt__p_CHFSector_FN, _p_CHFSector_FNTo_p_CSector, 0, 0},  {&_swigt__p_CHeightField, _p_CHeightFieldTo_p_CSector, 0, 0},  {&_swigt__p_CLMSector, _p_CLMSectorTo_p_CSector, 0, 0},  {&_swigt__p_CLMSector_Gray, _p_CLMSector_GrayTo_p_CSector, 0, 0},  {&_swigt__p_CLMSector_Pal, _p_CLMSector_PalTo_p_CSector, 0, 0},  {&_swigt__p_CLMSector_RGB24, _p_CLMSector_RGB24To_p_CSector, 0, 0},  {&_swigt__p_CLightMap, _p_CLightMapTo_p_CSector, 0, 0},  {&_swigt__p_CSectorMatrix, _p_CSectorMatrixTo_p_CSector, 0, 0},  {&_swigt__p_CTMSector, _p_CTMSectorTo_p_CSector, 0, 0},  {&_swigt__p_CTMSector_8_16, _p_CTMSector_8_16To_p_CSector, 0, 0},  {&_swigt__p_CTexMap, _p_CTexMapTo_p_CSector, 0, 0},  {&_swigt__p_CTexSector, _p_CTexSectorTo_p_CSector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSectorLoaderManager[] = {  {&_swigt__p_CSectorLoaderManager, 0, 0, 0},  {&_swigt__p_CSLM_HFieldSect, _p_CSLM_HFieldSectTo_p_CSectorLoaderManager, 0, 0},  {&_swigt__p_CSLM_LMapSect, _p_CSLM_LMapSectTo_p_CSectorLoaderManager, 0, 0},  {&_swigt__p_CSLM_TMapSect, _p_CSLM_TMapSectTo_p_CSectorLoaderManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSectorMatrix[] = {  {&_swigt__p_CSectorMatrix, 0, 0, 0},  {&_swigt__p_CHeightField, _p_CHeightFieldTo_p_CSectorMatrix, 0, 0},  {&_swigt__p_CLightMap, _p_CLightMapTo_p_CSectorMatrix, 0, 0},  {&_swigt__p_CTexMap, _p_CTexMapTo_p_CSectorMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CShadowCaster[] = {  {&_swigt__p_CShadowCaster, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSkyBox[] = {  {&_swigt__p_CSkyBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSkyDome[] = {  {&_swigt__p_CSkyDome, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTMSector[] = {  {&_swigt__p_CTMSector, 0, 0, 0},  {&_swigt__p_CTMSector_8_16, _p_CTMSector_8_16To_p_CTMSector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTMSector_8_16[] = {  {&_swigt__p_CTMSector_8_16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTerrainCircuit[] = {  {&_swigt__p_CTerrainCircuit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTerrainSector[] = {  {&_swigt__p_CTerrainSector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTerrainTesselator[] = {  {&_swigt__p_CTerrainTesselator, 0, 0, 0},  {&_swigt__p_CTerrainTesselatorGM, _p_CTerrainTesselatorGMTo_p_CTerrainTesselator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTerrainTesselatorGM[] = {  {&_swigt__p_CTerrainTesselatorGM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTexMap[] = {  {&_swigt__p_CTexMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTexProjector[] = {  {&_swigt__p_CTexProjector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTexSector[] = {  {&_swigt__p_CTexSector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTile[] = {  {&_swigt__p_CTile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTileBookmark[] = {  {&_swigt__p_CTileBookmark, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_BlendMode[] = {  {&_swigt__p_E3D_BlendMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_ChannelMask[] = {  {&_swigt__p_E3D_ChannelMask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_FogMode[] = {  {&_swigt__p_E3D_FogMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_MeshType[] = {  {&_swigt__p_E3D_MeshType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_PrimitiveType[] = {  {&_swigt__p_E3D_PrimitiveType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_ProjectorType[] = {  {&_swigt__p_E3D_ProjectorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_RenderBuffer_Type[] = {  {&_swigt__p_E3D_RenderBuffer_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_ShaderInstructionType[] = {  {&_swigt__p_E3D_ShaderInstructionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_StencilAction[] = {  {&_swigt__p_E3D_StencilAction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_StencilFunc[] = {  {&_swigt__p_E3D_StencilFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_ZTestFunc[] = {  {&_swigt__p_E3D_ZTestFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_E3D_ZWrite[] = {  {&_swigt__p_E3D_ZWrite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECOL_ColliderType[] = {  {&_swigt__p_ECOL_ColliderType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECOL_TestType[] = {  {&_swigt__p_ECOL_TestType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EFileOpenMode[] = {  {&_swigt__p_EFileOpenMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EFileOperationResult[] = {  {&_swigt__p_EFileOperationResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EFileSeekMode[] = {  {&_swigt__p_EFileSeekMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EGenerationMethod[] = {  {&_swigt__p_EGenerationMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EImageFormat[] = {  {&_swigt__p_EImageFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ESceneNodeType[] = {  {&_swigt__p_ESceneNodeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EShInsGeoOp[] = {  {&_swigt__p_EShInsGeoOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EShInsTexOp[] = {  {&_swigt__p_EShInsTexOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Q3triangle_t[] = {  {&_swigt__p_Q3triangle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_AdjTri[] = {  {&_swigt__p_SCNUt_AdjTri, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_AdjTriList[] = {  {&_swigt__p_SCNUt_AdjTriList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_AdjTriListBuilder[] = {  {&_swigt__p_SCNUt_AdjTriListBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_AnimMesh_NormalComputer[] = {  {&_swigt__p_SCNUt_AnimMesh_NormalComputer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_AnimSceneLoader[] = {  {&_swigt__p_SCNUt_AnimSceneLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_BSPBuilder[] = {  {&_swigt__p_SCNUt_BSPBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_ComputeBoundingBox[] = {  {&_swigt__p_SCNUt_ComputeBoundingBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_CoplanarRemover[] = {  {&_swigt__p_SCNUt_CoplanarRemover, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_Edge[] = {  {&_swigt__p_SCNUt_Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_EdgeBuilder[] = {  {&_swigt__p_SCNUt_EdgeBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_EdgeList[] = {  {&_swigt__p_SCNUt_EdgeList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_MaterialTable[] = {  {&_swigt__p_SCNUt_MaterialTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_Mesh2TriScene[] = {  {&_swigt__p_SCNUt_Mesh2TriScene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_MeshCompacter[] = {  {&_swigt__p_SCNUt_MeshCompacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_MeshGenerator[] = {  {&_swigt__p_SCNUt_MeshGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_OctreeBuilder[] = {  {&_swigt__p_SCNUt_OctreeBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_PlanarMapper[] = {  {&_swigt__p_SCNUt_PlanarMapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_SceneBuilder[] = {  {&_swigt__p_SCNUt_SceneBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_SceneCompiler[] = {  {&_swigt__p_SCNUt_SceneCompiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_Scn2TriScnBuilder[] = {  {&_swigt__p_SCNUt_Scn2TriScnBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_ShaderAssigner[] = {  {&_swigt__p_SCNUt_ShaderAssigner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_Stripifier[] = {  {&_swigt__p_SCNUt_Stripifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TransformTriScene[] = {  {&_swigt__p_SCNUt_TransformTriScene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriScene[] = {  {&_swigt__p_SCNUt_TriScene, 0, 0, 0},  {&_swigt__p_SCNUt_TriSceneAccumulator, _p_SCNUt_TriSceneAccumulatorTo_p_SCNUt_TriScene, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriSceneAccumulator[] = {  {&_swigt__p_SCNUt_TriSceneAccumulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriSceneClassifier[] = {  {&_swigt__p_SCNUt_TriSceneClassifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriSceneLoader[] = {  {&_swigt__p_SCNUt_TriSceneLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriSceneSaver[] = {  {&_swigt__p_SCNUt_TriSceneSaver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriSceneSeparator[] = {  {&_swigt__p_SCNUt_TriSceneSeparator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriSceneSplitter[] = {  {&_swigt__p_SCNUt_TriSceneSplitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_TriUtils[] = {  {&_swigt__p_SCNUt_TriUtils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_Triangle[] = {  {&_swigt__p_SCNUt_Triangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_VisibilityTester[] = {  {&_swigt__p_SCNUt_VisibilityTester, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCNUt_ePolyState[] = {  {&_swigt__p_SCNUt_ePolyState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T3DS_Chunk[] = {  {&_swigt__p_T3DS_Chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TERSceneLoader[] = {  {&_swigt__p_TERSceneLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TEnvironmentPars[] = {  {&_swigt__p_TEnvironmentPars, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TGMState[] = {  {&_swigt__p_TGMState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_THeightFieldData[] = {  {&_swigt__p_THeightFieldData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TMsgLine[] = {  {&_swigt__p_TMsgLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TSpiralPathParams[] = {  {&_swigt__p_TSpiralPathParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TTexSet[] = {  {&_swigt__p_TTexSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TTextureEntry[] = {  {&_swigt__p_TTextureEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TVertexRef[] = {  {&_swigt__p_TVertexRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3__float[] = {  {&_swigt__p_a_3__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_animNumber_t[] = {  {&_swigt__p_animNumber_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anim_t[] = {  {&_swigt__p_anim_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boneframe_t[] = {  {&_swigt__p_boneframe_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_edge[] = {  {&_swigt__p_bsp_edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_face[] = {  {&_swigt__p_bsp_face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_face_edge[] = {  {&_swigt__p_bsp_face_edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_header[] = {  {&_swigt__p_bsp_header, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_leaf[] = {  {&_swigt__p_bsp_leaf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_leaf_face[] = {  {&_swigt__p_bsp_leaf_face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_lump[] = {  {&_swigt__p_bsp_lump, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_node[] = {  {&_swigt__p_bsp_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_plane[] = {  {&_swigt__p_bsp_plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_point3f[] = {  {&_swigt__p_bsp_point3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_point3s[] = {  {&_swigt__p_bsp_point3s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_texinfo[] = {  {&_swigt__p_bsp_texinfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_vis[] = {  {&_swigt__p_bsp_vis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bsp_vis_offset[] = {  {&_swigt__p_bsp_vis_offset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eLightType[] = {  {&_swigt__p_eLightType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ext_texinfo[] = {  {&_swigt__p_ext_texinfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void[] = {  {&_swigt__p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_frame_t[] = {  {&_swigt__p_frame_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_md3_header_t[] = {  {&_swigt__p_md3_header_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mesh_header_t[] = {  {&_swigt__p_mesh_header_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mesh_t[] = {  {&_swigt__p_mesh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_model_t[] = {  {&_swigt__p_model_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CCOL_Collider[] = {  {&_swigt__p_p_CCOL_Collider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGMeshBox[] = {{&_swigt__p_p_CGMeshBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGMeshCross[] = {{&_swigt__p_p_CGMeshCross, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGMeshRect[] = {{&_swigt__p_p_CGMeshRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGMeshSphere[] = {{&_swigt__p_p_CGMeshSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGUnmanagedMesh[] = {{&_swigt__p_p_CGUnmanagedMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CMenuTextGrid[] = {{&_swigt__p_p_CMenuTextGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGMesh[] = {  {&_swigt__p_p_CGMesh, 0, 0, 0},  {&_swigt__p_p_CGMeshBox, _p_p_CGMeshBoxTo_p_p_CGMesh, 0, 0},  {&_swigt__p_p_CGMeshCross, _p_p_CGMeshCrossTo_p_p_CGMesh, 0, 0},  {&_swigt__p_p_CGMeshRect, _p_p_CGMeshRectTo_p_p_CGMesh, 0, 0},  {&_swigt__p_p_CGMeshSphere, _p_p_CGMeshSphereTo_p_p_CGMesh, 0, 0},  {&_swigt__p_p_CGUnmanagedMesh, _p_p_CGUnmanagedMeshTo_p_p_CGMesh, 0, 0},  {&_swigt__p_p_CMenuTextGrid, _p_p_CMenuTextGridTo_p_p_CGMesh, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShader[] = {  {&_swigt__p_p_CGShader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsBlendOp[] = {{&_swigt__p_p_CGShInsBlendOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsColor[] = {{&_swigt__p_p_CGShInsColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsExtension[] = {{&_swigt__p_p_CGShInsExtension, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsGeoOp[] = {{&_swigt__p_p_CGShInsGeoOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsProgram[] = {{&_swigt__p_p_CGShInsProgram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsSetTMU[] = {{&_swigt__p_p_CGShInsSetTMU, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsTexOp[] = {{&_swigt__p_p_CGShInsTexOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsTexture[] = {{&_swigt__p_p_CGShInsTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsWireframe[] = {{&_swigt__p_p_CGShInsWireframe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShInsZOp[] = {{&_swigt__p_p_CGShInsZOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_CGShaderInstruction[] = {  {&_swigt__p_p_CGShaderInstruction, 0, 0, 0},  {&_swigt__p_p_CGShInsBlendOp, _p_p_CGShInsBlendOpTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsColor, _p_p_CGShInsColorTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsExtension, _p_p_CGShInsExtensionTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsGeoOp, _p_p_CGShInsGeoOpTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsProgram, _p_p_CGShInsProgramTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsSetTMU, _p_p_CGShInsSetTMUTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsTexOp, _p_p_CGShInsTexOpTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsTexture, _p_p_CGShInsTextureTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsWireframe, _p_p_CGShInsWireframeTo_p_p_CGShaderInstruction, 0, 0},  {&_swigt__p_p_CGShInsZOp, _p_p_CGShInsZOpTo_p_p_CGShaderInstruction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_skin_file_t[] = {  {&_swigt__p_skin_file_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_skin_mesh_entry_t[] = {  {&_swigt__p_skin_mesh_entry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_skin_t[] = {  {&_swigt__p_skin_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_skin_tag_entry_t[] = {  {&_swigt__p_skin_tag_entry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tag_t[] = {  {&_swigt__p_tag_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tex_coord_t[] = {  {&_swigt__p_tex_coord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_textureCoordinate_t[] = {  {&_swigt__p_textureCoordinate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_triangleVertex_t[] = {  {&_swigt__p_triangleVertex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_triangle_t[] = {  {&_swigt__p_triangle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vertice_t[] = {  {&_swigt__p_vertice_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_C3DLoader,
  _swigc__p_C3DSaver,
  _swigc__p_CAnimAction,
  _swigc__p_CCOL_ColState,
  _swigc__p_CCOL_Collider,
  _swigc__p_CCOL_CollisionSystem,
  _swigc__p_CCOL_DT_Box,
  _swigc__p_CCOL_DT_ColTester,
  _swigc__p_CCOL_DT_Point,
  _swigc__p_CCOL_DT_Sphere,
  _swigc__p_CCOL_DT_Tri,
  _swigc__p_CCOL_MT_CommonMesh,
  _swigc__p_CCOL_MT_TerrainMesh,
  _swigc__p_CCOL_Mesh,
  _swigc__p_CCOL_MeshTester,
  _swigc__p_CCOL_ST_Box,
  _swigc__p_CCOL_ST_ColTester,
  _swigc__p_CCOL_ST_Point,
  _swigc__p_CCOL_ST_Sphere,
  _swigc__p_CCOL_ST_Tris,
  _swigc__p_CCOL_Scn_ColTester,
  _swigc__p_CCOL_Scn_TriListGen,
  _swigc__p_CCOL_Stack,
  _swigc__p_CCOL_StackCollisionElem,
  _swigc__p_CCOL_TRN_TriListGen,
  _swigc__p_CCOL_TriList,
  _swigc__p_CCOL_TriListGen,
  _swigc__p_CCOL_TriList_BVRayTest,
  _swigc__p_CColor,
  _swigc__p_CCompactMeshData,
  _swigc__p_CConsole,
  _swigc__p_CDetailer,
  _swigc__p_CG4PCurve,
  _swigc__p_CGAIAStar,
  _swigc__p_CGAIDXAStar,
  _swigc__p_CGAIMap,
  _swigc__p_CGAIMathFuncs,
  _swigc__p_CGBVAABB,
  _swigc__p_CGBVCylinder,
  _swigc__p_CGBVFrustum,
  _swigc__p_CGBVPoint,
  _swigc__p_CGBVSphere,
  _swigc__p_CGBaseMesh,
  _swigc__p_CGBillboard,
  _swigc__p_CGBillboardRenderer,
  _swigc__p_CGBillboard_AxisAlign,
  _swigc__p_CGBillboard_ScrAlign,
  _swigc__p_CGBillboard_WorldAlign,
  _swigc__p_CGBoundingVolume,
  _swigc__p_CGCamera,
  _swigc__p_CGChrono,
  _swigc__p_CGColor,
  _swigc__p_CGCommandBinder,
  _swigc__p_CGCommandBindingLoader,
  _swigc__p_CGCommandRegistry,
  _swigc__p_CGCompiledMesh,
  _swigc__p_CGConfigFile,
  _swigc__p_CGControlPoint,
  _swigc__p_CGCorona,
  _swigc__p_CGCoronaGenDefFileWH,
  _swigc__p_CGCoronaGenStd,
  _swigc__p_CGCoronaGenWH,
  _swigc__p_CGCoronaGenerator,
  _swigc__p_CGCoronaInstance,
  _swigc__p_CGCoronaManager,
  _swigc__p_CGCurve,
  _swigc__p_CGCurveDynamic,
  _swigc__p_CGCurvePath,
  _swigc__p_CGDefferredMeshDB,
  _swigc__p_CGDefferredMeshEntry,
  _swigc__p_CGDynArrayT_CGControlPoint_t,
  _swigc__p_CGDynArrayT_CGString_t,
  _swigc__p_CGDynArrayT_CGVect3_t,
  _swigc__p_CGDynArrayT_TVertexRef_t,
  _swigc__p_CGE3DRenderer,
  _swigc__p_CGErrorLC,
  _swigc__p_CGEvalBinary,
  _swigc__p_CGEvalConst,
  _swigc__p_CGEvalCos,
  _swigc__p_CGEvalMult,
  _swigc__p_CGEvalPeriodic,
  _swigc__p_CGEvalSawTooth,
  _swigc__p_CGEvalSin,
  _swigc__p_CGEvalSquare,
  _swigc__p_CGEvalSum,
  _swigc__p_CGEvalTime,
  _swigc__p_CGEvalTriangle,
  _swigc__p_CGEvaluator,
  _swigc__p_CGFile,
  _swigc__p_CGFileSysManager,
  _swigc__p_CGFileSysMgrMultiPAK,
  _swigc__p_CGFileSysMgrMultiZIP,
  _swigc__p_CGFileSysMgrPAK,
  _swigc__p_CGFileSysMgrZIP,
  _swigc__p_CGFileUtils,
  _swigc__p_CGGCICommand,
  _swigc__p_CGGCICommandClearErrorLog,
  _swigc__p_CGGCICommandClearSysLog,
  _swigc__p_CGGCICommandErrorLog,
  _swigc__p_CGGCICommandListEntities,
  _swigc__p_CGGCICommandSwitchEntityState,
  _swigc__p_CGGCICommandSystemLog,
  _swigc__p_CGGEntityRenderMgr,
  _swigc__p_CGGEntityStateRegistry,
  _swigc__p_CGGameApplication,
  _swigc__p_CGGameBase,
  _swigc__p_CGGameCommandInterpreter,
  _swigc__p_CGGameConsoleApp,
  _swigc__p_CGGameEntity,
  _swigc__p_CGGameEntityMgr,
  _swigc__p_CGGameEntitySpawner,
  _swigc__p_CGGameExtendedCI,
  _swigc__p_CGGameMessage,
  _swigc__p_CGGameMessageMgr,
  _swigc__p_CGGameMode,
  _swigc__p_CGGameRegistry,
  _swigc__p_CGGraphBV,
  _swigc__p_CGGraphBVAABB,
  _swigc__p_CGGraphBVCylinder,
  _swigc__p_CGGraphBVFactory,
  _swigc__p_CGGraphBVFileIO,
  _swigc__p_CGGraphBVPoint,
  _swigc__p_CGGraphBVSphere,
  _swigc__p_CGGraphicInstance,
  _swigc__p_CGGraphicResource,
  _swigc__p_CGGraphicResourceWH,
  _swigc__p_CGInputHandler,
  _swigc__p_CGInputRegistry,
  _swigc__p_CGLight,
  _swigc__p_CGLiveGameEntity,
  _swigc__p_CGLogChannel,
  _swigc__p_CGLogger,
  _swigc__p_CGMatrix4x4,
  _swigc__p_CGMesh,
  _swigc__p_CGMeshBox,
  _swigc__p_CGMeshCross,
  _swigc__p_CGMeshRect,
  _swigc__p_CGMeshSphere,
  _swigc__p_CGMipMap,
  _swigc__p_CGMipMapWH,
  _swigc__p_CGOSFile,
  _swigc__p_CGPSGDefFileWH,
  _swigc__p_CGPSGGeneric,
  _swigc__p_CGPSGGenericQuad,
  _swigc__p_CGPSGGenericQuadOrbit,
  _swigc__p_CGPSGGenericQuadParticle,
  _swigc__p_CGPSIManager,
  _swigc__p_CGPSysGenWH,
  _swigc__p_CGParticle,
  _swigc__p_CGParticleSystemGenerator,
  _swigc__p_CGParticleSystemInstance,
  _swigc__p_CGPath,
  _swigc__p_CGPathDefinitionFileWH,
  _swigc__p_CGPathResource,
  _swigc__p_CGPathResourceWH,
  _swigc__p_CGPlane,
  _swigc__p_CGProgram,
  _swigc__p_CGProgramWH,
  _swigc__p_CGProjector,
  _swigc__p_CGQuaternion,
  _swigc__p_CGRay,
  _swigc__p_CGReferenceCounter,
  _swigc__p_CGRenderState,
  _swigc__p_CGRenderStats,
  _swigc__p_CGRenderVars,
  _swigc__p_CGRenderer,
  _swigc__p_CGResource,
  _swigc__p_CGSCNVAnimUpdater,
  _swigc__p_CGSCNVBoundVolBuilder,
  _swigc__p_CGSCNVRenderer,
  _swigc__p_CGSCNVVisibilityChecker,
  _swigc__p_CGSceneAnimActionSet,
  _swigc__p_CGSceneAnimGroup,
  _swigc__p_CGSceneAnimMesh,
  _swigc__p_CGSceneAnimNode,
  _swigc__p_CGSceneAnimTransf,
  _swigc__p_CGSceneBSPNode,
  _swigc__p_CGSceneCamera,
  _swigc__p_CGSceneGroup,
  _swigc__p_CGSceneInstance,
  _swigc__p_CGSceneLeaf,
  _swigc__p_CGSceneMux,
  _swigc__p_CGSceneNode,
  _swigc__p_CGSceneReflector,
  _swigc__p_CGSceneScreenRect,
  _swigc__p_CGSceneSwitch,
  _swigc__p_CGSceneTransf,
  _swigc__p_CGSceneVisitor,
  _swigc__p_CGScriptInstance,
  _swigc__p_CGScriptResource,
  _swigc__p_CGScriptResourceWH,
  _swigc__p_CGScriptingSystem,
  _swigc__p_CGSegment,
  _swigc__p_CGShInsBlendOp,
  _swigc__p_CGShInsColor,
  _swigc__p_CGShInsExtension,
  _swigc__p_CGShInsGeoOp,
  _swigc__p_CGShInsProgram,
  _swigc__p_CGShInsSetTMU,
  _swigc__p_CGShInsTexOp,
  _swigc__p_CGShInsTexture,
  _swigc__p_CGShInsWireframe,
  _swigc__p_CGShInsZOp,
  _swigc__p_CGShader,
  _swigc__p_CGShaderDefFileWH,
  _swigc__p_CGShaderDefWH,
  _swigc__p_CGShaderExtDB,
  _swigc__p_CGShaderInstruction,
  _swigc__p_CGShaderParser,
  _swigc__p_CGShaderUtils,
  _swigc__p_CGShaderWH,
  _swigc__p_CGSmoother,
  _swigc__p_CGSpiralPath,
  _swigc__p_CGStandardLC,
  _swigc__p_CGString,
  _swigc__p_CGSystemLC,
  _swigc__p_CGTexObjWH,
  _swigc__p_CGTextResource,
  _swigc__p_CGTextureObj,
  _swigc__p_CGTrail,
  _swigc__p_CGTrailGenDefFileWH,
  _swigc__p_CGTrailGenStd,
  _swigc__p_CGTrailGenWH,
  _swigc__p_CGTrailGenerator,
  _swigc__p_CGTrailInstance,
  _swigc__p_CGTrailManager,
  _swigc__p_CGTriangle,
  _swigc__p_CGUObject,
  _swigc__p_CGUnmanagedMesh,
  _swigc__p_CGVect2,
  _swigc__p_CGVect3,
  _swigc__p_CGVect4,
  _swigc__p_CGViewport,
  _swigc__p_CGWarningLC,
  _swigc__p_CHFSector,
  _swigc__p_CHFSector_FN,
  _swigc__p_CHUD,
  _swigc__p_CHUDElem,
  _swigc__p_CHUDFile,
  _swigc__p_CHUDFont,
  _swigc__p_CHUDFontWH,
  _swigc__p_CHUDIcon,
  _swigc__p_CHUDLabel,
  _swigc__p_CHUDMsgBox,
  _swigc__p_CHUDObject,
  _swigc__p_CHUDProgressBar,
  _swigc__p_CHeight,
  _swigc__p_CHeightField,
  _swigc__p_CLMSector,
  _swigc__p_CLMSector_Gray,
  _swigc__p_CLMSector_Pal,
  _swigc__p_CLMSector_RGB24,
  _swigc__p_CLODSelector,
  _swigc__p_CLODSelector_Array,
  _swigc__p_CLensFlare,
  _swigc__p_CLensFlare_Elem,
  _swigc__p_CLightElem,
  _swigc__p_CLightMap,
  _swigc__p_CLoader3DS,
  _swigc__p_CLoaderBSP2,
  _swigc__p_CLoaderGEM,
  _swigc__p_CLoaderMD2,
  _swigc__p_CLoaderMD3,
  _swigc__p_CMenuTextGrid,
  _swigc__p_CSFXObjectInstance,
  _swigc__p_CSLM_HFieldSect,
  _swigc__p_CSLM_LMapSect,
  _swigc__p_CSLM_TMapSect,
  _swigc__p_CSaverGEM,
  _swigc__p_CSectElem,
  _swigc__p_CSector,
  _swigc__p_CSectorLoaderManager,
  _swigc__p_CSectorMatrix,
  _swigc__p_CShadowCaster,
  _swigc__p_CSkyBox,
  _swigc__p_CSkyDome,
  _swigc__p_CTMSector,
  _swigc__p_CTMSector_8_16,
  _swigc__p_CTerrainCircuit,
  _swigc__p_CTerrainSector,
  _swigc__p_CTerrainTesselator,
  _swigc__p_CTerrainTesselatorGM,
  _swigc__p_CTexMap,
  _swigc__p_CTexProjector,
  _swigc__p_CTexSector,
  _swigc__p_CTile,
  _swigc__p_CTileBookmark,
  _swigc__p_E3D_BlendMode,
  _swigc__p_E3D_ChannelMask,
  _swigc__p_E3D_FogMode,
  _swigc__p_E3D_MeshType,
  _swigc__p_E3D_PrimitiveType,
  _swigc__p_E3D_ProjectorType,
  _swigc__p_E3D_RenderBuffer_Type,
  _swigc__p_E3D_ShaderInstructionType,
  _swigc__p_E3D_StencilAction,
  _swigc__p_E3D_StencilFunc,
  _swigc__p_E3D_ZTestFunc,
  _swigc__p_E3D_ZWrite,
  _swigc__p_ECOL_ColliderType,
  _swigc__p_ECOL_TestType,
  _swigc__p_EFileOpenMode,
  _swigc__p_EFileOperationResult,
  _swigc__p_EFileSeekMode,
  _swigc__p_EGenerationMethod,
  _swigc__p_EImageFormat,
  _swigc__p_ESceneNodeType,
  _swigc__p_EShInsGeoOp,
  _swigc__p_EShInsTexOp,
  _swigc__p_FILE,
  _swigc__p_Q3triangle_t,
  _swigc__p_SCNUt_AdjTri,
  _swigc__p_SCNUt_AdjTriList,
  _swigc__p_SCNUt_AdjTriListBuilder,
  _swigc__p_SCNUt_AnimMesh_NormalComputer,
  _swigc__p_SCNUt_AnimSceneLoader,
  _swigc__p_SCNUt_BSPBuilder,
  _swigc__p_SCNUt_ComputeBoundingBox,
  _swigc__p_SCNUt_CoplanarRemover,
  _swigc__p_SCNUt_Edge,
  _swigc__p_SCNUt_EdgeBuilder,
  _swigc__p_SCNUt_EdgeList,
  _swigc__p_SCNUt_MaterialTable,
  _swigc__p_SCNUt_Mesh2TriScene,
  _swigc__p_SCNUt_MeshCompacter,
  _swigc__p_SCNUt_MeshGenerator,
  _swigc__p_SCNUt_OctreeBuilder,
  _swigc__p_SCNUt_PlanarMapper,
  _swigc__p_SCNUt_SceneBuilder,
  _swigc__p_SCNUt_SceneCompiler,
  _swigc__p_SCNUt_Scn2TriScnBuilder,
  _swigc__p_SCNUt_ShaderAssigner,
  _swigc__p_SCNUt_Stripifier,
  _swigc__p_SCNUt_TransformTriScene,
  _swigc__p_SCNUt_TriScene,
  _swigc__p_SCNUt_TriSceneAccumulator,
  _swigc__p_SCNUt_TriSceneClassifier,
  _swigc__p_SCNUt_TriSceneLoader,
  _swigc__p_SCNUt_TriSceneSaver,
  _swigc__p_SCNUt_TriSceneSeparator,
  _swigc__p_SCNUt_TriSceneSplitter,
  _swigc__p_SCNUt_TriUtils,
  _swigc__p_SCNUt_Triangle,
  _swigc__p_SCNUt_VisibilityTester,
  _swigc__p_SCNUt_ePolyState,
  _swigc__p_T3DS_Chunk,
  _swigc__p_TERSceneLoader,
  _swigc__p_TEnvironmentPars,
  _swigc__p_TGMState,
  _swigc__p_THeightFieldData,
  _swigc__p_TMsgLine,
  _swigc__p_TSpiralPathParams,
  _swigc__p_TTexSet,
  _swigc__p_TTextureEntry,
  _swigc__p_TVertexRef,
  _swigc__p_a_3__float,
  _swigc__p_animNumber_t,
  _swigc__p_anim_t,
  _swigc__p_boneframe_t,
  _swigc__p_bsp_edge,
  _swigc__p_bsp_face,
  _swigc__p_bsp_face_edge,
  _swigc__p_bsp_header,
  _swigc__p_bsp_leaf,
  _swigc__p_bsp_leaf_face,
  _swigc__p_bsp_lump,
  _swigc__p_bsp_node,
  _swigc__p_bsp_plane,
  _swigc__p_bsp_point3f,
  _swigc__p_bsp_point3s,
  _swigc__p_bsp_texinfo,
  _swigc__p_bsp_vis,
  _swigc__p_bsp_vis_offset,
  _swigc__p_char,
  _swigc__p_eLightType,
  _swigc__p_ext_texinfo,
  _swigc__p_f_p_void__void,
  _swigc__p_f_unsigned_int_unsigned_int_unsigned_int_r_q_const__CGString__void,
  _swigc__p_float,
  _swigc__p_frame_t,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_md3_header_t,
  _swigc__p_mesh_header_t,
  _swigc__p_mesh_t,
  _swigc__p_model_t,
  _swigc__p_p_CCOL_Collider,
  _swigc__p_p_CGMesh,
  _swigc__p_p_CGMeshBox,
  _swigc__p_p_CGMeshCross,
  _swigc__p_p_CGMeshRect,
  _swigc__p_p_CGMeshSphere,
  _swigc__p_p_CGShInsBlendOp,
  _swigc__p_p_CGShInsColor,
  _swigc__p_p_CGShInsExtension,
  _swigc__p_p_CGShInsGeoOp,
  _swigc__p_p_CGShInsProgram,
  _swigc__p_p_CGShInsSetTMU,
  _swigc__p_p_CGShInsTexOp,
  _swigc__p_p_CGShInsTexture,
  _swigc__p_p_CGShInsWireframe,
  _swigc__p_p_CGShInsZOp,
  _swigc__p_p_CGShader,
  _swigc__p_p_CGShaderInstruction,
  _swigc__p_p_CGUnmanagedMesh,
  _swigc__p_p_CMenuTextGrid,
  _swigc__p_p_char,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_skin_file_t,
  _swigc__p_skin_mesh_entry_t,
  _swigc__p_skin_t,
  _swigc__p_skin_tag_entry_t,
  _swigc__p_tag_t,
  _swigc__p_tex_coord_t,
  _swigc__p_textureCoordinate_t,
  _swigc__p_triangleVertex_t,
  _swigc__p_triangle_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_vertice_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

